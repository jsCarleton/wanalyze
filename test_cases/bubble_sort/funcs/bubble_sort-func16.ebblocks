ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10]
  ebb cost:   list_max([
  22;
  22;
  19 + |f14|
])
  ebb exits:  [11 21 68]
  ebb succs:  [68 21 11]
  1 paths to exit 11
  [0 1 2 3 4 5 10]
  1 paths to exit 21
  [0 1 2 3 4 5 6]
  1 paths to exit 68
  [0 1 2 3 4 8]
ebb entry:  11
  ebb type:   block
  ebb blocks: [11]
  ebb cost:   1
  ebb exits:  [12]
  ebb succs:  [12]
  1 paths to exit 12
  [11]
ebb entry:  12
  ebb type:   loop
  ebb blocks: [12 13 14]
  ebb cost:   ((18 + |f15|) * (I([ln7], [i32.load8_u@(ln7)], [ln7 = pn0], [ln7 = ln7 + 1]))) + 1
  ebb exits:  [15 17]
  ebb succs:  [17 15]
  1 paths to exit 15
  [12 13 14]
  1 paths to exit 17
  [12]
  1 loop paths
  [12 13]
  1 post loop exit paths
  [14]
ebb entry:  15
  ebb type:   block
  ebb blocks: [15 16]
  ebb cost:   3
  ebb exits:  [17 21]
  ebb succs:  [21 17]
  0 paths to exit 17

  1 paths to exit 21
  [15]
ebb entry:  17
  ebb type:   block
  ebb blocks: [17 18 19 20]
  ebb cost:   list_max([19; 19; 7])
  ebb exits:  [21]
  ebb succs:  [21]
  3 paths to exit 21
  [17 18 20]
  [17 18 20]
  [17 18]
ebb entry:  21
  ebb type:   block
  ebb blocks: [21 22 23 24 25 26 27 28 29 30 31 32]
  ebb cost:   list_max([22; 27; 39; 36])
  ebb exits:  [33]
  ebb succs:  [33]
  4 paths to exit 33
  [21 22 23 31 32]
  [21 22 23 24 31 32]
  [21 22 23 24 25 26 29 32]
  [21 22 23 24 25 26 27 32]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33]
  ebb cost:   1
  ebb exits:  [34]
  ebb succs:  [34]
  1 paths to exit 34
  [33]
ebb entry:  34
  ebb type:   loop
  ebb blocks: [34 35 36 37 38 39 40 41 42 43 44 45]
  ebb cost:   list_max([
  (41 + |f47|) * (I([ln4], [not((i64.load@(ln4)) != 0)], [ln4 = g0 - 16], [ln4 = ln4]));
  (52 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-48 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = lN12; ln7 = ln7 + 1]));
  (61 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-48 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = (lN12 * lN11) + (i64.extend_i32_s(-48 + ((ln7)))); ln7 = ln7 + 1]));
  (51 + |f47|) * (I([ln4], [not((i64.load@(ln4)) != 0)], [ln4 = g0 - 16], [ln4 = ln4]));
  (62 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-87 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = lN12; ln7 = ln7 + 1]));
  (71 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-87 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = (lN12 * lN11) + (i64.extend_i32_s(-87 + ((ln7)))); ln7 = ln7 + 1]));
  (62 + |f47|) * (I([ln4], [not((i64.load@(ln4)) != 0)], [ln4 = g0 - 16], [ln4 = ln4]));
  (73 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-55 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = lN12; ln7 = ln7 + 1]));
  (82 + |f47|) * (I([lN11; lN12; ln7], [not((lN12 * lN11) > ((i64.extend_i32_s(-55 + (i32.load8_s@(ln7)))) xor -1))], [lN11 = i64.extend_i32_s(select(pn2, 10, pn2)); lN12 = (0 * (i64.extend_i32_s(select(pn2, 10, pn2)))) + (i64.extend_i32_s(-48 + ((pn0 + 1)))); ln7 = pn0 + 1], [lN11 = lN11; lN12 = (lN12 * lN11) + (i64.extend_i32_s(-55 + ((ln7)))); ln7 = ln7 + 1]))
])
  ebb exits:  [48]
  ebb succs:  [48]
  4 paths to exit 48
  [34 35 39]
  [34 35 36 39]
  [34 35 36 37 38 39]
  [34 35 36 37]
  9 loop paths
  [34 35 39 40 41 44]  [34 35 39 40 41 42 44]  [34 35 39 40 41 42 43 44]  [34 35 36 39 40 41 44]  [34 35 36 39 40 41 42 44]  [34 35 36 39 40 41 42 43 44]  [34 35 36 37 38 39 40 41 44]  [34 35 36 37 38 39 40 41 42 44]  [34 35 36 37 38 39 40 41 42 43 44]
ebb entry:  46
  ebb type:   block
  ebb blocks: [46 47]
  ebb cost:   1
  ebb exits:  [48 70]
  ebb succs:  [70 48]
  0 paths to exit 48

  1 paths to exit 70
  [46]
ebb entry:  48
  ebb type:   block
  ebb blocks: [48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67]
  ebb cost:   list_max([
  23;
  37;
  32 + |f14|;
  39;
  34 + |f14|;
  34 + |f14|;
  43 + |f14|;
  38 + |f14|;
  45 + |f14|;
  40 + |f14|;
  40 + |f14|;
  30;
  44;
  39 + |f14|;
  46;
  41 + |f14|;
  41 + |f14|;
  50 + |f14|;
  45 + |f14|;
  52 + |f14|;
  47 + |f14|;
  47 + |f14|
])
  ebb exits:  [68]
  ebb succs:  [68]
  22 paths to exit 68
  [48 49 51 52 53 54 57 67]
  [48 49 51 52 53 54 57 58 59 60 64 67]
  [48 49 51 52 53 54 57 58 59 60 64 65]
  [48 49 51 52 53 54 57 58 59 60 61 64 67]
  [48 49 51 52 53 54 57 58 59 60 61 64 65]
  [48 49 51 52 53 54 57 58 59 60 61 62]
  [48 49 51 52 53 54 55 59 60 64 67]
  [48 49 51 52 53 54 55 59 60 64 65]
  [48 49 51 52 53 54 55 59 60 61 64 67]
  [48 49 51 52 53 54 55 59 60 61 64 65]
  [48 49 51 52 53 54 55 59 60 61 62]
  [48 49 50 51 52 53 54 57 67]
  [48 49 50 51 52 53 54 57 58 59 60 64 67]
  [48 49 50 51 52 53 54 57 58 59 60 64 65]
  [48 49 50 51 52 53 54 57 58 59 60 61 64 67]
  [48 49 50 51 52 53 54 57 58 59 60 61 64 65]
  [48 49 50 51 52 53 54 57 58 59 60 61 62]
  [48 49 50 51 52 53 54 55 59 60 64 67]
  [48 49 50 51 52 53 54 55 59 60 64 65]
  [48 49 50 51 52 53 54 55 59 60 61 64 67]
  [48 49 50 51 52 53 54 55 59 60 61 64 65]
  [48 49 50 51 52 53 54 55 59 60 61 62]
ebb entry:  68
  ebb type:   block
  ebb blocks: [68 69]
  ebb cost:   6
  ebb exits:  [69]
  ebb succs:  []
  1 paths to exit 69
  [68]
ebb entry:  70
  ebb type:   block
  ebb blocks: [70]
  ebb cost:   Empty
  ebb exits:  []
  ebb succs:  []
