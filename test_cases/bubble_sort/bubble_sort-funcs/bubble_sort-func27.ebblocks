ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10 11]
  ebb cost:   23
  ebb exits:  [12 21 68]
  ebb succs:  [12 21 68]
ebb entry:  12
  ebb type:   loop
  ebb blocks: [12 13 14]
  ebb cost:   ((18 + |f26|) * (N([m[1]], [m[1]], [m[1]], [m[1]]))) + 1
  ebb exits:  [15 17]
  ebb succs:  [15 17]
  1 paths to exit 15
  [12 13 14]
  1 paths to exit 17
  [12]
  1 loop paths
  [12 13]
  1 post loop exit paths
  [14]
ebb entry:  15
  ebb type:   block
  ebb blocks: [15 16]
  ebb cost:   3
  ebb exits:  [17 21]
  ebb succs:  [17 21]
ebb entry:  17
  ebb type:   block
  ebb blocks: [17 18 19 20]
  ebb cost:   19
  ebb exits:  [21]
  ebb succs:  [21]
ebb entry:  21
  ebb type:   block
  ebb blocks: [21 22 23 24 25 26 27 28 29 30 31 32 33]
  ebb cost:   42
  ebb exits:  [34]
  ebb succs:  [34]
ebb entry:  34
  ebb type:   loop
  ebb blocks: [34 35 36 37 38 39 40 41 42 43 44 45]
  ebb cost:   (list_max([
  (41 + |f61|) * (N([m[8]], [not(m[8] != 0)], [m[8]], [m[8]]));
  (52 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-48 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; lN12; m[0]]));
  (61 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-48 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; (lN12 * lN11) + (i64.extend_i32_u(-48 + m[0])); m[0]]));
  (51 + |f61|) * (N([m[8]], [not(m[8] != 0)], [m[8]], [m[8]]));
  (62 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-87 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; lN12; m[0]]));
  (71 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-87 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; (lN12 * lN11) + (i64.extend_i32_u(-87 + m[0])); m[0]]));
  (62 + |f61|) * (N([m[8]], [not(m[8] != 0)], [m[8]], [m[8]]));
  (73 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-55 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; lN12; m[0]]));
  (82 + |f61|) * (N([lN11; lN12; m[0]], [not((lN12 * lN11) > ((i64.extend_i32_u(-55 + m[0])) xor -1))], [i64.extend_i32_u(select(pn2, 10, pn2)); 0; m[0]], [lN11; (lN12 * lN11) + (i64.extend_i32_u(-55 + m[0])); m[0]]))
])) + Empty
  ebb exits:  [48]
  ebb succs:  [48]
  4 paths to exit 48
  [34 35 39]
  [34 35 36 39]
  [34 35 36 37 38 39]
  [34 35 36 37]
  9 loop paths
  [34 35 39 40 41 44]  [34 35 39 40 41 42 44]  [34 35 39 40 41 42 43 44]  [34 35 36 39 40 41 44]  [34 35 36 39 40 41 42 44]  [34 35 36 39 40 41 42 43 44]  [34 35 36 37 38 39 40 41 44]  [34 35 36 37 38 39 40 41 42 44]  [34 35 36 37 38 39 40 41 42 43 44]
ebb entry:  46
  ebb type:   block
  ebb blocks: [46 47]
  ebb cost:   1
  ebb exits:  [48 70]
  ebb succs:  [48 70]
ebb entry:  48
  ebb type:   block
  ebb blocks: [48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67]
  ebb cost:   52
  ebb exits:  [68]
  ebb succs:  [68]
ebb entry:  68
  ebb type:   block
  ebb blocks: [68 69]
  ebb cost:   6
  ebb exits:  [69]
  ebb succs:  []
ebb entry:  70
  ebb type:   block
  ebb blocks: [70]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
