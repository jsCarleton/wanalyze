ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7]
  ebb cost:   36
  ebb exits:  [8 14]
  ebb succs:  [14 8]
  1 paths to exit 8
  [0 1 2 3 4 5]
  1 paths to exit 14
  [0 1 2 3 4 5 6]
ebb entry:  8
  ebb type:   block
  ebb blocks: [8]
  ebb cost:   1
  ebb exits:  [9]
  ebb succs:  [9]
  1 paths to exit 9
  [8]
ebb entry:  9
  ebb type:   loop
  ebb blocks: [9 10 11]
  ebb cost:   44*I(i32.load8_u@(pn1 + (ln5 + 1)), ln5 = ln5;pn1 = pn1, ln5 = ln5 + 1;pn1 = pn1) + 1
  ebb exits:  [12 84]
  ebb succs:  [84 12]
  1 paths to exit 12
  [9 10 11]
  1 paths to exit 84
  [9]
  1 loop paths
  [9 10]
  1 post loop exit paths
  [11]
ebb entry:  12
  ebb type:   block
  ebb blocks: [12 13]
  ebb cost:   9
  ebb exits:  [14 16]
  ebb succs:  [16 14]
  1 paths to exit 14
  [12 13]
  1 paths to exit 16
  [12]
ebb entry:  14
  ebb type:   block
  ebb blocks: [14 15]
  ebb cost:   5
  ebb exits:  [16 45]
  ebb succs:  [45 16]
  0 paths to exit 16

  1 paths to exit 45
  [14]
ebb entry:  16
  ebb type:   block
  ebb blocks: [16]
  ebb cost:   5
  ebb exits:  [17]
  ebb succs:  [17]
  1 paths to exit 17
  [16]
ebb entry:  17
  ebb type:   loop
  ebb blocks: [17 18 19 20 21 22 23 24 25 26 27 28 29]
  ebb cost:   (list_max([35*I((1 + (ln4 + 1)) < ln5, ln5 = ln5 + 1;ln4 = ln4 + 1, ln5 = ln5;ln4 = ln4 + 1); 34*I((1 + ln3) < ln5, ln5 = ln5 + 1;ln3 = 1, ln5 = ln5;ln3 = 1 + ln3); 30*I(((ln2 + 1) + ln4) < ln5, ln5 = ln5 + 1;ln4 = ln4 + 1;ln2 = 1, ln5 = ln5;ln4 = ln4;ln2 = ln2 + 1); 32*I((1 + (ln4 + ln8)) < ln5, ln5 = ln5 + 1;ln8 = 1;ln4 = ln4 + 1, ln5 = ln5;ln8 = ln8;ln4 = ln4 + ln8)])) + 1
  ebb exits:  [30]
  ebb succs:  [30]
  4 paths to exit 30
  [17 18 24 27 28 29]
  [17 18 24 25 28 29]
  [17 18 19 22 28 29]
  [17 18 19 20 28 29]
  4 loop paths
  [17 18 24 27 28]  [17 18 24 25 28]  [17 18 19 22 28]  [17 18 19 20 28]
  4 post loop exit paths
  [29]  [29]  [29]  [29]
ebb entry:  30
  ebb type:   block
  ebb blocks: [30]
  ebb cost:   11
  ebb exits:  [31]
  ebb succs:  [31]
  1 paths to exit 31
  [30]
ebb entry:  31
  ebb type:   loop
  ebb blocks: [31 32 33 34 35 36 37 38 39 40 41 42 43]
  ebb cost:   (list_max([35*I((1 + (ln4 + 1)) < ln5, ln5 = ln5 + 1;ln4 = 0 + 1, ln5 = ln5;ln4 = ln4 + 1); 34*I((1 + ln3) < ln5, ln5 = ln5 + 1;ln3 = 1, ln5 = ln5;ln3 = 1 + ln3); 30*I(((ln2 + 1) + ln4) < ln5, ln5 = ln5 + 1;ln4 = 0 + 1;ln2 = 1, ln5 = ln5;ln4 = ln4;ln2 = ln2 + 1); 32*I((1 + (ln4 + ln7)) < ln5, ln5 = ln5 + 1;ln7 = 1;ln4 = 0 + 1, ln5 = ln5;ln7 = ln7;ln4 = ln4 + ln7)])) + 1
  ebb exits:  [44]
  ebb succs:  [44]
  4 paths to exit 44
  [31 32 38 41 42 43]
  [31 32 38 39 42 43]
  [31 32 33 36 42 43]
  [31 32 33 34 42 43]
  4 loop paths
  [31 32 38 41 42]  [31 32 38 39 42]  [31 32 33 36 42]  [31 32 33 34 42]
  4 post loop exit paths
  [43]  [43]  [43]  [43]
ebb entry:  44
  ebb type:   block
  ebb blocks: [44]
  ebb cost:   3
  ebb exits:  [45]
  ebb succs:  [45]
  1 paths to exit 45
  [44]
ebb entry:  45
  ebb type:   block
  ebb blocks: [45 46 47 48 49]
  ebb cost:   45
  ebb exits:  [50]
  ebb succs:  [50]
  2 paths to exit 50
  [45 46 49]
  [45 46 47]
ebb entry:  50
  ebb type:   block
  ebb blocks: [50]
  ebb cost:   14
  ebb exits:  [51]
  ebb succs:  [51]
  1 paths to exit 51
  [50]
ebb entry:  51
  ebb type:   loop
  ebb blocks: [51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81]
  ebb cost:   (list_max([41*I(not(i32.eqz(((i32.load@((ln9 + 1024) + (((i32.load8_u@(ln3 + ln15)) shr_u 3) && 28))) shr_u ((i32.load8_u@(ln3 + ln15)) && 31)) && 1)), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056, ln15 = ln15;ln3 = ln5 + ln3;ln15 = ln15;ln3 = ln5 + ln3;ln9 = ln9); 86*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 80*I(not((i32.load8_u@(ln3 + ln7)) != ((i32.load8_u@(pn1 + ln7)) && 255)), ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln3 = pn0, ln7 = ln7;pn1 = pn1;ln7 = ln7;ln3 = ((select(ln7 > ln6, ln6, ln7)) - ln11) + ln3); 107*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 65*I(ln5 - (i32.load@(ln9 + ((i32.load8_u@(ln3 + ln15)) shl 2))), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056;ln5 = ln5 + 1, ln15 = ln15;ln3 = (select(ln12, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select(ln6, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select((ln5 - ((ln9 + (((ln3 + ln15)) shl 2)))) < ln8, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), ln13)))) + ln3;ln9 = ln9;ln5 = ln5); 52*I(not(i32.eqz(((i32.load@((ln9 + 1024) + (((i32.load8_u@(ln3 + ln15)) shr_u 3) && 28))) shr_u ((i32.load8_u@(ln3 + ln15)) && 31)) && 1)), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056, ln15 = ln15;ln3 = ln5 + ln3;ln15 = ln15;ln3 = ln5 + ln3;ln9 = ln9); 97*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 91*I(not((i32.load8_u@(ln3 + ln7)) != ((i32.load8_u@(pn1 + ln7)) && 255)), ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln3 = pn0, ln7 = ln7;pn1 = pn1;ln7 = ln7;ln3 = ((select(ln7 > ln6, ln6, ln7)) - ln11) + ln3); 118*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 76*I(ln5 - (i32.load@(ln9 + ((i32.load8_u@(ln3 + ln15)) shl 2))), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056;ln5 = ln5 + 1, ln15 = ln15;ln3 = (select(ln12, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select(ln6, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select((ln5 - ((ln9 + (((ln3 + ln15)) shl 2)))) < ln8, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), ln13)))) + ln3;ln9 = ln9;ln5 = ln5); 55*I(not(i32.eqz(((i32.load@((ln9 + 1024) + (((i32.load8_u@(ln3 + ln15)) shr_u 3) && 28))) shr_u ((i32.load8_u@(ln3 + ln15)) && 31)) && 1)), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056, ln15 = ln15;ln3 = ln5 + ln3;ln15 = ln15;ln3 = ln5 + ln3;ln9 = ln9); 100*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 94*I(not((i32.load8_u@(ln3 + ln7)) != ((i32.load8_u@(pn1 + ln7)) && 255)), ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln3 = pn0, ln7 = ln7;pn1 = pn1;ln7 = ln7;ln3 = ((select(ln7 > ln6, ln6, ln7)) - ln11) + ln3); 121*I(not((i32.load8_u@(pn1 + (ln7 + -1))) == (i32.load8_u@((ln7 + -1) + ln3))), ln3 = pn0;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;ln7 = (select((0 + 1) > (ln4 + 1), ln4, 0)) + 1;pn1 = pn1, ln3 = ln8 + ln3;ln7 = ln7;ln7 = ln7;pn1 = pn1); 79*I(ln5 - (i32.load@(ln9 + ((i32.load8_u@(ln3 + ln15)) shl 2))), ln15 = (ln5 + 1) + -1;ln3 = pn0;ln9 = g0 - 1056;ln5 = ln5 + 1, ln15 = ln15;ln3 = (select(ln12, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select(ln6, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), select((ln5 - ((ln9 + (((ln3 + ln15)) shl 2)))) < ln8, ln5 - ((ln9 + (((ln3 + ln15)) shl 2))), ln13)))) + ln3;ln9 = ln9;ln5 = ln5)])) + 0
  ebb exits:  [82 84 85 87]
  ebb succs:  [87 85 84 82]
  0 paths to exit 82

  1 paths to exit 84
  [51 52 53 54]
  6 paths to exit 85
  [51 52 58 59 60 61 64 65 71 72]
  [51 52 58 59 60 61 64 65 66 67 68 69 70 71 72]
  [51 52 53 57 58 59 60 61 64 65 71 72]
  [51 52 53 57 58 59 60 61 64 65 66 67 68 69 70 71 72]
  [51 52 53 54 55 58 59 60 61 64 65 71 72]
  [51 52 53 54 55 58 59 60 61 64 65 66 67 68 69 70 71 72]
  0 paths to exit 87

  15 loop paths
  [51 52 58 59 60 78 79]  [51 52 58 59 60 61 64 65 71 72 73 74 75 79]  [51 52 58 59 60 61 64 65 66 67 77 78 79]  [51 52 58 59 60 61 64 65 66 67 68 69 70 71 72 73 74 75 79]  [51 52 58 59 60 61 62 78 79]  [51 52 53 57 58 59 60 78 79]  [51 52 53 57 58 59 60 61 64 65 71 72 73 74 75 79]  [51 52 53 57 58 59 60 61 64 65 66 67 77 78 79]  [51 52 53 57 58 59 60 61 64 65 66 67 68 69 70 71 72 73 74 75 79]  [51 52 53 57 58 59 60 61 62 78 79]  [51 52 53 54 55 58 59 60 78 79]  [51 52 53 54 55 58 59 60 61 64 65 71 72 73 74 75 79]  [51 52 53 54 55 58 59 60 61 64 65 66 67 77 78 79]  [51 52 53 54 55 58 59 60 61 64 65 66 67 68 69 70 71 72 73 74 75 79]  [51 52 53 54 55 58 59 60 61 62 78 79]
  ebb entry:  51
    ebb type:   block
    ebb blocks: [51 52 53 54 55 56 57 58 59 60 61 62 63 64 65]
    ebb cost:   71
    ebb exits:  [66 71 78 84]
    ebb succs:  [78 71 66]
    3 paths to exit 66
    [51 52 58 59 60 61 64 65]
    [51 52 53 57 58 59 60 61 64 65]
    [51 52 53 54 55 58 59 60 61 64 65]
    3 paths to exit 71
    [51 52 58 59 60 61 64 65]
    [51 52 53 57 58 59 60 61 64 65]
    [51 52 53 54 55 58 59 60 61 64 65]
    6 paths to exit 78
    [51 52 58 59 60 61 62]
    [51 52 58 59 60]
    [51 52 53 57 58 59 60 61 62]
    [51 52 53 57 58 59 60]
    [51 52 53 54 55 58 59 60 61 62]
    [51 52 53 54 55 58 59 60]
    1 paths to exit 84
    [51 52 53 54]
  ebb entry:  66
    ebb type:   block
    ebb blocks: [66]
    ebb cost:   1
    ebb exits:  [67]
    ebb succs:  [67]
    1 paths to exit 67
    [66]
  ebb entry:  67
    ebb type:   loop
    ebb blocks: [67 68 69]
    ebb cost:   18*I(i32.load8_u@(pn1 + (ln4 + 1)), ln4 = select(ln7 > ln6, ln6, ln7);pn1 = pn1, ln4 = ln4 + 1;pn1 = pn1) + 1
    ebb exits:  [70 77]
    ebb succs:  [77 70]
    1 paths to exit 70
    [67 68 69]
    1 paths to exit 77
    [67]
    1 loop paths
    [67 68]
    1 post loop exit paths
    [69]
  ebb entry:  70
    ebb type:   block
    ebb blocks: [70]
    ebb cost:   1
    ebb exits:  [71]
    ebb succs:  [71]
    1 paths to exit 71
    [70]
  ebb entry:  71
    ebb type:   block
    ebb blocks: [71]
    ebb cost:   1
    ebb exits:  [72]
    ebb succs:  [72]
    1 paths to exit 72
    [71]
  ebb entry:  72
    ebb type:   loop
    ebb blocks: [72 73 74]
    ebb cost:   17*I((i32.load8_u@(pn1 + (ln2 + -1))) == (i32.load8_u@((ln2 + -1) + ln3)), ln3 = ln3;ln2 = ln7;ln2 = ln7;pn1 = pn1, ln3 = ln3;ln2 = ln2 + -1;ln2 = ln2 + -1;pn1 = pn1) + 1
    ebb exits:  [75 85]
    ebb succs:  [75]
    1 paths to exit 75
    [72 73 74]
    1 paths to exit 85
    [72]
    1 loop paths
    [72 73]
    1 post loop exit paths
    [74]
  ebb entry:  75
    ebb type:   block
    ebb blocks: [75 76]
    ebb cost:   4
    ebb exits:  [77 79]
    ebb succs:  [79 77]
    0 paths to exit 77

    1 paths to exit 79
    [75]
  ebb entry:  77
    ebb type:   block
    ebb blocks: [77]
    ebb cost:   4
    ebb exits:  [78]
    ebb succs:  [78]
    1 paths to exit 78
    [77]
  ebb entry:  78
    ebb type:   block
    ebb blocks: [78]
    ebb cost:   3
    ebb exits:  [79]
    ebb succs:  [79]
    1 paths to exit 79
    [78]
  ebb entry:  79
    ebb type:   block
    ebb blocks: [79 80 81]
    ebb cost:   6
    ebb exits:  [51 82 87]
    ebb succs:  [51]
    1 paths to exit 51
    [79]
    0 paths to exit 82

    0 paths to exit 87

ebb entry:  82
  ebb type:   block
  ebb blocks: [82 83]
  ebb cost:   1
  ebb exits:  [84 87]
  ebb succs:  [87 84]
  0 paths to exit 84

  1 paths to exit 87
  [82]
ebb entry:  84
  ebb type:   block
  ebb blocks: [84]
  ebb cost:   3
  ebb exits:  [85]
  ebb succs:  [85]
  1 paths to exit 85
  [84]
ebb entry:  85
  ebb type:   block
  ebb blocks: [85 86]
  ebb cost:   6
  ebb exits:  [86]
  ebb succs:  []
  1 paths to exit 86
  [85]
ebb entry:  87
  ebb type:   block
  ebb blocks: [87]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
