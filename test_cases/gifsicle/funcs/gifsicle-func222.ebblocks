ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   1
  ebb exits:  [1]
  ebb succs:  [1]
  1 paths to exit 1
  [0]
ebb entry:  1
  ebb type:   loop
  ebb blocks: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]
  ebb cost:   (list_max([[124 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 148 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 155 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 179 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 166 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - 0); 190 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - (pn1 + -1)); 167 + (list_max([|f57|; |f222|]))*I(not((i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + ((pn1 shr_u 1) shl 2))) * 6)))) == (i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + (((pn1 shr_u 1) + -1) shl 2))) * 6))))), pn1 = pn1;pn0 = pn0;pn3 = pn3;pn1 = pn1;pn0 = pn0;pn3 = pn3, pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1;pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1); 149 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 173 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 180 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 204 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 191 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - 0); 215 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - (pn1 + -1)); 192 + (list_max([|f23|; |f57|; |f222|]))*I(not((i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + ((pn1 shr_u 1) shl 2))) * 6)))) == (i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + (((pn1 shr_u 1) + -1) shl 2))) * 6))))), pn1 = pn1;pn0 = pn0;pn3 = pn3;pn1 = pn1;pn0 = pn0;pn3 = pn3, pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1;pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1); 128 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 152 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 159 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 183 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 170 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - 0); 194 + (list_max([|f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - (pn1 + -1)); 171 + (list_max([|f57|; |f222|]))*I(not((i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + ((pn1 shr_u 1) shl 2))) * 6)))) == (i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + (((pn1 shr_u 1) + -1) shl 2))) * 6))))), pn1 = pn1;pn0 = pn0;pn3 = pn3;pn1 = pn1;pn0 = pn0;pn3 = pn3, pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1;pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1); 153 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 177 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 184 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - 0); 208 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 shr_u 1)), pn1 = pn1, pn1 = pn1 - (pn1 shr_u 1)); 195 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - 0); 219 + (list_max([|f23|; |f57|; |f222|]))*I(not(i32.eqz(pn1 + -1)), pn1 = pn1, pn1 = pn1 - (pn1 + -1)); 196 + (list_max([|f23|; |f57|; |f222|]))*I(not((i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + ((pn1 shr_u 1) shl 2))) * 6)))) == (i32.load16_u@(((pn3 rem_s 3) shl 1) + ((i32.load@(i32.load@(35268))) + ((i32.load@(pn0 + (((pn1 shr_u 1) + -1) shl 2))) * 6))))), pn1 = pn1;pn0 = pn0;pn3 = pn3;pn1 = pn1;pn0 = pn0;pn3 = pn3, pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1;pn1 = pn1 - (pn1 shr_u 1);pn0 = pn0 + ((pn1 shr_u 1) shl 2);pn3 = pn3 + 1)]])) + (list_max([21; 25; 21; 25; 21; 25; 21; 25]))
  ebb exits:  [36]
  ebb succs:  [36]
  8 paths to exit 36
  [1 3 8 9 11 35]
  [1 3 8 9 10 11 35]
  [1 3 4 5 6 7 8 9 11 35]
  [1 3 4 5 6 7 8 9 10 11 35]
  [1 2 3 8 9 11 35]
  [1 2 3 8 9 10 11 35]
  [1 2 3 4 5 6 7 8 9 11 35]
  [1 2 3 4 5 6 7 8 9 10 11 35]
  28 loop paths
  [1 3 8 12 13 14 15 16 20 21 22 28 32 33]  [1 3 8 12 13 14 15 16 20 21 22 28 29 30 33]  [1 3 8 12 13 14 15 16 20 21 22 23 24 28 32 33]  [1 3 8 12 13 14 15 16 20 21 22 23 24 28 29 30 33]  [1 3 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 32 33]  [1 3 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 29 30 33]  [1 3 8 12 13 14 15 16 17 18 30 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 28 32 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 28 29 30 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 28 32 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 28 29 30 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 32 33]  [1 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 29 30 33]  [1 3 4 5 6 7 8 12 13 14 15 16 17 18 30 33]  [1 2 3 8 12 13 14 15 16 20 21 22 28 32 33]  [1 2 3 8 12 13 14 15 16 20 21 22 28 29 30 33]  [1 2 3 8 12 13 14 15 16 20 21 22 23 24 28 32 33]  [1 2 3 8 12 13 14 15 16 20 21 22 23 24 28 29 30 33]  [1 2 3 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 32 33]  [1 2 3 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 29 30 33]  [1 2 3 8 12 13 14 15 16 17 18 30 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 28 32 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 28 29 30 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 28 32 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 28 29 30 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 32 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 20 21 22 23 24 25 26 27 28 29 30 33]  [1 2 3 4 5 6 7 8 12 13 14 15 16 17 18 30 33]
  8 post loop exit paths
  [9 11 35]  [9 10 11 35]  [9 11 35]  [9 10 11 35]  [9 11 35]  [9 10 11 35]  [9 11 35]  [9 10 11 35]
  ebb entry:  1
    ebb type:   block
    ebb blocks: [1 2 3]
    ebb cost:   list_max([17; 21; 17; 21])
    ebb exits:  [4 8]
    ebb succs:  [8 4]
    2 paths to exit 4
    [1 3]
    [1 2 3]
    2 paths to exit 8
    [1 3]
    [1 2 3]
  ebb entry:  4
    ebb type:   block
    ebb blocks: [4]
    ebb cost:   list_max([23 + |f23|; 4])
    ebb exits:  [5]
    ebb succs:  [5]
    2 paths to exit 5
    [4 5]
    [4]
  ebb entry:  5
    ebb type:   loop
    ebb blocks: [5 6]
    ebb cost:   19 + |f23|*I((i32.load@(ln7)) <= pn2, pn2 = pn2;ln7 = (35268), pn2 = pn2;ln7 = ln7) + 1
    ebb exits:  [7]
    ebb succs:  [7]
    1 paths to exit 7
    [5 6]
    1 loop paths
    [5]
    1 post loop exit paths
    [6]
  ebb entry:  7
    ebb type:   block
    ebb blocks: [7]
    ebb cost:   1
    ebb exits:  [8]
    ebb succs:  [8]
    1 paths to exit 8
    [7]
  ebb entry:  8
    ebb type:   block
    ebb blocks: [8 9 10 11 12 13 14]
    ebb cost:   list_max([22 + |f57|; 24; 28])
    ebb exits:  [15 35]
    ebb succs:  [35 15]
    1 paths to exit 15
    [8 12 13 14]
    2 paths to exit 35
    [8 9 11]
    [8 9 10 11]
  ebb entry:  15
    ebb type:   block
    ebb blocks: [15]
    ebb cost:   1
    ebb exits:  [16]
    ebb succs:  [16]
    1 paths to exit 16
    [15]
  ebb entry:  16
    ebb type:   loop
    ebb blocks: [16 17 18 19 20]
    ebb cost:   41*I((i32.load16_u@((ln9 shl 1) + ((i32.load@(ln7)) + ((i32.load@(pn0 + (ln8 shl 2))) * 6)))) == (i32.load16_u@((ln9 shl 1) + ((i32.load@(ln7)) + ((i32.load@(pn0 + ((ln8 + -1) shl 2))) * 6)))), ln8 = pn1 shr_u 1;pn0 = pn0;ln7 = (35268);ln9 = pn3 rem_s 3;ln8 = pn1 shr_u 1;pn0 = pn0;ln7 = (35268);ln9 = pn3 rem_s 3, ln8 = ln8 + -1;pn0 = pn0;ln7 = ln7;ln9 = ln9;ln8 = ln8 + -1;pn0 = pn0;ln7 = ln7;ln9 = ln9) + (list_max([1; 1]))
    ebb exits:  [21 30]
    ebb succs:  [30 21]
    1 paths to exit 21
    [16 20]
    1 paths to exit 30
    [16 17 18]
    1 loop paths
    [16 17]
    2 post loop exit paths
    [20]    [18]
  ebb entry:  21
    ebb type:   block
    ebb blocks: [21 22]
    ebb cost:   list_max([11; 11])
    ebb exits:  [23 28]
    ebb succs:  [28 23]
    1 paths to exit 23
    [21 22]
    1 paths to exit 28
    [21 22]
  ebb entry:  23
    ebb type:   block
    ebb blocks: [23]
    ebb cost:   1
    ebb exits:  [24]
    ebb succs:  [24]
    1 paths to exit 24
    [23]
  ebb entry:  24
    ebb type:   loop
    ebb blocks: [24 25 26]
    ebb cost:   37*I((ln5 + 1) != ln4, ln4 = pn1 + -1;ln5 = pn1 shr_u 1, ln4 = ln4;ln5 = ln5 + 1) + 1
    ebb exits:  [27 28]
    ebb succs:  [28 27]
    1 paths to exit 27
    [24 25 26]
    1 paths to exit 28
    [24]
    1 loop paths
    [24 25]
    1 post loop exit paths
    [26]
  ebb entry:  27
    ebb type:   block
    ebb blocks: [27]
    ebb cost:   3
    ebb exits:  [28]
    ebb succs:  [28]
    1 paths to exit 28
    [27]
  ebb entry:  28
    ebb type:   block
    ebb blocks: [28 29]
    ebb cost:   list_max([6; 3])
    ebb exits:  [30 32]
    ebb succs:  [32 30]
    1 paths to exit 30
    [28 29]
    1 paths to exit 32
    [28]
  ebb entry:  30
    ebb type:   block
    ebb blocks: [30 31]
    ebb cost:   35
    ebb exits:  [32 33]
    ebb succs:  [33 32]
    0 paths to exit 32

    1 paths to exit 33
    [30]
  ebb entry:  32
    ebb type:   block
    ebb blocks: [32]
    ebb cost:   14
    ebb exits:  [33]
    ebb succs:  [33]
    1 paths to exit 33
    [32]
  ebb entry:  33
    ebb type:   block
    ebb blocks: [33 34]
    ebb cost:   50 + |f222|
    ebb exits:  [1 35]
    ebb succs:  [35 1]
    1 paths to exit 1
    [33]
    0 paths to exit 35

  ebb entry:  35
    ebb type:   block
    ebb blocks: [35]
    ebb cost:   1
    ebb exits:  [36]
    ebb succs:  []
    1 paths to exit 36
    [35]
ebb entry:  36
  ebb type:   block
  ebb blocks: [36 37]
  ebb cost:   1
  ebb exits:  [37]
  ebb succs:  []
  1 paths to exit 37
  [36]
