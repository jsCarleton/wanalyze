ebb costs:
[0]: 12
[3]: (list_max((31 * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((66 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((81 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f33|, |f35|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
[43]: 17
[46]: 5
[48]: 0
4 ebb paths found
[0 46]
[0 3 46]
[0 3 43 48]
[0 3 43 46]
|f151| = list_max([
  list_sum(12, 5);
  list_sum([
    12;
    (list_max([
      31 * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (66 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (81 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    5
  ]);
  list_sum([
    12;
    (list_max([
      31 * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (66 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (81 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    17;
    0
  ]);
  list_sum([
    12;
    (list_max([
      31 * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (66 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (81 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (77 + (list_sum(|f33|, |f35|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
      (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    17;
    5
  ])
])
