ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
  ebb cost:   41
  ebb exits:  [15 18 22]
  ebb succs:  [15 18 22]
ebb entry:  15
  ebb type:   loop
  ebb blocks: [15 16]
  ebb cost:   ((23 + |f116|) * (N([m[0]; m[16]], [m[16] < m[0]], [m[0]; m[16]], [m[0]; m[16]]))) + 1
  ebb exits:  [17]
  ebb succs:  [17]
  1 paths to exit 17
  [15 16]
  1 loop paths
  [15]
  1 post loop exit paths
  [16]
ebb entry:  17
  ebb type:   block
  ebb blocks: [17]
  ebb cost:   1
  ebb exits:  [18]
  ebb succs:  [18]
ebb entry:  18
  ebb type:   block
  ebb blocks: [18 19 20 21]
  ebb cost:   13
  ebb exits:  [22]
  ebb succs:  [22]
ebb entry:  22
  ebb type:   block
  ebb blocks: [22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43]
  ebb cost:   157
  ebb exits:  [44 47 48]
  ebb succs:  [44 47 48]
ebb entry:  44
  ebb type:   loop
  ebb blocks: [44 45]
  ebb cost:   (21 * (N([ln1; ln2], [(ln1 + 1) != ln2], [1 + 1; m[18] * m[20]], [ln1 + 1; ln2]))) + 1
  ebb exits:  [46]
  ebb succs:  [46]
  1 paths to exit 46
  [44 45]
  1 loop paths
  [44]
  1 post loop exit paths
  [45]
ebb entry:  46
  ebb type:   block
  ebb blocks: [46]
  ebb cost:   1
  ebb exits:  [47]
  ebb succs:  [47]
ebb entry:  47
  ebb type:   block
  ebb blocks: [47]
  ebb cost:   24
  ebb exits:  [48]
  ebb succs:  [48]
ebb entry:  48
  ebb type:   block
  ebb blocks: [48 49 50 51 52 53 54 55 56 57 58]
  ebb cost:   61
  ebb exits:  [59 64 76]
  ebb succs:  [59 64 76]
ebb entry:  59
  ebb type:   loop
  ebb blocks: [59 60 61 62]
  ebb cost:   ((39 + |f24|) * (N([ln1; m[10]; m[14]], [(ln1 + 1) != (m[10] + m[14])], [m[14]; m[10]; m[14]], [ln1 + 1; m[10]; m[14]]))) + 1
  ebb exits:  [63]
  ebb succs:  [63]
  1 paths to exit 63
  [59 62]
  1 loop paths
  [59 60]
  1 post loop exit paths
  [62]
ebb entry:  63
  ebb type:   block
  ebb blocks: [63]
  ebb cost:   3
  ebb exits:  [64]
  ebb succs:  [64]
ebb entry:  64
  ebb type:   block
  ebb blocks: [64 65]
  ebb cost:   12
  ebb exits:  [66 76]
  ebb succs:  [66 76]
ebb entry:  66
  ebb type:   loop
  ebb blocks: [66 67 68 69 70 71 72 73 74]
  ebb cost:   (list_max([
  110 * (N([ln6; m[10]; m[14]], [(ln6 + 1) != (m[10] + (m[14] & 65535))], [m[14]; m[10]; m[14]], [ln6 + 1; m[10]; m[14]]));
  72 * (N([ln6; m[10]; m[14]], [(ln6 + 1) != (m[10] + (m[14] & 65535))], [m[14]; m[10]; m[14]], [ln6 + 1; m[10]; m[14]]));
  20 * (N([ln5; ln6; ln7], [(ln6 + 1) != (ln7 + (ln5 & 65535))], [m[14]; m[14]; m[10]], [ln5; ln6 + 1; ln7]))
])) + 1
  ebb exits:  [75]
  ebb succs:  []
  3 paths to exit 75
  [66 73 74]
  [66 67 68 70 71 72 73 74]
  [66 67 68 69 70 71 72 73 74]
  3 loop paths
  [66 73]  [66 67 68 70 71 72 73]  [66 67 68 69 70 71 72 73]
  3 post loop exit paths
  [74]  [74]  [74]
nested ebbs:
  ebb entry:  66
    ebb type:   block
    ebb blocks: [66 67]
    ebb cost:   32
    ebb exits:  [68 73]
    ebb succs:  [68 73]
  ebb entry:  68
    ebb type:   loop
    ebb blocks: [68 69 70 71]
    ebb cost:   (list_max([
  56 * (N([ln1; ln5], [(ln1 + 1) != ((ln5 + (ln1 shl 4)) & 65535)], [0; (pn0 + 144) + ((pn0 + (m[24] * m[14])) shl 4)], [ln1 + 1; ln5]));
  18 * (N([ln1; ln4], [(ln1 + 1) != (ln4 & 65535)], [0; -1], [ln1 + 1; ln4]))
])) + 1
    ebb exits:  [72]
    ebb succs:  [72]
    2 paths to exit 72
    [68 70 71]
    [68 69 70 71]
    2 loop paths
    [68 70]    [68 69 70]
    2 post loop exit paths
    [71]    [71]
  ebb entry:  72
    ebb type:   block
    ebb blocks: [72]
    ebb cost:   9
    ebb exits:  [73]
    ebb succs:  [73]
  ebb entry:  73
    ebb type:   block
    ebb blocks: [73 74]
    ebb cost:   13
    ebb exits:  [66 75]
    ebb succs:  [66 75]
ebb entry:  75
  ebb type:   block
  ebb blocks: [75]
  ebb cost:   1
  ebb exits:  [76]
  ebb succs:  [76]
ebb entry:  76
  ebb type:   block
  ebb blocks: [76 77]
  ebb cost:   1
  ebb exits:  [91]
  ebb succs:  [91]
ebb entry:  78
  ebb type:   block
  ebb blocks: [78 79]
  ebb cost:   6
  ebb exits:  [92]
  ebb succs:  [92]
ebb entry:  80
  ebb type:   block
  ebb blocks: [80 81]
  ebb cost:   6
  ebb exits:  [92]
  ebb succs:  [92]
ebb entry:  82
  ebb type:   block
  ebb blocks: [82 83]
  ebb cost:   6
  ebb exits:  [92]
  ebb succs:  [92]
ebb entry:  84
  ebb type:   block
  ebb blocks: [84 85]
  ebb cost:   6
  ebb exits:  [92]
  ebb succs:  [92]
ebb entry:  86
  ebb type:   block
  ebb blocks: [86 87]
  ebb cost:   6
  ebb exits:  [92]
  ebb succs:  [92]
ebb entry:  88
  ebb type:   block
  ebb blocks: [88 89 90]
  ebb cost:   6
  ebb exits:  [90 92]
  ebb succs:  [92]
ebb entry:  91
  ebb type:   block
  ebb blocks: [91]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
ebb entry:  92
  ebb type:   block
  ebb blocks: [92]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
ebb costs:
[0]: 41
[15]: (((23 + |f116|) * N([m[0]; m[16]], [(m[16] < m[0])], [m[0]; m[16]], [m[0]; m[16]])) + 1)
[17]: 1
[18]: 13
[22]: 157
[44]: ((21 * N([ln1; ln2], [((ln1 + 1) != ln2)], [(1 + 1); (m[18] * m[20])], [(ln1 + 1); ln2])) + 1)
[46]: 1
[47]: 24
[48]: 61
[59]: (((39 + |f24|) * N([ln1; m[10]; m[14]], [((ln1 + 1) != (m[10] + m[14]))], [m[14]; m[10]; m[14]], [(ln1 + 1); m[10]; m[14]])) + 1)
[63]: 3
[64]: 12
[66]: (list_max((110 * N([ln6; m[10]; m[14]], [((ln6 + 1) != (m[10] + (m[14] & 65535)))], [m[14]; m[10]; m[14]], [(ln6 + 1); m[10]; m[14]])), (72 * N([ln6; m[10]; m[14]], [((ln6 + 1) != (m[10] + (m[14] & 65535)))], [m[14]; m[10]; m[14]], [(ln6 + 1); m[10]; m[14]])), (20 * N([ln5; ln6; ln7], [((ln6 + 1) != (ln7 + (ln5 & 65535)))], [m[14]; m[14]; m[10]], [ln5; (ln6 + 1); ln7]))) + 1)
[66]: 32
[68]: (list_max((56 * N([ln1; ln5], [((ln1 + 1) != ((ln5 + (ln1 shl 4)) & 65535))], [0; ((pn0 + 144) + ((pn0 + (m[24] * m[14])) shl 4))], [(ln1 + 1); ln5])), (18 * N([ln1; ln4], [((ln1 + 1) != (ln4 & 65535))], [0; -1], [(ln1 + 1); ln4]))) + 1)
[72]: 9
[73]: 13
[75]: 1
[76]: 1
[78]: 6
[80]: 6
[82]: 6
[84]: 6
[86]: 6
[88]: 6
[91]: 0
[92]: 0
63 ebb paths found
[0 22 48 76 91]
[0 22 48 64 76 91]
[0 22 48 64 66 73 75 76 91]
[0 22 48 64 66 68 72 73 75 76 91]
[0 22 48 59 63 64 76 91]
[0 22 48 59 63 64 66 73 75 76 91]
[0 22 48 59 63 64 66 68 72 73 75 76 91]
[0 22 47 48 76 91]
[0 22 47 48 64 76 91]
[0 22 47 48 64 66 73 75 76 91]
[0 22 47 48 64 66 68 72 73 75 76 91]
[0 22 47 48 59 63 64 76 91]
[0 22 47 48 59 63 64 66 73 75 76 91]
[0 22 47 48 59 63 64 66 68 72 73 75 76 91]
[0 22 44 46 47 48 76 91]
[0 22 44 46 47 48 64 76 91]
[0 22 44 46 47 48 64 66 73 75 76 91]
[0 22 44 46 47 48 64 66 68 72 73 75 76 91]
[0 22 44 46 47 48 59 63 64 76 91]
[0 22 44 46 47 48 59 63 64 66 73 75 76 91]
[0 22 44 46 47 48 59 63 64 66 68 72 73 75 76 91]
[0 18 22 48 76 91]
[0 18 22 48 64 76 91]
[0 18 22 48 64 66 73 75 76 91]
[0 18 22 48 64 66 68 72 73 75 76 91]
[0 18 22 48 59 63 64 76 91]
[0 18 22 48 59 63 64 66 73 75 76 91]
[0 18 22 48 59 63 64 66 68 72 73 75 76 91]
[0 18 22 47 48 76 91]
[0 18 22 47 48 64 76 91]
[0 18 22 47 48 64 66 73 75 76 91]
[0 18 22 47 48 64 66 68 72 73 75 76 91]
[0 18 22 47 48 59 63 64 76 91]
[0 18 22 47 48 59 63 64 66 73 75 76 91]
[0 18 22 47 48 59 63 64 66 68 72 73 75 76 91]
[0 18 22 44 46 47 48 76 91]
[0 18 22 44 46 47 48 64 76 91]
[0 18 22 44 46 47 48 64 66 73 75 76 91]
[0 18 22 44 46 47 48 64 66 68 72 73 75 76 91]
[0 18 22 44 46 47 48 59 63 64 76 91]
[0 18 22 44 46 47 48 59 63 64 66 73 75 76 91]
[0 18 22 44 46 47 48 59 63 64 66 68 72 73 75 76 91]
[0 15 17 18 22 48 76 91]
[0 15 17 18 22 48 64 76 91]
[0 15 17 18 22 48 64 66 73 75 76 91]
[0 15 17 18 22 48 64 66 68 72 73 75 76 91]
[0 15 17 18 22 48 59 63 64 76 91]
[0 15 17 18 22 48 59 63 64 66 73 75 76 91]
[0 15 17 18 22 48 59 63 64 66 68 72 73 75 76 91]
[0 15 17 18 22 47 48 76 91]
[0 15 17 18 22 47 48 64 76 91]
[0 15 17 18 22 47 48 64 66 73 75 76 91]
[0 15 17 18 22 47 48 64 66 68 72 73 75 76 91]
[0 15 17 18 22 47 48 59 63 64 76 91]
[0 15 17 18 22 47 48 59 63 64 66 73 75 76 91]
[0 15 17 18 22 47 48 59 63 64 66 68 72 73 75 76 91]
[0 15 17 18 22 44 46 47 48 76 91]
[0 15 17 18 22 44 46 47 48 64 76 91]
[0 15 17 18 22 44 46 47 48 64 66 73 75 76 91]
[0 15 17 18 22 44 46 47 48 64 66 68 72 73 75 76 91]
[0 15 17 18 22 44 46 47 48 59 63 64 76 91]
[0 15 17 18 22 44 46 47 48 59 63 64 66 73 75 76 91]
[0 15 17 18 22 44 46 47 48 59 63 64 66 68 72 73 75 76 91]
