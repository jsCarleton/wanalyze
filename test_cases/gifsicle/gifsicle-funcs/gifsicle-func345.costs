ebb costs:
[0]: 19
[5]: (list_max((19 * N([ln2; ln4], [not(((ln2 + 1) == ln4))], [0; m[112]], [(ln2 + 1); ln4])), (27 * N([ln2; ln4], [not(((ln2 + 1) == ln4))], [0; m[112]], [(ln2 + 1); ln4]))) + Empty)
[11]: 1
[13]: 16
[17]: ((16 * N([ln2; ln4], [((ln2 + 1) < ln4)], [0; m[112]], [(ln2 + 1); ln4])) + list_max(1, 2))
[21]: 5
[23]: 32
[30]: ((31 * N([ln2; ln4], [((ln2 + 1) != ln4)], [(0 + 1); m[112]], [(ln2 + 1); ln4])) + 1)
[32]: 1
[33]: 28
[39]: 1
[41]: 0
13 ebb paths found
[0 13 39]
[0 13 23 33 39]
[0 13 23 30 32 33 39]
[0 13 17 21 39]
[0 13 17 21 23 33 39]
[0 13 17 21 23 30 32 33 39]
[0 5 41]
[0 5 13 39]
[0 5 13 23 33 39]
[0 5 13 23 30 32 33 39]
[0 5 13 17 21 39]
[0 5 13 17 21 23 33 39]
[0 5 13 17 21 23 30 32 33 39]
|f345| = list_max([
  list_sum(19, 16, 1);
  list_sum(19, 16, 32, 28, 1);
  list_sum([
    19;
    16;
    32;
    (31 * (N([ln2; ln4], [(ln2 + 1) != ln4], [0 + 1; m[112]], [ln2 + 1; ln4]))) + 1;
    1;
    28;
    1
  ]);
  list_sum([
    19;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    1
  ]);
  list_sum([
    19;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    32;
    28;
    1
  ]);
  list_sum([
    19;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    32;
    (31 * (N([ln2; ln4], [(ln2 + 1) != ln4], [0 + 1; m[112]], [ln2 + 1; ln4]))) + 1;
    1;
    28;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    0
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    32;
    28;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    32;
    (31 * (N([ln2; ln4], [(ln2 + 1) != ln4], [0 + 1; m[112]], [ln2 + 1; ln4]))) + 1;
    1;
    28;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    32;
    28;
    1
  ]);
  list_sum([
    19;
    (list_max([
      19 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]));
      27 * (N([ln2; ln4], [not((ln2 + 1) == ln4)], [0; m[112]], [ln2 + 1; ln4]))
    ])) + Empty;
    16;
    (16 * (N([ln2; ln4], [(ln2 + 1) < ln4], [0; m[112]], [ln2 + 1; ln4]))) + (list_max(1, 2));
    5;
    32;
    (31 * (N([ln2; ln4], [(ln2 + 1) != ln4], [0 + 1; m[112]], [ln2 + 1; ln4]))) + 1;
    1;
    28;
    1
  ])
])
