ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4]
  ebb cost:   24
  ebb exits:  [5 8 52]
  ebb succs:  [5 8 52]
ebb entry:  5
  ebb type:   loop
  ebb blocks: [5 6]
  ebb cost:   ((18 + |f75|) * (N([ln1; m[4]], [(ln1 + 1) < m[4]], [0 + 1; m[4]], [ln1 + 1; m[4]]))) + 1
  ebb exits:  [7]
  ebb succs:  [7]
  1 paths to exit 7
  [5 6]
  1 loop paths
  [5]
  1 post loop exit paths
  [6]
ebb entry:  7
  ebb type:   block
  ebb blocks: [7]
  ebb cost:   1
  ebb exits:  [8]
  ebb succs:  [8]
ebb entry:  8
  ebb type:   block
  ebb blocks: [8 9 10 11 12]
  ebb cost:   24
  ebb exits:  [13 18 19]
  ebb succs:  [13 18 19]
ebb entry:  13
  ebb type:   loop
  ebb blocks: [13 14 15 16]
  ebb cost:   (list_max([
  17 * (N([m[12]], [m[12]], [m[12] + -1], [m[12]]));
  9 * (N([m[12]], [m[12]], [m[12] + -1], [m[12]]))
])) + 1
  ebb exits:  [17]
  ebb succs:  [17]
  2 paths to exit 17
  [13 15 16]
  [13 14 15 16]
  2 loop paths
  [13 15]  [13 14 15]
  2 post loop exit paths
  [16]  [16]
ebb entry:  17
  ebb type:   block
  ebb blocks: [17]
  ebb cost:   1
  ebb exits:  [18]
  ebb succs:  [18]
ebb entry:  18
  ebb type:   block
  ebb blocks: [18]
  ebb cost:   6
  ebb exits:  [19]
  ebb succs:  [19]
ebb entry:  19
  ebb type:   block
  ebb blocks: [19 20 21]
  ebb cost:   15
  ebb exits:  [22 25 26]
  ebb succs:  [22 25 26]
ebb entry:  22
  ebb type:   loop
  ebb blocks: [22 23]
  ebb cost:   ((18 + |f22|) * (N([ln1; m[8]], [(ln1 + 1) < m[8]], [0 + 1; m[8]], [ln1 + 1; m[8]]))) + 1
  ebb exits:  [24]
  ebb succs:  [24]
  1 paths to exit 24
  [22 23]
  1 loop paths
  [22]
  1 post loop exit paths
  [23]
ebb entry:  24
  ebb type:   block
  ebb blocks: [24]
  ebb cost:   1
  ebb exits:  [25]
  ebb succs:  [25]
ebb entry:  25
  ebb type:   block
  ebb blocks: [25]
  ebb cost:   8
  ebb exits:  [26]
  ebb succs:  [26]
ebb entry:  26
  ebb type:   block
  ebb blocks: [26 27]
  ebb cost:   5
  ebb exits:  [28 44]
  ebb succs:  [28 44]
ebb entry:  28
  ebb type:   loop
  ebb blocks: [28 29 30 31 32 33 34 35 36 37 38 39 40 41 42]
  ebb cost:   (list_max([
  (68 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (63 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (61 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (56 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (35 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (64 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (59 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (57 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (52 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (31 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (59 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (54 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (52 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (47 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]));
  (26 + |f22|) * (N([m[32]], [m[32]], [m[32]], [m[32]]))
])) + 1
  ebb exits:  [43]
  ebb succs:  []
  15 paths to exit 43
  [28 29 32 33 41 42]
  [28 29 32 33 34 35 38 39 41 42]
  [28 29 32 33 34 35 38 39 40 41 42]
  [28 29 32 33 34 35 36 37 38 39 41 42]
  [28 29 32 33 34 35 36 37 38 39 40 41 42]
  [28 29 30 32 33 41 42]
  [28 29 30 32 33 34 35 38 39 41 42]
  [28 29 30 32 33 34 35 38 39 40 41 42]
  [28 29 30 32 33 34 35 36 37 38 39 41 42]
  [28 29 30 32 33 34 35 36 37 38 39 40 41 42]
  [28 29 30 31 32 33 41 42]
  [28 29 30 31 32 33 34 35 38 39 41 42]
  [28 29 30 31 32 33 34 35 38 39 40 41 42]
  [28 29 30 31 32 33 34 35 36 37 38 39 41 42]
  [28 29 30 31 32 33 34 35 36 37 38 39 40 41 42]
  15 loop paths
  [28 29 32 33 41]  [28 29 32 33 34 35 38 39 41]  [28 29 32 33 34 35 38 39 40 41]  [28 29 32 33 34 35 36 37 38 39 41]  [28 29 32 33 34 35 36 37 38 39 40 41]  [28 29 30 32 33 41]  [28 29 30 32 33 34 35 38 39 41]  [28 29 30 32 33 34 35 38 39 40 41]  [28 29 30 32 33 34 35 36 37 38 39 41]  [28 29 30 32 33 34 35 36 37 38 39 40 41]  [28 29 30 31 32 33 41]  [28 29 30 31 32 33 34 35 38 39 41]  [28 29 30 31 32 33 34 35 38 39 40 41]  [28 29 30 31 32 33 34 35 36 37 38 39 41]  [28 29 30 31 32 33 34 35 36 37 38 39 40 41]
  15 post loop exit paths
  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]
nested ebbs:
  ebb entry:  28
    ebb type:   block
    ebb blocks: [28 29 30 31 32 33 34]
    ebb cost:   39
    ebb exits:  [35 41]
    ebb succs:  [35 41]
  ebb entry:  35
    ebb type:   loop
    ebb blocks: [35 36 37 38]
    ebb cost:   (13 * (N([m[0]], [m[0]], [m[0]], [m[0]]))) + 2
    ebb exits:  [39]
    ebb succs:  [39]
    2 paths to exit 39
    [35 38]
    [35 36 37 38]
    1 loop paths
    [35 36]
    2 post loop exit paths
    [38]    [37 38]
  ebb entry:  39
    ebb type:   block
    ebb blocks: [39 40]
    ebb cost:   8
    ebb exits:  [41]
    ebb succs:  [41]
  ebb entry:  41
    ebb type:   block
    ebb blocks: [41 42]
    ebb cost:   7
    ebb exits:  [28 43]
    ebb succs:  [28 43]
ebb entry:  43
  ebb type:   block
  ebb blocks: [43]
  ebb cost:   1
  ebb exits:  [44]
  ebb succs:  [44]
ebb entry:  44
  ebb type:   block
  ebb blocks: [44 45]
  ebb cost:   5
  ebb exits:  [46 51]
  ebb succs:  [46 51]
ebb entry:  46
  ebb type:   loop
  ebb blocks: [46 47 48 49]
  ebb cost:   (list_max([
  16 * (N([m[12]], [m[12]], [m[12]], [m[12]]));
  8 * (N([m[12]], [m[12]], [m[12]], [m[12]]))
])) + 1
  ebb exits:  [50]
  ebb succs:  [50]
  2 paths to exit 50
  [46 48 49]
  [46 47 48 49]
  2 loop paths
  [46 48]  [46 47 48]
  2 post loop exit paths
  [49]  [49]
ebb entry:  50
  ebb type:   block
  ebb blocks: [50]
  ebb cost:   1
  ebb exits:  [51]
  ebb succs:  [51]
ebb entry:  51
  ebb type:   block
  ebb blocks: [51]
  ebb cost:   3
  ebb exits:  [52]
  ebb succs:  [52]
ebb entry:  52
  ebb type:   block
  ebb blocks: [52 53]
  ebb cost:   1
  ebb exits:  [53]
  ebb succs:  []
ebb costs:
[0]: 24
[5]: (((18 + |f75|) * N([ln1; m[4]], [((ln1 + 1) < m[4])], [(0 + 1); m[4]], [(ln1 + 1); m[4]])) + 1)
[7]: 1
[8]: 24
[13]: (list_max((17 * N([m[12]], [m[12]], [(m[12] + -1)], [m[12]])), (9 * N([m[12]], [m[12]], [(m[12] + -1)], [m[12]]))) + 1)
[17]: 1
[18]: 6
[19]: 15
[22]: (((18 + |f22|) * N([ln1; m[8]], [((ln1 + 1) < m[8])], [(0 + 1); m[8]], [(ln1 + 1); m[8]])) + 1)
[24]: 1
[25]: 8
[26]: 5
[28]: (list_max(((68 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((63 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((61 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((56 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((35 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((64 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((59 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((57 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((52 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((31 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((59 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((54 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((52 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((47 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]])), ((26 + |f22|) * N([m[32]], [m[32]], [m[32]], [m[32]]))) + 1)
[28]: 39
[35]: ((13 * N([m[0]], [m[0]], [m[0]], [m[0]])) + 2)
[39]: 8
[41]: 7
[43]: 1
[44]: 5
[46]: (list_max((16 * N([m[12]], [m[12]], [m[12]], [m[12]])), (8 * N([m[12]], [m[12]], [m[12]], [m[12]]))) + 1)
[50]: 1
[51]: 3
[52]: 1
109 ebb paths found
[0 52]
[0 8 19 26 44 51 52]
[0 8 19 26 44 46 50 51 52]
[0 8 19 26 28 41 43 44 51 52]
[0 8 19 26 28 41 43 44 46 50 51 52]
[0 8 19 26 28 35 39 41 43 44 51 52]
[0 8 19 26 28 35 39 41 43 44 46 50 51 52]
[0 8 19 25 26 44 51 52]
[0 8 19 25 26 44 46 50 51 52]
[0 8 19 25 26 28 41 43 44 51 52]
[0 8 19 25 26 28 41 43 44 46 50 51 52]
[0 8 19 25 26 28 35 39 41 43 44 51 52]
[0 8 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 8 19 22 24 25 26 44 51 52]
[0 8 19 22 24 25 26 44 46 50 51 52]
[0 8 19 22 24 25 26 28 41 43 44 51 52]
[0 8 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 8 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 8 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
[0 8 18 19 26 44 51 52]
[0 8 18 19 26 44 46 50 51 52]
[0 8 18 19 26 28 41 43 44 51 52]
[0 8 18 19 26 28 41 43 44 46 50 51 52]
[0 8 18 19 26 28 35 39 41 43 44 51 52]
[0 8 18 19 26 28 35 39 41 43 44 46 50 51 52]
[0 8 18 19 25 26 44 51 52]
[0 8 18 19 25 26 44 46 50 51 52]
[0 8 18 19 25 26 28 41 43 44 51 52]
[0 8 18 19 25 26 28 41 43 44 46 50 51 52]
[0 8 18 19 25 26 28 35 39 41 43 44 51 52]
[0 8 18 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 8 18 19 22 24 25 26 44 51 52]
[0 8 18 19 22 24 25 26 44 46 50 51 52]
[0 8 18 19 22 24 25 26 28 41 43 44 51 52]
[0 8 18 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 8 18 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 8 18 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
[0 8 13 17 18 19 26 44 51 52]
[0 8 13 17 18 19 26 44 46 50 51 52]
[0 8 13 17 18 19 26 28 41 43 44 51 52]
[0 8 13 17 18 19 26 28 41 43 44 46 50 51 52]
[0 8 13 17 18 19 26 28 35 39 41 43 44 51 52]
[0 8 13 17 18 19 26 28 35 39 41 43 44 46 50 51 52]
[0 8 13 17 18 19 25 26 44 51 52]
[0 8 13 17 18 19 25 26 44 46 50 51 52]
[0 8 13 17 18 19 25 26 28 41 43 44 51 52]
[0 8 13 17 18 19 25 26 28 41 43 44 46 50 51 52]
[0 8 13 17 18 19 25 26 28 35 39 41 43 44 51 52]
[0 8 13 17 18 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 8 13 17 18 19 22 24 25 26 44 51 52]
[0 8 13 17 18 19 22 24 25 26 44 46 50 51 52]
[0 8 13 17 18 19 22 24 25 26 28 41 43 44 51 52]
[0 8 13 17 18 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 8 13 17 18 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 8 13 17 18 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 19 26 44 51 52]
[0 5 7 8 19 26 44 46 50 51 52]
[0 5 7 8 19 26 28 41 43 44 51 52]
[0 5 7 8 19 26 28 41 43 44 46 50 51 52]
[0 5 7 8 19 26 28 35 39 41 43 44 51 52]
[0 5 7 8 19 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 19 25 26 44 51 52]
[0 5 7 8 19 25 26 44 46 50 51 52]
[0 5 7 8 19 25 26 28 41 43 44 51 52]
[0 5 7 8 19 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 19 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 19 22 24 25 26 44 51 52]
[0 5 7 8 19 22 24 25 26 44 46 50 51 52]
[0 5 7 8 19 22 24 25 26 28 41 43 44 51 52]
[0 5 7 8 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 18 19 26 44 51 52]
[0 5 7 8 18 19 26 44 46 50 51 52]
[0 5 7 8 18 19 26 28 41 43 44 51 52]
[0 5 7 8 18 19 26 28 41 43 44 46 50 51 52]
[0 5 7 8 18 19 26 28 35 39 41 43 44 51 52]
[0 5 7 8 18 19 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 18 19 25 26 44 51 52]
[0 5 7 8 18 19 25 26 44 46 50 51 52]
[0 5 7 8 18 19 25 26 28 41 43 44 51 52]
[0 5 7 8 18 19 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 18 19 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 18 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 18 19 22 24 25 26 44 51 52]
[0 5 7 8 18 19 22 24 25 26 44 46 50 51 52]
[0 5 7 8 18 19 22 24 25 26 28 41 43 44 51 52]
[0 5 7 8 18 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 18 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 18 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 26 44 51 52]
[0 5 7 8 13 17 18 19 26 44 46 50 51 52]
[0 5 7 8 13 17 18 19 26 28 41 43 44 51 52]
[0 5 7 8 13 17 18 19 26 28 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 26 28 35 39 41 43 44 51 52]
[0 5 7 8 13 17 18 19 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 25 26 44 51 52]
[0 5 7 8 13 17 18 19 25 26 44 46 50 51 52]
[0 5 7 8 13 17 18 19 25 26 28 41 43 44 51 52]
[0 5 7 8 13 17 18 19 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 13 17 18 19 25 26 28 35 39 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 44 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 44 46 50 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 28 41 43 44 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 28 41 43 44 46 50 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 28 35 39 41 43 44 51 52]
[0 5 7 8 13 17 18 19 22 24 25 26 28 35 39 41 43 44 46 50 51 52]
