ebb costs:
[0]: 16
[8]: (list_max(((14 + list_sum(|f31|, |f53|)) * N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0])), ((19 + |f53|) * N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))) + list_max(1, 1))
[15]: 109
[55]: (list_max(((32 + |f31|) * N([pn0; pn1; pn2], [select(((pn2 + (pn1 * 10)) < 429496729), 0, ((R(31, 0, i32, pn0) + -48) <= 9))], [pn0; 0; (R(31, 24, i32, pn0) + -48)], [pn0; (pn2 + (pn1 * 10)); (R(31, 11, i32, pn0) + -48)])), (37 * N([m[0]; pn1; pn2], [select(((pn2 + (pn1 * 10)) < 429496729), 0, ((m[0] + -48) <= 9))], [m[0]; 0; (R(31, 24, i32, pn0) + -48)], [m[0]; (pn2 + (pn1 * 10)); (m[0] + -48)]))) + list_max(1, 1))
[62]: 4
[63]: 12
[65]: (list_max(((36 + |f31|) * N([lN10; lN11; pn0], [(((lN10 + lN11) * 10) <= (i64.extend_i32_u((R(31, 0, i32, pn0) + -48)) xor -1))], [(0 * 10); i64.extend_i32_u(R(31, 24, i32, pn0) + -48); pn0], [((lN10 + lN11) * 10); i64.extend_i32_u(R(31, 7, i32, pn0) + -48); pn0])), (41 * N([lN10; lN11; m[0]], [(((lN10 + lN11) * 10) <= (i64.extend_i32_u((m[0] + -48)) xor -1))], [(0 * 10); i64.extend_i32_u(R(31, 24, i32, pn0) + -48); m[0]], [((lN10 + lN11) * 10); i64.extend_i32_u(m[0] + -48); m[0]]))) + list_max(1, 1))
[73]: 3
[75]: 6
[77]: 7
[80]: 15
[83]: (list_max(((29 + |f31|) * N([ln5; m[0]; pn1; pn2], [select((pn1 > m[0]), 0, ((pn2 + (pn1 * ln5)) <= 119304646))], [0; m[0]; select(pn1, 10, pn1); m[0]], [(pn2 + (pn1 * ln5)); m[0]; pn1; m[0]])), (34 * N([ln5; m[0]; pn1; pn2], [select((pn1 > m[0]), 0, ((pn2 + (pn1 * ln5)) <= 119304646))], [0; m[0]; select(pn1, 10, pn1); m[0]], [(pn2 + (pn1 * ln5)); m[0]; pn1; m[0]]))) + list_max(1, 1))
[90]: 4
[91]: 8
[93]: (list_max(((44 + list_sum(|f31|, |f58|)) * N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]])), ((49 + |f58|) * N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))) + list_max(1, 1))
[102]: 1
[104]: 20
[106]: (list_max(((29 + |f31|) * N([ln5; ln8; m[0]; pn1; pn2], [select((pn1 > m[0]), 0, ((pn2 | (ln5 shl ln8)) <= 134217727))], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [(pn2 | (ln5 shl ln8)); ln8; m[0]; pn1; m[0]])), (34 * N([ln5; ln8; m[0]; pn1; pn2], [select((pn1 > m[0]), 0, ((pn2 | (ln5 shl ln8)) <= 134217727))], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [(pn2 | (ln5 shl ln8)); ln8; m[0]; pn1; m[0]]))) + list_max(1, 1))
[113]: 4
[114]: 14
[116]: (list_max(((33 + |f31|) * N([m[0]; pn1], [(pn1 > m[0])], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1])), (38 * N([m[0]; pn1], [(pn1 > m[0])], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))) + list_max(1, 1))
[124]: 1
[125]: 8
[127]: (list_max(((17 + |f31|) * N([m[0]; pn1], [(pn1 > m[0])], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1])), (22 * N([m[0]; pn1], [(pn1 > m[0])], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))) + list_max(1, 1))
[134]: 14
[135]: 36
[147]: 6
[148]: 6
823 ebb paths found
[0 75 148]
[0 75 77 135 148]
[0 75 77 135 147 148]
[0 75 77 125 135 148]
[0 75 77 125 135 147 148]
[0 75 77 125 127 134 135 148]
[0 75 77 125 127 134 135 147 148]
[0 75 77 80 104 114 125 135 148]
[0 75 77 80 104 114 125 135 147 148]
[0 75 77 80 104 114 125 127 134 135 148]
[0 75 77 80 104 114 125 127 134 135 147 148]
[0 75 77 80 104 114 116 125 135 148]
[0 75 77 80 104 114 116 125 135 147 148]
[0 75 77 80 104 114 116 125 127 134 135 148]
[0 75 77 80 104 114 116 125 127 134 135 147 148]
[0 75 77 80 104 114 116 124 125 135 148]
[0 75 77 80 104 114 116 124 125 135 147 148]
[0 75 77 80 104 114 116 124 125 127 134 135 148]
[0 75 77 80 104 114 116 124 125 127 134 135 147 148]
[0 75 77 80 104 106 113 114 125 135 148]
[0 75 77 80 104 106 113 114 125 135 147 148]
[0 75 77 80 104 106 113 114 125 127 134 135 148]
[0 75 77 80 104 106 113 114 125 127 134 135 147 148]
[0 75 77 80 104 106 113 114 116 125 135 148]
[0 75 77 80 104 106 113 114 116 125 135 147 148]
[0 75 77 80 104 106 113 114 116 125 127 134 135 148]
[0 75 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 75 77 80 104 106 113 114 116 124 125 135 148]
[0 75 77 80 104 106 113 114 116 124 125 135 147 148]
[0 75 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 75 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 75 77 80 91 125 135 148]
[0 75 77 80 91 125 135 147 148]
[0 75 77 80 91 125 127 134 135 148]
[0 75 77 80 91 125 127 134 135 147 148]
[0 75 77 80 91 93 125 135 148]
[0 75 77 80 91 93 125 135 147 148]
[0 75 77 80 91 93 125 127 134 135 148]
[0 75 77 80 91 93 125 127 134 135 147 148]
[0 75 77 80 91 93 102 125 135 148]
[0 75 77 80 91 93 102 125 135 147 148]
[0 75 77 80 91 93 102 125 127 134 135 148]
[0 75 77 80 91 93 102 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 114 125 135 148]
[0 75 77 80 91 93 102 104 114 125 135 147 148]
[0 75 77 80 91 93 102 104 114 125 127 134 135 148]
[0 75 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 114 116 125 135 148]
[0 75 77 80 91 93 102 104 114 116 125 135 147 148]
[0 75 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 75 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 114 116 124 125 135 148]
[0 75 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 75 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 75 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 125 135 148]
[0 75 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 75 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 75 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 75 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 75 77 80 83 90 91 125 135 148]
[0 75 77 80 83 90 91 125 135 147 148]
[0 75 77 80 83 90 91 125 127 134 135 148]
[0 75 77 80 83 90 91 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 125 135 148]
[0 75 77 80 83 90 91 93 125 135 147 148]
[0 75 77 80 83 90 91 93 125 127 134 135 148]
[0 75 77 80 83 90 91 93 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 125 135 148]
[0 75 77 80 83 90 91 93 102 125 135 147 148]
[0 75 77 80 83 90 91 93 102 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 125 135 148]
[0 75 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 75 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 75 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 148]
[0 8 15 147 148]
[0 8 15 80 104 114 125 135 148]
[0 8 15 80 104 114 125 135 147 148]
[0 8 15 80 104 114 125 127 134 135 148]
[0 8 15 80 104 114 125 127 134 135 147 148]
[0 8 15 80 104 114 116 125 135 148]
[0 8 15 80 104 114 116 125 135 147 148]
[0 8 15 80 104 114 116 125 127 134 135 148]
[0 8 15 80 104 114 116 125 127 134 135 147 148]
[0 8 15 80 104 114 116 124 125 135 148]
[0 8 15 80 104 114 116 124 125 135 147 148]
[0 8 15 80 104 114 116 124 125 127 134 135 148]
[0 8 15 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 80 104 106 113 114 125 135 148]
[0 8 15 80 104 106 113 114 125 135 147 148]
[0 8 15 80 104 106 113 114 125 127 134 135 148]
[0 8 15 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 80 104 106 113 114 116 125 135 148]
[0 8 15 80 104 106 113 114 116 125 135 147 148]
[0 8 15 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 80 104 106 113 114 116 124 125 135 148]
[0 8 15 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 80 91 125 135 148]
[0 8 15 80 91 125 135 147 148]
[0 8 15 80 91 125 127 134 135 148]
[0 8 15 80 91 125 127 134 135 147 148]
[0 8 15 80 91 93 125 135 148]
[0 8 15 80 91 93 125 135 147 148]
[0 8 15 80 91 93 125 127 134 135 148]
[0 8 15 80 91 93 125 127 134 135 147 148]
[0 8 15 80 91 93 102 125 135 148]
[0 8 15 80 91 93 102 125 135 147 148]
[0 8 15 80 91 93 102 125 127 134 135 148]
[0 8 15 80 91 93 102 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 114 125 135 148]
[0 8 15 80 91 93 102 104 114 125 135 147 148]
[0 8 15 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 114 116 125 135 148]
[0 8 15 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 80 83 90 91 125 135 148]
[0 8 15 80 83 90 91 125 135 147 148]
[0 8 15 80 83 90 91 125 127 134 135 148]
[0 8 15 80 83 90 91 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 125 135 148]
[0 8 15 80 83 90 91 93 125 135 147 148]
[0 8 15 80 83 90 91 93 125 127 134 135 148]
[0 8 15 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 125 135 148]
[0 8 15 80 83 90 91 93 102 125 135 147 148]
[0 8 15 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 135 148]
[0 8 15 63 77 135 147 148]
[0 8 15 63 77 125 135 148]
[0 8 15 63 77 125 135 147 148]
[0 8 15 63 77 125 127 134 135 148]
[0 8 15 63 77 125 127 134 135 147 148]
[0 8 15 63 77 80 104 114 125 135 148]
[0 8 15 63 77 80 104 114 125 135 147 148]
[0 8 15 63 77 80 104 114 125 127 134 135 148]
[0 8 15 63 77 80 104 114 125 127 134 135 147 148]
[0 8 15 63 77 80 104 114 116 125 135 148]
[0 8 15 63 77 80 104 114 116 125 135 147 148]
[0 8 15 63 77 80 104 114 116 125 127 134 135 148]
[0 8 15 63 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 104 114 116 124 125 135 148]
[0 8 15 63 77 80 104 114 116 124 125 135 147 148]
[0 8 15 63 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 80 104 106 113 114 125 135 148]
[0 8 15 63 77 80 104 106 113 114 125 135 147 148]
[0 8 15 63 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 63 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 77 80 104 106 113 114 116 125 135 148]
[0 8 15 63 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 63 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 63 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 80 91 125 135 148]
[0 8 15 63 77 80 91 125 135 147 148]
[0 8 15 63 77 80 91 125 127 134 135 148]
[0 8 15 63 77 80 91 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 125 135 148]
[0 8 15 63 77 80 91 93 125 135 147 148]
[0 8 15 63 77 80 91 93 125 127 134 135 148]
[0 8 15 63 77 80 91 93 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 125 135 148]
[0 8 15 63 77 80 91 93 102 125 135 147 148]
[0 8 15 63 77 80 91 93 102 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 125 135 148]
[0 8 15 63 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 63 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 125 135 148]
[0 8 15 63 77 80 83 90 91 125 135 147 148]
[0 8 15 63 77 80 83 90 91 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 125 135 148]
[0 8 15 63 77 80 83 90 91 93 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 135 148]
[0 8 15 63 65 77 135 147 148]
[0 8 15 63 65 77 125 135 148]
[0 8 15 63 65 77 125 135 147 148]
[0 8 15 63 65 77 125 127 134 135 148]
[0 8 15 63 65 77 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 114 125 135 148]
[0 8 15 63 65 77 80 104 114 125 135 147 148]
[0 8 15 63 65 77 80 104 114 125 127 134 135 148]
[0 8 15 63 65 77 80 104 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 114 116 125 135 148]
[0 8 15 63 65 77 80 104 114 116 125 135 147 148]
[0 8 15 63 65 77 80 104 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 114 116 124 125 135 148]
[0 8 15 63 65 77 80 104 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 125 135 148]
[0 8 15 63 65 77 80 104 106 113 114 125 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 116 125 135 148]
[0 8 15 63 65 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 125 135 148]
[0 8 15 63 65 77 80 91 125 135 147 148]
[0 8 15 63 65 77 80 91 125 127 134 135 148]
[0 8 15 63 65 77 80 91 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 125 135 148]
[0 8 15 63 65 77 80 91 93 125 135 147 148]
[0 8 15 63 65 77 80 91 93 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 125 135 148]
[0 8 15 63 65 77 80 91 93 102 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 125 135 148]
[0 8 15 63 65 77 80 83 90 91 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 125 135 148]
[0 8 15 63 65 73 125 135 147 148]
[0 8 15 63 65 73 125 127 134 135 148]
[0 8 15 63 65 73 125 127 134 135 147 148]
[0 8 15 63 65 73 75 148]
[0 8 15 63 65 73 75 77 135 148]
[0 8 15 63 65 73 75 77 135 147 148]
[0 8 15 63 65 73 75 77 125 135 148]
[0 8 15 63 65 73 75 77 125 135 147 148]
[0 8 15 63 65 73 75 77 125 127 134 135 148]
[0 8 15 63 65 73 75 77 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 125 135 148]
[0 8 15 63 65 73 75 77 80 104 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 104 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 104 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 125 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 125 135 148]
[0 8 15 63 65 73 75 77 80 91 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 135 148]
[0 8 15 55 62 63 77 135 147 148]
[0 8 15 55 62 63 77 125 135 148]
[0 8 15 55 62 63 77 125 135 147 148]
[0 8 15 55 62 63 77 125 127 134 135 148]
[0 8 15 55 62 63 77 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 114 125 135 148]
[0 8 15 55 62 63 77 80 104 114 125 135 147 148]
[0 8 15 55 62 63 77 80 104 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 114 116 125 135 148]
[0 8 15 55 62 63 77 80 104 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 125 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 125 135 148]
[0 8 15 55 62 63 77 80 91 125 135 147 148]
[0 8 15 55 62 63 77 80 91 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 125 135 148]
[0 8 15 55 62 63 77 80 91 93 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 135 148]
[0 8 15 55 62 63 65 77 135 147 148]
[0 8 15 55 62 63 65 77 125 135 148]
[0 8 15 55 62 63 65 77 125 135 147 148]
[0 8 15 55 62 63 65 77 125 127 134 135 148]
[0 8 15 55 62 63 65 77 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 125 135 148]
[0 8 15 55 62 63 65 77 80 104 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 125 135 148]
[0 8 15 55 62 63 65 77 80 91 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 125 135 148]
[0 8 15 55 62 63 65 73 125 135 147 148]
[0 8 15 55 62 63 65 73 125 127 134 135 148]
[0 8 15 55 62 63 65 73 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 148]
[0 8 15 55 62 63 65 73 75 77 135 148]
[0 8 15 55 62 63 65 73 75 77 135 147 148]
[0 8 15 55 62 63 65 73 75 77 125 135 148]
[0 8 15 55 62 63 65 73 75 77 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 114 116 124 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 125 127 134 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 135 147 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 148]
[0 8 15 55 62 63 65 73 75 77 80 83 90 91 93 102 104 106 113 114 116 124 125 127 134 135 147 148]
|f183| = list_max([
  list_sum(16, 6, 6);
  list_sum(16, 6, 7, 36, 6);
  list_sum(16, 6, 7, 36, 6, 6);
  list_sum(16, 6, 7, 8, 36, 6);
  list_sum(16, 6, 7, 8, 36, 6, 6);
  list_sum([
    16;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum(16, 6, 7, 15, 20, 14, 8, 36, 6);
  list_sum(16, 6, 7, 15, 20, 14, 8, 36, 6, 6);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum(16, 6, 7, 15, 8, 8, 36, 6);
  list_sum(16, 6, 7, 15, 8, 8, 36, 6, 6);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    36;
    6;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6
  ]);
  list_sum([
    16;
    (list_max([
      (14 + (list_sum(|f31|, |f53|))) * (N([pn0], [R(53, 0, i32, R(31, 0, i32, pn0))], [pn0], [pn0]));
      (19 + |f53|) * (N([m[0]], [R(53, 0, i32, m[0])], [m[0]], [m[0]]))
    ])) + (list_max(1, 1));
    109;
    (list_max([
      (32 + |f31|) * (N([pn0; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, ((R(31, 0, i32, pn0)) + -48) <= 9)], [pn0; 0; (R(31, 24, i32, pn0)) + -48], [pn0; pn2 + (pn1 * 10); (R(31, 11, i32, pn0)) + -48]));
      37 * (N([m[0]; pn1; pn2], [select((pn2 + (pn1 * 10)) < 429496729, 0, (m[0] + -48) <= 9)], [m[0]; 0; (R(31, 24, i32, pn0)) + -48], [m[0]; pn2 + (pn1 * 10); m[0] + -48]))
    ])) + (list_max(1, 1));
    4;
    12;
    (list_max([
      (36 + |f31|) * (N([lN10; lN11; pn0], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u((R(31, 0, i32, pn0)) + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); pn0], [(lN10 + lN11) * 10; i64.extend_i32_u((R(31, 7, i32, pn0)) + -48); pn0]));
      41 * (N([lN10; lN11; m[0]], [((lN10 + lN11) * 10) <= ((i64.extend_i32_u(m[0] + -48)) xor -1)], [0 * 10; i64.extend_i32_u((R(31, 24, i32, pn0)) + -48); m[0]], [(lN10 + lN11) * 10; i64.extend_i32_u(m[0] + -48); m[0]]))
    ])) + (list_max(1, 1));
    3;
    6;
    7;
    15;
    (list_max([
      (29 + |f31|) * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]));
      34 * (N([ln5; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 + (pn1 * ln5)) <= 119304646)], [0; m[0]; select(pn1, 10, pn1); m[0]], [pn2 + (pn1 * ln5); m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    8;
    (list_max([
      (44 + (list_sum(|f31|, |f58|))) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]));
      (49 + |f58|) * (N([m[8]], [i64.eqz(m[8])], [m[8]], [m[8]]))
    ])) + (list_max(1, 1));
    1;
    20;
    (list_max([
      (29 + |f31|) * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]));
      34 * (N([ln5; ln8; m[0]; pn1; pn2], [select(pn1 > m[0], 0, (pn2 | (ln5 shl ln8)) <= 134217727)], [0; m[0]; m[0]; select(pn1, 10, pn1); m[0]], [pn2 | (ln5 shl ln8); ln8; m[0]; pn1; m[0]]))
    ])) + (list_max(1, 1));
    4;
    14;
    (list_max([
      (33 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      38 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    1;
    8;
    (list_max([
      (17 + |f31|) * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]));
      22 * (N([m[0]; pn1], [pn1 > m[0]], [m[0]; select(pn1, 10, pn1)], [m[0]; pn1]))
    ])) + (list_max(1, 1));
    14;
    36;
    6;
    6
  ])
])
