ebb costs:
[0]: 99
[24]: (list_max((28 * N([pF1], [(((pF1 - f64.convert_i32_u(0)) * 1000000000.) != 0.)], [(R(187, 58, f64, ((gn0 - 560) + 44), 44) + R(187, 58, f64, ((gn0 - 560) + 44), 44))], [((pF1 - f64.convert_i32_u0) * 1000000000.)])), (29 * N([pF1], [(((pF1 - f64.convert_i32_u(i32.trunc_f64_u(pF1))) * 1000000000.) != 0.)], [(R(187, 58, f64, ((gn0 - 560) + 44), 44) + R(187, 58, f64, ((gn0 - 560) + 44), 44))], [((pF1 - f64.convert_i32_ui32.trunc_f64_upF1) * 1000000000.)]))) + list_max(1, 1))
[31]: 12
[36]: (list_max((35 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (43 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (72 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (80 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (79 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (87 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))]))) + list_max(1, 1, 1, 1, 1, 1))
[36]: 21
[39]: ((25 * N([ln6; ln7], [((ln6 + -4) >= ln7)], [(((select((0 < 0), ((gn0 - 560) + 336), ((gn0 - 560) + 48)) + 4) + -4) + -4); select((0 < 0), ((gn0 - 560) + 336), ((gn0 - 560) + 48))], [(ln6 + -4); ln7])) + 1)
[41]: 13
[44]: ((12 * N([m[0]], [i32.eqz(m[0])], [0], [m[0]])) + list_max(1, 2))
[48]: 14
[50]: 1
[51]: 17
[53]: (list_max((93 * N([m[44]; pn3], [((m[44] + select((pn3 < -9), (0 - pn3), 9)) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select((pn3 < -9), (0 - pn3), 9)); (m[44] + select((pn3 < -9), (0 - pn3), 9))])), (101 * N([m[44]; pn3], [((m[44] + select((pn3 < -9), (0 - pn3), 9)) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select((pn3 < -9), (0 - pn3), 9)); (m[44] + select((pn3 < -9), (0 - pn3), 9))])), (53 * N([m[44]; pn3], [((m[44] + select((pn3 < -9), (0 - pn3), 9)) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select((pn3 < -9), (0 - pn3), 9)); (m[44] + select((pn3 < -9), (0 - pn3), 9))]))) + list_max(1, 1, 1))
[53]: 29
[58]: ((22 * N([ln6; ln8], [((ln8 + 4) < ln6)], [(select((0 < 0), ((gn0 - 560) + 336), ((gn0 - 560) + 48)) + 4); (select((0 < 0), ((gn0 - 560) + 336), ((gn0 - 560) + 48)) + 4)], [ln6; (ln8 + 4)])) + 1)
[60]: 19
[62]: 31
[64]: 1
[65]: 24
[69]: ((11 * N([ln13; pn3], [(ln13 >= (pn3 * 10))], [0; (10 * 10)], [ln13; (pn3 * 10)])) + 1)
[71]: 1
[72]: 65
[75]: ((11 * N([ln13], [((ln13 + 1) != 8)], [(((((((select((pn3 < 0), pn3, 6) - select(((pn5 | 32) == 102), 0, 0)) - (((pn5 | 32) == 103) & (select((pn3 < 0), pn3, 6) != 0))) + 9216) /s 9) * -9) + (((select((pn3 < 0), pn3, 6) - select(((pn5 | 32) == 102), 0, 0)) - (((pn5 | 32) == 103) & (select((pn3 < 0), pn3, 6) != 0))) + 9216)) + 1)], [(ln13 + 1)])) + 1)
[77]: 1
[78]: 87
[87]: (list_max((21 * N([ln12], [((ln12 + 1) > 999999999)], [(((((((select((pn3 < 0), pn3, 6) - select(((pn5 | 32) == 102), 0, 0)) - (((pn5 | 32) == 103) & (select((pn3 < 0), pn3, 6) != 0))) + 9216) /s 9) shl 2) + select((0 < 0), ((gn0 - 560) + 340), (((gn0 - 560) + 48) | 4))) + -4096)], [(ln12 + -4)])), (28 * N([ln7], [(((ln7 + -4) + 1) > 999999999)], [select((0 < 0), ((gn0 - 560) + 336), ((gn0 - 560) + 48))], [(ln7 + -4)]))) + list_max(1, 1))
[91]: 1
[92]: 17
[94]: ((11 * N([ln11; pn3], [(ln11 >= (pn3 * 10))], [(10 + (0 - (0 - ((0 /u 10) * 10)))); (10 * 10)], [ln11; (pn3 * 10)])) + 1)
[96]: 1
[97]: 11
[98]: 2
[100]: ((14 * N([m[0]], [i32.eqz(m[0])], [0], [m[0]])) + 1)
[103]: 2
[104]: 60
[114]: ((12 * N([ln13; pn3], [i32.eqz((pn3 rem_u (ln13 * 10)))], [0; pn3], [(ln13 * 10); pn3])) + 1)
[116]: 1
[117]: 37
[121]: 43
[125]: ((12 * N([ln16; ln6], [((ln16 - (ln6 + -1)) < 2)], [0; 0], [ln16; (ln6 + -1)])) + 1)
[127]: 1
[128]: 20
[129]: 51
[134]: (list_max(((27 + list_sum(|f39|, |f78|)) * N([ln14; ln7], [((ln7 + 4) <= ln14)], [0; 0], [ln14; (ln7 + 4)])), ((33 + list_sum(|f39|, |f78|)) * N([ln14; ln7], [((ln7 + 4) <= ln14)], [0; 0], [ln14; (ln7 + 4)])), ((29 + list_sum(|f39|, |f78|)) * N([ln14; ln7], [((ln7 + 4) <= ln14)], [0; 0], [ln14; (ln7 + 4)])), ((44 + list_sum(|f39|, |f78|)) * N([ln14; ln7], [((ln7 + 4) <= ln14)], [0; 0], [ln14; (ln7 + 4)]))) + list_max(1, 1, 1, 1))
[134]: 17
[138]: ((12 * N([ln6; ln9], [((ln6 + -1) > (ln9 + 16))], [0; 0], [(ln6 + -1); ln9])) + 1)
[140]: 1
[142]: 10
[144]: 14
[146]: 16
[150]: (list_max(((38 + list_sum(|f39|, |f78|)) * N([ln10], [(ln10 > 9)], [0], [(ln10 + -9)])), ((53 + list_sum(|f39|, |f78|)) * N([ln10], [(ln10 > 9)], [0], [(ln10 + -9)]))) + list_max(1, 1))
[150]: 11
[152]: ((12 * N([ln6; ln9], [((ln6 + -1) > (ln9 + 16))], [0; 0], [(ln6 + -1); ln9])) + 1)
[154]: 1
[155]: 29
[158]: 1
[160]: 27
[163]: (list_max(((56 + list_sum(|f39|, |f78|)) * N([ln10; ln11; m[0]], [((ln10 - (ln11 - (R(78, 0, i32, ln11, m[0]) + 1))) > -1)], [0; 0; m[0]], [(ln10 - (ln11 - (R(78, 4, i32, ln11, m[0]) + 1))); ln11; m[0]])), ((61 + list_sum(|f39|, |f78|)) * N([ln10; ln11; m[0]], [((ln10 - (ln11 - (R(78, 0, i32, ln11, m[0]) + 1))) > -1)], [0; 0; m[0]], [(ln10 - (ln11 - (R(78, 4, i32, ln11, m[0]) + 1))); ln11; m[0]])), ((46 + list_sum(|f39|, |f78|)) * N([ln10; ln11; m[0]], [((ln10 - (ln11 - R(78, 0, i32, ln11, m[0]))) > -1)], [0; 0; m[0]], [(ln10 - (ln11 - R(78, 4, i32, ln11, m[0]))); ln11; m[0]])), ((61 + list_sum(|f39|, |f78|)) * N([ln10; ln11; m[0]], [((ln10 - (ln11 - (R(78, 0, i32, ln11, m[0]) + -1))) > -1)], [0; 0; m[0]], [(ln10 - (ln11 - (R(78, 4, i32, ln11, m[0]) + -1))); ln11; 48])), ((62 + list_sum(|f39|, |f78|)) * N([ln10; ln11; pn3], [((ln10 - (ln11 - (pn3 + 1))) > -1)], [0; 0; pn3], [(ln10 - (ln11 - (pn3 + 1))); ln11; pn3])), ((67 + list_sum(|f39|, |f78|)) * N([ln10; ln11; pn3], [((ln10 - (ln11 - (pn3 + 1))) > -1)], [0; 0; pn3], [(ln10 - (ln11 - (pn3 + 1))); ln11; pn3])), ((52 + list_sum(|f39|, |f78|)) * N([ln10; ln11; pn3], [((ln10 - (ln11 - pn3)) > -1)], [0; 0; pn3], [(ln10 - (ln11 - pn3)); ln11; pn3])), ((67 + list_sum(|f39|, |f78|)) * N([ln10; ln11; pn3], [((ln10 - (ln11 - (pn3 + -1))) > -1)], [0; 0; pn3], [(ln10 - (ln11 - (pn3 + -1))); ln11; pn3]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1))
[163]: 26
[169]: ((12 * N([ln6; ln9], [((ln6 + -1) > (ln9 + 16))], [0; 0], [(ln6 + -1); ln9])) + 1)
[171]: 1
[173]: 21
[175]: 28
[178]: 1
[179]: 15
[181]: 3
[182]: 9
[183]: 1
[185]: 24
[189]: ((9 * N([ln6], [(ln6 + -1)], [0], [(ln6 + -1)])) + 1)
[191]: 14
[195]: 56
[198]: (list_max((51 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (59 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (52 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)])), (60 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)]))) + list_max(1, 1, 1, 1))
[207]: 77
[208]: 19
0 ebb paths found
|f289| = Inf
