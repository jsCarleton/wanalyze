ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2]
  ebb cost:   12
  ebb exits:  [3 46]
  ebb succs:  [3 46]
ebb entry:  3
  ebb type:   loop
  ebb blocks: [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42]
  ebb cost:   (list_max([
  (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (77 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (74 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (78 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (81 + (list_sum(|f35|, |f33|))) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (62 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (59 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (63 + |f35|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  (66 + |f33|) * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]));
  31 * (N([pn1], [pn1 + -1], [pn1], [pn1 + -1]))
])) + 1
  ebb exits:  [43 46]
  ebb succs:  [43 46]
  33 paths to exit 43
  [3 4 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 34 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 34 35 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 28 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 24 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 32 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 26 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 30 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 22 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 20 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 37 38 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 34 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 34 35 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 28 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 32 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 30 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 22 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41 42]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 37 38 41 42]
  3 paths to exit 46
  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 37]
  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 37]
  [3 4 5 6]
  33 loop paths
  [3 4 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 34 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 34 35 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 28 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 24 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 32 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 26 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 30 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 22 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 20 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 8 9 10 11 12 13 14 15 16 17 18 37 38 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 34 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 34 35 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 28 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 32 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 30 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 22 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 20 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 40 41]  [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 37 38 41]
  33 post loop exit paths
  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]
ebb entry:  43
  ebb type:   block
  ebb blocks: [43 44 45]
  ebb cost:   17
  ebb exits:  [46 48]
  ebb succs:  [46 48]
ebb entry:  46
  ebb type:   block
  ebb blocks: [46 47]
  ebb cost:   5
  ebb exits:  [47]
  ebb succs:  []
ebb entry:  48
  ebb type:   block
  ebb blocks: [48]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
ebb costs:
[0]: 12
[3]: (list_max(((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((81 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((66 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), (31 * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)]))) + 1)
[43]: 17
[46]: 5
[48]: 0
ebb costs':
[0]: 12
[3]: (list_max(((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((77 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((74 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((78 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((81 + list_sum(|f35|, |f33|)) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((62 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((59 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((63 + |f35|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), ((66 + |f33|) * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)])), (31 * N([pn1], [(pn1 + -1)], [pn1], [(pn1 + -1)]))) + 1)
[43]: 17
[46]: 5
[48]: 0
4 ebb paths found
[0 46]
[0 3 46]
[0 3 43 48]
[0 3 43 46]
