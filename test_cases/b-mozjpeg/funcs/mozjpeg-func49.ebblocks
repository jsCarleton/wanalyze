ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1]
  ebb cost:   list_max([6; 6])
  ebb exits:  [2 81]
  ebb succs:  [81 2]
  1 paths to exit 2
  [0 1]
  1 paths to exit 81
  [0 1]
ebb entry:  2
  ebb type:   block
  ebb blocks: [2]
  ebb cost:   9
  ebb exits:  [3]
  ebb succs:  [3]
  1 paths to exit 3
  [2]
ebb entry:  3
  ebb type:   loop
  ebb blocks: [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]
  ebb cost:   (list_max([[279*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 290*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 124*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 128*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 160*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 160*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 158*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 135*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 139*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 171*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 171*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 169*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 155*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 155*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 153*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 213*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 213*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 211*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 166*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 166*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 164*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 224*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 224*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 222*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 266*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 277*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 111*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 115*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 147*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 147*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 145*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 122*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 126*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 158*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 158*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 156*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 142*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 142*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 140*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 200*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 200*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 198*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 153*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 153*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 151*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 211*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 211*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 209*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 290*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 301*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 135*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 139*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 171*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 171*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 169*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 146*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 150*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 182*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 182*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 180*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 166*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 166*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 164*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 224*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 224*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 222*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 177*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 177*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 175*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 235*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 235*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 233*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1)]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
  ebb exits:  [80 83]
  ebb succs:  [83 80]
  72 paths to exit 80
  [3 4 5 8 9 10 11 12 13 14 68 69 71 72 73 78 79]
  [3 4 5 8 9 10 11 12 13 14 68 69 70 71 72 73 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 68 69 71 72 73 78 79]
  [3 4 5 6 9 10 11 12 13 14 68 69 70 71 72 73 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 68 69 71 72 73 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 68 69 70 71 72 73 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78 79]
  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78 79]
  0 paths to exit 83

  72 loop paths
  [3 4 5 8 9 10 11 12 13 14 68 69 71 72 73 78]  [3 4 5 8 9 10 11 12 13 14 68 69 70 71 72 73 78]  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78]  [3 4 5 6 9 10 11 12 13 14 68 69 71 72 73 78]  [3 4 5 6 9 10 11 12 13 14 68 69 70 71 72 73 78]  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 6 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 68 69 71 72 73 78]  [3 4 5 6 7 8 9 10 11 12 13 14 68 69 70 71 72 73 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 61 62 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 58 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 54 55 56 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 38 39 40 41 42 43 44 45 46 49 50 51 52 59 63 64 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 23 24 25 26 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 19 20 21 22 23 24 25 26 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 32 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 28 29 30 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 23 24 25 26 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 32 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 28 29 30 33 34 78]  [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18 19 20 21 22 23 24 25 26 33 34 78]
  72 post loop exit paths
  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]  [79]
  ebb entry:  3
    ebb type:   block
    ebb blocks: [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18]
    ebb cost:   list_max([62; 51; 49; 38; 73; 62; 39; 26; 50; 39; 26; 50])
    ebb exits:  [19 38 68]
    ebb succs:  [68 38 19]
    6 paths to exit 19
    [3 4 5 8 9 10 11 12 13 14 16 17 18]
    [3 4 5 8 9 10 11 12 13 14 16 17]
    [3 4 5 6 9 10 11 12 13 14 16 17 18]
    [3 4 5 6 9 10 11 12 13 14 16 17]
    [3 4 5 6 7 8 9 10 11 12 13 14 16 17 18]
    [3 4 5 6 7 8 9 10 11 12 13 14 16 17]
    3 paths to exit 38
    [3 4 5 8 9 10 11 12 13 14]
    [3 4 5 6 9 10 11 12 13 14]
    [3 4 5 6 7 8 9 10 11 12 13 14]
    3 paths to exit 68
    [3 4 5 8 9 10 11 12 13 14]
    [3 4 5 6 9 10 11 12 13 14]
    [3 4 5 6 7 8 9 10 11 12 13 14]
  ebb entry:  19
    ebb type:   block
    ebb blocks: [19]
    ebb cost:   3
    ebb exits:  [20]
    ebb succs:  [20]
    1 paths to exit 20
    [19]
  ebb entry:  20
    ebb type:   loop
    ebb blocks: [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]
    ebb cost:   (list_max([[88*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1); 88*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1); 86*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1); 146*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1); 146*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1); 144*I((ln7 + 1) != 64, ln7 = 0, ln7 = 0 + 1)]])) + (list_max([1; 1; 1; 1; 1; 1]))
    ebb exits:  [36 78]
    ebb succs:  [78 36]
    0 paths to exit 36

    6 paths to exit 78
    [20 21 23 24 25 28 29 32 33 34]
    [20 21 23 24 25 28 29 30 33 34]
    [20 21 23 24 25 26 33 34]
    [20 21 22 23 24 25 28 29 32 33 34]
    [20 21 22 23 24 25 28 29 30 33 34]
    [20 21 22 23 24 25 26 33 34]
    6 loop paths
    [20 21 23 24 25 28 29 32 33]    [20 21 23 24 25 28 29 30 33]    [20 21 23 24 25 26 33]    [20 21 22 23 24 25 28 29 32 33]    [20 21 22 23 24 25 28 29 30 33]    [20 21 22 23 24 25 26 33]
    6 post loop exit paths
    [34]    [34]    [34]    [34]    [34]    [34]
  ebb entry:  36
    ebb type:   block
    ebb blocks: [36 37]
    ebb cost:   1
    ebb exits:  [38 83]
    ebb succs:  [38]
    0 paths to exit 38

    1 paths to exit 83
    [36]
  ebb entry:  38
    ebb type:   block
    ebb blocks: [38 39 40]
    ebb cost:   list_max([23; 12])
    ebb exits:  [41]
    ebb succs:  [41]
    2 paths to exit 41
    [38 39 40]
    [38 39]
  ebb entry:  41
    ebb type:   block
    ebb blocks: [41]
    ebb cost:   3
    ebb exits:  [42]
    ebb succs:  [42]
    1 paths to exit 42
    [41]
  ebb entry:  42
    ebb type:   loop
    ebb blocks: [42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65]
    ebb cost:   (list_max([[57*I((ln10 + 1) != 64, ln10 = 0, ln10 = 0 + 1); 61*I((ln10 + 1) != 64, ln10 = 0, ln10 = 0 + 1); 93*I((ln10 + 1) != 64, ln10 = 0, ln10 = 0 + 1); 93*I((ln10 + 1) != 64, ln10 = 0, ln10 = 0 + 1); 91*I((ln10 + 1) != 64, ln10 = 0, ln10 = 0 + 1)]])) + (list_max([1; 1; 1; 1; 1]))
    ebb exits:  [66 78]
    ebb succs:  [78 66]
    0 paths to exit 66

    5 paths to exit 78
    [42 43 44 45 46 61 63 64]
    [42 43 44 45 46 61 62 63 64]
    [42 43 44 45 46 49 50 51 54 55 58 59 63 64]
    [42 43 44 45 46 49 50 51 54 55 56 59 63 64]
    [42 43 44 45 46 49 50 51 52 59 63 64]
    5 loop paths
    [42 43 44 45 46 61 63]    [42 43 44 45 46 61 62 63]    [42 43 44 45 46 49 50 51 54 55 58 59 63]    [42 43 44 45 46 49 50 51 54 55 56 59 63]    [42 43 44 45 46 49 50 51 52 59 63]
    5 post loop exit paths
    [64]    [64]    [64]    [64]    [64]
  ebb entry:  66
    ebb type:   block
    ebb blocks: [66 67]
    ebb cost:   1
    ebb exits:  [68 83]
    ebb succs:  [68]
    0 paths to exit 68

    1 paths to exit 83
    [66]
  ebb entry:  68
    ebb type:   block
    ebb blocks: [68 69 70]
    ebb cost:   list_max([23; 12])
    ebb exits:  [71]
    ebb succs:  [71]
    2 paths to exit 71
    [68 69 70]
    [68 69]
  ebb entry:  71
    ebb type:   block
    ebb blocks: [71]
    ebb cost:   list_max([215; 5])
    ebb exits:  [72]
    ebb succs:  [72]
    2 paths to exit 72
    [71 72]
    [71]
  ebb entry:  72
    ebb type:   loop
    ebb blocks: [72 73 74]
    ebb cost:   210*I((ln7 + 1) != 8, ln7 = 0 + 1, ln7 = 0 + 1) + 1
    ebb exits:  [75 78]
    ebb succs:  [78 75]
    0 paths to exit 75

    1 paths to exit 78
    [72 73]
    1 loop paths
    [72]
    1 post loop exit paths
    [73]
  ebb entry:  75
    ebb type:   block
    ebb blocks: [75 76 77]
    ebb cost:   1
    ebb exits:  [78 83]
    ebb succs:  [78]
    0 paths to exit 78

    1 paths to exit 83
    [75]
  ebb entry:  78
    ebb type:   block
    ebb blocks: [78 79]
    ebb cost:   list_max([12; 13])
    ebb exits:  [3 80]
    ebb succs:  [3]
    1 paths to exit 3
    [78]
    1 paths to exit 80
    [78 79]
ebb entry:  80
  ebb type:   block
  ebb blocks: [80]
  ebb cost:   1
  ebb exits:  [81]
  ebb succs:  [81]
  1 paths to exit 81
  [80]
ebb entry:  81
  ebb type:   block
  ebb blocks: [81 82]
  ebb cost:   1
  ebb exits:  [82]
  ebb succs:  []
  1 paths to exit 82
  [81]
ebb entry:  83
  ebb type:   block
  ebb blocks: [83]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
