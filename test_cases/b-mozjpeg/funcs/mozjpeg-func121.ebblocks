ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4]
  ebb cost:   40
  ebb exits:  [5 48]
  ebb succs:  [48 5]
  2 paths to exit 5
  [0 1 3 4]
  [0 1 2 3 4]
  2 paths to exit 48
  [0 1 3 4]
  [0 1 2 3 4]
ebb entry:  5
  ebb type:   block
  ebb blocks: [5]
  ebb cost:   8
  ebb exits:  [6]
  ebb succs:  [6]
  1 paths to exit 6
  [5]
ebb entry:  6
  ebb type:   loop
  ebb blocks: [6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44]
  ebb cost:   (list_max([44*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 50*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 52*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 59*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 65*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 67*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 65*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 65*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 62*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 56*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 56*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 50*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 56*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 58*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 65*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 71*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 73*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 71*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 71*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 68*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 62*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 62*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 45*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1); 48*I((ln3 + 1) < (i32.load@(pn0)), pn0 = pn0;ln3 = 0, pn0 = pn0;ln3 = 0 + 1)])) + 1
  ebb exits:  [45]
  ebb succs:  [45]
  24 paths to exit 45
  [6 7 8 16 17 37 38 42 43 44]
  [6 7 8 16 17 37 38 39 42 43 44]
  [6 7 8 16 17 37 38 39 40 43 44]
  [6 7 8 16 17 18 19 26 37 38 42 43 44]
  [6 7 8 16 17 18 19 26 37 38 39 42 43 44]
  [6 7 8 16 17 18 19 26 37 38 39 40 43 44]
  [6 7 8 16 17 18 19 26 27 28 31 32 35 43 44]
  [6 7 8 16 17 18 19 26 27 28 31 32 33 43 44]
  [6 7 8 16 17 18 19 26 27 28 29 43 44]
  [6 7 8 16 17 18 19 20 21 24 43 44]
  [6 7 8 16 17 18 19 20 21 22 43 44]
  [6 7 8 9 16 17 37 38 42 43 44]
  [6 7 8 9 16 17 37 38 39 42 43 44]
  [6 7 8 9 16 17 37 38 39 40 43 44]
  [6 7 8 9 16 17 18 19 26 37 38 42 43 44]
  [6 7 8 9 16 17 18 19 26 37 38 39 42 43 44]
  [6 7 8 9 16 17 18 19 26 37 38 39 40 43 44]
  [6 7 8 9 16 17 18 19 26 27 28 31 32 35 43 44]
  [6 7 8 9 16 17 18 19 26 27 28 31 32 33 43 44]
  [6 7 8 9 16 17 18 19 26 27 28 29 43 44]
  [6 7 8 9 16 17 18 19 20 21 24 43 44]
  [6 7 8 9 16 17 18 19 20 21 22 43 44]
  [6 7 8 9 10 11 14 43 44]
  [6 7 8 9 10 11 12 43 44]
  24 loop paths
  [6 7 8 16 17 37 38 42 43]  [6 7 8 16 17 37 38 39 42 43]  [6 7 8 16 17 37 38 39 40 43]  [6 7 8 16 17 18 19 26 37 38 42 43]  [6 7 8 16 17 18 19 26 37 38 39 42 43]  [6 7 8 16 17 18 19 26 37 38 39 40 43]  [6 7 8 16 17 18 19 26 27 28 31 32 35 43]  [6 7 8 16 17 18 19 26 27 28 31 32 33 43]  [6 7 8 16 17 18 19 26 27 28 29 43]  [6 7 8 16 17 18 19 20 21 24 43]  [6 7 8 16 17 18 19 20 21 22 43]  [6 7 8 9 16 17 37 38 42 43]  [6 7 8 9 16 17 37 38 39 42 43]  [6 7 8 9 16 17 37 38 39 40 43]  [6 7 8 9 16 17 18 19 26 37 38 42 43]  [6 7 8 9 16 17 18 19 26 37 38 39 42 43]  [6 7 8 9 16 17 18 19 26 37 38 39 40 43]  [6 7 8 9 16 17 18 19 26 27 28 31 32 35 43]  [6 7 8 9 16 17 18 19 26 27 28 31 32 33 43]  [6 7 8 9 16 17 18 19 26 27 28 29 43]  [6 7 8 9 16 17 18 19 20 21 24 43]  [6 7 8 9 16 17 18 19 20 21 22 43]  [6 7 8 9 10 11 14 43]  [6 7 8 9 10 11 12 43]
  24 post loop exit paths
  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]
ebb entry:  45
  ebb type:   block
  ebb blocks: [45 46 47]
  ebb cost:   17
  ebb exits:  [48]
  ebb succs:  [48]
  3 paths to exit 48
  [45 46 47]
  [45 46]
  [45]
ebb entry:  48
  ebb type:   block
  ebb blocks: [48 49]
  ebb cost:   1
  ebb exits:  [49]
  ebb succs:  []
  1 paths to exit 49
  [48]
