ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9]
  ebb cost:   30
  ebb exits:  [10]
  ebb succs:  [10]
  2 paths to exit 10
  [0 1 2 3 6 9]
  [0 1 2 3 4 8 9]
ebb entry:  10
  ebb type:   block
  ebb blocks: [10]
  ebb cost:   1
  ebb exits:  [11]
  ebb succs:  [11]
  1 paths to exit 11
  [10]
ebb entry:  11
  ebb type:   loop
  ebb blocks: [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90]
  ebb cost:   (list_max([29*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 37*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 18*I(ln6, ln6 = (pn1), ln6 = 1)])) + 110
  ebb exits:  [91 93 145]
  ebb succs:  [145 93 91]
  0 paths to exit 91

  21 paths to exit 93
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 42 43 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 42 43 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 42 43 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 42 43 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 42 43 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 42 43 55 56 57 58 59 60 61 62]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 27 43 55 56 57 58 59 60 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 27 43 55 56 57 58 59 60 61 64 65]
  [11 12 13 14 15 16 17 18 19 20 24 25 26 27 43 55 56 57 58 59 60 61 62]
  0 paths to exit 145

  3 loop paths
  [11 12 13 14 15 16 17 18 19 20 24 25 29 33 89]  [11 12 13 14 15 16 17 18 19 20 24 25 29 30 31]  [11 12 13 14 15 16 17 18 19 20 22 31]
  21 post loop exit paths
  [26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 64 65]  [26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 64 65]  [26 35 36 37 40 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 62]  [26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 64 65]  [26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 64 65]  [26 35 36 37 40 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 62]  [26 35 36 37 40 41 42 43 55 56 57 58 59 60 64 65]  [26 35 36 37 40 41 42 43 55 56 57 58 59 60 61 64 65]  [26 35 36 37 40 41 42 43 55 56 57 58 59 60 61 62]  [26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 64 65]  [26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 64 65]  [26 35 36 37 38 41 45 46 47 48 51 52 53 54 55 56 57 58 59 60 61 62]  [26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 64 65]  [26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 64 65]  [26 35 36 37 38 41 45 46 47 48 49 52 53 54 55 56 57 58 59 60 61 62]  [26 35 36 37 38 41 42 43 55 56 57 58 59 60 64 65]  [26 35 36 37 38 41 42 43 55 56 57 58 59 60 61 64 65]  [26 35 36 37 38 41 42 43 55 56 57 58 59 60 61 62]  [26 27 43 55 56 57 58 59 60 64 65]  [26 27 43 55 56 57 58 59 60 61 64 65]  [26 27 43 55 56 57 58 59 60 61 62]
  ebb entry:  11
    ebb type:   block
    ebb blocks: [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44]
    ebb cost:   60
    ebb exits:  [45 55 89]
    ebb succs:  [89 55 45]
    2 paths to exit 45
    [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41]
    [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41]
    3 paths to exit 55
    [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 40 41 42 43]
    [11 12 13 14 15 16 17 18 19 20 24 25 26 35 36 37 38 41 42 43]
    [11 12 13 14 15 16 17 18 19 20 24 25 26 27 43]
    1 paths to exit 89
    [11 12 13 14 15 16 17 18 19 20 24 25 29 33]
  ebb entry:  45
    ebb type:   block
    ebb blocks: [45]
    ebb cost:   3
    ebb exits:  [46]
    ebb succs:  [46]
    1 paths to exit 46
    [45]
  ebb entry:  46
    ebb type:   loop
    ebb blocks: [46 47 48 49 50 51 52 53]
    ebb cost:   (list_max([25*I(rn0 == 48, rn0 = rn0, rn0 = rn0); 30*I((i32.load8_u@(i32.load@(pn1))) == 48, pn1 = pn1, pn1 = pn1)])) + 1
    ebb exits:  [54]
    ebb succs:  [54]
    2 paths to exit 54
    [46 47 48 51 52 53]
    [46 47 48 49 52 53]
    2 loop paths
    [46 47 48 51 52]    [46 47 48 49 52]
    2 post loop exit paths
    [53]    [53]
  ebb entry:  54
    ebb type:   block
    ebb blocks: [54]
    ebb cost:   9
    ebb exits:  [55]
    ebb succs:  [55]
    1 paths to exit 55
    [54]
  ebb entry:  55
    ebb type:   block
    ebb blocks: [55]
    ebb cost:   3
    ebb exits:  [56]
    ebb succs:  [56]
    1 paths to exit 56
    [55]
  ebb entry:  56
    ebb type:   loop
    ebb blocks: [56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86]
    ebb cost:   (list_max([55*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 60*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 57*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 62*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 92*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 97*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 108*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 113*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 54*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 59*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 68*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 73*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 70*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 75*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 105*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 110*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 121*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 126*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 67*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 72*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 45*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 50*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 72*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 77*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 74*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 79*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 109*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 114*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 125*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 130*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 71*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 76*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 49*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 54*I(not((i32.load@(pn1)) == (i32.load@(pn1))), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1)])) + 3
    ebb exits:  [87 93]
    ebb succs:  [87]
    0 paths to exit 87

    3 paths to exit 93
    [56 57 58 59 60 64 65]
    [56 57 58 59 60 61 64 65]
    [56 57 58 59 60 61 62]
    34 loop paths
    [56 57 58 68 69 70 73 74 77 80 81 82 85]    [56 57 58 68 69 70 73 74 77 80 81 82 83]    [56 57 58 68 69 70 73 74 77 78 80 81 82 85]    [56 57 58 68 69 70 73 74 77 78 80 81 82 83]    [56 57 58 68 69 70 73 74 77 78 79 80 81 82 85]    [56 57 58 68 69 70 73 74 77 78 79 80 81 82 83]    [56 57 58 68 69 70 73 74 75 80 81 82 85]    [56 57 58 68 69 70 73 74 75 80 81 82 83]    [56 57 58 68 69 70 71 80 81 82 85]    [56 57 58 68 69 70 71 80 81 82 83]    [56 57 58 59 60 64 68 69 70 73 74 77 80 81 82 85]    [56 57 58 59 60 64 68 69 70 73 74 77 80 81 82 83]    [56 57 58 59 60 64 68 69 70 73 74 77 78 80 81 82 85]    [56 57 58 59 60 64 68 69 70 73 74 77 78 80 81 82 83]    [56 57 58 59 60 64 68 69 70 73 74 77 78 79 80 81 82 85]    [56 57 58 59 60 64 68 69 70 73 74 77 78 79 80 81 82 83]    [56 57 58 59 60 64 68 69 70 73 74 75 80 81 82 85]    [56 57 58 59 60 64 68 69 70 73 74 75 80 81 82 83]    [56 57 58 59 60 64 68 69 70 71 80 81 82 85]    [56 57 58 59 60 64 68 69 70 71 80 81 82 83]    [56 57 58 59 60 64 65 66 81 82 85]    [56 57 58 59 60 64 65 66 81 82 83]    [56 57 58 59 60 61 64 68 69 70 73 74 77 80 81 82 85]    [56 57 58 59 60 61 64 68 69 70 73 74 77 80 81 82 83]    [56 57 58 59 60 61 64 68 69 70 73 74 77 78 80 81 82 85]    [56 57 58 59 60 61 64 68 69 70 73 74 77 78 80 81 82 83]    [56 57 58 59 60 61 64 68 69 70 73 74 77 78 79 80 81 82 85]    [56 57 58 59 60 61 64 68 69 70 73 74 77 78 79 80 81 82 83]    [56 57 58 59 60 61 64 68 69 70 73 74 75 80 81 82 85]    [56 57 58 59 60 61 64 68 69 70 73 74 75 80 81 82 83]    [56 57 58 59 60 61 64 68 69 70 71 80 81 82 85]    [56 57 58 59 60 61 64 68 69 70 71 80 81 82 83]    [56 57 58 59 60 61 64 65 66 81 82 85]    [56 57 58 59 60 61 64 65 66 81 82 83]
    1 post loop exit paths
    [62]
  ebb entry:  87
    ebb type:   block
    ebb blocks: [87 88]
    ebb cost:   1
    ebb exits:  [89 145]
    ebb succs:  [89]
    0 paths to exit 89

    1 paths to exit 145
    [87]
  ebb entry:  89
    ebb type:   block
    ebb blocks: [89 90]
    ebb cost:   3
    ebb exits:  [11 91]
    ebb succs:  [11]
    1 paths to exit 11
    [89]
    0 paths to exit 91

ebb entry:  91
  ebb type:   block
  ebb blocks: [91 92]
  ebb cost:   1
  ebb exits:  [93 145]
  ebb succs:  [145 93]
  0 paths to exit 93

  1 paths to exit 145
  [91]
ebb entry:  93
  ebb type:   block
  ebb blocks: [93 94 95 96 97 98 99 100 101 102]
  ebb cost:   37
  ebb exits:  [103 107 143]
  ebb succs:  [143 107 103]
  1 paths to exit 103
  [93 94 95 101 102]
  1 paths to exit 107
  [93 94 95 101 102]
  2 paths to exit 143
  [93 94 95 96 97 99]
  [93 94 95 96 97 98 99]
ebb entry:  103
  ebb type:   block
  ebb blocks: [103]
  ebb cost:   14
  ebb exits:  [104]
  ebb succs:  [104]
  2 paths to exit 104
  [103 104]
  [103]
ebb entry:  104
  ebb type:   loop
  ebb blocks: [104 105]
  ebb cost:   11*I((lN9 + 1) != 8, lN9 = 0 + 1, lN9 = lN9 + 1) + 1
  ebb exits:  [106]
  ebb succs:  [106]
  1 paths to exit 106
  [104 105]
  1 loop paths
  [104]
  1 post loop exit paths
  [105]
ebb entry:  106
  ebb type:   block
  ebb blocks: [106]
  ebb cost:   1
  ebb exits:  [107]
  ebb succs:  [107]
  1 paths to exit 107
  [106]
ebb entry:  107
  ebb type:   block
  ebb blocks: [107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126]
  ebb cost:   90
  ebb exits:  [127 131 142 143]
  ebb succs:  [143 142 131 127]
  3 paths to exit 127
  [107 108 109 113 115 116 119 120 123 124 125 126]
  [107 108 109 113 114 115 116 119 120 123 124 125 126]
  [107 108 109 110 115 116 119 120 123 124 125 126]
  3 paths to exit 131
  [107 108 109 113 115 116 119 120 123 124 125 126]
  [107 108 109 113 114 115 116 119 120 123 124 125 126]
  [107 108 109 110 115 116 119 120 123 124 125 126]
  3 paths to exit 142
  [107 108 109 113 115 116 119 120 123 124]
  [107 108 109 113 114 115 116 119 120 123 124]
  [107 108 109 110 115 116 119 120 123 124]
  7 paths to exit 143
  [107 108 109 113 115 116 119 120 121]
  [107 108 109 113 115 116 117]
  [107 108 109 113 114 115 116 119 120 121]
  [107 108 109 113 114 115 116 117]
  [107 108 109 110 115 116 119 120 121]
  [107 108 109 110 115 116 117]
  [107 108 109 110 111]
ebb entry:  127
  ebb type:   block
  ebb blocks: [127]
  ebb cost:   63
  ebb exits:  [128]
  ebb succs:  [128]
  2 paths to exit 128
  [127 128]
  [127]
ebb entry:  128
  ebb type:   loop
  ebb blocks: [128 129]
  ebb cost:   62*I(((ln10 shl 1) || (rn0 > -1)) > -1, rn0 = rn0;ln10 = (0 shl 1) || (rn0 > -1), rn0 = rn0;ln10 = (0 shl 1) || (rn0 > -1)) + 1
  ebb exits:  [130]
  ebb succs:  [130]
  1 paths to exit 130
  [128 129]
  1 loop paths
  [128]
  1 post loop exit paths
  [129]
ebb entry:  130
  ebb type:   block
  ebb blocks: [130]
  ebb cost:   1
  ebb exits:  [131]
  ebb succs:  [131]
  1 paths to exit 131
  [130]
ebb entry:  131
  ebb type:   block
  ebb blocks: [131 132 133 134 135 136 137 138 139 140 141]
  ebb cost:   210
  ebb exits:  [142 143]
  ebb succs:  [143 142]
  0 paths to exit 142

  4 paths to exit 143
  [131 132 133 136 137 138 140]
  [131 132 133 136 137 138 139 140]
  [131 132 133 134 137 138 140]
  [131 132 133 134 137 138 139 140]
ebb entry:  142
  ebb type:   block
  ebb blocks: [142]
  ebb cost:   47
  ebb exits:  [143]
  ebb succs:  [143]
  1 paths to exit 143
  [142]
ebb entry:  143
  ebb type:   block
  ebb blocks: [143 144]
  ebb cost:   11
  ebb exits:  [144]
  ebb succs:  []
  1 paths to exit 144
  [143]
ebb entry:  145
  ebb type:   block
  ebb blocks: [145]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
