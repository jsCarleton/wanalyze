/**
 * @license
 * Copyright 2019 The Emscripten Authors
 * SPDX-License-Identifier: MIT
 */

// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 158960, "ZAAAAGQAAABkAAAAZAAAAAUAAAAAAAAAAAAAAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHQAAAB1AAAAWG4CAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABtAgBQcFIA");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 memory.grow = __wasm_memory_grow;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var _emval_take_value = env._emval_take_value;
 var _embind_register_value_object = env._embind_register_value_object;
 var _embind_finalize_value_object = env._embind_finalize_value_object;
 var _embind_register_value_object_field = env._embind_register_value_object_field;
 var _embind_register_function = env._embind_register_function;
 var _emval_incref = env._emval_incref;
 var _emval_decref = env._emval_decref;
 var exit = env.exit;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __wasi_fd_write = env.fd_write;
 var __wasi_fd_close = env.fd_close;
 var __wasi_environ_sizes_get = env.environ_sizes_get;
 var __wasi_environ_get = env.environ_get;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var abort = env.abort;
 var setTempRet0 = env.setTempRet0;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var legalimport$__wasi_fd_seek = env.fd_seek;
 var __stack_pointer = 5402704;
 var __stack_end = 0;
 var __stack_base = 0;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  emscripten_stack_init();
  __emscripten_environ_constructor();
  __embind_init_mozjpeg_28_29();
  __embind_register_native_and_builtin_types();
  init_pthread_self();
 }
 
 function jpeg_CreateCompress($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  label$1 : {
   if (($1 | 0) == (62 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 62;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 12;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = $1;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if (($2 | 0) == (376 | 0)) {
    break label$2
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 376;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 21;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = $2;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[$0 >> 2] | 0;
  $1 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  memset($0 + 4 | 0 | 0, 0 | 0, 372 | 0) | 0;
  HEAP32[($0 + 12 | 0) >> 2] = $1;
  HEAP32[$0 >> 2] = $2;
  jinit_memory_mgr($0 | 0);
  HEAP32[($0 + 368 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 68 | 0) >> 2] = 0;
  HEAP32[($0 + 72 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 92 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 100 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 108 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 116 | 0) >> 2] = 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1072693248;
  HEAP32[($0 + 48 | 0) >> 2] = 0;
  HEAP32[($0 + 52 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 100;
  HEAP32[($0 + 24 | 0) >> 2] = i64toi32_i32$0;
  $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, 5032) | 0;
  HEAP32[($0 + 332 | 0) >> 2] = $2;
  memset($2 | 0, 0 | 0, 5032 | 0) | 0;
  HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] = 1560820397;
 }
 
 function jpeg_destroy_compress($0) {
  $0 = $0 | 0;
  jpeg_destroy($0 | 0);
 }
 
 function jpeg_suppress_tables($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if (!$2) {
    break label$1
   }
   HEAP32[($2 + 128 | 0) >> 2] = $1;
  }
  label$2 : {
   $2 = HEAP32[($0 + 76 | 0) >> 2] | 0;
   if (!$2) {
    break label$2
   }
   HEAP32[($2 + 128 | 0) >> 2] = $1;
  }
  label$3 : {
   $2 = HEAP32[($0 + 80 | 0) >> 2] | 0;
   if (!$2) {
    break label$3
   }
   HEAP32[($2 + 128 | 0) >> 2] = $1;
  }
  label$4 : {
   $2 = HEAP32[($0 + 84 | 0) >> 2] | 0;
   if (!$2) {
    break label$4
   }
   HEAP32[($2 + 128 | 0) >> 2] = $1;
  }
  label$5 : {
   $2 = HEAP32[($0 + 88 | 0) >> 2] | 0;
   if (!$2) {
    break label$5
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$6 : {
   $2 = HEAP32[($0 + 104 | 0) >> 2] | 0;
   if (!$2) {
    break label$6
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$7 : {
   $2 = HEAP32[($0 + 92 | 0) >> 2] | 0;
   if (!$2) {
    break label$7
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$8 : {
   $2 = HEAP32[($0 + 108 | 0) >> 2] | 0;
   if (!$2) {
    break label$8
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$9 : {
   $2 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   if (!$2) {
    break label$9
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$10 : {
   $2 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   if (!$2) {
    break label$10
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$11 : {
   $2 = HEAP32[($0 + 100 | 0) >> 2] | 0;
   if (!$2) {
    break label$11
   }
   HEAP32[($2 + 276 | 0) >> 2] = $1;
  }
  label$12 : {
   $0 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   if (!$0) {
    break label$12
   }
   HEAP32[($0 + 276 | 0) >> 2] = $1;
  }
 }
 
 function jpeg_finish_compress($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      switch ($1 + -101 | 0 | 0) {
      case 2:
       break label$1;
      case 0:
      case 1:
       break label$4;
      default:
       break label$3;
      };
     }
     label$5 : {
      if ((HEAP32[($0 + 224 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0 + 32 | 0) >> 2] | 0) >>> 0) {
       break label$5
      }
      $1 = HEAP32[$0 >> 2] | 0;
      HEAP32[($1 + 20 | 0) >> 2] = 67;
      FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
     }
     $1 = (HEAP32[($0 + 332 | 0) >> 2] | 0) + 8 | 0;
     break label$2;
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 24 | 0) >> 2] = $1;
    HEAP32[($2 + 20 | 0) >> 2] = 20;
    $1 = HEAP32[$0 >> 2] | 0;
   }
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  label$6 : {
   $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   if (HEAP32[($1 + 16 | 0) >> 2] | 0) {
    break label$6
   }
   label$7 : while (1) {
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    $2 = 0;
    label$8 : {
     $3 = HEAP32[($0 + 240 | 0) >> 2] | 0;
     if (!$3) {
      break label$8
     }
     label$9 : while (1) {
      label$10 : {
       $1 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       if (!$1) {
        break label$10
       }
       HEAP32[($1 + 8 | 0) >> 2] = $3;
       HEAP32[($1 + 4 | 0) >> 2] = $2;
       FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
      }
      label$11 : {
       if (FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 344 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, 0) | 0) {
        break label$11
       }
       $1 = HEAP32[$0 >> 2] | 0;
       HEAP32[($1 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
      }
      $2 = $2 + 1 | 0;
      $3 = HEAP32[($0 + 240 | 0) >> 2] | 0;
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
    $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
    if (!(HEAP32[($1 + 16 | 0) >> 2] | 0)) {
     continue label$7
    }
    break label$7;
   };
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 348 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0);
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0);
  jpeg_abort($0 | 0);
 }
 
 function jpeg_start_compress($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($2 | 0) == (100 | 0)) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 24 | 0) >> 2] = $2;
   HEAP32[($3 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if (!$1) {
    break label$2
   }
   jpeg_suppress_tables($0 | 0, 0 | 0);
  }
  label$3 : {
   label$4 : {
    $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
    if (!(HEAP32[($1 + 4172 | 0) >> 2] | 0)) {
     break label$4
    }
    if (!(HEAP32[($0 + 172 | 0) >> 2] | 0)) {
     break label$4
    }
    if (HEAP32[($0 + 168 | 0) >> 2] | 0) {
     break label$3
    }
   }
   HEAP32[($1 + 20 | 0) >> 2] = 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0);
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
  jinit_compress_master($0 | 0);
  FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 332 | 0) >> 2] | 0) >> 2] | 0 | 0]($0);
  HEAP32[($0 + 224 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = HEAP32[($0 + 176 | 0) >> 2] | 0 ? 102 : 101;
 }
 
 function jpeg_write_scanlines($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($4 | 0) == (101 | 0)) {
    break label$1
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $4;
   HEAP32[($5 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if ((HEAP32[($0 + 224 | 0) >> 2] | 0) >>> 0 < (HEAP32[($0 + 32 | 0) >> 2] | 0) >>> 0) {
    break label$2
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 123;
   FUNCTION_TABLE[HEAP32[($4 + 4 | 0) >> 2] | 0 | 0]($0, -1);
  }
  label$3 : {
   $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$4) {
    break label$3
   }
   HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($0 + 224 | 0) >> 2] | 0;
   HEAP32[($4 + 8 | 0) >> 2] = HEAP32[($0 + 32 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  label$4 : {
   $4 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
    break label$4
   }
   FUNCTION_TABLE[HEAP32[($4 + 4 | 0) >> 2] | 0 | 0]($0);
  }
  $4 = HEAP32[($0 + 224 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 32 | 0) >> 2] | 0;
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  $4 = $5 - $4 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 336 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $1, $3 + 12 | 0, $4 >>> 0 < $2 >>> 0 ? $4 : $2);
  $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[($0 + 224 | 0) >> 2] = (HEAP32[($0 + 224 | 0) >> 2] | 0) + $2 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function jpeg_c_set_bool_param($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        if (($1 | 0) > (865946635 | 0)) {
         break label$6
        }
        label$7 : {
         if (($1 | 0) > (-517283224 | 0)) {
          break label$7
         }
         if (($1 | 0) == (-988667853 | 0)) {
          break label$5
         }
         if (($1 | 0) != (-671664256 | 0)) {
          break label$1
         }
         HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 32 | 0) >> 2] = $2;
         return;
        }
        if (($1 | 0) == (-517283223 | 0)) {
         break label$3
        }
        if (($1 | 0) != (-41675723 | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 40 | 0) >> 2] = $2;
        return;
       }
       label$8 : {
        if (($1 | 0) > (1061927928 | 0)) {
         break label$8
        }
        if (($1 | 0) == (865946636 | 0)) {
         break label$4
        }
        if (($1 | 0) != (865973855 | 0)) {
         break label$1
        }
        HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 36 | 0) >> 2] = $2;
        return;
       }
       if (($1 | 0) == (1061927929 | 0)) {
        break label$2
       }
       if (($1 | 0) != (1745618462 | 0)) {
        break label$1
       }
       HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 20 | 0) >> 2] = $2;
       return;
      }
      HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 24 | 0) >> 2] = $2;
      return;
     }
     HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 28 | 0) >> 2] = $2;
     return;
    }
    HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 48 | 0) >> 2] = $2;
    return;
   }
   HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 52 | 0) >> 2] = $2;
   return;
  }
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 127;
  FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
 }
 
 function jpeg_c_int_param_supported($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1 | 0) > (199732539 | 0)) {
      break label$3
     }
     if (($1 | 0) == (-1237401799 | 0)) {
      break label$1
     }
     if (($1 | 0) != (-376338907 | 0)) {
      break label$2
     }
     break label$1;
    }
    if (($1 | 0) == (199732540 | 0)) {
     break label$1
    }
    if (($1 | 0) == (1145645745 | 0)) {
     break label$1
    }
    if (($1 | 0) == (1873801511 | 0)) {
     break label$1
    }
   }
   $2 = 0;
  }
  return $2 | 0;
 }
 
 function jpeg_c_set_int_param($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         if (($1 | 0) > (199732539 | 0)) {
          break label$7
         }
         if (($1 | 0) == (-1237401799 | 0)) {
          break label$6
         }
         if (($1 | 0) != (-376338907 | 0)) {
          break label$3
         }
         label$8 : {
          if (($2 | 0) == (1560820397 | 0)) {
           break label$8
          }
          if (($2 | 0) != (720002228 | 0)) {
           break label$1
          }
         }
         HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] = $2;
         return;
        }
        if (($1 | 0) == (199732540 | 0)) {
         break label$4
        }
        if (($1 | 0) == (1145645745 | 0)) {
         break label$5
        }
        if (($1 | 0) != (1873801511 | 0)) {
         break label$3
        }
        HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4164 | 0) >> 2] = $2;
        return;
       }
       HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4168 | 0) >> 2] = $2;
       return;
      }
      if ($2 >>> 0 > 8 >>> 0) {
       break label$2
      }
      HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4160 | 0) >> 2] = $2;
      return;
     }
     HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4156 | 0) >> 2] = $2;
     return;
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 127;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   return;
  }
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 128;
  FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
 }
 
 function jpeg_c_get_int_param($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($1 | 0) > (199732539 | 0)) {
        break label$5
       }
       if (($1 | 0) == (-1237401799 | 0)) {
        break label$4
       }
       if (($1 | 0) != (-376338907 | 0)) {
        break label$1
       }
       return HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] | 0 | 0;
      }
      if (($1 | 0) == (199732540 | 0)) {
       break label$2
      }
      if (($1 | 0) == (1145645745 | 0)) {
       break label$3
      }
      if (($1 | 0) != (1873801511 | 0)) {
       break label$1
      }
      return HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4164 | 0) >> 2] | 0 | 0;
     }
     return HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4168 | 0) >> 2] | 0 | 0;
    }
    return HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4160 | 0) >> 2] | 0 | 0;
   }
   return HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4156 | 0) >> 2] | 0 | 0;
  }
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 127;
  FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  return -1 | 0;
 }
 
 function jinit_color_converter($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 12) | 0;
  HEAP32[($0 + 352 | 0) >> 2] = $1;
  HEAP32[$1 >> 2] = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         $2 = HEAP32[($0 + 40 | 0) >> 2] | 0;
         switch ($2 + -1 | 0 | 0) {
         case 3:
         case 4:
          break label$4;
         case 2:
          break label$5;
         case 1:
         case 5:
         case 6:
         case 7:
         case 8:
         case 9:
         case 10:
         case 11:
         case 12:
         case 13:
         case 14:
          break label$6;
         case 0:
          break label$7;
         default:
          break label$3;
         };
        }
        if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
         break label$2
        }
        break label$1;
       }
       if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (HEAP32[(($2 << 2 | 0) + 1024 | 0) >> 2] | 0 | 0)) {
        break label$2
       }
       break label$1;
      }
      if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (3 | 0)) {
       break label$2
      }
      break label$1;
     }
     if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) != (4 | 0)) {
      break label$2
     }
     break label$1;
    }
    if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$1
    }
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 9;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$8 : {
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        $2 = HEAP32[($0 + 64 | 0) >> 2] | 0;
        switch ($2 + -1 | 0 | 0) {
        case 3:
         break label$10;
        case 2:
         break label$11;
        case 1:
         break label$12;
        case 0:
         break label$13;
        case 4:
         break label$9;
        default:
         break label$8;
        };
       }
       label$14 : {
        if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (1 | 0)) {
         break label$14
        }
        $2 = HEAP32[$0 >> 2] | 0;
        HEAP32[($2 + 20 | 0) >> 2] = 10;
        FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
       }
       label$15 : {
        label$16 : {
         label$17 : {
          $2 = HEAP32[($0 + 40 | 0) >> 2] | 0;
          if (($2 + -6 | 0) >>> 0 < 10 >>> 0) {
           break label$17
          }
          label$18 : {
           switch ($2 + -1 | 0 | 0) {
           case 2:
            break label$16;
           case 1:
            break label$17;
           case 0:
            break label$18;
           default:
            break label$15;
           };
          }
          HEAP32[($1 + 4 | 0) >> 2] = 2;
          return;
         }
         label$19 : {
          if (!(jsimd_can_rgb_gray() | 0)) {
           break label$19
          }
          HEAP32[($1 + 4 | 0) >> 2] = 3;
          return;
         }
         HEAP32[($1 + 4 | 0) >> 2] = 4;
         HEAP32[$1 >> 2] = 5;
         return;
        }
        HEAP32[($1 + 4 | 0) >> 2] = 2;
        return;
       }
       $1 = HEAP32[$0 >> 2] | 0;
       HEAP32[($1 + 20 | 0) >> 2] = 27;
       FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
       return;
      }
      label$20 : {
       if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (3 | 0)) {
        break label$20
       }
       $2 = HEAP32[$0 >> 2] | 0;
       HEAP32[($2 + 20 | 0) >> 2] = 10;
       FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
      }
      label$21 : {
       $2 = HEAP32[($0 + 40 | 0) >> 2] | 0;
       if (!((4292 >>> $2 | 0) & 1 | 0)) {
        break label$21
       }
       if (!((13252 >>> $2 | 0) & 1 | 0)) {
        break label$21
       }
       if (!((324 >>> $2 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($1 + 4 | 0) >> 2] = 6;
       return;
      }
      label$22 : {
       label$23 : {
        if (($2 + -6 | 0) >>> 0 < 10 >>> 0) {
         break label$23
        }
        if (($2 | 0) != (2 | 0)) {
         break label$22
        }
       }
       HEAP32[($1 + 4 | 0) >> 2] = 7;
       return;
      }
      $1 = HEAP32[$0 >> 2] | 0;
      HEAP32[($1 + 20 | 0) >> 2] = 27;
      FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
      return;
     }
     label$24 : {
      if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (3 | 0)) {
       break label$24
      }
      $2 = HEAP32[$0 >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = 10;
      FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
     }
     label$25 : {
      label$26 : {
       label$27 : {
        $2 = HEAP32[($0 + 40 | 0) >> 2] | 0;
        if (($2 + -6 | 0) >>> 0 < 10 >>> 0) {
         break label$27
        }
        switch ($2 + -2 | 0 | 0) {
        case 1:
         break label$26;
        case 0:
         break label$27;
        default:
         break label$25;
        };
       }
       label$28 : {
        if (!(jsimd_can_rgb_ycc() | 0)) {
         break label$28
        }
        HEAP32[($1 + 4 | 0) >> 2] = 8;
        return;
       }
       HEAP32[($1 + 4 | 0) >> 2] = 9;
       HEAP32[$1 >> 2] = 5;
       return;
      }
      HEAP32[($1 + 4 | 0) >> 2] = 6;
      return;
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAP32[($1 + 20 | 0) >> 2] = 27;
     FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
     return;
    }
    label$29 : {
     if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$29
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 20 | 0) >> 2] = 10;
     FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
    }
    label$30 : {
     if ((HEAP32[($0 + 40 | 0) >> 2] | 0 | 0) != (4 | 0)) {
      break label$30
     }
     HEAP32[($1 + 4 | 0) >> 2] = 6;
     return;
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 27;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    return;
   }
   label$31 : {
    if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (4 | 0)) {
     break label$31
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 10;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   label$32 : {
    switch ((HEAP32[($0 + 40 | 0) >> 2] | 0) + -4 | 0 | 0) {
    case 0:
     HEAP32[($1 + 4 | 0) >> 2] = 10;
     HEAP32[$1 >> 2] = 5;
     return;
    case 1:
     HEAP32[($1 + 4 | 0) >> 2] = 6;
     return;
    default:
     break label$32;
    };
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 27;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   return;
  }
  label$35 : {
   label$36 : {
    if (($2 | 0) != (HEAP32[($0 + 40 | 0) >> 2] | 0 | 0)) {
     break label$36
    }
    if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 36 | 0) >> 2] | 0 | 0)) {
     break label$35
    }
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 27;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  HEAP32[($1 + 4 | 0) >> 2] = 6;
 }
 
 function null_method($0) {
  $0 = $0 | 0;
 }
 
 function grayscale_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $10 = 0, $11 = 0, $12 = 0, $8 = 0, $7 = 0, $9 = 0;
  label$1 : {
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = HEAP32[($0 + 36 | 0) >> 2] | 0;
   $7 = $5 & -4 | 0;
   $8 = $5 & 3 | 0;
   $9 = ($5 + -1 | 0) >>> 0 < 3 >>> 0;
   label$2 : while (1) {
    $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    $11 = 0;
    $0 = 0;
    $12 = 0;
    label$3 : {
     if ($9) {
      break label$3
     }
     label$4 : while (1) {
      HEAP8[($10 + $0 | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
      $5 = $5 + $6 | 0;
      HEAP8[($10 + ($0 | 1 | 0) | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
      $5 = $5 + $6 | 0;
      HEAP8[($10 + ($0 | 2 | 0) | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
      $5 = $5 + $6 | 0;
      HEAP8[($10 + ($0 | 3 | 0) | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
      $0 = $0 + 4 | 0;
      $5 = $5 + $6 | 0;
      $12 = $12 + 4 | 0;
      if (($12 | 0) != ($7 | 0)) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     if (!$8) {
      break label$5
     }
     label$6 : while (1) {
      HEAP8[($10 + $0 | 0) >> 0] = HEAPU8[$5 >> 0] | 0;
      $0 = $0 + 1 | 0;
      $5 = $5 + $6 | 0;
      $11 = $11 + 1 | 0;
      if (($11 | 0) != ($8 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $4 + -1 | 0;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function rgb_gray_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $8 = 0, $6 = 0, $5 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[($0 + 40 | 0) >> 2] | 0) + -6 | 0 | 0) {
    case 0:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$9 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$10 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 3 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$10
       }
       break label$10;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$9
      }
      break label$1;
     };
    case 1:
    case 6:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$11 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$12 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$11
      }
      break label$1;
     };
    case 2:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$13 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$14 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 3 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$14
       }
       break label$14;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$13
      }
      break label$1;
     };
    case 3:
    case 7:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$15 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$16 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$16
       }
       break label$16;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$15
      }
      break label$1;
     };
    case 4:
    case 8:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$17 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$18 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$18
       }
       break label$18;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$17
      }
      break label$1;
     };
    case 5:
    case 9:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$19 : while (1) {
      $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $8 = 0;
      label$20 : while (1) {
       HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($5 | 0)) {
        continue label$20
       }
       break label$20;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$19
      }
      break label$1;
     };
    default:
     break label$2;
    };
   }
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   label$21 : while (1) {
    $7 = HEAP32[((HEAP32[$2 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
    $0 = HEAP32[$1 >> 2] | 0;
    $8 = 0;
    label$22 : while (1) {
     HEAP8[($7 + $8 | 0) >> 0] = (((HEAP32[(($6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0) + 1024 | 0) >> 2] | 0) + (HEAP32[($6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0) >> 2] | 0) | 0) + (HEAP32[(($6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0) + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     $0 = $0 + 3 | 0;
     $8 = $8 + 1 | 0;
     if (($8 | 0) != ($5 | 0)) {
      continue label$22
     }
     break label$22;
    };
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $4 + -1 | 0;
    if ($0) {
     continue label$21
    }
    break label$21;
   };
  }
 }
 
 function rgb_ycc_start($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0;
  $4 = HEAP32[($0 + 352 | 0) >> 2] | 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 8192) | 0;
  HEAP32[($4 + 8 | 0) >> 2] = $1;
  $0 = 0;
  label$1 : while (1) {
   $2 = $1 + ($0 << 2 | 0) | 0;
   HEAP32[$2 >> 2] = Math_imul($0, 19595);
   HEAP32[($2 + 7168 | 0) >> 2] = Math_imul($0, -5329);
   HEAP32[($2 + 6144 | 0) >> 2] = Math_imul($0, -27439);
   HEAP32[($2 + 5120 | 0) >> 2] = ($0 << 15 | 0) + 8421375 | 0;
   HEAP32[($2 + 4096 | 0) >> 2] = Math_imul($0, -21709);
   HEAP32[($2 + 3072 | 0) >> 2] = Math_imul($0, -11059);
   HEAP32[($2 + 2048 | 0) >> 2] = Math_imul($0, 7471) + 32768 | 0;
   HEAP32[($2 + 1024 | 0) >> 2] = Math_imul($0, 38470);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (256 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function null_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0, $14 = 0, $6 = 0, $10 = 0, $5 = 0, $9 = 0, $11 = 0, $13 = 0, $7 = 0, $8 = 0;
  $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      switch ($6 + -3 | 0 | 0) {
      case 0:
       break label$3;
      case 1:
       break label$4;
      default:
       break label$2;
      };
     }
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     if (!$5) {
      break label$1
     }
     $7 = $5 & -2 | 0;
     $8 = $5 & 1 | 0;
     label$5 : while (1) {
      $0 = $3 << 2 | 0;
      $6 = HEAP32[((HEAP32[($2 + 12 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $11 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $12 = 0;
      $13 = 0;
      label$6 : {
       if (($5 | 0) == (1 | 0)) {
        break label$6
       }
       label$7 : while (1) {
        HEAP8[($11 + $12 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
        HEAP8[($10 + $12 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($9 + $12 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        HEAP8[($6 + $12 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
        $14 = $12 | 1 | 0;
        HEAP8[($11 + $14 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
        HEAP8[($10 + $14 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        HEAP8[($9 + $14 | 0) >> 0] = HEAPU8[($0 + 6 | 0) >> 0] | 0;
        HEAP8[($6 + $14 | 0) >> 0] = HEAPU8[($0 + 7 | 0) >> 0] | 0;
        $12 = $12 + 2 | 0;
        $0 = $0 + 8 | 0;
        $13 = $13 + 2 | 0;
        if (($13 | 0) != ($7 | 0)) {
         continue label$7
        }
        break label$7;
       };
      }
      label$8 : {
       if (!$8) {
        break label$8
       }
       HEAP8[($11 + $12 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
       HEAP8[($10 + $12 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($9 + $12 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       HEAP8[($6 + $12 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$5
      }
      break label$1;
     };
    }
    if (($4 | 0) < (1 | 0)) {
     break label$1
    }
    if (!$5) {
     break label$1
    }
    $13 = $5 & -2 | 0;
    $7 = $5 & 1 | 0;
    label$9 : while (1) {
     $0 = $3 << 2 | 0;
     $6 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
     $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
     $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
     $0 = HEAP32[$1 >> 2] | 0;
     $12 = 0;
     $11 = 0;
     label$10 : {
      if (($5 | 0) == (1 | 0)) {
       break label$10
      }
      label$11 : while (1) {
       HEAP8[($10 + $12 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
       HEAP8[($9 + $12 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($6 + $12 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       $14 = $12 | 1 | 0;
       HEAP8[($10 + $14 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
       HEAP8[($9 + $14 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
       HEAP8[($6 + $14 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
       $12 = $12 + 2 | 0;
       $0 = $0 + 6 | 0;
       $11 = $11 + 2 | 0;
       if (($11 | 0) != ($13 | 0)) {
        continue label$11
       }
       break label$11;
      };
     }
     label$12 : {
      if (!$7) {
       break label$12
      }
      HEAP8[($10 + $12 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
      HEAP8[($9 + $12 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
      HEAP8[($6 + $12 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
     }
     $3 = $3 + 1 | 0;
     $1 = $1 + 4 | 0;
     $0 = ($4 | 0) > (1 | 0);
     $4 = $4 + -1 | 0;
     if ($0) {
      continue label$9
     }
     break label$1;
    };
   }
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   if (($6 | 0) < (1 | 0)) {
    break label$1
   }
   if (!$5) {
    break label$1
   }
   $13 = $5 & -4 | 0;
   $11 = $5 & 3 | 0;
   $7 = ($5 + -1 | 0) >>> 0 < 3 >>> 0;
   label$13 : while (1) {
    $5 = $4 + -1 | 0;
    $14 = 0;
    label$14 : while (1) {
     $9 = HEAP32[((HEAP32[($2 + ($14 << 2 | 0) | 0) >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
     $12 = HEAP32[$1 >> 2] | 0;
     $0 = 0;
     $10 = 0;
     label$15 : {
      if ($7) {
       break label$15
      }
      label$16 : while (1) {
       HEAP8[($9 + $0 | 0) >> 0] = HEAPU8[($12 + $14 | 0) >> 0] | 0;
       $12 = $12 + $6 | 0;
       HEAP8[($9 + ($0 | 1 | 0) | 0) >> 0] = HEAPU8[($12 + $14 | 0) >> 0] | 0;
       $12 = $12 + $6 | 0;
       HEAP8[($9 + ($0 | 2 | 0) | 0) >> 0] = HEAPU8[($12 + $14 | 0) >> 0] | 0;
       $12 = $12 + $6 | 0;
       HEAP8[($9 + ($0 | 3 | 0) | 0) >> 0] = HEAPU8[($12 + $14 | 0) >> 0] | 0;
       $0 = $0 + 4 | 0;
       $12 = $12 + $6 | 0;
       $10 = $10 + 4 | 0;
       if (($10 | 0) != ($13 | 0)) {
        continue label$16
       }
       break label$16;
      };
     }
     $10 = 0;
     label$17 : {
      if (!$11) {
       break label$17
      }
      label$18 : while (1) {
       HEAP8[($9 + $0 | 0) >> 0] = HEAPU8[($12 + $14 | 0) >> 0] | 0;
       $0 = $0 + 1 | 0;
       $12 = $12 + $6 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($11 | 0)) {
        continue label$18
       }
       break label$18;
      };
     }
     $14 = $14 + 1 | 0;
     if (($14 | 0) != ($6 | 0)) {
      continue label$14
     }
     break label$14;
    };
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $5;
    if ($0) {
     continue label$13
    }
    break label$13;
   };
  }
 }
 
 function rgb_rgb_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $11 = 0, $5 = 0, $8 = 0, $9 = 0, $10 = 0, $12 = 0, $13 = 0, $6 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[($0 + 40 | 0) >> 2] | 0) + -6 | 0 | 0) {
    case 0:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$9 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$10 : {
       if (($5 | 0) == (1 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 6 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$11
        }
        break label$11;
       };
      }
      label$12 : {
       if (!$7) {
        break label$12
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$9
      }
      break label$1;
     };
    case 1:
    case 6:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$13 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$14 : {
       if (($5 | 0) == (1 | 0)) {
        break label$14
       }
       label$15 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 6 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 8 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$15
        }
        break label$15;
       };
      }
      label$16 : {
       if (!$7) {
        break label$16
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$13
      }
      break label$1;
     };
    case 2:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$17 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$18 : {
       if (($5 | 0) == (1 | 0)) {
        break label$18
       }
       label$19 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 6 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      label$20 : {
       if (!$7) {
        break label$20
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$17
      }
      break label$1;
     };
    case 3:
    case 7:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$21 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$22 : {
       if (($5 | 0) == (1 | 0)) {
        break label$22
       }
       label$23 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 6 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 8 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$23
        }
        break label$23;
       };
      }
      label$24 : {
       if (!$7) {
        break label$24
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$21
      }
      break label$1;
     };
    case 4:
    case 8:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$25 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$26 : {
       if (($5 | 0) == (1 | 0)) {
        break label$26
       }
       label$27 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 7 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 6 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 8 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$27
        }
        break label$27;
       };
      }
      label$28 : {
       if (!$7) {
        break label$28
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$25
      }
      break label$1;
     };
    case 5:
    case 9:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = $5 & -2 | 0;
     $7 = $5 & 1 | 0;
     label$29 : while (1) {
      $0 = $3 << 2 | 0;
      $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $11 = 0;
      $12 = 0;
      label$30 : {
       if (($5 | 0) == (1 | 0)) {
        break label$30
       }
       label$31 : while (1) {
        HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
        HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
        HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
        $13 = $11 | 1 | 0;
        HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
        HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 6 | 0) >> 0] | 0;
        HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 7 | 0) >> 0] | 0;
        $11 = $11 + 2 | 0;
        $0 = $0 + 8 | 0;
        $12 = $12 + 2 | 0;
        if (($12 | 0) != ($6 | 0)) {
         continue label$31
        }
        break label$31;
       };
      }
      label$32 : {
       if (!$7) {
        break label$32
       }
       HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
       HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
       HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
      }
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$29
      }
      break label$1;
     };
    default:
     break label$2;
    };
   }
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = $5 & -2 | 0;
   $7 = $5 & 1 | 0;
   label$33 : while (1) {
    $0 = $3 << 2 | 0;
    $8 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $9 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $10 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
    $0 = HEAP32[$1 >> 2] | 0;
    $11 = 0;
    $12 = 0;
    label$34 : {
     if (($5 | 0) == (1 | 0)) {
      break label$34
     }
     label$35 : while (1) {
      HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
      HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
      HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
      $13 = $11 | 1 | 0;
      HEAP8[($10 + $13 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
      HEAP8[($9 + $13 | 0) >> 0] = HEAPU8[($0 + 4 | 0) >> 0] | 0;
      HEAP8[($8 + $13 | 0) >> 0] = HEAPU8[($0 + 5 | 0) >> 0] | 0;
      $11 = $11 + 2 | 0;
      $0 = $0 + 6 | 0;
      $12 = $12 + 2 | 0;
      if (($12 | 0) != ($6 | 0)) {
       continue label$35
      }
      break label$35;
     };
    }
    label$36 : {
     if (!$7) {
      break label$36
     }
     HEAP8[($10 + $11 | 0) >> 0] = HEAPU8[$0 >> 0] | 0;
     HEAP8[($9 + $11 | 0) >> 0] = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     HEAP8[($8 + $11 | 0) >> 0] = HEAPU8[($0 + 2 | 0) >> 0] | 0;
    }
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $4 + -1 | 0;
    if ($0) {
     continue label$33
    }
    break label$33;
   };
  }
 }
 
 function rgb_ycc_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $10 = 0, $6 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   label$2 : {
    switch ((HEAP32[($0 + 40 | 0) >> 2] | 0) + -6 | 0 | 0) {
    case 0:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$9 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$10 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 3 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$10
       }
       break label$10;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$9
      }
      break label$1;
     };
    case 1:
    case 6:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$11 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$12 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$12
       }
       break label$12;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$11
      }
      break label$1;
     };
    case 2:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$13 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$14 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 3 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$14
       }
       break label$14;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$13
      }
      break label$1;
     };
    case 3:
    case 7:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$15 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$16 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$16
       }
       break label$16;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$15
      }
      break label$1;
     };
    case 4:
    case 8:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$17 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$18 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$18
       }
       break label$18;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$17
      }
      break label$1;
     };
    case 5:
    case 9:
     if (($4 | 0) < (1 | 0)) {
      break label$1
     }
     $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
     if (!$5) {
      break label$1
     }
     $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     label$19 : while (1) {
      $0 = $3 << 2 | 0;
      $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
      $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
      $0 = HEAP32[$1 >> 2] | 0;
      $10 = 0;
      label$20 : while (1) {
       $11 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
       $12 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
       $13 = $6 + ((HEAPU8[($0 + 3 | 0) >> 0] | 0) << 2 | 0) | 0;
       HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
       $0 = $0 + 4 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($5 | 0)) {
        continue label$20
       }
       break label$20;
      };
      $3 = $3 + 1 | 0;
      $1 = $1 + 4 | 0;
      $0 = ($4 | 0) > (1 | 0);
      $4 = $4 + -1 | 0;
      if ($0) {
       continue label$19
      }
      break label$1;
     };
    default:
     break label$2;
    };
   }
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   label$21 : while (1) {
    $0 = $3 << 2 | 0;
    $7 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $8 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $9 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
    $0 = HEAP32[$1 >> 2] | 0;
    $10 = 0;
    label$22 : while (1) {
     $11 = $6 + ((HEAPU8[($0 + 1 | 0) >> 0] | 0) << 2 | 0) | 0;
     $12 = $6 + ((HEAPU8[$0 >> 0] | 0) << 2 | 0) | 0;
     $13 = $6 + ((HEAPU8[($0 + 2 | 0) >> 0] | 0) << 2 | 0) | 0;
     HEAP8[($9 + $10 | 0) >> 0] = (((HEAP32[($11 + 1024 | 0) >> 2] | 0) + (HEAP32[$12 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     HEAP8[($8 + $10 | 0) >> 0] = (((HEAP32[($11 + 4096 | 0) >> 2] | 0) + (HEAP32[($12 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     HEAP8[($7 + $10 | 0) >> 0] = (((HEAP32[($11 + 6144 | 0) >> 2] | 0) + (HEAP32[($12 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     $0 = $0 + 3 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($5 | 0)) {
      continue label$22
     }
     break label$22;
    };
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $4 + -1 | 0;
    if ($0) {
     continue label$21
    }
    break label$21;
   };
  }
 }
 
 function cmyk_ycck_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  label$1 : {
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   if (!$5) {
    break label$1
   }
   $6 = HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
   label$2 : while (1) {
    $7 = $4 + -1 | 0;
    $0 = $3 << 2 | 0;
    $8 = HEAP32[((HEAP32[($2 + 12 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $9 = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $10 = HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + $0 | 0) >> 2] | 0;
    $11 = HEAP32[((HEAP32[$2 >> 2] | 0) + $0 | 0) >> 2] | 0;
    $0 = HEAP32[$1 >> 2] | 0;
    $12 = 0;
    label$3 : while (1) {
     $13 = HEAPU8[($0 + 2 | 0) >> 0] | 0;
     $14 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $15 = HEAPU8[$0 >> 0] | 0;
     HEAP8[($8 + $12 | 0) >> 0] = HEAPU8[($0 + 3 | 0) >> 0] | 0;
     $14 = $6 + (($14 ^ 255 | 0) << 2 | 0) | 0;
     $15 = $6 + (($15 ^ 255 | 0) << 2 | 0) | 0;
     $13 = $6 + (($13 ^ 255 | 0) << 2 | 0) | 0;
     HEAP8[($11 + $12 | 0) >> 0] = (((HEAP32[($14 + 1024 | 0) >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0) + (HEAP32[($13 + 2048 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     HEAP8[($10 + $12 | 0) >> 0] = (((HEAP32[($14 + 4096 | 0) >> 2] | 0) + (HEAP32[($15 + 3072 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 5120 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     HEAP8[($9 + $12 | 0) >> 0] = (((HEAP32[($14 + 6144 | 0) >> 2] | 0) + (HEAP32[($15 + 5120 | 0) >> 2] | 0) | 0) + (HEAP32[($13 + 7168 | 0) >> 2] | 0) | 0) >>> 16 | 0;
     $0 = $0 + 4 | 0;
     $12 = $12 + 1 | 0;
     if (($12 | 0) != ($5 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $3 = $3 + 1 | 0;
    $1 = $1 + 4 | 0;
    $0 = ($4 | 0) > (1 | 0);
    $4 = $7;
    if ($0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function quantize_trellis($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $15 = 0, $13 = 0, $17 = 0, $23 = 0, $12 = 0, $37 = Math_fround(0), $22 = 0, $25 = 0, $40 = Math_fround(0), $27 = 0, $36 = 0, $51 = 0, $16 = 0, $14 = 0, $21 = 0, $26 = 0, $42 = Math_fround(0), $43 = Math_fround(0), $53 = 0, $18 = 0, $49 = 0, $50 = 0, $20 = 0, $24 = 0, $38 = 0, $45 = 0, $52 = 0, $19 = 0, $31 = 0, $39 = 0, $41 = 0.0, $44 = 0, $47 = 0, $48 = 0, $54 = Math_fround(0), $35 = 0, $46 = 0, $55 = Math_fround(0), $140 = 0, $182 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = Math_fround(0), $245 = Math_fround(0), $441 = 0, $508 = 0, $1006 = Math_fround(0), $1066 = Math_fround(0), $1211 = 0, $1213 = 0.0;
  $12 = __stack_pointer - 1360 | 0;
  __stack_pointer = $12;
  $13 = (60 >>> 0) / ((HEAPU16[$6 >> 1] | 0) >>> 0) | 0;
  label$1 : {
   $14 = HEAP32[($0 + 320 | 0) >> 2] | 0;
   $15 = HEAP32[($0 + 316 | 0) >> 2] | 0;
   $16 = $15 ? $15 : 1;
   if (($14 | 0) < ($16 | 0)) {
    break label$1
   }
   $13 = $13 + 2 | 0 | 1 | 0;
   $17 = ($13 | 0) < (9 | 0);
   label$2 : {
    label$3 : {
     $15 = HEAP32[($0 + 332 | 0) >> 2] | 0;
     if (HEAP32[($15 + 32 | 0) >> 2] | 0) {
      break label$3
     }
     $18 = 0;
     $19 = 0;
     $20 = 0;
     $21 = 0;
     break label$2;
    }
    $22 = $5 << 2 | 0;
    $23 = $22 + 4 | 0;
    $21 = malloc($23 | 0) | 0;
    $20 = malloc($23 | 0) | 0;
    $19 = malloc($22 | 0) | 0;
    $18 = malloc($23 | 0) | 0;
    label$4 : {
     label$5 : {
      if (!$21) {
       break label$5
      }
      if (!$20) {
       break label$5
      }
      if (!$19) {
       break label$5
      }
      if ($18) {
       break label$4
      }
     }
     $15 = HEAP32[$0 >> 2] | 0;
     HEAP32[($15 + 20 | 0) >> 2] = 54;
     FUNCTION_TABLE[HEAP32[$15 >> 2] | 0 | 0]($0);
     $15 = HEAP32[($0 + 332 | 0) >> 2] | 0;
    }
    HEAP32[$21 >> 2] = 0;
    HEAP32[$20 >> 2] = 0;
    HEAP32[$18 >> 2] = 0;
   }
   $24 = $17 ? $13 : 9;
   label$6 : {
    if (!(HEAP32[($15 + 28 | 0) >> 2] | 0)) {
     break label$6
    }
    $25 = $5 << 1 | 0;
    $17 = $5 << 2 | 0;
    $15 = 0;
    label$7 : while (1) {
     $13 = $15 << 2 | 0;
     $23 = malloc($17 | 0) | 0;
     HEAP32[(($12 + 544 | 0) + $13 | 0) >> 2] = $23;
     $22 = malloc($17 | 0) | 0;
     HEAP32[(($12 + 496 | 0) + $13 | 0) >> 2] = $22;
     $140 = ($12 + 448 | 0) + $13 | 0;
     $13 = malloc($25 | 0) | 0;
     HEAP32[$140 >> 2] = $13;
     label$8 : {
      label$9 : {
       if (!$23) {
        break label$9
       }
       if (!$22) {
        break label$9
       }
       if ($13) {
        break label$8
       }
      }
      $13 = HEAP32[$0 >> 2] | 0;
      HEAP32[($13 + 20 | 0) >> 2] = 54;
      FUNCTION_TABLE[HEAP32[$13 >> 2] | 0 | 0]($0);
     }
     $15 = $15 + 1 | 0;
     if (($15 | 0) != ($24 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   $15 = 0;
   label$10 : while (1) {
    $13 = HEAPU16[($6 + ($15 << 1 | 0) | 0) >> 1] | 0;
    HEAPF32[(($12 + 192 | 0) + ($15 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / +(Math_imul($13, $13) | 0));
    $13 = $15 | 1 | 0;
    $182 = ($12 + 192 | 0) + ($13 << 2 | 0) | 0;
    $13 = HEAPU16[($6 + ($13 << 1 | 0) | 0) >> 1] | 0;
    HEAPF32[$182 >> 2] = Math_fround(1.0 / +(Math_imul($13, $13) | 0));
    $15 = $15 + 2 | 0;
    if (($15 | 0) != (64 | 0)) {
     continue label$10
    }
    break label$10;
   };
   $26 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   label$11 : {
    label$12 : {
     if ($5) {
      break label$12
     }
     $27 = HEAP32[($26 + 32 | 0) >> 2] | 0;
     break label$11;
    }
    $28 = ($10 | 0) != (0 | 0) & ($11 | 0) != (0 | 0) | 0;
    $29 = $24 >>> 1 | 0;
    $30 = ($12 + 1104 | 0) + ($14 << 2 | 0) | 0;
    $31 = $16 + -1 | 0;
    $15 = $31 << 2 | 0;
    $32 = ($12 + 848 | 0) + $15 | 0;
    $33 = ($12 + 1104 | 0) + $15 | 0;
    $34 = Math_fround(HEAPF32[($12 + 192 | 0) >> 2]);
    $35 = 1;
    $36 = 0;
    label$13 : while (1) {
     $15 = 1;
     $37 = Math_fround(0.0);
     label$14 : while (1) {
      $38 = $36 << 7 | 0;
      $39 = $4 + $38 | 0;
      $13 = $39 + ($15 << 1 | 0) | 0;
      $17 = HEAP16[$13 >> 1] | 0;
      $245 = Math_fround($37 + Math_fround(Math_imul($17, $17) | 0));
      $17 = HEAP16[($13 + 2 | 0) >> 1] | 0;
      $13 = HEAP16[($13 + 4 | 0) >> 1] | 0;
      $37 = Math_fround(Math_fround($245 + Math_fround(Math_imul($17, $17) | 0)) + Math_fround(Math_imul($13, $13) | 0));
      $15 = $15 + 3 | 0;
      if (($15 | 0) != (64 | 0)) {
       continue label$14
      }
      break label$14;
     };
     label$15 : {
      label$16 : {
       $40 = Math_fround(HEAPF32[($26 + 4200 | 0) >> 2]);
       if (!($40 > Math_fround(0.0))) {
        break label$16
       }
       $41 = +exp2(+(+$40));
       $41 = +exp2(+(+Math_fround(HEAPF32[($26 + 4196 | 0) >> 2]))) / ($41 + +Math_fround($37 / Math_fround(63.0)));
       break label$15;
      }
      $41 = +exp2(+(+Math_fround(HEAPF32[($26 + 4196 | 0) >> 2]) + -12.0));
     }
     HEAP32[$33 >> 2] = 0;
     HEAP32[$32 >> 2] = 0;
     $42 = Math_fround($41);
     label$17 : {
      if (!(HEAP32[($26 + 28 | 0) >> 2] | 0)) {
       break label$17
      }
      $43 = Math_fround($34 * $42);
      $13 = HEAPU16[$6 >> 1] | 0;
      $15 = HEAP16[$39 >> 1] | 0;
      $17 = $15 >> 31 | 0;
      $44 = ($15 ^ $17 | 0) - $17 | 0;
      $45 = $13 << 3 | 0;
      $46 = (((($13 << 2 | 0) + $44 | 0) >>> 0) / ($45 >>> 0) | 0) - $29 | 0;
      $0 = $36 + -1 | 0;
      $47 = $10 + $38 | 0;
      $48 = $11 + $38 | 0;
      $49 = $15 >> 30 | 0 | 1 | 0;
      $50 = 0;
      label$18 : while (1) {
       $23 = $50 << 2 | 0;
       $17 = HEAP32[(($12 + 448 | 0) + $23 | 0) >> 2] | 0;
       $15 = ($50 + $46 | 0) << 16 | 0;
       $13 = $15 >> 16 | 0;
       $15 = ($15 | 0) > (67043328 | 0) ? 1023 : ($13 | 0) > (-1023 | 0) ? $13 : -1023;
       $51 = Math_imul($15, $49);
       HEAP16[($17 + ($36 << 1 | 0) | 0) >> 1] = $51;
       $15 = Math_imul($45, $15) - $44 | 0;
       $40 = Math_fround($43 * Math_fround(Math_imul($15, $15) | 0));
       label$19 : {
        if (!$28) {
         break label$19
        }
        $37 = Math_fround(HEAPF32[($26 + 4204 | 0) >> 2]);
        if (!($37 > Math_fround(0.0))) {
         break label$19
        }
        $15 = Math_imul((($51 << 16 | 0) >> 16 | 0) - (HEAP16[$47 >> 1] | 0) | 0, $45) + ((HEAP16[$48 >> 1] | 0) - (HEAP16[$39 >> 1] | 0) | 0) | 0;
        $40 = Math_fround(Math_fround($37 * Math_fround(Math_fround($43 * Math_fround(Math_imul($15, $15) | 0)) - $40)) + $40);
       }
       label$20 : {
        label$21 : {
         if (!$36) {
          break label$21
         }
         $27 = $36 << 2 | 0;
         $25 = (HEAP32[(($12 + 544 | 0) + $23 | 0) >> 2] | 0) + $27 | 0;
         $52 = ($51 << 16 | 0) >> 16 | 0;
         $53 = ($12 + 496 | 0) + $23 | 0;
         $23 = 0;
         label$22 : while (1) {
          $13 = 0;
          label$23 : {
           $22 = $23 << 2 | 0;
           $15 = HEAPU16[((HEAP32[(($12 + 448 | 0) + $22 | 0) >> 2] | 0) + ($0 << 1 | 0) | 0) >> 1] | 0;
           if (($51 & 65535 | 0 | 0) == ($15 | 0)) {
            break label$23
           }
           $15 = $52 - (($15 << 16 | 0) >> 16 | 0) | 0;
           $441 = $15;
           $15 = $15 >> 31 | 0;
           $15 = ($441 ^ $15 | 0) - $15 | 0;
           $13 = 0;
           label$24 : while (1) {
            $13 = $13 + 1 | 0;
            $17 = $15 >>> 0 > 1 >>> 0;
            $15 = $15 >>> 1 | 0;
            if ($17) {
             continue label$24
            }
            break label$24;
           };
          }
          $37 = Math_fround(Math_fround(HEAPF32[((HEAP32[(($12 + 544 | 0) + $22 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2]) + Math_fround($40 + Math_fround($13 + (HEAP8[(($1 + $13 | 0) + 1024 | 0) >> 0] | 0) | 0 | 0)));
          label$25 : {
           label$26 : {
            if (!$23) {
             break label$26
            }
            if (!($37 < Math_fround(HEAPF32[$25 >> 2]))) {
             break label$25
            }
           }
           HEAPF32[$25 >> 2] = $37;
           HEAP32[((HEAP32[$53 >> 2] | 0) + $27 | 0) >> 2] = $23;
          }
          $23 = $23 + 1 | 0;
          if (($23 | 0) != ($24 | 0)) {
           continue label$22
          }
          break label$20;
         };
        }
        $13 = 0;
        label$27 : {
         $15 = HEAPU16[$17 >> 1] | 0;
         $17 = HEAPU16[$9 >> 1] | 0;
         if (($15 | 0) == ($17 | 0)) {
          break label$27
         }
         $15 = (($15 << 16 | 0) >> 16 | 0) - (($17 << 16 | 0) >> 16 | 0) | 0;
         $508 = $15;
         $15 = $15 >> 31 | 0;
         $15 = ($508 ^ $15 | 0) - $15 | 0;
         $13 = 0;
         label$28 : while (1) {
          $13 = $13 + 1 | 0;
          $17 = $15 >>> 0 > 1 >>> 0;
          $15 = $15 >>> 1 | 0;
          if ($17) {
           continue label$28
          }
          break label$28;
         };
        }
        HEAPF32[(HEAP32[(($12 + 544 | 0) + $23 | 0) >> 2] | 0) >> 2] = Math_fround($40 + Math_fround($13 + (HEAP8[(($1 + $13 | 0) + 1024 | 0) >> 0] | 0) | 0 | 0));
        HEAP32[(HEAP32[(($12 + 496 | 0) + $23 | 0) >> 2] | 0) >> 2] = -1;
       }
       $50 = $50 + 1 | 0;
       if (($50 | 0) != ($24 | 0)) {
        continue label$18
       }
       break label$18;
      };
     }
     $43 = Math_fround(0.0);
     $15 = $16;
     label$29 : while (1) {
      $49 = $15;
      $27 = $15 << 2 | 0;
      $17 = HEAP32[(144016 + $27 | 0) >> 2] | 0;
      $53 = $17 << 1 | 0;
      $13 = HEAPU16[($6 + $53 | 0) >> 1] | 0;
      $15 = HEAP16[($39 + $53 | 0) >> 1] | 0;
      $37 = Math_fround(HEAPF32[(($12 + 192 | 0) + ($17 << 2 | 0) | 0) >> 2]);
      $43 = Math_fround(Math_fround(Math_fround($42 * Math_fround(Math_imul($15, $15) | 0)) * $37) + $43);
      HEAPF32[(($12 + 1104 | 0) + $27 | 0) >> 2] = $43;
      label$30 : {
       label$31 : {
        $23 = $13 << 3 | 0;
        $52 = $15 >> 31 | 0;
        $22 = ($15 ^ $52 | 0) - $52 | 0;
        $15 = ($13 << 2 | 0) + $22 | 0;
        if ($23 >>> 0 <= $15 >>> 0) {
         break label$31
        }
        HEAP16[(($3 + $38 | 0) + $53 | 0) >> 1] = 0;
        HEAP32[(($12 + 848 | 0) + $27 | 0) >> 2] = 2123789977;
        break label$30;
       }
       label$32 : {
        $15 = ($15 >>> 0) / ($23 >>> 0) | 0;
        $25 = $15 >>> 0 < 1023 >>> 0 ? $15 : 1023;
        $0 = HEAPU8[($25 + 1104 | 0) >> 0] | 0;
        if (!$0) {
         break label$32
        }
        $51 = $0 + -1 | 0;
        $15 = 0;
        label$33 : while (1) {
         $13 = $15 << 2 | 0;
         $17 = $15 + 1 | 0;
         HEAP32[(($12 + 64 | 0) + $13 | 0) >> 2] = $17;
         $15 = ($15 | 0) < ($51 | 0) ? (2 << $15 | 0) + -1 | 0 : $25;
         HEAP32[(($12 + 128 | 0) + $13 | 0) >> 2] = $15;
         $15 = Math_imul($15, $23) - $22 | 0;
         HEAPF32[($12 + $13 | 0) >> 2] = Math_fround($37 * Math_fround($42 * Math_fround(Math_imul($15, $15) | 0)));
         $15 = $17;
         if (($15 | 0) != ($0 | 0)) {
          continue label$33
         }
         break label$33;
        };
       }
       $45 = ($12 + 848 | 0) + $27 | 0;
       HEAP32[$45 >> 2] = 2123789977;
       if (($16 | 0) > ($49 | 0)) {
        break label$30
       }
       if (!$0) {
        break label$30
       }
       $47 = $49 + -1 | 0;
       $50 = ($12 + 1104 | 0) + ($47 << 2 | 0) | 0;
       $48 = $3 + $38 | 0;
       $44 = $48 + $53 | 0;
       $46 = ($12 + 592 | 0) + $27 | 0;
       $22 = $0 >>> 0 > 1 >>> 0 ? $0 : 1;
       $40 = Math_fround(9999999680285692465065626.0e13);
       $25 = $31;
       label$34 : while (1) {
        label$35 : {
         label$36 : {
          if (($25 | 0) == ($31 | 0)) {
           break label$36
          }
          if (!(HEAPU16[($48 + ((HEAP32[(144016 + ($25 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0)) {
           break label$35
          }
         }
         $15 = HEAP8[($2 + 1264 | 0) >> 0] | 0;
         label$37 : {
          $13 = $47 - $25 | 0;
          if ($13 >>> 0 < 16 >>> 0) {
           break label$37
          }
          if (!$15) {
           break label$35
          }
         }
         $0 = ($13 << 4 | 0) & 240 | 0;
         $51 = Math_imul($13 >> 4 | 0, $15);
         $15 = $25 << 2 | 0;
         $27 = ($12 + 848 | 0) + $15 | 0;
         $53 = ($12 + 1104 | 0) + $15 | 0;
         $15 = 0;
         label$38 : while (1) {
          label$39 : {
           $13 = $15 << 2 | 0;
           $17 = HEAP32[(($12 + 64 | 0) + $13 | 0) >> 2] | 0;
           $23 = HEAP8[(($2 + ($17 + $0 | 0) | 0) + 1024 | 0) >> 0] | 0;
           if (!$23) {
            break label$39
           }
           $37 = Math_fround(Math_fround(Math_fround(HEAPF32[($12 + $13 | 0) >> 2]) + Math_fround(($17 + $51 | 0) + $23 | 0 | 0)) + Math_fround(Math_fround(Math_fround(HEAPF32[$50 >> 2]) - Math_fround(HEAPF32[$53 >> 2])) + Math_fround(HEAPF32[$27 >> 2])));
           if (!($37 < $40)) {
            break label$39
           }
           HEAP16[$44 >> 1] = ((HEAP32[(($12 + 128 | 0) + $13 | 0) >> 2] | 0) ^ $52 | 0) - $52 | 0;
           HEAPF32[$45 >> 2] = $37;
           HEAP32[$46 >> 2] = $25;
           $40 = $37;
          }
          $15 = $15 + 1 | 0;
          if (($15 | 0) != ($22 | 0)) {
           continue label$38
          }
          break label$38;
         };
        }
        $25 = $25 + 1 | 0;
        if (($25 | 0) != ($49 | 0)) {
         continue label$34
        }
        break label$34;
       };
      }
      $15 = $49 + 1 | 0;
      if (($49 | 0) != ($14 | 0)) {
       continue label$29
      }
      break label$29;
     };
     $54 = Math_fround(HEAPF32[$30 >> 2]);
     $55 = Math_fround(HEAP8[($2 + 1024 | 0) >> 0] | 0 | 0);
     $37 = Math_fround($54 + $55);
     $15 = $16;
     $23 = $31;
     $40 = $54;
     label$40 : while (1) {
      label$41 : {
       $13 = $3 + $38 | 0;
       $17 = $15 << 2 | 0;
       if (!(HEAPU16[($13 + ((HEAP32[(144016 + $17 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0)) {
        break label$41
       }
       $42 = Math_fround(Math_fround($54 + Math_fround(HEAPF32[(($12 + 848 | 0) + $17 | 0) >> 2])) - Math_fround(HEAPF32[(($12 + 1104 | 0) + $17 | 0) >> 2]));
       $43 = Math_fround((($15 | 0) < ($14 | 0) ? $55 : Math_fround(-0.0)) + $42);
       $17 = $43 < $37;
       $37 = $17 ? $43 : $37;
       $40 = $17 ? $42 : $40;
       $23 = $17 ? $15 : $23;
      }
      $17 = ($15 | 0) != ($14 | 0);
      $15 = $15 + 1 | 0;
      if ($17) {
       continue label$40
      }
      break label$40;
     };
     $25 = (($23 | 0) < ($14 | 0)) + (($23 | 0) == ($31 | 0)) | 0;
     $15 = $14;
     label$42 : while (1) {
      label$43 : {
       label$44 : {
        if (($15 | 0) > ($23 | 0)) {
         break label$44
        }
        $23 = $15;
        break label$43;
       }
       $22 = $15 + ($23 ^ -1 | 0) | 0;
       $17 = 0;
       label$45 : {
        $0 = ($15 - $23 | 0) & 3 | 0;
        if (!$0) {
         break label$45
        }
        label$46 : while (1) {
         HEAP16[($13 + ((HEAP32[(144016 + ($15 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
         $15 = $15 + -1 | 0;
         $17 = $17 + 1 | 0;
         if (($17 | 0) != ($0 | 0)) {
          continue label$46
         }
         break label$46;
        };
       }
       if ($22 >>> 0 < 3 >>> 0) {
        break label$43
       }
       label$47 : while (1) {
        $17 = 144016 + ($15 << 2 | 0) | 0;
        HEAP16[($13 + ((HEAP32[$17 >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($13 + ((HEAP32[($17 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($13 + ((HEAP32[($17 + -8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($13 + ((HEAP32[($17 + -12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        $15 = $15 + -4 | 0;
        if (($15 | 0) > ($23 | 0)) {
         continue label$47
        }
        break label$47;
       };
      }
      $15 = $23 + -1 | 0;
      $17 = ($23 | 0) > ($16 | 0);
      $23 = HEAP32[(($12 + 592 | 0) + ($23 << 2 | 0) | 0) >> 2] | 0;
      if ($17) {
       continue label$42
      }
      break label$42;
     };
     label$48 : {
      label$49 : {
       $27 = HEAP32[($26 + 32 | 0) >> 2] | 0;
       if ($27) {
        break label$49
       }
       $36 = $36 + 1 | 0;
       break label$48;
      }
      $51 = $36 + 1 | 0;
      $15 = $51 << 2 | 0;
      $13 = $36 << 2 | 0;
      $23 = $21 + $13 | 0;
      HEAPF32[($21 + $15 | 0) >> 2] = Math_fround($54 + Math_fround(HEAPF32[$23 >> 2]));
      HEAP32[($18 + $15 | 0) >> 2] = $25;
      label$50 : {
       if (($25 | 0) == (2 | 0)) {
        break label$50
       }
       $0 = $20 + $15 | 0;
       $22 = $19 + $13 | 0;
       $42 = Math_fround(9999999680285692465065626.0e13);
       $15 = 0;
       label$51 : while (1) {
        label$52 : {
         $13 = $15 << 2 | 0;
         $17 = HEAP32[($18 + $13 | 0) >> 2] | 0;
         if (($17 | 0) == (2 | 0)) {
          break label$52
         }
         $1006 = Math_fround(Math_fround(Math_fround($40 + Math_fround(HEAPF32[$23 >> 2])) - Math_fround(HEAPF32[($21 + $13 | 0) >> 2])) + Math_fround(HEAPF32[($20 + $13 | 0) >> 2]));
         $13 = HEAPU8[((($36 - $15 | 0) + $17 | 0) + 1104 | 0) >> 0] | 0;
         $37 = Math_fround($1006 + Math_fround((HEAP8[(($2 + ($13 << 4 | 0) | 0) + 1024 | 0) >> 0] | 0) + $13 | 0 | 0));
         if (!($37 < $42)) {
          break label$52
         }
         HEAP32[$22 >> 2] = $15;
         HEAPF32[$0 >> 2] = $37;
         $42 = $37;
        }
        $15 = $15 + 1 | 0;
        if (($15 | 0) != ($35 | 0)) {
         continue label$51
        }
        break label$51;
       };
      }
      $36 = $51;
     }
     $35 = $35 + 1 | 0;
     if (($36 | 0) != ($5 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   label$53 : {
    if (!$27) {
     break label$53
    }
    $23 = $21 + ($5 << 2 | 0) | 0;
    $37 = Math_fround(9999999680285692465065626.0e13);
    $15 = 0;
    $22 = $5;
    label$54 : while (1) {
     label$55 : {
      $13 = $15 << 2 | 0;
      $17 = HEAP32[($18 + $13 | 0) >> 2] | 0;
      if (($17 | 0) == (2 | 0)) {
       break label$55
      }
      $1066 = Math_fround(Math_fround(Math_fround(HEAPF32[$23 >> 2]) + Math_fround(0.0)) - Math_fround(HEAPF32[($21 + $13 | 0) >> 2]));
      $13 = HEAPU8[((($5 - $15 | 0) + $17 | 0) + 1104 | 0) >> 0] | 0;
      $40 = Math_fround($1066 + Math_fround((HEAP8[(($2 + ($13 << 4 | 0) | 0) + 1024 | 0) >> 0] | 0) + $13 | 0 | 0));
      $13 = $40 < $37;
      $37 = $13 ? $40 : $37;
      $22 = $13 ? $15 : $22;
     }
     $13 = ($15 | 0) == ($5 | 0);
     $15 = $15 + 1 | 0;
     if (!$13) {
      continue label$54
     }
     break label$54;
    };
    label$56 : {
     $23 = $5 + -1 | 0;
     if (($23 | 0) < (0 | 0)) {
      break label$56
     }
     $0 = ($14 | 0) > ($16 | 0) ? $14 : $16;
     $25 = $0 - $16 | 0;
     $2 = ($25 + 1 | 0) & 3 | 0;
     label$57 : while (1) {
      label$58 : {
       if (($23 | 0) < ($22 | 0)) {
        break label$58
       }
       label$59 : while (1) {
        $13 = 0;
        $15 = $16;
        label$60 : {
         if (!$2) {
          break label$60
         }
         label$61 : while (1) {
          HEAP16[(($3 + ($23 << 7 | 0) | 0) + ((HEAP32[(144016 + ($15 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
          $15 = $15 + 1 | 0;
          $13 = $13 + 1 | 0;
          if (($13 | 0) != ($2 | 0)) {
           continue label$61
          }
          break label$61;
         };
        }
        label$62 : {
         if ($25 >>> 0 < 3 >>> 0) {
          break label$62
         }
         label$63 : while (1) {
          $13 = $3 + ($23 << 7 | 0) | 0;
          $17 = 144016 + ($15 << 2 | 0) | 0;
          HEAP16[($13 + ((HEAP32[$17 >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
          HEAP16[($13 + ((HEAP32[($17 + 4 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
          HEAP16[($13 + ((HEAP32[($17 + 8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
          $17 = $15 + 3 | 0;
          HEAP16[($13 + ((HEAP32[(144016 + ($17 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
          $15 = $15 + 4 | 0;
          if (($17 | 0) != ($0 | 0)) {
           continue label$63
          }
          break label$63;
         };
        }
        $15 = ($23 | 0) > ($22 | 0);
        $23 = $23 + -1 | 0;
        if ($15) {
         continue label$59
        }
        break label$59;
       };
      }
      $22 = HEAP32[($19 + ($23 << 2 | 0) | 0) >> 2] | 0;
      $15 = $23 + -1 | 0;
      $23 = $15;
      if (($15 | 0) > (-1 | 0)) {
       continue label$57
      }
      break label$57;
     };
    }
    free($21 | 0);
    free($20 | 0);
    free($19 | 0);
    free($18 | 0);
   }
   label$64 : {
    if (!(HEAP32[($26 + 48 | 0) >> 2] | 0)) {
     break label$64
    }
    if (!$5) {
     break label$64
    }
    $0 = 0;
    label$65 : while (1) {
     $15 = 1;
     label$66 : while (1) {
      $17 = $15 << 3 | 0;
      $13 = $7 + $17 | 0;
      $1211 = $13;
      $1213 = +HEAPF64[$13 >> 3];
      $23 = $0 << 7 | 0;
      $2 = $15 << 1 | 0;
      $13 = HEAP16[(($3 + $23 | 0) + $2 | 0) >> 1] | 0;
      HEAPF64[$1211 >> 3] = $1213 + +(Math_imul($13, HEAP16[(($4 + $23 | 0) + $2 | 0) >> 1] | 0) | 0);
      $17 = $8 + $17 | 0;
      HEAPF64[$17 >> 3] = +HEAPF64[$17 >> 3] + +(Math_imul($13, $13) << 3 | 0 | 0);
      $15 = $15 + 1 | 0;
      if (($15 | 0) != (64 | 0)) {
       continue label$66
      }
      break label$66;
     };
     $0 = $0 + 1 | 0;
     if (($0 | 0) != ($5 | 0)) {
      continue label$65
     }
     break label$65;
    };
   }
   if (!(HEAP32[($26 + 28 | 0) >> 2] | 0)) {
    break label$1
   }
   $22 = $24 + -3 | 0;
   $0 = $5 + -1 | 0;
   $17 = 0;
   $15 = 1;
   $23 = 0;
   label$67 : while (1) {
    $2 = $15 + 1 | 0;
    $13 = $0 << 2 | 0;
    $17 = Math_fround(HEAPF32[((HEAP32[(($12 + 544 | 0) + ($15 << 2 | 0) | 0) >> 2] | 0) + $13 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[(($12 + 544 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0) + $13 | 0) >> 2]) ? $15 : $17;
    $17 = Math_fround(HEAPF32[((HEAP32[(($12 + 544 | 0) + ($2 << 2 | 0) | 0) >> 2] | 0) + $13 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[(($12 + 544 | 0) + ($17 << 2 | 0) | 0) >> 2] | 0) + $13 | 0) >> 2]) ? $2 : $17;
    $15 = $15 + 2 | 0;
    $13 = ($23 | 0) != ($22 | 0);
    $23 = $23 + 2 | 0;
    if ($13) {
     continue label$67
    }
    break label$67;
   };
   $15 = 0;
   label$68 : {
    if (($0 | 0) < (0 | 0)) {
     break label$68
    }
    label$69 : {
     label$70 : {
      if ($5 & 1 | 0) {
       break label$70
      }
      $13 = $0;
      break label$69;
     }
     $13 = $17 << 2 | 0;
     HEAP16[($3 + ($0 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($12 + 448 | 0) + $13 | 0) >> 2] | 0) + ($0 << 1 | 0) | 0) >> 1] | 0;
     $17 = HEAP32[((HEAP32[(($12 + 496 | 0) + $13 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] | 0;
     $13 = $5 + -2 | 0;
    }
    if (!$0) {
     break label$68
    }
    label$71 : while (1) {
     $17 = $17 << 2 | 0;
     HEAP16[($3 + ($13 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($12 + 448 | 0) + $17 | 0) >> 2] | 0) + ($13 << 1 | 0) | 0) >> 1] | 0;
     $23 = $13 + -1 | 0;
     $17 = (HEAP32[((HEAP32[(($12 + 496 | 0) + $17 | 0) >> 2] | 0) + ($13 << 2 | 0) | 0) >> 2] | 0) << 2 | 0;
     HEAP16[($3 + ($23 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($12 + 448 | 0) + $17 | 0) >> 2] | 0) + ($23 << 1 | 0) | 0) >> 1] | 0;
     $17 = HEAP32[((HEAP32[(($12 + 496 | 0) + $17 | 0) >> 2] | 0) + ($23 << 2 | 0) | 0) >> 2] | 0;
     $13 = $13 + -2 | 0;
     if ($23) {
      continue label$71
     }
     break label$71;
    };
   }
   HEAP16[$9 >> 1] = HEAPU16[($3 + ($0 << 7 | 0) | 0) >> 1] | 0;
   label$72 : while (1) {
    $13 = $15 << 2 | 0;
    free(HEAP32[(($12 + 544 | 0) + $13 | 0) >> 2] | 0 | 0);
    free(HEAP32[(($12 + 496 | 0) + $13 | 0) >> 2] | 0 | 0);
    free(HEAP32[(($12 + 448 | 0) + $13 | 0) >> 2] | 0 | 0);
    $15 = $15 + 1 | 0;
    if (($15 | 0) != ($24 | 0)) {
     continue label$72
    }
    break label$72;
   };
  }
  __stack_pointer = $12 + 1360 | 0;
 }
 
 function quantize_trellis_arith($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $14 = 0, $12 = 0, $18 = 0, $32 = Math_fround(0), $11 = 0, $19 = 0, $20 = 0, $17 = 0, $21 = 0, $35 = Math_fround(0), $31 = 0, $43 = 0, $49 = 0, $54 = 0, $55 = Math_fround(0), $47 = 0, $15 = 0, $22 = 0, $38 = Math_fround(0), $48 = 0, $60 = Math_fround(0), $13 = 0, $16 = 0, $33 = 0, $41 = 0, $45 = 0, $27 = 0, $40 = 0, $50 = 0, $51 = 0, $34 = 0, $36 = 0.0, $37 = Math_fround(0), $53 = 0, $39 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $56 = Math_fround(0), $118 = 0, $162 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = Math_fround(0), $226 = Math_fround(0), $57 = 0, $58 = Math_fround(0), $59 = Math_fround(0), $814 = 0, $821 = Math_fround(0), $1252 = 0, $1254 = 0.0;
  $11 = __stack_pointer - 1344 | 0;
  __stack_pointer = $11;
  $12 = (60 >>> 0) / ((HEAPU16[$5 >> 1] | 0) >>> 0) | 0;
  label$1 : {
   $13 = HEAP32[($0 + 320 | 0) >> 2] | 0;
   $14 = HEAP32[($0 + 316 | 0) >> 2] | 0;
   $15 = $14 ? $14 : 1;
   if (($13 | 0) < ($15 | 0)) {
    break label$1
   }
   $14 = $12 + 2 | 0 | 1 | 0;
   $16 = ($14 | 0) < (9 | 0) ? $14 : 9;
   label$2 : {
    if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0)) {
     break label$2
    }
    $17 = $4 << 1 | 0;
    $12 = $4 << 2 | 0;
    $18 = 0;
    label$3 : while (1) {
     $14 = $18 << 2 | 0;
     $19 = malloc($12 | 0) | 0;
     HEAP32[(($11 + 528 | 0) + $14 | 0) >> 2] = $19;
     $20 = malloc($12 | 0) | 0;
     HEAP32[(($11 + 480 | 0) + $14 | 0) >> 2] = $20;
     $21 = malloc($17 | 0) | 0;
     HEAP32[(($11 + 432 | 0) + $14 | 0) >> 2] = $21;
     $118 = ($11 + 384 | 0) + $14 | 0;
     $14 = malloc($12 | 0) | 0;
     HEAP32[$118 >> 2] = $14;
     label$4 : {
      label$5 : {
       if (!$19) {
        break label$5
       }
       if (!$20) {
        break label$5
       }
       if (!$21) {
        break label$5
       }
       if ($14) {
        break label$4
       }
      }
      $14 = HEAP32[$0 >> 2] | 0;
      HEAP32[($14 + 20 | 0) >> 2] = 54;
      FUNCTION_TABLE[HEAP32[$14 >> 2] | 0 | 0]($0);
     }
     $18 = $18 + 1 | 0;
     if (($18 | 0) != ($16 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   $14 = 0;
   label$6 : while (1) {
    $12 = HEAPU16[($5 + ($14 << 1 | 0) | 0) >> 1] | 0;
    HEAPF32[(($11 + 128 | 0) + ($14 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / +(Math_imul($12, $12) | 0));
    $12 = $14 | 1 | 0;
    $162 = ($11 + 128 | 0) + ($12 << 2 | 0) | 0;
    $12 = HEAPU16[($5 + ($12 << 1 | 0) | 0) >> 1] | 0;
    HEAPF32[$162 >> 2] = Math_fround(1.0 / +(Math_imul($12, $12) | 0));
    $14 = $14 + 2 | 0;
    if (($14 | 0) != (64 | 0)) {
     continue label$6
    }
    break label$6;
   };
   $22 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   label$7 : {
    if (!$4) {
     break label$7
    }
    $23 = ($9 | 0) != (0 | 0) & ($10 | 0) != (0 | 0) | 0;
    $24 = $15 + -2 | 0;
    $25 = $16 >>> 1 | 0;
    $26 = ($11 + 1088 | 0) + ($13 << 2 | 0) | 0;
    $27 = $15 + -1 | 0;
    $14 = $27 << 2 | 0;
    $28 = ($11 + 832 | 0) + $14 | 0;
    $29 = ($11 + 1088 | 0) + $14 | 0;
    $30 = Math_fround(HEAPF32[($11 + 128 | 0) >> 2]);
    $31 = 0;
    label$8 : while (1) {
     $14 = 1;
     $32 = Math_fround(0.0);
     label$9 : while (1) {
      $33 = $31 << 7 | 0;
      $34 = $3 + $33 | 0;
      $12 = $34 + ($14 << 1 | 0) | 0;
      $18 = HEAP16[$12 >> 1] | 0;
      $226 = Math_fround($32 + Math_fround(Math_imul($18, $18) | 0));
      $18 = HEAP16[($12 + 2 | 0) >> 1] | 0;
      $12 = HEAP16[($12 + 4 | 0) >> 1] | 0;
      $32 = Math_fround(Math_fround($226 + Math_fround(Math_imul($18, $18) | 0)) + Math_fround(Math_imul($12, $12) | 0));
      $14 = $14 + 3 | 0;
      if (($14 | 0) != (64 | 0)) {
       continue label$9
      }
      break label$9;
     };
     label$10 : {
      label$11 : {
       $35 = Math_fround(HEAPF32[($22 + 4200 | 0) >> 2]);
       if (!($35 > Math_fround(0.0))) {
        break label$11
       }
       $36 = +exp2(+(+$35));
       $36 = +exp2(+(+Math_fround(HEAPF32[($22 + 4196 | 0) >> 2]))) / ($36 + +Math_fround($32 / Math_fround(63.0)));
       break label$10;
      }
      $36 = +exp2(+(+Math_fround(HEAPF32[($22 + 4196 | 0) >> 2]) + -12.0));
     }
     HEAP32[$29 >> 2] = 0;
     HEAP32[$28 >> 2] = 0;
     $37 = Math_fround($36);
     label$12 : {
      if (!(HEAP32[($22 + 28 | 0) >> 2] | 0)) {
       break label$12
      }
      $38 = Math_fround($30 * $37);
      $39 = $31 ? $16 : 1;
      $12 = HEAPU16[$5 >> 1] | 0;
      $14 = HEAP16[$34 >> 1] | 0;
      $18 = $14 >> 31 | 0;
      $40 = ($14 ^ $18 | 0) - $18 | 0;
      $41 = $12 << 3 | 0;
      $42 = (((($12 << 2 | 0) + $40 | 0) >>> 0) / ($41 >>> 0) | 0) - $25 | 0;
      $43 = $31 + -1 | 0;
      $44 = $9 + $33 | 0;
      $45 = $10 + $33 | 0;
      $46 = $14 >> 30 | 0 | 1 | 0;
      $47 = 0;
      label$13 : while (1) {
       $14 = $47 << 2 | 0;
       $12 = $47 + $42 | 0;
       $48 = Math_imul($12, $46);
       HEAP16[((HEAP32[(($11 + 432 | 0) + $14 | 0) >> 2] | 0) + ($31 << 1 | 0) | 0) >> 1] = $48;
       $12 = Math_imul(($12 << 16 | 0) >> 16 | 0, $41) - $40 | 0;
       $35 = Math_fround($38 * Math_fround(Math_imul($12, $12) | 0));
       label$14 : {
        if (!$23) {
         break label$14
        }
        $32 = Math_fround(HEAPF32[($22 + 4204 | 0) >> 2]);
        if (!($32 > Math_fround(0.0))) {
         break label$14
        }
        $12 = Math_imul((($48 << 16 | 0) >> 16 | 0) - (HEAP16[$44 >> 1] | 0) | 0, $41) + ((HEAP16[$45 >> 1] | 0) - (HEAP16[$34 >> 1] | 0) | 0) | 0;
        $35 = Math_fround(Math_fround($32 * Math_fround(Math_fround($38 * Math_fround(Math_imul($12, $12) | 0)) - $35)) + $35);
       }
       $49 = $31 << 2 | 0;
       $50 = (HEAP32[(($11 + 528 | 0) + $14 | 0) >> 2] | 0) + $49 | 0;
       $51 = ($48 << 16 | 0) >> 16 | 0;
       $52 = ($11 + 384 | 0) + $14 | 0;
       $53 = ($11 + 480 | 0) + $14 | 0;
       $21 = 0;
       label$15 : while (1) {
        $12 = $8;
        $14 = 0;
        label$16 : {
         if (!$31) {
          break label$16
         }
         $14 = $21 << 2 | 0;
         $12 = (HEAP32[(($11 + 432 | 0) + $14 | 0) >> 2] | 0) + ($43 << 1 | 0) | 0;
         $14 = HEAP32[((HEAP32[(($11 + 384 | 0) + $14 | 0) >> 2] | 0) + ($43 << 2 | 0) | 0) >> 2] | 0;
        }
        $19 = $1 + ($14 << 3 | 0) | 0;
        $12 = HEAPU16[$12 >> 1] | 0;
        $18 = $48 & 65535 | 0;
        $32 = Math_fround(HEAPF32[($19 + ((($12 | 0) != ($18 | 0)) << 2 | 0) | 0) >> 2]);
        $17 = 0;
        label$17 : {
         if (($12 | 0) == ($18 | 0)) {
          break label$17
         }
         $54 = $51 - (($12 << 16 | 0) >> 16 | 0) | 0;
         $12 = $54 >>> 31 | 0;
         $32 = Math_fround($32 + Math_fround(HEAPF32[(($19 + ($12 << 2 | 0) | 0) + 8 | 0) >> 2]));
         $17 = 0;
         $20 = ($14 + $12 | 0) + 2 | 0;
         label$18 : {
          label$19 : {
           $14 = $54 >> 31 | 0;
           $0 = ($14 ^ -1 | 0) + ($54 ^ $14 | 0) | 0;
           if ($0) {
            break label$19
           }
           $14 = 0;
           break label$18;
          }
          $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($20 << 3 | 0) | 0) + 4 | 0) >> 2]));
          $14 = 1;
          $12 = 20;
          $18 = $0;
          $20 = 20;
          if (($18 | 0) == (1 | 0)) {
           break label$18
          }
          label$20 : while (1) {
           $14 = $14 << 1 | 0;
           $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($12 << 3 | 0) | 0) + 4 | 0) >> 2]));
           $19 = $18 >>> 0 > 3 >>> 0;
           $20 = $12 + 1 | 0;
           $12 = $20;
           $18 = $18 >> 1 | 0;
           if ($19) {
            continue label$20
           }
           break label$20;
          };
         }
         $55 = Math_fround(HEAPF32[($1 + ($20 << 3 | 0) | 0) >> 2]);
         label$21 : {
          if (($14 | 0) < ((1 << (HEAP32[($1 + 2560 | 0) >> 2] | 0) | 0) >> 1 | 0 | 0)) {
           break label$21
          }
          $12 = ($54 | 0) < (0 | 0) ? 8 : 4;
          $17 = ($14 | 0) > ((1 << (HEAP32[($1 + 2564 | 0) >> 2] | 0) | 0) >> 1 | 0 | 0) ? $12 + 8 | 0 : $12;
         }
         $32 = Math_fround($32 + $55);
         if ($14 >>> 0 < 2 >>> 0) {
          break label$17
         }
         $19 = $20 + 14 | 0;
         label$22 : while (1) {
          $12 = $14 >> 1 | 0;
          $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($19 << 3 | 0) | 0) + ((($12 & $0 | 0 | 0) != (0 | 0)) << 2 | 0) | 0) >> 2]));
          $18 = $14 >>> 0 > 3 >>> 0;
          $14 = $12;
          if ($18) {
           continue label$22
          }
          break label$22;
         };
        }
        $32 = Math_fround($35 + $32);
        label$23 : {
         if (!$31) {
          break label$23
         }
         $32 = Math_fround($32 + Math_fround(HEAPF32[((HEAP32[(($11 + 528 | 0) + ($21 << 2 | 0) | 0) >> 2] | 0) + ($43 << 2 | 0) | 0) >> 2]));
        }
        label$24 : {
         label$25 : {
          if (!$21) {
           break label$25
          }
          if (!($32 < Math_fround(HEAPF32[$50 >> 2]))) {
           break label$24
          }
         }
         HEAPF32[$50 >> 2] = $32;
         HEAP32[((HEAP32[$53 >> 2] | 0) + $49 | 0) >> 2] = $31 ? $21 : -1;
         HEAP32[((HEAP32[$52 >> 2] | 0) + $49 | 0) >> 2] = $17;
        }
        $21 = $21 + 1 | 0;
        if (($21 | 0) != ($39 | 0)) {
         continue label$15
        }
        break label$15;
       };
       $47 = $47 + 1 | 0;
       if (($47 | 0) != ($16 | 0)) {
        continue label$13
       }
       break label$13;
      };
     }
     $56 = Math_fround(0.0);
     $45 = 0;
     $14 = $15;
     label$26 : while (1) {
      $0 = $14;
      $12 = $14 << 2 | 0;
      $19 = HEAP32[(144016 + $12 | 0) >> 2] | 0;
      $20 = $19 << 1 | 0;
      $18 = HEAPU16[($5 + $20 | 0) >> 1] | 0;
      $14 = HEAP16[($34 + $20 | 0) >> 1] | 0;
      $32 = Math_fround(HEAPF32[(($11 + 128 | 0) + ($19 << 2 | 0) | 0) >> 2]);
      $56 = Math_fround(Math_fround(Math_fround($37 * Math_fround(Math_imul($14, $14) | 0)) * $32) + $56);
      HEAPF32[(($11 + 1088 | 0) + $12 | 0) >> 2] = $56;
      $19 = $14 >> 31 | 0;
      $17 = ($14 ^ $19 | 0) - $19 | 0;
      $21 = ($18 << 2 | 0) + $17 | 0;
      $14 = $18 << 3 | 0;
      $18 = ($21 >>> 0) / ($14 >>> 0) | 0;
      label$27 : {
       label$28 : {
        if ($14 >>> 0 <= $21 >>> 0) {
         break label$28
        }
        HEAP16[(($2 + $33 | 0) + $20 | 0) >> 1] = 0;
        HEAP32[(($11 + 832 | 0) + $12 | 0) >> 2] = 2123789977;
        break label$27;
       }
       HEAP32[($11 + 64 | 0) >> 2] = $18;
       $21 = Math_imul($18, $14) - $17 | 0;
       HEAPF32[$11 >> 2] = Math_fround($32 * Math_fround($37 * Math_fround(Math_imul($21, $21) | 0)));
       label$29 : {
        $50 = $18 >>> 0 < 2 >>> 0;
        if ($50) {
         break label$29
        }
        $18 = $18 + -1 | 0;
        HEAP32[($11 + 68 | 0) >> 2] = $18;
        $14 = Math_imul($18, $14) - $17 | 0;
        HEAPF32[($11 + 4 | 0) >> 2] = Math_fround($32 * Math_fround($37 * Math_fround(Math_imul($14, $14) | 0)));
       }
       $51 = ($11 + 832 | 0) + $12 | 0;
       HEAP32[$51 >> 2] = 2123789977;
       if (($15 | 0) > ($0 | 0)) {
        break label$27
       }
       $42 = $24 + $45 | 0;
       $46 = $27 + $45 | 0;
       $14 = $0 + -1 | 0;
       $39 = ($11 + 1088 | 0) + ($14 << 2 | 0) | 0;
       $40 = $2 + $33 | 0;
       $47 = $40 + $20 | 0;
       $18 = HEAP32[($11 + 68 | 0) >> 2] | 0;
       $43 = $18 + -1 | 0;
       $20 = HEAP32[($11 + 64 | 0) >> 2] | 0;
       $21 = $20 + -1 | 0;
       $57 = ($18 ^ $19 | 0) - $19 | 0;
       $44 = ($20 ^ $19 | 0) - $19 | 0;
       $14 = $1 + Math_imul($14, 24) | 0;
       $48 = $14 + 528 | 0;
       $53 = $14 + 532 | 0;
       $52 = $14 + 524 | 0;
       $41 = ($11 + 576 | 0) + $12 | 0;
       $38 = Math_fround(9999999680285692465065626.0e13);
       $58 = Math_fround(HEAPF32[($11 + 4 | 0) >> 2]);
       $59 = Math_fround(HEAPF32[$11 >> 2]);
       $17 = $27;
       label$30 : while (1) {
        label$31 : {
         label$32 : {
          if (($17 | 0) == ($27 | 0)) {
           break label$32
          }
          if (HEAPU16[($40 + ((HEAP32[(144016 + ($17 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) {
           break label$32
          }
          $17 = $17 + 1 | 0;
          break label$31;
         }
         $32 = Math_fround(HEAPF32[(($1 + Math_imul($17, 24) | 0) + 512 | 0) >> 2]);
         label$33 : {
          $49 = $17 + 1 | 0;
          if (($49 | 0) >= ($0 | 0)) {
           break label$33
          }
          $54 = $42 - $17 | 0;
          $18 = 0;
          $14 = $49;
          $12 = $17;
          label$34 : {
           $20 = ($46 - $12 | 0) & 3 | 0;
           if (!$20) {
            break label$34
           }
           label$35 : while (1) {
            $19 = $14;
            $14 = $14 + 1 | 0;
            $32 = Math_fround($32 + Math_fround(HEAPF32[((Math_imul($12, 24) + $1 | 0) + 520 | 0) >> 2]));
            $12 = $19;
            $18 = $18 + 1 | 0;
            if (($18 | 0) != ($20 | 0)) {
             continue label$35
            }
            break label$35;
           };
          }
          if ($54 >>> 0 < 3 >>> 0) {
           break label$33
          }
          label$36 : while (1) {
           $814 = Math_imul($12, 24);
           $12 = $1 + 512 | 0;
           $821 = Math_fround($32 + Math_fround(HEAPF32[(($814 + $12 | 0) + 8 | 0) >> 2]));
           $12 = Math_imul($14, 24) + $12 | 0;
           $32 = Math_fround(Math_fround(Math_fround($821 + Math_fround(HEAPF32[($12 + 8 | 0) >> 2])) + Math_fround(HEAPF32[($12 + 32 | 0) >> 2])) + Math_fround(HEAPF32[($12 + 56 | 0) >> 2]));
           $12 = $14 + 3 | 0;
           $14 = $14 + 4 | 0;
           if (($14 | 0) < ($0 | 0)) {
            continue label$36
           }
           break label$36;
          };
         }
         $35 = Math_fround($32 + Math_fround(HEAPF32[$52 >> 2]));
         $14 = $17 << 2 | 0;
         $55 = Math_fround(Math_fround(HEAPF32[$39 >> 2]) - Math_fround(HEAPF32[(($11 + 1088 | 0) + $14 | 0) >> 2]));
         $54 = ($11 + 832 | 0) + $14 | 0;
         label$37 : {
          label$38 : {
           label$39 : {
            if ($21) {
             break label$39
            }
            $32 = Math_fround(1.0);
            break label$38;
           }
           $60 = Math_fround(HEAPF32[$53 >> 2]);
           $32 = Math_fround($60 + Math_fround(1.0));
           if (($21 | 0) == (1 | 0)) {
            break label$38
           }
           $18 = ($0 | 0) > (HEAP32[($1 + 2568 | 0) >> 2] | 0 | 0) ? 217 : 189;
           $32 = Math_fround($60 + $32);
           $14 = 2;
           label$40 : {
            label$41 : {
             if ($21 >>> 0 <= 3 >>> 0) {
              break label$41
             }
             $12 = $21;
             label$42 : while (1) {
              $19 = $18;
              $18 = $18 + 1 | 0;
              $14 = $14 << 1 | 0;
              $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($19 << 3 | 0) | 0) + 516 | 0) >> 2]));
              $20 = $12 >>> 0 < 8 >>> 0;
              $12 = $12 >> 1 | 0;
              if (!$20) {
               continue label$42
              }
              break label$42;
             };
             $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($18 << 3 | 0) | 0) + 512 | 0) >> 2]));
             if (!$14) {
              break label$37
             }
             $19 = $19 + 15 | 0;
             break label$40;
            }
            $19 = $18 + 14 | 0;
            $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($18 << 3 | 0) | 0) + 512 | 0) >> 2]));
            $14 = 2;
           }
           label$43 : while (1) {
            $12 = $14 >> 1 | 0;
            $32 = Math_fround($32 + Math_fround(HEAPF32[((($1 + ($19 << 3 | 0) | 0) + ((($12 & $21 | 0 | 0) != (0 | 0)) << 2 | 0) | 0) + 512 | 0) >> 2]));
            $18 = $14 >>> 0 > 3 >>> 0;
            $14 = $12;
            if ($18) {
             continue label$43
            }
            break label$37;
           };
          }
          $32 = Math_fround($32 + Math_fround(HEAPF32[$48 >> 2]));
         }
         $60 = Math_fround($55 + Math_fround(HEAPF32[$54 >> 2]));
         label$44 : {
          label$45 : {
           $32 = Math_fround($35 + $32);
           if (!(Math_fround(Math_abs($32)) < Math_fround(2147483648.0))) {
            break label$45
           }
           $14 = ~~$32;
           break label$44;
          }
          $14 = -2147483648;
         }
         label$46 : {
          $32 = Math_fround(Math_fround($59 + Math_fround($14 | 0)) + $60);
          if (!($32 < $38)) {
           break label$46
          }
          HEAP16[$47 >> 1] = $44;
          HEAPF32[$51 >> 2] = $32;
          HEAP32[$41 >> 2] = $17;
          $38 = $32;
         }
         label$47 : {
          if (!$50) {
           break label$47
          }
          $17 = $49;
          break label$31;
         }
         label$48 : {
          label$49 : {
           label$50 : {
            if ($43) {
             break label$50
            }
            $32 = Math_fround(1.0);
            break label$49;
           }
           $60 = Math_fround(HEAPF32[$53 >> 2]);
           $32 = Math_fround($60 + Math_fround(1.0));
           if (($43 | 0) == (1 | 0)) {
            break label$49
           }
           $18 = ($0 | 0) > (HEAP32[($1 + 2568 | 0) >> 2] | 0 | 0) ? 217 : 189;
           $32 = Math_fround($60 + $32);
           $14 = 2;
           label$51 : {
            label$52 : {
             if ($43 >>> 0 < 4 >>> 0) {
              break label$52
             }
             $12 = $43;
             label$53 : while (1) {
              $19 = $18;
              $18 = $18 + 1 | 0;
              $14 = $14 << 1 | 0;
              $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($19 << 3 | 0) | 0) + 516 | 0) >> 2]));
              $20 = $12 >>> 0 > 7 >>> 0;
              $12 = $12 >> 1 | 0;
              if ($20) {
               continue label$53
              }
              break label$53;
             };
             $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($18 << 3 | 0) | 0) + 512 | 0) >> 2]));
             if (!$14) {
              break label$48
             }
             $19 = $19 + 15 | 0;
             break label$51;
            }
            $19 = $18 + 14 | 0;
            $32 = Math_fround($32 + Math_fround(HEAPF32[(($1 + ($18 << 3 | 0) | 0) + 512 | 0) >> 2]));
            $14 = 2;
           }
           label$54 : while (1) {
            $12 = $14 >> 1 | 0;
            $32 = Math_fround($32 + Math_fround(HEAPF32[((($1 + ($19 << 3 | 0) | 0) + ((($12 & $43 | 0 | 0) != (0 | 0)) << 2 | 0) | 0) + 512 | 0) >> 2]));
            $18 = $14 >>> 0 < 4 >>> 0;
            $14 = $12;
            if (!$18) {
             continue label$54
            }
            break label$48;
           };
          }
          $32 = Math_fround($32 + Math_fround(HEAPF32[$48 >> 2]));
         }
         $55 = Math_fround($55 + Math_fround(HEAPF32[$54 >> 2]));
         label$55 : {
          label$56 : {
           $32 = Math_fround($35 + $32);
           if (!(Math_fround(Math_abs($32)) < Math_fround(2147483648.0))) {
            break label$56
           }
           $14 = ~~$32;
           break label$55;
          }
          $14 = -2147483648;
         }
         label$57 : {
          $32 = Math_fround(Math_fround($58 + Math_fround($14 | 0)) + $55);
          if ($32 < $38) {
           break label$57
          }
          $17 = $49;
          break label$31;
         }
         HEAP16[$47 >> 1] = $57;
         HEAPF32[$51 >> 2] = $32;
         HEAP32[$41 >> 2] = $17;
         $17 = $49;
         $38 = $32;
        }
        if (($17 | 0) != ($0 | 0)) {
         continue label$30
        }
        break label$30;
       };
      }
      $45 = $45 + 1 | 0;
      $14 = $0 + 1 | 0;
      if (($0 | 0) != ($13 | 0)) {
       continue label$26
      }
      break label$26;
     };
     $55 = Math_fround(HEAPF32[$26 >> 2]);
     $35 = Math_fround($55 + Math_fround(HEAPF32[($1 + 516 | 0) >> 2]));
     $14 = $15;
     $19 = $27;
     label$58 : while (1) {
      label$59 : {
       $12 = $2 + $33 | 0;
       $18 = $14 << 2 | 0;
       if (!(HEAPU16[($12 + ((HEAP32[(144016 + $18 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0)) {
        break label$59
       }
       $32 = Math_fround(Math_fround($55 + Math_fround(HEAPF32[(($11 + 832 | 0) + $18 | 0) >> 2])) - Math_fround(HEAPF32[(($11 + 1088 | 0) + $18 | 0) >> 2]));
       label$60 : {
        if (($14 | 0) >= ($13 | 0)) {
         break label$60
        }
        $32 = Math_fround($32 + Math_fround(HEAPF32[((Math_imul($14, 24) + $1 | 0) + 492 | 0) >> 2]));
       }
       $18 = $32 < $35;
       $35 = $18 ? $32 : $35;
       $19 = $18 ? $14 : $19;
      }
      $18 = ($14 | 0) != ($13 | 0);
      $14 = $14 + 1 | 0;
      if ($18) {
       continue label$58
      }
      break label$58;
     };
     $14 = $13;
     label$61 : while (1) {
      label$62 : {
       label$63 : {
        if (($14 | 0) > ($19 | 0)) {
         break label$63
        }
        $19 = $14;
        break label$62;
       }
       $20 = $14 + ($19 ^ -1 | 0) | 0;
       $18 = 0;
       label$64 : {
        $0 = ($14 - $19 | 0) & 3 | 0;
        if (!$0) {
         break label$64
        }
        label$65 : while (1) {
         HEAP16[($12 + ((HEAP32[(144016 + ($14 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
         $14 = $14 + -1 | 0;
         $18 = $18 + 1 | 0;
         if (($18 | 0) != ($0 | 0)) {
          continue label$65
         }
         break label$65;
        };
       }
       if ($20 >>> 0 < 3 >>> 0) {
        break label$62
       }
       label$66 : while (1) {
        $18 = 144016 + ($14 << 2 | 0) | 0;
        HEAP16[($12 + ((HEAP32[$18 >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($12 + ((HEAP32[($18 + -4 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($12 + ((HEAP32[($18 + -8 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        HEAP16[($12 + ((HEAP32[($18 + -12 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] = 0;
        $14 = $14 + -4 | 0;
        if (($14 | 0) > ($19 | 0)) {
         continue label$66
        }
        break label$66;
       };
      }
      $14 = $19 + -1 | 0;
      $18 = ($19 | 0) > ($15 | 0);
      $19 = HEAP32[(($11 + 576 | 0) + ($19 << 2 | 0) | 0) >> 2] | 0;
      if ($18) {
       continue label$61
      }
      break label$61;
     };
     $31 = $31 + 1 | 0;
     if (($31 | 0) != ($4 | 0)) {
      continue label$8
     }
     break label$8;
    };
    if (!(HEAP32[($22 + 48 | 0) >> 2] | 0)) {
     break label$7
    }
    $0 = 0;
    label$67 : while (1) {
     $14 = 1;
     label$68 : while (1) {
      $12 = $14 << 3 | 0;
      $1 = $6 + $12 | 0;
      $1252 = $1;
      $1254 = +HEAPF64[$1 >> 3];
      $18 = $0 << 7 | 0;
      $19 = $14 << 1 | 0;
      $1 = HEAP16[(($2 + $18 | 0) + $19 | 0) >> 1] | 0;
      HEAPF64[$1252 >> 3] = $1254 + +(Math_imul($1, HEAP16[(($3 + $18 | 0) + $19 | 0) >> 1] | 0) | 0);
      $12 = $7 + $12 | 0;
      HEAPF64[$12 >> 3] = +HEAPF64[$12 >> 3] + +(Math_imul($1, $1) << 3 | 0 | 0);
      $14 = $14 + 1 | 0;
      if (($14 | 0) != (64 | 0)) {
       continue label$68
      }
      break label$68;
     };
     $0 = $0 + 1 | 0;
     if (($0 | 0) != ($4 | 0)) {
      continue label$67
     }
     break label$67;
    };
   }
   if (!(HEAP32[($22 + 28 | 0) >> 2] | 0)) {
    break label$1
   }
   $20 = $16 + -3 | 0;
   $0 = $4 + -1 | 0;
   $12 = 0;
   $14 = 1;
   $18 = 0;
   label$69 : while (1) {
    $19 = $14 + 1 | 0;
    $1 = $0 << 2 | 0;
    $12 = Math_fround(HEAPF32[((HEAP32[(($11 + 528 | 0) + ($14 << 2 | 0) | 0) >> 2] | 0) + $1 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[(($11 + 528 | 0) + ($12 << 2 | 0) | 0) >> 2] | 0) + $1 | 0) >> 2]) ? $14 : $12;
    $12 = Math_fround(HEAPF32[((HEAP32[(($11 + 528 | 0) + ($19 << 2 | 0) | 0) >> 2] | 0) + $1 | 0) >> 2]) < Math_fround(HEAPF32[((HEAP32[(($11 + 528 | 0) + ($12 << 2 | 0) | 0) >> 2] | 0) + $1 | 0) >> 2]) ? $19 : $12;
    $14 = $14 + 2 | 0;
    $1 = ($18 | 0) != ($20 | 0);
    $18 = $18 + 2 | 0;
    if ($1) {
     continue label$69
    }
    break label$69;
   };
   $1 = 0;
   label$70 : {
    if (($0 | 0) < (0 | 0)) {
     break label$70
    }
    label$71 : {
     label$72 : {
      if ($4 & 1 | 0) {
       break label$72
      }
      $14 = $0;
      break label$71;
     }
     $14 = $12 << 2 | 0;
     HEAP16[($2 + ($0 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($11 + 432 | 0) + $14 | 0) >> 2] | 0) + ($0 << 1 | 0) | 0) >> 1] | 0;
     $12 = HEAP32[((HEAP32[(($11 + 480 | 0) + $14 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0) >> 2] | 0;
     $14 = $4 + -2 | 0;
    }
    if (!$0) {
     break label$70
    }
    label$73 : while (1) {
     $12 = $12 << 2 | 0;
     HEAP16[($2 + ($14 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($11 + 432 | 0) + $12 | 0) >> 2] | 0) + ($14 << 1 | 0) | 0) >> 1] | 0;
     $18 = $14 + -1 | 0;
     $12 = (HEAP32[((HEAP32[(($11 + 480 | 0) + $12 | 0) >> 2] | 0) + ($14 << 2 | 0) | 0) >> 2] | 0) << 2 | 0;
     HEAP16[($2 + ($18 << 7 | 0) | 0) >> 1] = HEAPU16[((HEAP32[(($11 + 432 | 0) + $12 | 0) >> 2] | 0) + ($18 << 1 | 0) | 0) >> 1] | 0;
     $12 = HEAP32[((HEAP32[(($11 + 480 | 0) + $12 | 0) >> 2] | 0) + ($18 << 2 | 0) | 0) >> 2] | 0;
     $14 = $14 + -2 | 0;
     if ($18) {
      continue label$73
     }
     break label$73;
    };
   }
   HEAP16[$8 >> 1] = HEAPU16[($2 + ($0 << 7 | 0) | 0) >> 1] | 0;
   label$74 : while (1) {
    $14 = $1 << 2 | 0;
    free(HEAP32[(($11 + 528 | 0) + $14 | 0) >> 2] | 0 | 0);
    free(HEAP32[(($11 + 480 | 0) + $14 | 0) >> 2] | 0 | 0);
    free(HEAP32[(($11 + 432 | 0) + $14 | 0) >> 2] | 0 | 0);
    free(HEAP32[(($11 + 384 | 0) + $14 | 0) >> 2] | 0 | 0);
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($16 | 0)) {
     continue label$74
    }
    break label$74;
   };
  }
  __stack_pointer = $11 + 1344 | 0;
 }
 
 function jinit_forward_dct($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 80) | 0;
  HEAP32[($0 + 360 | 0) >> 2] = $1;
  HEAP32[$1 >> 2] = 11;
  label$1 : {
   label$2 : {
    switch (HEAP32[($0 + 196 | 0) >> 2] | 0 | 0) {
    case 0:
     HEAP32[($1 + 4 | 0) >> 2] = 12;
     label$6 : {
      if (!(jsimd_can_fdct_islow() | 0)) {
       break label$6
      }
      HEAP32[($1 + 8 | 0) >> 2] = 13;
      break label$1;
     }
     HEAP32[($1 + 8 | 0) >> 2] = 14;
     break label$1;
    case 1:
     HEAP32[($1 + 4 | 0) >> 2] = 12;
     label$7 : {
      if (!(jsimd_can_fdct_ifast() | 0)) {
       break label$7
      }
      HEAP32[($1 + 8 | 0) >> 2] = 15;
      break label$1;
     }
     HEAP32[($1 + 8 | 0) >> 2] = 16;
     break label$1;
    case 2:
     HEAP32[($1 + 4 | 0) >> 2] = 17;
     label$8 : {
      if (!(jsimd_can_fdct_float() | 0)) {
       break label$8
      }
      HEAP32[($1 + 44 | 0) >> 2] = 18;
      break label$1;
     }
     HEAP32[($1 + 44 | 0) >> 2] = 19;
     break label$1;
    default:
     break label$2;
    };
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 48;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$9 : {
   label$10 : {
    switch (HEAP32[($0 + 196 | 0) >> 2] | 0 | 0) {
    case 0:
    case 1:
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = jsimd_can_convsamp() | 0 ? 20 : 21), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 ? 22 : 0;
     label$13 : {
      if (!(jsimd_can_quantize() | 0)) {
       break label$13
      }
      HEAP32[($1 + 20 | 0) >> 2] = 23;
      break label$9;
     }
     HEAP32[($1 + 20 | 0) >> 2] = 24;
     break label$9;
    case 2:
     (wasm2js_i32$0 = $1, wasm2js_i32$1 = jsimd_can_convsamp_float() | 0 ? 25 : 26), HEAP32[(wasm2js_i32$0 + 48 | 0) >> 2] = wasm2js_i32$1;
     HEAP32[($1 + 52 | 0) >> 2] = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0 ? 27 : 0;
     label$14 : {
      if (!(jsimd_can_quantize_float() | 0)) {
       break label$14
      }
      HEAP32[($1 + 56 | 0) >> 2] = 28;
      break label$9;
     }
     HEAP32[($1 + 56 | 0) >> 2] = 29;
     break label$9;
    default:
     break label$10;
    };
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 48;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  (wasm2js_i32$0 = $1 + ((HEAP32[($0 + 196 | 0) >> 2] | 0 | 0) == (2 | 0) ? 76 : 40) | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 256) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  i64toi32_i32$1 = $1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function start_pass_fdctmgr($0) {
  $0 = $0 | 0;
  var $9 = 0, i64toi32_i32$2 = 0, $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $8 = 0, $10 = 0, $7 = 0, $11 = 0, $12 = 0, $12$hi = 0, $5 = 0, $13$hi = 0, $6 = 0, $14 = 0.0, $13 = 0, $1 = 0, $2 = 0, $3 = 0, $34 = 0, i64toi32_i32$6 = 0, $35 = 0, $36 = 0, $37 = 0, $126$hi = 0, $128$hi = 0, $137 = 0, $137$hi = 0, $147$hi = 0, $243$hi = 0, $245$hi = 0, $253 = 0, $253$hi = 0, $263$hi = 0;
  label$1 : {
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1 = HEAP32[($0 + 360 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $3 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
      if ($4 >>> 0 > 3 >>> 0) {
       break label$4
      }
      $5 = HEAP32[(($0 + ($4 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
      if ($5) {
       break label$3
      }
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[($5 + 24 | 0) >> 2] = $4;
     HEAP32[($5 + 20 | 0) >> 2] = 52;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
     $5 = HEAP32[(($0 + ($4 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
    }
    label$5 : {
     label$6 : {
      switch (HEAP32[($0 + 196 | 0) >> 2] | 0 | 0) {
      case 0:
       label$10 : {
        $4 = ($1 + ($4 << 2 | 0) | 0) + 24 | 0;
        $6 = HEAP32[$4 >> 2] | 0;
        if ($6) {
         break label$10
        }
        $6 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1024) | 0;
        HEAP32[$4 >> 2] = $6;
       }
       $7 = 0;
       label$11 : while (1) {
        $4 = $7 << 2 | 0;
        $8 = 0;
        label$12 : {
         $9 = HEAPU16[($5 + ($7 << 1 | 0) | 0) >> 1] | 0;
         $10 = $9 << 3 | 0;
         if (!($10 & 65528 | 0)) {
          break label$12
         }
         $8 = ($10 & 65535 | 0) >>> 0 < 256 >>> 0;
         $11 = $8 ? 8 : 16;
         $9 = $8 ? $9 << 11 | 0 : $10;
         $8 = ($9 & 65535 | 0) >>> 0 < 4096 >>> 0;
         $11 = $8 ? $11 + -4 | 0 : $11;
         $9 = $8 ? $9 << 4 | 0 : $9;
         $8 = ($9 & 65535 | 0) >>> 0 < 16384 >>> 0;
         $8 = ($8 ? $11 + -2 | 0 : $11) + (((($8 ? $9 << 2 | 0 : $9) << 16 | 0) >> 31 | 0) ^ -1 | 0) | 0;
        }
        $4 = $6 + $4 | 0;
        $9 = ($10 >>> 1 | 0) & 32767 | 0;
        label$13 : {
         label$14 : {
          $11 = $8 + 31 | 0;
          i64toi32_i32$0 = 0;
          $126$hi = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$2 = 1;
          i64toi32_i32$1 = $126$hi;
          i64toi32_i32$3 = $11;
          i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
           i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
           $34 = 0;
          } else {
           i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
           $34 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
          }
          $12 = $34;
          $12$hi = i64toi32_i32$1;
          $128$hi = i64toi32_i32$1;
          i64toi32_i32$1 = 0;
          i64toi32_i32$0 = $10;
          i64toi32_i32$2 = 0;
          i64toi32_i32$3 = 65535;
          i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
          $13 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
          $13$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $12$hi;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$0 = __wasm_i64_udiv($12 | 0, i64toi32_i32$2 | 0, $13 | 0, i64toi32_i32$0 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
          $12 = i64toi32_i32$0;
          $12$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $13$hi;
          i64toi32_i32$2 = $12$hi;
          i64toi32_i32$0 = $13$hi;
          i64toi32_i32$0 = __wasm_i64_mul($12 | 0, i64toi32_i32$2 | 0, $13 | 0, i64toi32_i32$0 | 0) | 0;
          i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
          $137 = i64toi32_i32$0;
          $137$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $128$hi;
          i64toi32_i32$1 = $34;
          i64toi32_i32$0 = $137$hi;
          i64toi32_i32$3 = $137;
          i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
          i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
          i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
          i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
          $13 = i64toi32_i32$4;
          $13$hi = i64toi32_i32$5;
          i64toi32_i32$2 = i64toi32_i32$4;
          i64toi32_i32$1 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
           break label$14
          }
          $11 = $8 + 30 | 0;
          i64toi32_i32$2 = $12$hi;
          i64toi32_i32$3 = $12;
          i64toi32_i32$5 = 0;
          i64toi32_i32$1 = 1;
          i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
           i64toi32_i32$5 = 0;
           $36 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
          } else {
           i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
           $36 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
          }
          $12 = $36;
          $12$hi = i64toi32_i32$5;
          break label$13;
         }
         label$15 : {
          i64toi32_i32$5 = $13$hi;
          i64toi32_i32$5 = 0;
          $147$hi = i64toi32_i32$5;
          i64toi32_i32$5 = $13$hi;
          i64toi32_i32$2 = $13;
          i64toi32_i32$3 = $147$hi;
          i64toi32_i32$1 = $9;
          if (i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
           break label$15
          }
          $9 = $9 | 1 | 0;
          break label$13;
         }
         i64toi32_i32$2 = $12$hi;
         i64toi32_i32$1 = $12;
         i64toi32_i32$5 = 0;
         i64toi32_i32$3 = 1;
         i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
         i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
          i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
         }
         $12 = i64toi32_i32$0;
         $12$hi = i64toi32_i32$4;
        }
        HEAP32[($4 + 512 | 0) >> 2] = 1;
        HEAP32[($4 + 256 | 0) >> 2] = $9;
        i64toi32_i32$4 = $12$hi;
        HEAP32[$4 >> 2] = $12;
        HEAP32[($4 + 768 | 0) >> 2] = $11 + -32 | 0;
        $7 = $7 + 1 | 0;
        if (($7 | 0) != (64 | 0)) {
         continue label$11
        }
        break label$5;
       };
      case 1:
       label$16 : {
        $4 = ($1 + ($4 << 2 | 0) | 0) + 24 | 0;
        $6 = HEAP32[$4 >> 2] | 0;
        if ($6) {
         break label$16
        }
        $6 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1024) | 0;
        HEAP32[$4 >> 2] = $6;
       }
       $10 = 0;
       label$17 : while (1) {
        $4 = $6 + ($10 << 2 | 0) | 0;
        $9 = 0;
        label$18 : {
         label$19 : {
          label$20 : {
           label$21 : {
            $7 = $10 << 1 | 0;
            $8 = (Math_imul(HEAP16[($7 + 66640 | 0) >> 1] | 0, HEAPU16[($5 + $7 | 0) >> 1] | 0) + 1024 | 0) >>> 11 | 0;
            $7 = $8 & 65535 | 0;
            switch ($7 | 0) {
            case 1:
             break label$19;
            case 0:
             break label$20;
            default:
             break label$21;
            };
           }
           $9 = $7 >>> 0 < 256 >>> 0;
           $11 = $9 ? 8 : 16;
           $9 = $9 ? $8 << 8 | 0 : $8;
           $8 = ($9 & 65535 | 0) >>> 0 < 4096 >>> 0;
           $11 = $8 ? $11 + -4 | 0 : $11;
           $9 = $8 ? $9 << 4 | 0 : $9;
           $8 = ($9 & 65535 | 0) >>> 0 < 16384 >>> 0;
           $9 = ($8 ? $11 + -2 | 0 : $11) + (((($8 ? $9 << 2 | 0 : $9) << 16 | 0) >> 31 | 0) ^ -1 | 0) | 0;
          }
          $8 = $7 >>> 1 | 0;
          label$22 : {
           label$23 : {
            $11 = $9 + 31 | 0;
            i64toi32_i32$4 = 0;
            $243$hi = i64toi32_i32$4;
            i64toi32_i32$4 = 0;
            i64toi32_i32$2 = 1;
            i64toi32_i32$1 = $243$hi;
            i64toi32_i32$3 = $11;
            i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
             $35 = 0;
            } else {
             i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
             $35 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
            }
            $12 = $35;
            $12$hi = i64toi32_i32$1;
            $245$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            $13 = $7;
            $13$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $12$hi;
            i64toi32_i32$2 = $13$hi;
            i64toi32_i32$2 = __wasm_i64_udiv($12 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            $12 = i64toi32_i32$2;
            $12$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $13$hi;
            i64toi32_i32$1 = $12$hi;
            i64toi32_i32$2 = $13$hi;
            i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $7 | 0, i64toi32_i32$2 | 0) | 0;
            i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
            $253 = i64toi32_i32$2;
            $253$hi = i64toi32_i32$1;
            i64toi32_i32$1 = $245$hi;
            i64toi32_i32$4 = $35;
            i64toi32_i32$2 = $253$hi;
            i64toi32_i32$3 = $253;
            i64toi32_i32$5 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
            i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0;
            i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
            i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
            $13 = i64toi32_i32$5;
            $13$hi = i64toi32_i32$0;
            i64toi32_i32$1 = i64toi32_i32$5;
            i64toi32_i32$4 = 0;
            i64toi32_i32$3 = 0;
            if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
             break label$23
            }
            $11 = $9 + 30 | 0;
            i64toi32_i32$1 = $12$hi;
            i64toi32_i32$3 = $12;
            i64toi32_i32$0 = 0;
            i64toi32_i32$4 = 1;
            i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
             i64toi32_i32$0 = 0;
             $37 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
            } else {
             i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
             $37 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
            }
            $12 = $37;
            $12$hi = i64toi32_i32$0;
            break label$22;
           }
           label$24 : {
            i64toi32_i32$0 = $13$hi;
            i64toi32_i32$0 = 0;
            $263$hi = i64toi32_i32$0;
            i64toi32_i32$0 = $13$hi;
            i64toi32_i32$1 = $13;
            i64toi32_i32$3 = $263$hi;
            i64toi32_i32$4 = $8;
            if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
             break label$24
            }
            $8 = $8 + 1 | 0;
            break label$22;
           }
           i64toi32_i32$1 = $12$hi;
           i64toi32_i32$4 = $12;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
           i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
           if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
           }
           $12 = i64toi32_i32$2;
           $12$hi = i64toi32_i32$5;
          }
          HEAP32[($4 + 512 | 0) >> 2] = 1;
          HEAP32[($4 + 256 | 0) >> 2] = $8;
          i64toi32_i32$5 = $12$hi;
          HEAP32[$4 >> 2] = $12;
          HEAP32[($4 + 768 | 0) >> 2] = $11 + -32 | 0;
          break label$18;
         }
         HEAP32[($4 + 768 | 0) >> 2] = -32;
         HEAP32[($4 + 512 | 0) >> 2] = 1;
         HEAP32[($4 + 256 | 0) >> 2] = 0;
         HEAP32[$4 >> 2] = 1;
         if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != (23 | 0)) {
          break label$18
         }
         HEAP32[($1 + 20 | 0) >> 2] = 24;
        }
        $10 = $10 + 1 | 0;
        if (($10 | 0) != (64 | 0)) {
         continue label$17
        }
        break label$5;
       };
      case 2:
       label$25 : {
        $4 = ($1 + ($4 << 2 | 0) | 0) + 60 | 0;
        $10 = HEAP32[$4 >> 2] | 0;
        if ($10) {
         break label$25
        }
        $10 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 256) | 0;
        HEAP32[$4 >> 2] = $10;
       }
       $7 = 0;
       $4 = 0;
       label$26 : while (1) {
        $14 = +HEAPF64[(($7 << 3 | 0) + 66768 | 0) >> 3];
        HEAPF32[($10 + ($4 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($4 << 1 | 0) | 0) >> 1] | 0) >>> 0) * 8.0));
        $9 = $4 | 1 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * 1.387039845 * 8.0));
        $9 = $4 | 2 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * 1.306562965 * 8.0));
        $9 = $4 | 3 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * 1.175875602 * 8.0));
        $9 = $4 | 4 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * 8.0));
        $9 = $4 | 5 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * .785694958 * 8.0));
        $9 = $4 | 6 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * .5411961 * 8.0));
        $9 = $4 | 7 | 0;
        HEAPF32[($10 + ($9 << 2 | 0) | 0) >> 2] = Math_fround(1.0 / ($14 * +((HEAPU16[($5 + ($9 << 1 | 0) | 0) >> 1] | 0) >>> 0) * .275899379 * 8.0));
        $4 = $4 + 8 | 0;
        $7 = $7 + 1 | 0;
        if (($7 | 0) != (8 | 0)) {
         continue label$26
        }
        break label$5;
       };
      default:
       break label$6;
      };
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 48;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $2 = $2 + 84 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function forward_DCT($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $16 = 0, $15 = 0, $17 = 0, $18 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $9 = 0, $19 = 0, $74 = 0;
  label$1 : {
   if (!$6) {
    break label$1
   }
   $8 = $2 + ($4 << 2 | 0) | 0;
   $2 = (HEAP32[($1 + 16 | 0) >> 2] | 0) << 2 | 0;
   $9 = HEAP32[(($0 + $2 | 0) + 72 | 0) >> 2] | 0;
   $1 = HEAP32[($0 + 360 | 0) >> 2] | 0;
   $10 = HEAP32[(($1 + $2 | 0) + 24 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 40 | 0) >> 2] | 0;
   $11 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   $12 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   $13 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   $14 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   label$2 : {
    if (!$7) {
     break label$2
    }
    $15 = 0;
    label$3 : while (1) {
     FUNCTION_TABLE[$13 | 0]($8, $5, $2);
     label$4 : {
      if (!$12) {
       break label$4
      }
      FUNCTION_TABLE[$12 | 0]($2, $9);
     }
     FUNCTION_TABLE[$14 | 0]($2);
     $1 = 0;
     label$5 : {
      label$6 : {
       if ((HEAP32[($0 + 196 | 0) >> 2] | 0 | 0) != (1 | 0)) {
        break label$6
       }
       label$7 : while (1) {
        $4 = $1 << 1 | 0;
        $74 = ($7 + ($15 << 7 | 0) | 0) + $4 | 0;
        $16 = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
        $4 = HEAP16[($4 + 66640 | 0) >> 1] | 0;
        HEAP16[$74 >> 1] = (($16 << 15 | 0) + (($16 | 0) < (0 | 0) ? 0 - $4 | 0 : $4) | 0 | 0) / ($4 << 1 | 0 | 0) | 0;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != (64 | 0)) {
         continue label$7
        }
        break label$5;
       };
      }
      label$8 : while (1) {
       $4 = $7 + ($15 << 7 | 0) | 0;
       HEAP16[($4 + ($1 << 1 | 0) | 0) >> 1] = HEAP32[($2 + ($1 << 2 | 0) | 0) >> 2] | 0;
       $16 = $1 | 1 | 0;
       HEAP16[($4 + ($16 << 1 | 0) | 0) >> 1] = HEAP32[($2 + ($16 << 2 | 0) | 0) >> 2] | 0;
       $16 = $1 | 2 | 0;
       HEAP16[($4 + ($16 << 1 | 0) | 0) >> 1] = HEAP32[($2 + ($16 << 2 | 0) | 0) >> 2] | 0;
       $16 = $1 | 3 | 0;
       HEAP16[($4 + ($16 << 1 | 0) | 0) >> 1] = HEAP32[($2 + ($16 << 2 | 0) | 0) >> 2] | 0;
       $1 = $1 + 4 | 0;
       if (($1 | 0) != (64 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     $16 = $3 + ($15 << 7 | 0) | 0;
     FUNCTION_TABLE[$11 | 0]($16, $10, $2);
     $1 = 0;
     label$9 : {
      if (!$12) {
       break label$9
      }
      label$10 : while (1) {
       $4 = 64513;
       label$11 : {
        label$12 : {
         $17 = $1 << 1 | 0;
         $18 = $16 + $17 | 0;
         $19 = HEAP16[$18 >> 1] | 0;
         if (($19 | 0) < (-1023 | 0)) {
          break label$12
         }
         $4 = 1023;
         if (($19 | 0) < (1024 | 0)) {
          break label$11
         }
        }
        HEAP16[$18 >> 1] = $4;
       }
       $4 = 64513;
       label$13 : {
        label$14 : {
         $17 = $16 + ($17 | 2 | 0) | 0;
         $18 = HEAP16[$17 >> 1] | 0;
         if (($18 | 0) < (-1023 | 0)) {
          break label$14
         }
         $4 = 1023;
         if (($18 | 0) < (1024 | 0)) {
          break label$13
         }
        }
        HEAP16[$17 >> 1] = $4;
       }
       $1 = $1 + 2 | 0;
       if (($1 | 0) != (64 | 0)) {
        continue label$10
       }
       break label$10;
      };
     }
     $5 = $5 + 8 | 0;
     $15 = $15 + 1 | 0;
     if (($15 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$15 : {
    if (!$12) {
     break label$15
    }
    $7 = 0;
    label$16 : while (1) {
     FUNCTION_TABLE[$13 | 0]($8, $5, $2);
     FUNCTION_TABLE[$12 | 0]($2, $9);
     FUNCTION_TABLE[$14 | 0]($2);
     $16 = $3 + ($7 << 7 | 0) | 0;
     FUNCTION_TABLE[$11 | 0]($16, $10, $2);
     $1 = 0;
     label$17 : while (1) {
      $4 = 64513;
      label$18 : {
       label$19 : {
        $17 = $1 << 1 | 0;
        $15 = $16 + $17 | 0;
        $18 = HEAP16[$15 >> 1] | 0;
        if (($18 | 0) < (-1023 | 0)) {
         break label$19
        }
        $4 = 1023;
        if (($18 | 0) < (1024 | 0)) {
         break label$18
        }
       }
       HEAP16[$15 >> 1] = $4;
      }
      $4 = 64513;
      label$20 : {
       label$21 : {
        $17 = $16 + ($17 | 2 | 0) | 0;
        $15 = HEAP16[$17 >> 1] | 0;
        if (($15 | 0) < (-1023 | 0)) {
         break label$21
        }
        $4 = 1023;
        if (($15 | 0) < (1024 | 0)) {
         break label$20
        }
       }
       HEAP16[$17 >> 1] = $4;
      }
      $1 = $1 + 2 | 0;
      if (($1 | 0) != (64 | 0)) {
       continue label$17
      }
      break label$17;
     };
     $5 = $5 + 8 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue label$16
     }
     break label$1;
    };
   }
   $15 = $6 & 1 | 0;
   $1 = 0;
   label$22 : {
    if (($6 | 0) == (1 | 0)) {
     break label$22
    }
    $17 = $6 & -2 | 0;
    $1 = 0;
    $4 = 0;
    label$23 : while (1) {
     FUNCTION_TABLE[$13 | 0]($8, $5, $2);
     FUNCTION_TABLE[$14 | 0]($2);
     $16 = $1 << 7 | 0;
     FUNCTION_TABLE[$11 | 0]($3 + $16 | 0, $10, $2);
     FUNCTION_TABLE[$13 | 0]($8, $5 + 8 | 0, $2);
     FUNCTION_TABLE[$14 | 0]($2);
     FUNCTION_TABLE[$11 | 0]($3 + ($16 | 128 | 0) | 0, $10, $2);
     $5 = $5 + 16 | 0;
     $1 = $1 + 2 | 0;
     $4 = $4 + 2 | 0;
     if (($4 | 0) != ($17 | 0)) {
      continue label$23
     }
     break label$23;
    };
   }
   if (!$15) {
    break label$1
   }
   FUNCTION_TABLE[$13 | 0]($8, $5, $2);
   FUNCTION_TABLE[$14 | 0]($2);
   FUNCTION_TABLE[$11 | 0]($3 + ($1 << 7 | 0) | 0, $10, $2);
   return;
  }
 }
 
 function forward_DCT_float($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $11 = 0, $19 = 0, $16 = 0, $8 = 0, $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $9 = 0, $17 = Math_fround(0), $18 = 0.0, $20 = 0;
  label$1 : {
   if (!$6) {
    break label$1
   }
   $8 = $2 + ($4 << 2 | 0) | 0;
   $1 = (HEAP32[($1 + 16 | 0) >> 2] | 0) << 2 | 0;
   $9 = HEAP32[(($0 + $1 | 0) + 72 | 0) >> 2] | 0;
   $0 = HEAP32[($0 + 360 | 0) >> 2] | 0;
   $10 = HEAP32[(($0 + $1 | 0) + 60 | 0) >> 2] | 0;
   $11 = HEAP32[($0 + 76 | 0) >> 2] | 0;
   $12 = HEAP32[($0 + 56 | 0) >> 2] | 0;
   $13 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   $14 = HEAP32[($0 + 48 | 0) >> 2] | 0;
   $15 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   label$2 : {
    if (!$7) {
     break label$2
    }
    $16 = 0;
    label$3 : while (1) {
     FUNCTION_TABLE[$14 | 0]($8, $5, $11);
     label$4 : {
      if (!$13) {
       break label$4
      }
      FUNCTION_TABLE[$13 | 0]($11, $9);
     }
     FUNCTION_TABLE[$15 | 0]($11);
     $0 = 0;
     label$5 : while (1) {
      label$6 : {
       label$7 : {
        $17 = Math_fround(+Math_fround(+Math_fround(HEAPF32[($11 + ($0 << 2 | 0) | 0) >> 2]) / +HEAPF64[((($0 & 7 | 0) << 3 | 0) + 66768 | 0) >> 3]) / +HEAPF64[(($0 & -8 | 0) + 66768 | 0) >> 3]);
        $18 = ($17 >= Math_fround(0.0) ? .5 : -.5) + +$17;
        if (!(Math_abs($18) < 2147483648.0)) {
         break label$7
        }
        $1 = ~~$18;
        break label$6;
       }
       $1 = -2147483648;
      }
      $2 = $16 << 7 | 0;
      HEAP16[(($7 + $2 | 0) + ($0 << 1 | 0) | 0) >> 1] = $1;
      $0 = $0 + 1 | 0;
      if (($0 | 0) != (64 | 0)) {
       continue label$5
      }
      break label$5;
     };
     $2 = $3 + $2 | 0;
     FUNCTION_TABLE[$12 | 0]($2, $10, $11);
     $0 = 0;
     label$8 : {
      if (!$13) {
       break label$8
      }
      label$9 : while (1) {
       $1 = 64513;
       label$10 : {
        label$11 : {
         $4 = $0 << 1 | 0;
         $19 = $2 + $4 | 0;
         $20 = HEAP16[$19 >> 1] | 0;
         if (($20 | 0) < (-1023 | 0)) {
          break label$11
         }
         $1 = 1023;
         if (($20 | 0) < (1024 | 0)) {
          break label$10
         }
        }
        HEAP16[$19 >> 1] = $1;
       }
       $1 = 64513;
       label$12 : {
        label$13 : {
         $4 = $2 + ($4 | 2 | 0) | 0;
         $19 = HEAP16[$4 >> 1] | 0;
         if (($19 | 0) < (-1023 | 0)) {
          break label$13
         }
         $1 = 1023;
         if (($19 | 0) < (1024 | 0)) {
          break label$12
         }
        }
        HEAP16[$4 >> 1] = $1;
       }
       $0 = $0 + 2 | 0;
       if (($0 | 0) != (64 | 0)) {
        continue label$9
       }
       break label$9;
      };
     }
     $5 = $5 + 8 | 0;
     $16 = $16 + 1 | 0;
     if (($16 | 0) != ($6 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$14 : {
    if (!$13) {
     break label$14
    }
    $7 = 0;
    label$15 : while (1) {
     FUNCTION_TABLE[$14 | 0]($8, $5, $11);
     FUNCTION_TABLE[$13 | 0]($11, $9);
     FUNCTION_TABLE[$15 | 0]($11);
     $2 = $3 + ($7 << 7 | 0) | 0;
     FUNCTION_TABLE[$12 | 0]($2, $10, $11);
     $0 = 0;
     label$16 : while (1) {
      $1 = 64513;
      label$17 : {
       label$18 : {
        $4 = $0 << 1 | 0;
        $19 = $2 + $4 | 0;
        $16 = HEAP16[$19 >> 1] | 0;
        if (($16 | 0) < (-1023 | 0)) {
         break label$18
        }
        $1 = 1023;
        if (($16 | 0) < (1024 | 0)) {
         break label$17
        }
       }
       HEAP16[$19 >> 1] = $1;
      }
      $1 = 64513;
      label$19 : {
       label$20 : {
        $4 = $2 + ($4 | 2 | 0) | 0;
        $19 = HEAP16[$4 >> 1] | 0;
        if (($19 | 0) < (-1023 | 0)) {
         break label$20
        }
        $1 = 1023;
        if (($19 | 0) < (1024 | 0)) {
         break label$19
        }
       }
       HEAP16[$4 >> 1] = $1;
      }
      $0 = $0 + 2 | 0;
      if (($0 | 0) != (64 | 0)) {
       continue label$16
      }
      break label$16;
     };
     $5 = $5 + 8 | 0;
     $7 = $7 + 1 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue label$15
     }
     break label$1;
    };
   }
   $19 = $6 & 1 | 0;
   $0 = 0;
   label$21 : {
    if (($6 | 0) == (1 | 0)) {
     break label$21
    }
    $4 = $6 & -2 | 0;
    $0 = 0;
    $1 = 0;
    label$22 : while (1) {
     FUNCTION_TABLE[$14 | 0]($8, $5, $11);
     FUNCTION_TABLE[$15 | 0]($11);
     $2 = $0 << 7 | 0;
     FUNCTION_TABLE[$12 | 0]($3 + $2 | 0, $10, $11);
     FUNCTION_TABLE[$14 | 0]($8, $5 + 8 | 0, $11);
     FUNCTION_TABLE[$15 | 0]($11);
     FUNCTION_TABLE[$12 | 0]($3 + ($2 | 128 | 0) | 0, $10, $11);
     $5 = $5 + 16 | 0;
     $0 = $0 + 2 | 0;
     $1 = $1 + 2 | 0;
     if (($1 | 0) != ($4 | 0)) {
      continue label$22
     }
     break label$22;
    };
   }
   if (!$19) {
    break label$1
   }
   FUNCTION_TABLE[$14 | 0]($8, $5, $11);
   FUNCTION_TABLE[$15 | 0]($11);
   FUNCTION_TABLE[$12 | 0]($3 + ($0 << 7 | 0) | 0, $10, $11);
   return;
  }
 }
 
 function convsamp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  HEAP32[$2 >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 8 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 16 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 20 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 24 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 28 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 32 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 36 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 40 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 44 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 48 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 52 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 56 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 60 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 64 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 68 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 72 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 76 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 80 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 84 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 88 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 92 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 96 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 100 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 104 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 108 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 112 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 116 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 120 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 124 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 128 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 132 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 136 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 140 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 144 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 148 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 152 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 156 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 160 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 164 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 168 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 172 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 176 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 180 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 184 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 188 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $3 = (HEAP32[($0 + 24 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 192 | 0) >> 2] = (HEAPU8[$3 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 196 | 0) >> 2] = (HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 200 | 0) >> 2] = (HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 204 | 0) >> 2] = (HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 208 | 0) >> 2] = (HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 212 | 0) >> 2] = (HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 216 | 0) >> 2] = (HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 220 | 0) >> 2] = (HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0;
  $1 = (HEAP32[($0 + 28 | 0) >> 2] | 0) + $1 | 0;
  HEAP32[($2 + 224 | 0) >> 2] = (HEAPU8[$1 >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 228 | 0) >> 2] = (HEAPU8[($1 + 1 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 232 | 0) >> 2] = (HEAPU8[($1 + 2 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 236 | 0) >> 2] = (HEAPU8[($1 + 3 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 240 | 0) >> 2] = (HEAPU8[($1 + 4 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 244 | 0) >> 2] = (HEAPU8[($1 + 5 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 248 | 0) >> 2] = (HEAPU8[($1 + 6 | 0) >> 0] | 0) + -128 | 0;
  HEAP32[($2 + 252 | 0) >> 2] = (HEAPU8[($1 + 7 | 0) >> 0] | 0) + -128 | 0;
 }
 
 function preprocess_deringing($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $8 = 0, $3 = 0, $4 = 0, $7 = 0, $14 = Math_fround(0), $2 = 0, $13 = Math_fround(0), $6 = 0, $15 = Math_fround(0), $9 = 0, $12 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $159 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $2 = 0;
  $3 = 0;
  $4 = 0;
  label$1 : while (1) {
   $5 = $4 << 2 | 0;
   $6 = HEAP32[($0 + ($5 | 12 | 0) | 0) >> 2] | 0;
   $7 = HEAP32[($0 + ($5 | 8 | 0) | 0) >> 2] | 0;
   $8 = HEAP32[($0 + ($5 | 4 | 0) | 0) >> 2] | 0;
   $5 = HEAP32[($0 + $5 | 0) >> 2] | 0;
   $2 = $6 + ($7 + ($8 + ($5 + $2 | 0) | 0) | 0) | 0;
   $3 = ((($3 + (($5 | 0) > (126 | 0)) | 0) + (($8 | 0) > (126 | 0)) | 0) + (($7 | 0) > (126 | 0)) | 0) + (($6 | 0) > (126 | 0)) | 0;
   $4 = $4 + 4 | 0;
   if (($4 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   if (!($3 & 2147483583 | 0)) {
    break label$2
   }
   $5 = HEAPU16[$1 >> 1] | 0;
   $5 = $5 >>> 0 > 15 >>> 0 ? 31 : $5 << 1 | 0;
   $4 = (8128 - $2 | 0 | 0) / ($3 | 0) | 0;
   $6 = (($5 | 0) < ($4 | 0) ? $5 : $4) + 127 | 0;
   $5 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $2 = HEAP32[(144016 + ($5 << 2 | 0) | 0) >> 2] | 0;
      if ((HEAP32[($0 + ($2 << 2 | 0) | 0) >> 2] | 0 | 0) < (127 | 0)) {
       break label$5
      }
      $7 = ($5 | 0) > (63 | 0) ? $5 : 63;
      $8 = $7 + 1 | 0;
      $3 = $5;
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         $4 = $3;
         if (($3 | 0) != ($7 | 0)) {
          break label$8
         }
         $4 = $7;
         $3 = $8;
         break label$6;
        }
        $3 = $4 + 1 | 0;
        if ((HEAP32[($0 + ((HEAP32[(144016 + ($3 << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) > (126 | 0)) {
         continue label$7
        }
        break label$7;
       };
      }
      $7 = $4 + 2 | 0;
      label$9 : {
       if (($5 | 0) <= ($4 | 0)) {
        break label$9
       }
       $5 = $7;
       break label$4;
      }
      $8 = HEAP32[($0 + ((HEAP32[(144016 + ((($5 | 0) > (0 | 0) ? $5 + -1 | 0 : 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      $1 = $8 - (HEAP32[($0 + ((HEAP32[(144016 + ((($5 | 0) > (1 | 0) ? $5 + -2 | 0 : 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
      $8 = 127 - $8 | 0;
      $159 = ($1 | 0) > ($8 | 0) ? $1 : $8;
      $8 = HEAP32[($0 + ((HEAP32[(144016 + ((($3 | 0) < (63 | 0) ? $3 : 63) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      $1 = $8 - (HEAP32[($0 + ((HEAP32[(144016 + ((($4 | 0) < (61 | 0) ? $7 : 63) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
      $8 = 127 - $8 | 0;
      $1 = ($1 | 0) > ($8 | 0) ? $1 : $8;
      $9 = $5 ? $159 : $1;
      $8 = $3 - $5 | 0;
      $10 = Math_fround(Math_imul($9, $8) | 0);
      $11 = Math_fround(0 - Math_imul($8, ($3 | 0) == (64 | 0) ? $9 : $1) | 0 | 0);
      $12 = Math_fround(Math_fround(1.0) / Math_fround($8 + 1 | 0 | 0));
      $13 = $12;
      label$10 : while (1) {
       label$11 : {
        label$12 : {
         $14 = Math_fround($13 * $13);
         $15 = Math_fround($13 * $14);
         $16 = Math_fround($14 * Math_fround(3.0));
         $17 = Math_fround($15 + $15);
         $14 = Math_fround(Math_ceil(Math_fround(Math_fround($11 * Math_fround($15 - $14)) + Math_fround(Math_fround(Math_fround($16 - $17) * Math_fround(127.0)) + Math_fround(Math_fround(Math_fround(Math_fround($17 - $16) + Math_fround(1.0)) * Math_fround(127.0)) + Math_fround(Math_fround($13 + Math_fround($15 - Math_fround($14 + $14))) * $10))))));
         if (!(Math_fround(Math_abs($14)) < Math_fround(2147483648.0))) {
          break label$12
         }
         $3 = ~~$14;
         break label$11;
        }
        $3 = -2147483648;
       }
       HEAP32[($0 + ($2 << 2 | 0) | 0) >> 2] = ($6 | 0) < ($3 | 0) ? $6 : $3;
       label$13 : {
        if (($5 | 0) != ($4 | 0)) {
         break label$13
        }
        $5 = $7;
        break label$4;
       }
       $13 = Math_fround($12 + $13);
       $5 = $5 + 1 | 0;
       $2 = HEAP32[(144016 + ($5 << 2 | 0) | 0) >> 2] | 0;
       continue label$10;
      };
     }
     $5 = $5 + 1 | 0;
    }
    if (($5 | 0) < (64 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function quantize($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$2 = 0, $4 = 0, $3 = 0, i64toi32_i32$3 = 0, $6 = 0, $7 = 0, $21 = 0, $22 = 0, $30$hi = 0, $32$hi = 0, $33$hi = 0, $36$hi = 0, $43$hi = 0, $45$hi = 0, $46$hi = 0, $49$hi = 0;
  $3 = 0;
  label$1 : while (1) {
   $4 = $3 << 2 | 0;
   $5 = $1 + $4 | 0;
   $6 = HEAP32[$5 >> 2] | 0;
   $7 = HEAP32[($5 + 768 | 0) >> 2] | 0;
   $5 = HEAP32[($5 + 256 | 0) >> 2] | 0;
   label$2 : {
    label$3 : {
     $4 = HEAP32[($2 + $4 | 0) >> 2] | 0;
     if (($4 | 0) > (-1 | 0)) {
      break label$3
     }
     i64toi32_i32$0 = 0;
     $30$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $32$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $30$hi;
     i64toi32_i32$1 = $32$hi;
     i64toi32_i32$1 = __wasm_i64_mul($5 - $4 | 0 | 0, i64toi32_i32$0 | 0, $6 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $33$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $36$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $33$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$1 = $36$hi;
     i64toi32_i32$3 = $7 + 32 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $5 = 0 - $21 | 0;
     break label$2;
    }
    i64toi32_i32$1 = 0;
    $43$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $45$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $43$hi;
    i64toi32_i32$2 = $45$hi;
    i64toi32_i32$2 = __wasm_i64_mul($5 + $4 | 0 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $46$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $49$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $46$hi;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = $49$hi;
    i64toi32_i32$3 = $7 + 32 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $5 = $22;
   }
   HEAP16[($0 + ($3 << 1 | 0) | 0) >> 1] = $5;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function convsamp_float($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = (HEAP32[$0 >> 2] | 0) + $1 | 0;
  HEAPF32[$2 >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 4 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 8 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 12 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 16 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 20 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 24 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 28 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 4 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 32 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 36 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 40 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 44 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 48 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 52 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 56 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 60 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 8 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 64 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 68 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 72 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 76 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 80 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 84 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 88 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 92 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 12 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 96 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 100 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 104 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 108 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 112 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 116 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 120 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 124 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 16 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 128 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 132 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 136 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 140 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 144 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 148 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 152 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 156 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 160 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 164 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 168 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 172 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 176 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 180 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 184 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 188 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $3 = (HEAP32[($0 + 24 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 192 | 0) >> 2] = Math_fround((HEAPU8[$3 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 196 | 0) >> 2] = Math_fround((HEAPU8[($3 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 200 | 0) >> 2] = Math_fround((HEAPU8[($3 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 204 | 0) >> 2] = Math_fround((HEAPU8[($3 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 208 | 0) >> 2] = Math_fround((HEAPU8[($3 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 212 | 0) >> 2] = Math_fround((HEAPU8[($3 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 216 | 0) >> 2] = Math_fround((HEAPU8[($3 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 220 | 0) >> 2] = Math_fround((HEAPU8[($3 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
  $1 = (HEAP32[($0 + 28 | 0) >> 2] | 0) + $1 | 0;
  HEAPF32[($2 + 224 | 0) >> 2] = Math_fround((HEAPU8[$1 >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 228 | 0) >> 2] = Math_fround((HEAPU8[($1 + 1 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 232 | 0) >> 2] = Math_fround((HEAPU8[($1 + 2 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 236 | 0) >> 2] = Math_fround((HEAPU8[($1 + 3 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 240 | 0) >> 2] = Math_fround((HEAPU8[($1 + 4 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 244 | 0) >> 2] = Math_fround((HEAPU8[($1 + 5 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 248 | 0) >> 2] = Math_fround((HEAPU8[($1 + 6 | 0) >> 0] | 0) + -128 | 0 | 0);
  HEAPF32[($2 + 252 | 0) >> 2] = Math_fround((HEAPU8[($1 + 7 | 0) >> 0] | 0) + -128 | 0 | 0);
 }
 
 function float_preprocess_deringing($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $2 = 0, $7 = Math_fround(0), $4 = 0, $10 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $166 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $2 = 0;
  $3 = Math_fround(0.0);
  $4 = 0;
  label$1 : while (1) {
   $5 = $4 << 2 | 0;
   $6 = Math_fround(HEAPF32[($0 + $5 | 0) >> 2]);
   $7 = Math_fround(HEAPF32[($0 + ($5 | 4 | 0) | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($0 + ($5 | 8 | 0) | 0) >> 2]);
   $9 = Math_fround(HEAPF32[($0 + ($5 | 12 | 0) | 0) >> 2]);
   $3 = Math_fround(Math_fround(Math_fround(Math_fround($3 + $6) + $7) + $8) + $9);
   $2 = ((($2 + ($6 >= Math_fround(127.0)) | 0) + ($7 >= Math_fround(127.0)) | 0) + ($8 >= Math_fround(127.0)) | 0) + ($9 >= Math_fround(127.0)) | 0;
   $4 = $4 + 4 | 0;
   if (($4 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  label$2 : {
   if (!($2 & 2147483583 | 0)) {
    break label$2
   }
   $5 = HEAPU16[$1 >> 1] | 0;
   $6 = $5 >>> 0 > 15 >>> 0 ? Math_fround(31.0) : Math_fround($5 << 1 | 0 | 0);
   $3 = Math_fround(Math_fround(Math_fround(8128.0) - $3) / Math_fround($2 | 0));
   $8 = Math_fround(($6 < $3 ? $6 : $3) + Math_fround(127.0));
   $5 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $1 = HEAP32[(144016 + ($5 << 2 | 0) | 0) >> 2] | 0;
      if (Math_fround(HEAPF32[($0 + ($1 << 2 | 0) | 0) >> 2]) < Math_fround(127.0)) {
       break label$5
      }
      $10 = ($5 | 0) > (63 | 0) ? $5 : 63;
      $11 = $10 + 1 | 0;
      $2 = $5;
      label$6 : {
       label$7 : while (1) {
        label$8 : {
         $4 = $2;
         if (($2 | 0) != ($10 | 0)) {
          break label$8
         }
         $4 = $10;
         $2 = $11;
         break label$6;
        }
        $2 = $4 + 1 | 0;
        if (Math_fround(HEAPF32[($0 + ((HEAP32[(144016 + ($2 << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]) >= Math_fround(127.0)) {
         continue label$7
        }
        break label$7;
       };
      }
      $10 = $4 + 2 | 0;
      label$9 : {
       if (($5 | 0) <= ($4 | 0)) {
        break label$9
       }
       $5 = $10;
       break label$4;
      }
      $11 = $2 - $5 | 0;
      $12 = $11 + 1 | 0;
      label$10 : {
       label$11 : {
        $3 = Math_fround(HEAPF32[($0 + ((HEAP32[(144016 + ((($5 | 0) > (0 | 0) ? $5 + -1 | 0 : 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
        $6 = Math_fround($3 - Math_fround(HEAPF32[($0 + ((HEAP32[(144016 + ((($5 | 0) > (1 | 0) ? $5 + -2 | 0 : 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
        $3 = Math_fround(Math_fround(127.0) - $3);
        $166 = $6 > $3 ? $6 : $3;
        $3 = Math_fround(HEAPF32[($0 + ((HEAP32[(144016 + ((($2 | 0) < (63 | 0) ? $2 : 63) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]);
        $6 = Math_fround($3 - Math_fround(HEAPF32[($0 + ((HEAP32[(144016 + ((($4 | 0) < (61 | 0) ? $10 : 63) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2]));
        $3 = Math_fround(Math_fround(127.0) - $3);
        $3 = $6 > $3 ? $6 : $3;
        $6 = $5 ? $166 : $3;
        $7 = Math_fround(Math_fround(127.0) - $6);
        if (!(Math_fround(Math_abs($7)) < Math_fround(2147483648.0))) {
         break label$11
        }
        $13 = ~~$7;
        break label$10;
       }
       $13 = -2147483648;
      }
      $7 = Math_fround($12 | 0);
      $12 = Math_imul(127 - $13 | 0, $11);
      label$12 : {
       label$13 : {
        $3 = Math_fround(Math_fround(127.0) - (($2 | 0) == (64 | 0) ? $6 : $3));
        if (!(Math_fround(Math_abs($3)) < Math_fround(2147483648.0))) {
         break label$13
        }
        $2 = ~~$3;
        break label$12;
       }
       $2 = -2147483648;
      }
      $14 = Math_fround($12 | 0);
      $15 = Math_fround(Math_imul($2 + -127 | 0, $11) | 0);
      $16 = Math_fround(Math_fround(1.0) / $7);
      $3 = $16;
      label$14 : while (1) {
       $6 = Math_fround($3 * $3);
       $7 = Math_fround($3 * $6);
       $9 = Math_fround($6 * Math_fround(3.0));
       $17 = Math_fround($7 + $7);
       $6 = Math_fround(Math_fround($15 * Math_fround($7 - $6)) + Math_fround(Math_fround(Math_fround($9 - $17) * Math_fround(127.0)) + Math_fround(Math_fround(Math_fround(Math_fround($17 - $9) + Math_fround(1.0)) * Math_fround(127.0)) + Math_fround(Math_fround($3 + Math_fround($7 - Math_fround($6 + $6))) * $14))));
       HEAPF32[($0 + ($1 << 2 | 0) | 0) >> 2] = $6 < $8 ? $6 : $8;
       label$15 : {
        if (($5 | 0) != ($4 | 0)) {
         break label$15
        }
        $5 = $10;
        break label$4;
       }
       $3 = Math_fround($16 + $3);
       $5 = $5 + 1 | 0;
       $1 = HEAP32[(144016 + ($5 << 2 | 0) | 0) >> 2] | 0;
       continue label$14;
      };
     }
     $5 = $5 + 1 | 0;
    }
    if (($5 | 0) < (64 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function quantize_float($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = Math_fround(0), $6 = 0;
  $3 = 0;
  label$1 : while (1) {
   label$2 : {
    label$3 : {
     $4 = $3 << 2 | 0;
     $5 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + $4 | 0) >> 2]) * Math_fround(HEAPF32[($1 + $4 | 0) >> 2])) + Math_fround(16384.5));
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$3
     }
     $4 = ~~$5;
     break label$2;
    }
    $4 = -2147483648;
   }
   HEAP16[($0 + ($3 << 1 | 0) | 0) >> 1] = $4 + -16384 | 0;
   label$4 : {
    label$5 : {
     $4 = $3 | 1 | 0;
     $6 = $4 << 2 | 0;
     $5 = Math_fround(Math_fround(Math_fround(HEAPF32[($2 + $6 | 0) >> 2]) * Math_fround(HEAPF32[($1 + $6 | 0) >> 2])) + Math_fround(16384.5));
     if (!(Math_fround(Math_abs($5)) < Math_fround(2147483648.0))) {
      break label$5
     }
     $6 = ~~$5;
     break label$4;
    }
    $6 = -2147483648;
   }
   HEAP16[($0 + ($4 << 1 | 0) | 0) >> 1] = $6 + -16384 | 0;
   $3 = $3 + 2 | 0;
   if (($3 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
 }
 
 function jpeg_make_c_derived_tbl($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $8 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $10 = 0;
  $4 = __stack_pointer - 1312 | 0;
  __stack_pointer = $4;
  label$1 : {
   if ($2 >>> 0 < 4 >>> 0) {
    break label$1
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $2;
   HEAP32[($5 + 20 | 0) >> 2] = 50;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   $6 = HEAP32[(($0 + ($1 ? 88 : 104) | 0) + ($2 << 2 | 0) | 0) >> 2] | 0;
   if ($6) {
    break label$2
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $2;
   HEAP32[($5 + 20 | 0) >> 2] = 50;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$3 : {
   $7 = HEAP32[$3 >> 2] | 0;
   if ($7) {
    break label$3
   }
   $7 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1280) | 0;
   HEAP32[$3 >> 2] = $7;
  }
  label$4 : {
   label$5 : {
    $2 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
    if ($2) {
     break label$5
    }
    $2 = 0;
    break label$4;
   }
   memset($4 + 1040 | 0 | 0, 1 | 0, $2 | 0) | 0;
  }
  label$6 : {
   $5 = HEAPU8[($6 + 2 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if ($3 >>> 0 < 257 >>> 0) {
    break label$6
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$7 : {
   label$8 : {
    if ($5) {
     break label$8
    }
    $3 = $2;
    break label$7;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 2 | 0, $5 | 0) | 0;
  }
  label$9 : {
   $5 = HEAPU8[($6 + 3 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$9
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$10 : {
   label$11 : {
    if ($5) {
     break label$11
    }
    $2 = $3;
    break label$10;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 3 | 0, $5 | 0) | 0;
  }
  label$12 : {
   $5 = HEAPU8[($6 + 4 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$12
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$13 : {
   label$14 : {
    if ($5) {
     break label$14
    }
    $3 = $2;
    break label$13;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 4 | 0, $5 | 0) | 0;
  }
  label$15 : {
   $5 = HEAPU8[($6 + 5 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$15
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$16 : {
   label$17 : {
    if ($5) {
     break label$17
    }
    $2 = $3;
    break label$16;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 5 | 0, $5 | 0) | 0;
  }
  label$18 : {
   $5 = HEAPU8[($6 + 6 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$18
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$19 : {
   label$20 : {
    if ($5) {
     break label$20
    }
    $3 = $2;
    break label$19;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 6 | 0, $5 | 0) | 0;
  }
  label$21 : {
   $5 = HEAPU8[($6 + 7 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$21
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$22 : {
   label$23 : {
    if ($5) {
     break label$23
    }
    $2 = $3;
    break label$22;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 7 | 0, $5 | 0) | 0;
  }
  label$24 : {
   $5 = HEAPU8[($6 + 8 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$24
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$25 : {
   label$26 : {
    if ($5) {
     break label$26
    }
    $3 = $2;
    break label$25;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 8 | 0, $5 | 0) | 0;
  }
  label$27 : {
   $5 = HEAPU8[($6 + 9 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$27
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$28 : {
   label$29 : {
    if ($5) {
     break label$29
    }
    $2 = $3;
    break label$28;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 9 | 0, $5 | 0) | 0;
  }
  label$30 : {
   $5 = HEAPU8[($6 + 10 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$30
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$31 : {
   label$32 : {
    if ($5) {
     break label$32
    }
    $3 = $2;
    break label$31;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 10 | 0, $5 | 0) | 0;
  }
  label$33 : {
   $5 = HEAPU8[($6 + 11 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$33
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$34 : {
   label$35 : {
    if ($5) {
     break label$35
    }
    $2 = $3;
    break label$34;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 11 | 0, $5 | 0) | 0;
  }
  label$36 : {
   $5 = HEAPU8[($6 + 12 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$36
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$37 : {
   label$38 : {
    if ($5) {
     break label$38
    }
    $3 = $2;
    break label$37;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 12 | 0, $5 | 0) | 0;
  }
  label$39 : {
   $5 = HEAPU8[($6 + 13 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$39
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$40 : {
   label$41 : {
    if ($5) {
     break label$41
    }
    $2 = $3;
    break label$40;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 13 | 0, $5 | 0) | 0;
  }
  label$42 : {
   $5 = HEAPU8[($6 + 14 | 0) >> 0] | 0;
   $3 = $2 + $5 | 0;
   if (($3 | 0) < (257 | 0)) {
    break label$42
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$43 : {
   label$44 : {
    if ($5) {
     break label$44
    }
    $3 = $2;
    break label$43;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 14 | 0, $5 | 0) | 0;
  }
  label$45 : {
   $5 = HEAPU8[($6 + 15 | 0) >> 0] | 0;
   $2 = $3 + $5 | 0;
   if (($2 | 0) < (257 | 0)) {
    break label$45
   }
   $8 = HEAP32[$0 >> 2] | 0;
   HEAP32[($8 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
  }
  label$46 : {
   label$47 : {
    if ($5) {
     break label$47
    }
    $2 = $3;
    break label$46;
   }
   memset(($4 + 1040 | 0) + $3 | 0 | 0, 15 | 0, $5 | 0) | 0;
  }
  label$48 : {
   $3 = HEAPU8[($6 + 16 | 0) >> 0] | 0;
   $9 = $2 + $3 | 0;
   if (($9 | 0) < (257 | 0)) {
    break label$48
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 20 | 0) >> 2] = 8;
   FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
  }
  label$49 : {
   label$50 : {
    if ($3) {
     break label$50
    }
    $9 = $2;
    break label$49;
   }
   memset(($4 + 1040 | 0) + $2 | 0 | 0, 16 | 0, $3 | 0) | 0;
  }
  $2 = 0;
  HEAP8[(($4 + 1040 | 0) + $9 | 0) >> 0] = 0;
  label$51 : {
   $8 = HEAPU8[($4 + 1040 | 0) >> 0] | 0;
   if (!$8) {
    break label$51
   }
   $5 = ($8 << 24 | 0) >> 24 | 0;
   $3 = 0;
   label$52 : while (1) {
    label$53 : {
     if (($5 | 0) != (($8 << 24 | 0) >> 24 | 0 | 0)) {
      break label$53
     }
     label$54 : while (1) {
      HEAP32[($4 + ($3 << 2 | 0) | 0) >> 2] = $2;
      $2 = $2 + 1 | 0;
      $3 = $3 + 1 | 0;
      $8 = HEAP8[(($4 + 1040 | 0) + $3 | 0) >> 0] | 0;
      if (($5 | 0) == ($8 | 0)) {
       continue label$54
      }
      break label$54;
     };
    }
    label$55 : {
     if (($2 | 0) < (1 << $5 | 0 | 0)) {
      break label$55
     }
     $10 = HEAP32[$0 >> 2] | 0;
     HEAP32[($10 + 20 | 0) >> 2] = 8;
     FUNCTION_TABLE[HEAP32[$10 >> 2] | 0 | 0]($0);
    }
    $5 = $5 + 1 | 0;
    $2 = $2 << 1 | 0;
    if ($8 & 255 | 0) {
     continue label$52
    }
    break label$52;
   };
  }
  $2 = 0;
  memset($7 + 1024 | 0 | 0, 0 | 0, 256 | 0) | 0;
  label$56 : {
   if (($9 | 0) < (1 | 0)) {
    break label$56
   }
   $8 = $1 ? 15 : 255;
   label$57 : while (1) {
    label$58 : {
     label$59 : {
      $3 = HEAPU8[(($6 + $2 | 0) + 17 | 0) >> 0] | 0;
      if ($8 >>> 0 < $3 >>> 0) {
       break label$59
      }
      if (!(HEAPU8[(($7 + $3 | 0) + 1024 | 0) >> 0] | 0)) {
       break label$58
      }
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[($5 + 20 | 0) >> 2] = 8;
     FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
    }
    HEAP32[($7 + ($3 << 2 | 0) | 0) >> 2] = HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] | 0;
    HEAP8[(($7 + $3 | 0) + 1024 | 0) >> 0] = HEAPU8[(($4 + 1040 | 0) + $2 | 0) >> 0] | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($9 | 0)) {
     continue label$57
    }
    break label$57;
   };
  }
  __stack_pointer = $4 + 1312 | 0;
 }
 
 function jpeg_gen_optimal_table($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $9 = 0, $8 = 0, $4 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0, $7 = 0, $10 = 0, $34 = 0, $78 = 0, $210 = 0, $213 = 0, $262 = 0, $264 = 0;
  $3 = __stack_pointer - 2128 | 0;
  __stack_pointer = $3;
  i64toi32_i32$1 = $3 + 2096 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3 + 2104 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP8[($3 + 2112 | 0) >> 0] = 0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 2080 | 0) >> 2] = 0;
  HEAP32[($3 + 2084 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 2088 | 0) >> 2] = 0;
  HEAP32[($3 + 2092 | 0) >> 2] = i64toi32_i32$0;
  memset($3 + 1040 | 0 | 0, 0 | 0, 1028 | 0) | 0;
  $4 = memset($3 | 0, 255 | 0, 1028 | 0) | 0;
  HEAP32[($2 + 1024 | 0) >> 2] = 1;
  $5 = 1e9;
  $6 = 0;
  $7 = -1;
  label$1 : while (1) {
   $3 = HEAP32[($2 + ($6 << 2 | 0) | 0) >> 2] | 0;
   $34 = $3;
   $3 = !$3 | ($3 | 0) > ($5 | 0) | 0;
   $5 = $3 ? $5 : $34;
   $7 = $3 ? $7 : $6;
   $8 = 1e9;
   $3 = 0;
   $9 = -1;
   $6 = $6 + 1 | 0;
   if (($6 | 0) != (257 | 0)) {
    continue label$1
   }
   label$2 : {
    label$3 : while (1) {
     $6 = HEAP32[($2 + ($3 << 2 | 0) | 0) >> 2] | 0;
     $10 = !$6 | ($6 | 0) > ($8 | 0) | 0 | ($3 | 0) == ($7 | 0) | 0;
     $5 = $10 ? $9 : $3;
     $9 = $3 | 1 | 0;
     if (($9 | 0) == (257 | 0)) {
      break label$2
     }
     $6 = $10 ? $8 : $6;
     $78 = $6;
     $8 = HEAP32[($2 + ($9 << 2 | 0) | 0) >> 2] | 0;
     $6 = !$8 | ($8 | 0) > ($6 | 0) | 0 | ($9 | 0) == ($7 | 0) | 0;
     $8 = $6 ? $78 : $8;
     $9 = $6 ? $5 : $9;
     $3 = $3 + 2 | 0;
     continue label$3;
    };
   }
   $3 = 0;
   label$4 : {
    if (($5 | 0) >= (0 | 0)) {
     break label$4
    }
    label$5 : while (1) {
     label$6 : {
      $9 = HEAP32[(($4 + 1040 | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
      if (!$9) {
       break label$6
      }
      label$7 : {
       if (($9 | 0) < (33 | 0)) {
        break label$7
       }
       $8 = HEAP32[$0 >> 2] | 0;
       HEAP32[($8 + 20 | 0) >> 2] = 39;
       FUNCTION_TABLE[HEAP32[$8 >> 2] | 0 | 0]($0);
      }
      $9 = ($4 + 2080 | 0) + $9 | 0;
      HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) + 1 | 0;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != (257 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $10 = 32;
    label$8 : while (1) {
     label$9 : {
      label$10 : {
       $6 = ($4 + 2080 | 0) + $10 | 0;
       $7 = HEAPU8[$6 >> 0] | 0;
       if ($7) {
        break label$10
       }
       $0 = $10 + -1 | 0;
       break label$9;
      }
      $5 = $10 + -2 | 0;
      $0 = $10 + -1 | 0;
      $2 = ($4 + 2080 | 0) + $0 | 0;
      label$11 : while (1) {
       $3 = $5;
       label$12 : while (1) {
        $9 = $3;
        $3 = $3 + -1 | 0;
        $8 = $9 + ($4 + 2080 | 0) | 0;
        if (!(HEAPU8[$8 >> 0] | 0)) {
         continue label$12
        }
        break label$12;
       };
       HEAP8[$6 >> 0] = $7 + -2 | 0;
       HEAP8[$2 >> 0] = (HEAPU8[$2 >> 0] | 0) + 1 | 0;
       $3 = ($9 + ($4 + 2080 | 0) | 0) + 1 | 0;
       HEAP8[$3 >> 0] = (HEAPU8[$3 >> 0] | 0) + 2 | 0;
       HEAP8[$8 >> 0] = (HEAPU8[$8 >> 0] | 0) + -1 | 0;
       $7 = HEAPU8[$6 >> 0] | 0;
       if ($7) {
        continue label$11
       }
       break label$11;
      };
     }
     $3 = $10 >>> 0 > 17 >>> 0;
     $10 = $0;
     if ($3) {
      continue label$8
     }
     break label$8;
    };
    $3 = 16;
    label$13 : while (1) {
     $9 = ($4 + 2080 | 0) + $3 | 0;
     $3 = $3 + -1 | 0;
     $8 = HEAPU8[$9 >> 0] | 0;
     if (!$8) {
      continue label$13
     }
     break label$13;
    };
    HEAP8[$9 >> 0] = $8 + -1 | 0;
    HEAP8[($1 + 16 | 0) >> 0] = HEAPU8[(($4 + 2080 | 0) + 16 | 0) >> 0] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 2088 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($4 + 2092 | 0) >> 2] | 0;
    $210 = i64toi32_i32$0;
    i64toi32_i32$0 = $1 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $210;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[($4 + 2080 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4 + 2084 | 0) >> 2] | 0;
    $213 = i64toi32_i32$1;
    i64toi32_i32$1 = $1;
    HEAP32[i64toi32_i32$1 >> 2] = $213;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $9 = 0;
    $8 = 1;
    label$14 : while (1) {
     $3 = 0;
     label$15 : while (1) {
      label$16 : {
       if ((HEAP32[(($4 + 1040 | 0) + ($3 << 2 | 0) | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$16
       }
       HEAP8[(($1 + $9 | 0) + 17 | 0) >> 0] = $3;
       $9 = $9 + 1 | 0;
      }
      label$17 : {
       $6 = $3 | 1 | 0;
       if ((HEAP32[(($4 + 1040 | 0) + ($6 << 2 | 0) | 0) >> 2] | 0 | 0) != ($8 | 0)) {
        break label$17
       }
       HEAP8[(($1 + $9 | 0) + 17 | 0) >> 0] = $6;
       $9 = $9 + 1 | 0;
      }
      $3 = $3 + 2 | 0;
      if (($3 | 0) != (256 | 0)) {
       continue label$15
      }
      break label$15;
     };
     $8 = $8 + 1 | 0;
     if (($8 | 0) != (33 | 0)) {
      continue label$14
     }
     break label$14;
    };
    HEAP32[($1 + 276 | 0) >> 2] = 0;
    __stack_pointer = $4 + 2128 | 0;
    return;
   }
   $3 = $7 << 2 | 0;
   $9 = $2 + $3 | 0;
   $262 = $9;
   $264 = HEAP32[$9 >> 2] | 0;
   $8 = $5 << 2 | 0;
   $9 = $2 + $8 | 0;
   HEAP32[$262 >> 2] = $264 + (HEAP32[$9 >> 2] | 0) | 0;
   HEAP32[$9 >> 2] = 0;
   $9 = ($4 + 1040 | 0) + $3 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1 | 0;
   label$18 : {
    $9 = $4 + $3 | 0;
    $3 = HEAP32[$9 >> 2] | 0;
    if (($3 | 0) < (0 | 0)) {
     break label$18
    }
    label$19 : while (1) {
     $3 = $3 << 2 | 0;
     $9 = ($4 + 1040 | 0) + $3 | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1 | 0;
     $9 = $4 + $3 | 0;
     $3 = HEAP32[$9 >> 2] | 0;
     if (($3 | 0) > (-1 | 0)) {
      continue label$19
     }
     break label$19;
    };
   }
   HEAP32[$9 >> 2] = $5;
   $3 = ($4 + 1040 | 0) + $8 | 0;
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + 1 | 0;
   $6 = 0;
   $5 = 1e9;
   $7 = -1;
   $3 = HEAP32[($4 + $8 | 0) >> 2] | 0;
   if (($3 | 0) < (0 | 0)) {
    continue label$1
   }
   label$20 : while (1) {
    $3 = $3 << 2 | 0;
    $9 = ($4 + 1040 | 0) + $3 | 0;
    HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1 | 0;
    $7 = -1;
    $3 = HEAP32[($4 + $3 | 0) >> 2] | 0;
    if (($3 | 0) > (-1 | 0)) {
     continue label$20
    }
    break label$20;
   };
   $5 = 1e9;
   continue label$1;
  };
 }
 
 function jinit_huff_encoder($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 112) | 0;
  HEAP32[($0 + 364 | 0) >> 2] = $1;
  i64toi32_i32$1 = $1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[$1 >> 2] = 30;
  i64toi32_i32$1 = $1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 92 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 100 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function start_pass_huff($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = $1 ? 31 : 32;
  HEAP32[($2 + 4 | 0) >> 2] = $1 ? 33 : 34;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = jsimd_can_huff_encode_one_block() | 0), HEAP32[(wasm2js_i32$0 + 108 | 0) >> 2] = wasm2js_i32$1;
  label$1 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = 0;
   label$2 : {
    if ($1) {
     break label$2
    }
    label$3 : while (1) {
     $4 = $3 << 2 | 0;
     $5 = HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] | 0;
     $1 = HEAP32[($5 + 24 | 0) >> 2] | 0;
     $5 = HEAP32[($5 + 20 | 0) >> 2] | 0;
     jpeg_make_c_derived_tbl($0 | 0, 1 | 0, $5 | 0, ($2 + ($5 << 2 | 0) | 0) + 44 | 0 | 0);
     jpeg_make_c_derived_tbl($0 | 0, 0 | 0, $1 | 0, ($2 + ($1 << 2 | 0) | 0) + 60 | 0 | 0);
     HEAP32[(($2 + $4 | 0) + 20 | 0) >> 2] = 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   label$4 : while (1) {
    $5 = $3 << 2 | 0;
    $4 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
    $1 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    label$5 : {
     $4 = HEAP32[($4 + 20 | 0) >> 2] | 0;
     if ($4 >>> 0 < 4 >>> 0) {
      break label$5
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 24 | 0) >> 2] = $4;
     HEAP32[($6 + 20 | 0) >> 2] = 50;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    label$6 : {
     if ($1 >>> 0 < 4 >>> 0) {
      break label$6
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 24 | 0) >> 2] = $1;
     HEAP32[($6 + 20 | 0) >> 2] = 50;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    label$7 : {
     $6 = ($2 + ($4 << 2 | 0) | 0) + 76 | 0;
     $4 = HEAP32[$6 >> 2] | 0;
     if ($4) {
      break label$7
     }
     $4 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1028) | 0;
     HEAP32[$6 >> 2] = $4;
    }
    memset($4 | 0, 0 | 0, 1028 | 0) | 0;
    label$8 : {
     $4 = ($2 + ($1 << 2 | 0) | 0) + 92 | 0;
     $1 = HEAP32[$4 >> 2] | 0;
     if ($1) {
      break label$8
     }
     $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1028) | 0;
     HEAP32[$4 >> 2] = $1;
    }
    memset($1 | 0, 0 | 0, 1028 | 0) | 0;
    HEAP32[(($2 + $5 | 0) + 20 | 0) >> 2] = 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  $0 = HEAP32[($0 + 200 | 0) >> 2] | 0;
  HEAP32[($2 + 40 | 0) >> 2] = 0;
  HEAP32[($2 + 36 | 0) >> 2] = $0;
 }
 
 function finish_pass_gather($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, i64toi32_i32$0 = 0, $6 = 0, $8 = 0, $3 = 0, $5 = 0, $2 = 0, $7 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 16 | 0) >> 2] = 0;
  HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 24 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 0;
  HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = 0;
   label$2 : while (1) {
    $4 = HEAP32[(($0 + ($3 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
    $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
    label$3 : {
     $4 = (HEAP32[($4 + 20 | 0) >> 2] | 0) << 2 | 0;
     $6 = ($1 + 16 | 0) + $4 | 0;
     if (HEAP32[$6 >> 2] | 0) {
      break label$3
     }
     label$4 : {
      $7 = ($0 + $4 | 0) + 88 | 0;
      $8 = HEAP32[$7 >> 2] | 0;
      if ($8) {
       break label$4
      }
      $8 = jpeg_alloc_huff_table($0 | 0) | 0;
      HEAP32[$7 >> 2] = $8;
     }
     jpeg_gen_optimal_table($0 | 0, $8 | 0, HEAP32[(($2 + $4 | 0) + 76 | 0) >> 2] | 0 | 0);
     HEAP32[$6 >> 2] = 1;
    }
    label$5 : {
     $4 = $5 << 2 | 0;
     $5 = $1 + $4 | 0;
     if (HEAP32[$5 >> 2] | 0) {
      break label$5
     }
     label$6 : {
      $8 = ($0 + $4 | 0) + 104 | 0;
      $6 = HEAP32[$8 >> 2] | 0;
      if ($6) {
       break label$6
      }
      $6 = jpeg_alloc_huff_table($0 | 0) | 0;
      HEAP32[$8 >> 2] = $6;
     }
     jpeg_gen_optimal_table($0 | 0, $6 | 0, HEAP32[(($2 + $4 | 0) + 92 | 0) >> 2] | 0 | 0);
     HEAP32[$5 >> 2] = 1;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function finish_pass_huff($0) {
  $0 = $0 | 0;
  var $4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $6 = 0, $1 = 0, i64toi32_i32$2 = 0, $7 = 0, $5 = 0, $10 = 0, $2 = 0, $9 = 0, $8 = 0, $31 = 0, $36 = 0, $138 = 0, $143 = 0;
  $1 = __stack_pointer - 272 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$2 = $2 + 28 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $31 = i64toi32_i32$0;
  i64toi32_i32$0 = $1 + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $31;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  $8 = $2 + 20 | 0;
  i64toi32_i32$2 = $8;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $36 = i64toi32_i32$1;
  i64toi32_i32$1 = $1;
  HEAP32[i64toi32_i32$1 >> 2] = $36;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $4 = $6 >>> 0 < 256 >>> 0 ? i64toi32_i32$1 + 16 | 0 : $5;
  label$1 : {
   if (($3 | 0) < (1 | 0)) {
    break label$1
   }
   $9 = $7 << 7 | 0 | 127 | 0;
   $3 = $3 + 7 | 0;
   label$2 : while (1) {
    $7 = $3 + -8 | 0;
    $10 = $9 >>> $7 | 0;
    HEAP8[$4 >> 0] = $10;
    label$3 : {
     label$4 : {
      if (($10 & 255 | 0 | 0) == (255 | 0)) {
       break label$4
      }
      $4 = $4 + 1 | 0;
      break label$3;
     }
     HEAP8[($4 + 1 | 0) >> 0] = 0;
     $4 = $4 + 2 | 0;
    }
    $10 = $3 >>> 0 > 15 >>> 0;
    $3 = $7;
    if ($10) {
     continue label$2
    }
    break label$2;
   };
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if ($6 >>> 0 > 255 >>> 0) {
      break label$7
     }
     $4 = $4 - ($1 + 16 | 0) | 0;
     if (!$4) {
      break label$5
     }
     $7 = $1 + 16 | 0;
     label$8 : while (1) {
      $3 = $4 >>> 0 < $6 >>> 0 ? $4 : $6;
      $10 = $6 - $3 | 0;
      $5 = (__memcpy($5 | 0, $7 | 0, $3 | 0) | 0) + $3 | 0;
      label$9 : {
       label$10 : {
        if ($6 >>> 0 <= $4 >>> 0) {
         break label$10
        }
        $6 = $10;
        break label$9;
       }
       $9 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       if (!(FUNCTION_TABLE[HEAP32[($9 + 12 | 0) >> 2] | 0 | 0]($0) | 0)) {
        break label$6
       }
       $6 = HEAP32[($9 + 4 | 0) >> 2] | 0;
       $5 = HEAP32[$9 >> 2] | 0;
      }
      $7 = $7 + $3 | 0;
      $4 = $4 - $3 | 0;
      if ($4) {
       continue label$8
      }
      break label$5;
     };
    }
    $6 = ($6 + $5 | 0) - $4 | 0;
    $5 = $4;
    break label$5;
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   $6 = $10;
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $6;
  HEAP32[$4 >> 2] = $5;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $1;
  i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
  $138 = i64toi32_i32$0;
  i64toi32_i32$0 = $8;
  HEAP32[i64toi32_i32$0 >> 2] = $138;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $1 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $143 = i64toi32_i32$1;
  i64toi32_i32$1 = $8 + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $143;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $1 + 272 | 0;
 }
 
 function encode_mcu_gather($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $6 = 0, $8 = 0, $13 = 0, $2 = 0, $7 = 0, $5 = 0, $12 = 0, $9 = 0, $10 = 0, $11 = 0, $92 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   if (!$3) {
    break label$1
   }
   label$2 : {
    $4 = HEAP32[($2 + 36 | 0) >> 2] | 0;
    if ($4) {
     break label$2
    }
    $4 = $3;
    if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $4 = 0;
    label$3 : while (1) {
     HEAP32[(($2 + ($4 << 2 | 0) | 0) + 20 | 0) >> 2] = 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
    $4 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 36 | 0) >> 2] = $4 + -1 | 0;
  }
  label$4 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$4
   }
   $5 = 0;
   label$5 : while (1) {
    $4 = $5 << 2 | 0;
    $6 = (HEAP32[(($0 + $4 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
    $3 = HEAP32[(($0 + $6 | 0) + 248 | 0) >> 2] | 0;
    $7 = HEAP32[(($2 + ((HEAP32[($3 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) + 92 | 0) >> 2] | 0;
    $8 = HEAP32[(($2 + ((HEAP32[($3 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
    $3 = 0;
    label$6 : {
     $9 = ($2 + $6 | 0) + 20 | 0;
     $6 = HEAP32[$9 >> 2] | 0;
     $10 = $1 + $4 | 0;
     $11 = HEAP32[$10 >> 2] | 0;
     $4 = HEAP16[$11 >> 1] | 0;
     if (($6 | 0) == ($4 | 0)) {
      break label$6
     }
     $4 = $4 - $6 | 0;
     $92 = $4;
     $4 = $4 >> 31 | 0;
     $4 = ($92 ^ $4 | 0) - $4 | 0;
     $3 = 0;
     label$7 : while (1) {
      $12 = $3;
      $3 = $3 + 1 | 0;
      $6 = $4 >>> 0 > 1 >>> 0;
      $4 = $4 >>> 1 | 0;
      if ($6) {
       continue label$7
      }
      break label$7;
     };
     if ($12 >>> 0 < 11 >>> 0) {
      break label$6
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 6;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $13 = 1;
    $4 = $8 + ($3 << 2 | 0) | 0;
    HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
    $4 = 0;
    label$8 : {
     label$9 : while (1) {
      $8 = $4;
      label$10 : {
       $4 = HEAPU16[($11 + ((HEAP32[(144016 + ($13 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
       if (!$4) {
        break label$10
       }
       label$11 : {
        if (($8 | 0) < (16 | 0)) {
         break label$11
        }
        $3 = ($8 - (($8 | 0) < (31 | 0) ? $8 : 31) | 0) + 15 | 0;
        HEAP32[($7 + 960 | 0) >> 2] = (($3 >>> 4 | 0) + (HEAP32[($7 + 960 | 0) >> 2] | 0) | 0) + 1 | 0;
        $8 = ($8 - ($3 & -16 | 0) | 0) + -16 | 0;
       }
       $3 = 1;
       label$12 : {
        $6 = ($4 << 16 | 0) >> 31 | 0;
        $4 = (($4 ^ $6 | 0) - $6 | 0) & 65535 | 0;
        if ($4 >>> 0 < 2 >>> 0) {
         break label$12
        }
        $3 = 1;
        label$13 : while (1) {
         $12 = $3;
         $3 = $3 + 1 | 0;
         $6 = $4 >>> 0 > 3 >>> 0;
         $4 = $4 >>> 1 | 0;
         if ($6) {
          continue label$13
         }
         break label$13;
        };
        if ($12 >>> 0 < 10 >>> 0) {
         break label$12
        }
        $4 = HEAP32[$0 >> 2] | 0;
        HEAP32[($4 + 20 | 0) >> 2] = 6;
        FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
       }
       $4 = $7 + (($3 + ($8 << 4 | 0) | 0) << 2 | 0) | 0;
       HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
       $4 = 0;
       $13 = $13 + 1 | 0;
       if (($13 | 0) != (64 | 0)) {
        continue label$9
       }
       break label$8;
      }
      $4 = $8 + 1 | 0;
      $13 = $13 + 1 | 0;
      if (($13 | 0) != (64 | 0)) {
       continue label$9
      }
      break label$9;
     };
     if (($8 | 0) < (0 | 0)) {
      break label$8
     }
     HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1 | 0;
    }
    HEAP32[$9 >> 2] = HEAP16[(HEAP32[$10 >> 2] | 0) >> 1] | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$5
    }
    break label$5;
   };
  }
  return 1 | 0;
 }
 
 function encode_mcu_huff($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $5 = 0, $9 = 0, $10 = 0, $6 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$2 = 0, $8 = 0, $7 = 0, $11 = 0, $12 = 0, $32 = 0, $37 = 0, $40 = 0, $200 = 0, $326 = 0, $451 = 0, $456 = 0, $459 = 0;
  $2 = __stack_pointer - 304 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $5 = HEAP32[$4 >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = $5;
  $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $6;
  i64toi32_i32$2 = $3 + 20 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $32 = i64toi32_i32$0;
  i64toi32_i32$0 = $2 + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $32;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $3 + 28 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $37 = i64toi32_i32$1;
  i64toi32_i32$1 = $2 + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $37;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  $40 = i64toi32_i32$0;
  i64toi32_i32$0 = $2;
  HEAP32[($2 + 16 | 0) >> 2] = $40;
  HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($2 + 40 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
     break label$2
    }
    if (HEAP32[($3 + 36 | 0) >> 2] | 0) {
     break label$2
    }
    $4 = $6 >>> 0 < 256 >>> 0 ? $2 + 48 | 0 : $5;
    $7 = HEAP32[($3 + 40 | 0) >> 2] | 0;
    label$3 : {
     $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
     if (($5 | 0) < (1 | 0)) {
      break label$3
     }
     $8 = (HEAP32[($2 + 16 | 0) >> 2] | 0) << 7 | 0 | 127 | 0;
     $5 = $5 + 7 | 0;
     label$4 : while (1) {
      $9 = $5 + -8 | 0;
      $10 = $8 >>> $9 | 0;
      HEAP8[$4 >> 0] = $10;
      label$5 : {
       label$6 : {
        if (($10 & 255 | 0 | 0) == (255 | 0)) {
         break label$6
        }
        $4 = $4 + 1 | 0;
        break label$5;
       }
       HEAP8[($4 + 1 | 0) >> 0] = 0;
       $4 = $4 + 2 | 0;
      }
      $10 = $5 >>> 0 > 15 >>> 0;
      $5 = $9;
      if ($10) {
       continue label$4
      }
      break label$4;
     };
    }
    i64toi32_i32$0 = $2;
    i64toi32_i32$1 = 0;
    HEAP32[($2 + 16 | 0) >> 2] = 0;
    HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$1;
    label$7 : {
     label$8 : {
      if ($6 >>> 0 > 255 >>> 0) {
       break label$8
      }
      label$9 : {
       $9 = $4 - ($2 + 48 | 0) | 0;
       if ($9) {
        break label$9
       }
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       break label$7;
      }
      $6 = $2 + 48 | 0;
      $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $10 = HEAP32[($2 + 12 | 0) >> 2] | 0;
      label$10 : {
       label$11 : while (1) {
        $5 = $9 >>> 0 < $10 >>> 0 ? $9 : $10;
        __memcpy($4 | 0, $6 | 0, $5 | 0) | 0;
        $4 = (HEAP32[($2 + 8 | 0) >> 2] | 0) + $5 | 0;
        HEAP32[($2 + 8 | 0) >> 2] = $4;
        $8 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        $10 = $8 - $5 | 0;
        HEAP32[($2 + 12 | 0) >> 2] = $10;
        label$12 : {
         if (($8 | 0) != ($5 | 0)) {
          break label$12
         }
         $4 = HEAP32[($2 + 40 | 0) >> 2] | 0;
         $10 = HEAP32[($4 + 24 | 0) >> 2] | 0;
         if (!(FUNCTION_TABLE[HEAP32[($10 + 12 | 0) >> 2] | 0 | 0]($4) | 0)) {
          break label$10
         }
         $4 = HEAP32[$10 >> 2] | 0;
         HEAP32[($2 + 8 | 0) >> 2] = $4;
         $10 = HEAP32[($10 + 4 | 0) >> 2] | 0;
         HEAP32[($2 + 12 | 0) >> 2] = $10;
        }
        $6 = $6 + $5 | 0;
        $9 = $9 - $5 | 0;
        if ($9) {
         continue label$11
        }
        break label$7;
       };
      }
      $4 = 0;
      break label$1;
     }
     HEAP32[($2 + 12 | 0) >> 2] = ((HEAP32[($2 + 8 | 0) >> 2] | 0) - $4 | 0) + (HEAP32[($2 + 12 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($2 + 8 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = 255;
    $4 = (HEAP32[($2 + 12 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($2 + 12 | 0) >> 2] = $4;
    label$13 : {
     label$14 : {
      if (!$4) {
       break label$14
      }
      $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      break label$13;
     }
     label$15 : {
      $4 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $5 = HEAP32[($4 + 24 | 0) >> 2] | 0;
      if (FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($4) | 0) {
       break label$15
      }
      $4 = 0;
      break label$1;
     }
     $4 = HEAP32[$5 >> 2] | 0;
     HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
    }
    HEAP32[($2 + 8 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $7 + -48 | 0;
    $6 = (HEAP32[($2 + 12 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($2 + 12 | 0) >> 2] = $6;
    label$16 : {
     if ($6) {
      break label$16
     }
     label$17 : {
      $4 = HEAP32[($2 + 40 | 0) >> 2] | 0;
      $200 = $4;
      $4 = HEAP32[($4 + 24 | 0) >> 2] | 0;
      if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($200) | 0) {
       break label$17
      }
      $4 = 0;
      break label$1;
     }
     HEAP32[($2 + 8 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
     $6 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     HEAP32[($2 + 12 | 0) >> 2] = $6;
    }
    $5 = HEAP32[($2 + 40 | 0) >> 2] | 0;
    if ((HEAP32[($5 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $4 = 0;
    label$18 : while (1) {
     HEAP32[((($2 + 8 | 0) + ($4 << 2 | 0) | 0) + 16 | 0) >> 2] = 0;
     $4 = $4 + 1 | 0;
     if (($4 | 0) < (HEAP32[($5 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$18
     }
     break label$18;
    };
   }
   $5 = HEAP32[($0 + 272 | 0) >> 2] | 0;
   label$19 : {
    label$20 : {
     label$21 : {
      if (!(HEAP32[($3 + 108 | 0) >> 2] | 0)) {
       break label$21
      }
      if (($5 | 0) < (1 | 0)) {
       break label$20
      }
      $7 = 0;
      label$22 : while (1) {
       $4 = $7 << 2 | 0;
       $11 = $1 + $4 | 0;
       $5 = HEAP32[$11 >> 2] | 0;
       $4 = (HEAP32[(($0 + $4 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
       $12 = (($2 + 8 | 0) + $4 | 0) + 16 | 0;
       $9 = HEAP32[$12 >> 2] | 0;
       $4 = HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] | 0;
       $10 = HEAP32[(($3 + ((HEAP32[($4 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) + 60 | 0) >> 2] | 0;
       $4 = HEAP32[(($3 + ((HEAP32[($4 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 44 | 0) >> 2] | 0;
       label$23 : {
        label$24 : {
         if ($6 >>> 0 > 255 >>> 0) {
          break label$24
         }
         $5 = (jsimd_huff_encode_one_block($2 + 8 | 0 | 0, $2 + 48 | 0 | 0, $5 | 0, $9 | 0, $4 | 0, $10 | 0) | 0) - ($2 + 48 | 0) | 0;
         if (!$5) {
          break label$23
         }
         $10 = $2 + 48 | 0;
         $6 = HEAP32[($2 + 8 | 0) >> 2] | 0;
         $9 = HEAP32[($2 + 12 | 0) >> 2] | 0;
         label$25 : while (1) {
          $4 = $5 >>> 0 < $9 >>> 0 ? $5 : $9;
          __memcpy($6 | 0, $10 | 0, $4 | 0) | 0;
          $6 = (HEAP32[($2 + 8 | 0) >> 2] | 0) + $4 | 0;
          HEAP32[($2 + 8 | 0) >> 2] = $6;
          $8 = HEAP32[($2 + 12 | 0) >> 2] | 0;
          $9 = $8 - $4 | 0;
          HEAP32[($2 + 12 | 0) >> 2] = $9;
          label$26 : {
           if (($8 | 0) != ($4 | 0)) {
            break label$26
           }
           $9 = HEAP32[($2 + 40 | 0) >> 2] | 0;
           $326 = $9;
           $9 = HEAP32[($9 + 24 | 0) >> 2] | 0;
           if (!(FUNCTION_TABLE[HEAP32[($9 + 12 | 0) >> 2] | 0 | 0]($326) | 0)) {
            break label$19
           }
           $6 = HEAP32[$9 >> 2] | 0;
           HEAP32[($2 + 8 | 0) >> 2] = $6;
           $9 = HEAP32[($9 + 4 | 0) >> 2] | 0;
           HEAP32[($2 + 12 | 0) >> 2] = $9;
          }
          $10 = $10 + $4 | 0;
          $5 = $5 - $4 | 0;
          if ($5) {
           continue label$25
          }
          break label$23;
         };
        }
        $4 = jsimd_huff_encode_one_block($2 + 8 | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0, $5 | 0, $9 | 0, $4 | 0, $10 | 0) | 0;
        $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[($2 + 8 | 0) >> 2] = $4;
        HEAP32[($2 + 12 | 0) >> 2] = ($5 - $4 | 0) + (HEAP32[($2 + 12 | 0) >> 2] | 0) | 0;
       }
       HEAP32[$12 >> 2] = HEAP16[(HEAP32[$11 >> 2] | 0) >> 1] | 0;
       $7 = $7 + 1 | 0;
       if (($7 | 0) >= (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
        break label$20
       }
       $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       continue label$22;
      };
     }
     $4 = 0;
     if (($5 | 0) <= (0 | 0)) {
      break label$20
     }
     label$27 : while (1) {
      $5 = $4 << 2 | 0;
      $9 = $1 + $5 | 0;
      $5 = (HEAP32[(($0 + $5 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
      $10 = (($2 + 8 | 0) + $5 | 0) + 16 | 0;
      $5 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
      if (!(encode_one_block($2 + 8 | 0 | 0, HEAP32[$9 >> 2] | 0 | 0, HEAP32[$10 >> 2] | 0 | 0, HEAP32[(($3 + ((HEAP32[($5 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 44 | 0) >> 2] | 0 | 0, HEAP32[(($3 + ((HEAP32[($5 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) + 60 | 0) >> 2] | 0 | 0) | 0)) {
       break label$19
      }
      HEAP32[$10 >> 2] = HEAP16[(HEAP32[$9 >> 2] | 0) >> 1] | 0;
      $4 = $4 + 1 | 0;
      if (($4 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
       continue label$27
      }
      break label$27;
     };
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    HEAP32[$4 >> 2] = HEAP32[($2 + 8 | 0) >> 2] | 0;
    HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $4 = $3 + 12 | 0;
    $5 = $2 + 16 | 0;
    i64toi32_i32$2 = $5 + 16 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $451 = i64toi32_i32$1;
    i64toi32_i32$1 = $4 + 16 | 0;
    HEAP32[i64toi32_i32$1 >> 2] = $451;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $456 = i64toi32_i32$0;
    i64toi32_i32$0 = $4 + 8 | 0;
    HEAP32[i64toi32_i32$0 >> 2] = $456;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[$5 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($5 + 4 | 0) >> 2] | 0;
    $459 = i64toi32_i32$1;
    i64toi32_i32$1 = $4;
    HEAP32[$4 >> 2] = $459;
    HEAP32[($4 + 4 | 0) >> 2] = i64toi32_i32$0;
    $4 = 1;
    $9 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    if (!$9) {
     break label$1
    }
    label$28 : {
     $5 = HEAP32[($3 + 36 | 0) >> 2] | 0;
     if ($5) {
      break label$28
     }
     HEAP32[($3 + 40 | 0) >> 2] = ((HEAP32[($3 + 40 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
     $5 = $9;
    }
    HEAP32[($3 + 36 | 0) >> 2] = $5 + -1 | 0;
    break label$1;
   }
   $4 = 0;
  }
  __stack_pointer = $2 + 304 | 0;
  return $4 | 0;
 }
 
 function encode_one_block($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $9 = 0, $12 = 0, $8 = 0, $6 = 0, $13 = 0, $7 = 0, $11 = 0, $14 = 0, $5 = 0, $10 = 0, $260 = 0, $374 = 0, $488 = 0, $602 = 0, $716 = 0, $830 = 0, $944 = 0, $1058 = 0, $1172 = 0, $1286 = 0, $1400 = 0, $1514 = 0, $1628 = 0, $1742 = 0, $1856 = 0, $11546 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $7 = $4 + 1264 | 0;
  $8 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  $9 = $5;
  label$1 : {
   $10 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if ($10 >>> 0 < 256 >>> 0) {
    break label$1
   }
   $9 = HEAP32[$0 >> 2] | 0;
  }
  $7 = HEAP8[$7 >> 0] | 0;
  $11 = HEAP32[($4 + 960 | 0) >> 2] | 0;
  $12 = (HEAP16[$1 >> 1] | 0) - $2 | 0;
  $13 = $12 >> 31 | 0;
  $2 = HEAPU8[((($13 ^ $12 | 0) - $13 | 0) + 66832 | 0) >> 0] | 0;
  $14 = HEAP8[(($3 + $2 | 0) + 1024 | 0) >> 0] | 0;
  $3 = $8 << $14 | 0 | (HEAP32[($3 + ($2 << 2 | 0) | 0) >> 2] | 0) | 0;
  $13 = $13 + $12 | 0;
  label$2 : {
   $12 = $6 + $14 | 0;
   if (($12 | 0) < (16 | 0)) {
    break label$2
   }
   $6 = $3 >>> ($12 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $6;
   label$3 : {
    label$4 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$4
     }
     $9 = $9 + 1 | 0;
     break label$3;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $12 = $12 + -16 | 0;
   $6 = $3 >>> $12 | 0;
   HEAP8[$9 >> 0] = $6;
   label$5 : {
    if (($6 & 255 | 0 | 0) == (255 | 0)) {
     break label$5
    }
    $9 = $9 + 1 | 0;
    break label$2;
   }
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  $3 = $3 << $2 | 0 | ($13 & ((-1 << $2 | 0) ^ -1 | 0) | 0) | 0;
  label$6 : {
   label$7 : {
    $2 = $12 + $2 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$7
    }
    break label$6;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$8 : {
    label$9 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$9
     }
     $9 = $9 + 1 | 0;
     break label$8;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$10 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$10
    }
    $9 = $9 + 1 | 0;
    break label$6;
   }
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$11 : {
   label$12 : {
    $13 = HEAP16[($1 + 2 | 0) >> 1] | 0;
    if ($13) {
     break label$12
    }
    $13 = 1;
    break label$11;
   }
   $6 = $13 >> 31 | 0;
   $12 = HEAPU8[((($6 ^ $13 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $13 = ($6 + $13 | 0) & ((-1 << $12 | 0) ^ -1 | 0) | 0;
   label$13 : {
    label$14 : {
     $2 = $2 + $8 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$14
     }
     break label$13;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$15 : {
     label$16 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$16
      }
      $9 = $9 + 1 | 0;
      break label$15;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$17 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$17
     }
     $9 = $9 + 1 | 0;
     break label$13;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $12 | 0 | $13 | 0;
   $13 = 0;
   label$18 : {
    $2 = $2 + $12 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$18
    }
    break label$11;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$19 : {
    label$20 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$20
     }
     $9 = $9 + 1 | 0;
     break label$19;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$21 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$21
    }
    $9 = $9 + 1 | 0;
    break label$11;
   }
   $13 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$22 : {
   label$23 : {
    $12 = HEAP16[($1 + 16 | 0) >> 1] | 0;
    if ($12) {
     break label$23
    }
    $6 = $13 + 1 | 0;
    break label$22;
   }
   $260 = $13 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $260 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$24 : {
    label$25 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$25
     }
     break label$24;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$26 : {
     label$27 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$27
      }
      $9 = $9 + 1 | 0;
      break label$26;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$28 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$28
     }
     $9 = $9 + 1 | 0;
     break label$24;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$29 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$29
    }
    break label$22;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$30 : {
    label$31 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$31
     }
     $9 = $9 + 1 | 0;
     break label$30;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$32 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$32
    }
    $9 = $9 + 1 | 0;
    break label$22;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$33 : {
   label$34 : {
    $12 = HEAP16[($1 + 32 | 0) >> 1] | 0;
    if ($12) {
     break label$34
    }
    $6 = $6 + 1 | 0;
    break label$33;
   }
   $374 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $374 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$35 : {
    label$36 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$36
     }
     break label$35;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$37 : {
     label$38 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$38
      }
      $9 = $9 + 1 | 0;
      break label$37;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$39 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$39
     }
     $9 = $9 + 1 | 0;
     break label$35;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$40 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$40
    }
    break label$33;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$41 : {
    label$42 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$42
     }
     $9 = $9 + 1 | 0;
     break label$41;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$43 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$43
    }
    $9 = $9 + 1 | 0;
    break label$33;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$44 : {
   label$45 : {
    $12 = HEAP16[($1 + 18 | 0) >> 1] | 0;
    if ($12) {
     break label$45
    }
    $6 = $6 + 1 | 0;
    break label$44;
   }
   $488 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $488 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$46 : {
    label$47 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$47
     }
     break label$46;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$48 : {
     label$49 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$49
      }
      $9 = $9 + 1 | 0;
      break label$48;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$50 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$50
     }
     $9 = $9 + 1 | 0;
     break label$46;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$51 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$51
    }
    break label$44;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$52 : {
    label$53 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$53
     }
     $9 = $9 + 1 | 0;
     break label$52;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$54 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$54
    }
    $9 = $9 + 1 | 0;
    break label$44;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$55 : {
   label$56 : {
    $12 = HEAP16[($1 + 4 | 0) >> 1] | 0;
    if ($12) {
     break label$56
    }
    $6 = $6 + 1 | 0;
    break label$55;
   }
   $602 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $602 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$57 : {
    label$58 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$58
     }
     break label$57;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$59 : {
     label$60 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$60
      }
      $9 = $9 + 1 | 0;
      break label$59;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$61 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$61
     }
     $9 = $9 + 1 | 0;
     break label$57;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$62 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$62
    }
    break label$55;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$63 : {
    label$64 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$64
     }
     $9 = $9 + 1 | 0;
     break label$63;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$65 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$65
    }
    $9 = $9 + 1 | 0;
    break label$55;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$66 : {
   label$67 : {
    $12 = HEAP16[($1 + 6 | 0) >> 1] | 0;
    if ($12) {
     break label$67
    }
    $6 = $6 + 1 | 0;
    break label$66;
   }
   $716 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $716 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$68 : {
    label$69 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$69
     }
     break label$68;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$70 : {
     label$71 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$71
      }
      $9 = $9 + 1 | 0;
      break label$70;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$72 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$72
     }
     $9 = $9 + 1 | 0;
     break label$68;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$73 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$73
    }
    break label$66;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$74 : {
    label$75 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$75
     }
     $9 = $9 + 1 | 0;
     break label$74;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$76 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$76
    }
    $9 = $9 + 1 | 0;
    break label$66;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$77 : {
   label$78 : {
    $12 = HEAP16[($1 + 20 | 0) >> 1] | 0;
    if ($12) {
     break label$78
    }
    $6 = $6 + 1 | 0;
    break label$77;
   }
   $830 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $830 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$79 : {
    label$80 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$80
     }
     break label$79;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$81 : {
     label$82 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$82
      }
      $9 = $9 + 1 | 0;
      break label$81;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$83 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$83
     }
     $9 = $9 + 1 | 0;
     break label$79;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$84 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$84
    }
    break label$77;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$85 : {
    label$86 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$86
     }
     $9 = $9 + 1 | 0;
     break label$85;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$87 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$87
    }
    $9 = $9 + 1 | 0;
    break label$77;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$88 : {
   label$89 : {
    $12 = HEAP16[($1 + 34 | 0) >> 1] | 0;
    if ($12) {
     break label$89
    }
    $6 = $6 + 1 | 0;
    break label$88;
   }
   $944 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $944 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$90 : {
    label$91 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$91
     }
     break label$90;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$92 : {
     label$93 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$93
      }
      $9 = $9 + 1 | 0;
      break label$92;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$94 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$94
     }
     $9 = $9 + 1 | 0;
     break label$90;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$95 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$95
    }
    break label$88;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$96 : {
    label$97 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$97
     }
     $9 = $9 + 1 | 0;
     break label$96;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$98 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$98
    }
    $9 = $9 + 1 | 0;
    break label$88;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$99 : {
   label$100 : {
    $12 = HEAP16[($1 + 48 | 0) >> 1] | 0;
    if ($12) {
     break label$100
    }
    $6 = $6 + 1 | 0;
    break label$99;
   }
   $1058 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1058 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$101 : {
    label$102 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$102
     }
     break label$101;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$103 : {
     label$104 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$104
      }
      $9 = $9 + 1 | 0;
      break label$103;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$105 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$105
     }
     $9 = $9 + 1 | 0;
     break label$101;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$106 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$106
    }
    break label$99;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$107 : {
    label$108 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$108
     }
     $9 = $9 + 1 | 0;
     break label$107;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$109 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$109
    }
    $9 = $9 + 1 | 0;
    break label$99;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$110 : {
   label$111 : {
    $12 = HEAP16[($1 + 64 | 0) >> 1] | 0;
    if ($12) {
     break label$111
    }
    $6 = $6 + 1 | 0;
    break label$110;
   }
   $1172 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1172 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$112 : {
    label$113 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$113
     }
     break label$112;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$114 : {
     label$115 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$115
      }
      $9 = $9 + 1 | 0;
      break label$114;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$116 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$116
     }
     $9 = $9 + 1 | 0;
     break label$112;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$117 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$117
    }
    break label$110;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$118 : {
    label$119 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$119
     }
     $9 = $9 + 1 | 0;
     break label$118;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$120 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$120
    }
    $9 = $9 + 1 | 0;
    break label$110;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$121 : {
   label$122 : {
    $12 = HEAP16[($1 + 50 | 0) >> 1] | 0;
    if ($12) {
     break label$122
    }
    $6 = $6 + 1 | 0;
    break label$121;
   }
   $1286 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1286 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$123 : {
    label$124 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$124
     }
     break label$123;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$125 : {
     label$126 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$126
      }
      $9 = $9 + 1 | 0;
      break label$125;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$127 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$127
     }
     $9 = $9 + 1 | 0;
     break label$123;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$128 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$128
    }
    break label$121;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$129 : {
    label$130 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$130
     }
     $9 = $9 + 1 | 0;
     break label$129;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$131 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$131
    }
    $9 = $9 + 1 | 0;
    break label$121;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$132 : {
   label$133 : {
    $12 = HEAP16[($1 + 36 | 0) >> 1] | 0;
    if ($12) {
     break label$133
    }
    $6 = $6 + 1 | 0;
    break label$132;
   }
   $1400 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1400 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$134 : {
    label$135 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$135
     }
     break label$134;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$136 : {
     label$137 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$137
      }
      $9 = $9 + 1 | 0;
      break label$136;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$138 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$138
     }
     $9 = $9 + 1 | 0;
     break label$134;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$139 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$139
    }
    break label$132;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$140 : {
    label$141 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$141
     }
     $9 = $9 + 1 | 0;
     break label$140;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$142 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$142
    }
    $9 = $9 + 1 | 0;
    break label$132;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$143 : {
   label$144 : {
    $12 = HEAP16[($1 + 22 | 0) >> 1] | 0;
    if ($12) {
     break label$144
    }
    $6 = $6 + 1 | 0;
    break label$143;
   }
   $1514 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1514 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$145 : {
    label$146 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$146
     }
     break label$145;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$147 : {
     label$148 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$148
      }
      $9 = $9 + 1 | 0;
      break label$147;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$149 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$149
     }
     $9 = $9 + 1 | 0;
     break label$145;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$150 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$150
    }
    break label$143;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$151 : {
    label$152 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$152
     }
     $9 = $9 + 1 | 0;
     break label$151;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$153 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$153
    }
    $9 = $9 + 1 | 0;
    break label$143;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$154 : {
   label$155 : {
    $12 = HEAP16[($1 + 8 | 0) >> 1] | 0;
    if ($12) {
     break label$155
    }
    $6 = $6 + 1 | 0;
    break label$154;
   }
   $1628 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1628 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$156 : {
    label$157 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$157
     }
     break label$156;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$158 : {
     label$159 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$159
      }
      $9 = $9 + 1 | 0;
      break label$158;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$160 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$160
     }
     $9 = $9 + 1 | 0;
     break label$156;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$161 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$161
    }
    break label$154;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$162 : {
    label$163 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$163
     }
     $9 = $9 + 1 | 0;
     break label$162;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$164 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$164
    }
    $9 = $9 + 1 | 0;
    break label$154;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$165 : {
   label$166 : {
    $12 = HEAP16[($1 + 10 | 0) >> 1] | 0;
    if ($12) {
     break label$166
    }
    $6 = $6 + 1 | 0;
    break label$165;
   }
   $1742 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1742 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$167 : {
    label$168 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$168
     }
     break label$167;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$169 : {
     label$170 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$170
      }
      $9 = $9 + 1 | 0;
      break label$169;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$171 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$171
     }
     $9 = $9 + 1 | 0;
     break label$167;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $6 = 0;
   label$172 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$172
    }
    break label$165;
   }
   $12 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $12;
   label$173 : {
    label$174 : {
     if (($12 & 255 | 0 | 0) == (255 | 0)) {
      break label$174
     }
     $9 = $9 + 1 | 0;
     break label$173;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $12 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $12;
   label$175 : {
    if (($12 & 255 | 0 | 0) == (255 | 0)) {
     break label$175
    }
    $9 = $9 + 1 | 0;
    break label$165;
   }
   $6 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$176 : {
   label$177 : {
    $12 = HEAP16[($1 + 24 | 0) >> 1] | 0;
    if ($12) {
     break label$177
    }
    $12 = $6 + 1 | 0;
    break label$176;
   }
   $1856 = $6 << 4 | 0;
   $6 = $12 >> 31 | 0;
   $13 = HEAPU8[((($6 ^ $12 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
   $8 = $1856 + $13 | 0;
   $14 = HEAP8[(($4 + $8 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $14 | 0 | (HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = ($6 + $12 | 0) & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$178 : {
    label$179 : {
     $2 = $2 + $14 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$179
     }
     break label$178;
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$180 : {
     label$181 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$181
      }
      $9 = $9 + 1 | 0;
      break label$180;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$182 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$182
     }
     $9 = $9 + 1 | 0;
     break label$178;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$183 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$183
    }
    break label$176;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$184 : {
    label$185 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$185
     }
     $9 = $9 + 1 | 0;
     break label$184;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$186 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$186
    }
    $9 = $9 + 1 | 0;
    break label$176;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$187 : {
   label$188 : {
    $6 = HEAP16[($1 + 38 | 0) >> 1] | 0;
    if ($6) {
     break label$188
    }
    $12 = $12 + 1 | 0;
    break label$187;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$189 : {
    label$190 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$190
     }
     break label$189;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    $12 = 0;
    label$191 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) >= (16 | 0)) {
      break label$191
     }
     break label$189;
    }
    $8 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $8;
    label$192 : {
     label$193 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$193
      }
      $9 = $9 + 1 | 0;
      break label$192;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $8 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $8;
    label$194 : {
     if (($8 & 255 | 0 | 0) == (255 | 0)) {
      break label$194
     }
     $9 = $9 + 1 | 0;
     break label$189;
    }
    $12 = 0;
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$195 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$195
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$196 : {
     label$197 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$197
      }
      $9 = $9 + 1 | 0;
      break label$196;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$198 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$198
     }
     $9 = $9 + 1 | 0;
     break label$195;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$199 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$199
    }
    break label$187;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$200 : {
    label$201 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$201
     }
     $9 = $9 + 1 | 0;
     break label$200;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$202 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$202
    }
    $9 = $9 + 1 | 0;
    break label$187;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$203 : {
   label$204 : {
    $6 = HEAP16[($1 + 52 | 0) >> 1] | 0;
    if ($6) {
     break label$204
    }
    $12 = $12 + 1 | 0;
    break label$203;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$205 : {
    label$206 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$206
     }
     break label$205;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$207 : {
     label$208 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$208
      }
      break label$207;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$209 : {
      label$210 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$210
       }
       $9 = $9 + 1 | 0;
       break label$209;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$211 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$211
      }
      $9 = $9 + 1 | 0;
      break label$207;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$212 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$212
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$213 : {
     label$214 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$214
      }
      $9 = $9 + 1 | 0;
      break label$213;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$215 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$215
     }
     $9 = $9 + 1 | 0;
     break label$212;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$216 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$216
    }
    break label$203;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$217 : {
    label$218 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$218
     }
     $9 = $9 + 1 | 0;
     break label$217;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$219 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$219
    }
    $9 = $9 + 1 | 0;
    break label$203;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$220 : {
   label$221 : {
    $6 = HEAP16[($1 + 66 | 0) >> 1] | 0;
    if ($6) {
     break label$221
    }
    $12 = $12 + 1 | 0;
    break label$220;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$222 : {
    label$223 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$223
     }
     break label$222;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$224 : {
     label$225 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$225
      }
      break label$224;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$226 : {
      label$227 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$227
       }
       $9 = $9 + 1 | 0;
       break label$226;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$228 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$228
      }
      $9 = $9 + 1 | 0;
      break label$224;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$229 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$229
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$230 : {
     label$231 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$231
      }
      $9 = $9 + 1 | 0;
      break label$230;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$232 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$232
     }
     $9 = $9 + 1 | 0;
     break label$229;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$233 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$233
    }
    break label$220;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$234 : {
    label$235 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$235
     }
     $9 = $9 + 1 | 0;
     break label$234;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$236 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$236
    }
    $9 = $9 + 1 | 0;
    break label$220;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$237 : {
   label$238 : {
    $6 = HEAP16[($1 + 80 | 0) >> 1] | 0;
    if ($6) {
     break label$238
    }
    $12 = $12 + 1 | 0;
    break label$237;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$239 : {
    label$240 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$240
     }
     break label$239;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$241 : {
     label$242 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$242
      }
      break label$241;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$243 : {
      label$244 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$244
       }
       $9 = $9 + 1 | 0;
       break label$243;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$245 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$245
      }
      $9 = $9 + 1 | 0;
      break label$241;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$246 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$246
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$247 : {
     label$248 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$248
      }
      $9 = $9 + 1 | 0;
      break label$247;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$249 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$249
     }
     $9 = $9 + 1 | 0;
     break label$246;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$250 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$250
    }
    break label$237;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$251 : {
    label$252 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$252
     }
     $9 = $9 + 1 | 0;
     break label$251;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$253 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$253
    }
    $9 = $9 + 1 | 0;
    break label$237;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$254 : {
   label$255 : {
    $6 = HEAP16[($1 + 96 | 0) >> 1] | 0;
    if ($6) {
     break label$255
    }
    $12 = $12 + 1 | 0;
    break label$254;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$256 : {
    label$257 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$257
     }
     break label$256;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$258 : {
     label$259 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$259
      }
      break label$258;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$260 : {
      label$261 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$261
       }
       $9 = $9 + 1 | 0;
       break label$260;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$262 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$262
      }
      $9 = $9 + 1 | 0;
      break label$258;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$263 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$263
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$264 : {
     label$265 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$265
      }
      $9 = $9 + 1 | 0;
      break label$264;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$266 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$266
     }
     $9 = $9 + 1 | 0;
     break label$263;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$267 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$267
    }
    break label$254;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$268 : {
    label$269 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$269
     }
     $9 = $9 + 1 | 0;
     break label$268;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$270 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$270
    }
    $9 = $9 + 1 | 0;
    break label$254;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$271 : {
   label$272 : {
    $6 = HEAP16[($1 + 82 | 0) >> 1] | 0;
    if ($6) {
     break label$272
    }
    $12 = $12 + 1 | 0;
    break label$271;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$273 : {
    label$274 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$274
     }
     break label$273;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$275 : {
     label$276 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$276
      }
      break label$275;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$277 : {
      label$278 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$278
       }
       $9 = $9 + 1 | 0;
       break label$277;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$279 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$279
      }
      $9 = $9 + 1 | 0;
      break label$275;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$280 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$280
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$281 : {
     label$282 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$282
      }
      $9 = $9 + 1 | 0;
      break label$281;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$283 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$283
     }
     $9 = $9 + 1 | 0;
     break label$280;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$284 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$284
    }
    break label$271;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$285 : {
    label$286 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$286
     }
     $9 = $9 + 1 | 0;
     break label$285;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$287 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$287
    }
    $9 = $9 + 1 | 0;
    break label$271;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$288 : {
   label$289 : {
    $6 = HEAP16[($1 + 68 | 0) >> 1] | 0;
    if ($6) {
     break label$289
    }
    $12 = $12 + 1 | 0;
    break label$288;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$290 : {
    label$291 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$291
     }
     break label$290;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$292 : {
     label$293 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$293
      }
      break label$292;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$294 : {
      label$295 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$295
       }
       $9 = $9 + 1 | 0;
       break label$294;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$296 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$296
      }
      $9 = $9 + 1 | 0;
      break label$292;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$297 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$297
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$298 : {
     label$299 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$299
      }
      $9 = $9 + 1 | 0;
      break label$298;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$300 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$300
     }
     $9 = $9 + 1 | 0;
     break label$297;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$301 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$301
    }
    break label$288;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$302 : {
    label$303 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$303
     }
     $9 = $9 + 1 | 0;
     break label$302;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$304 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$304
    }
    $9 = $9 + 1 | 0;
    break label$288;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$305 : {
   label$306 : {
    $6 = HEAP16[($1 + 54 | 0) >> 1] | 0;
    if ($6) {
     break label$306
    }
    $12 = $12 + 1 | 0;
    break label$305;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$307 : {
    label$308 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$308
     }
     break label$307;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$309 : {
     label$310 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$310
      }
      break label$309;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$311 : {
      label$312 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$312
       }
       $9 = $9 + 1 | 0;
       break label$311;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$313 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$313
      }
      $9 = $9 + 1 | 0;
      break label$309;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$314 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$314
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$315 : {
     label$316 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$316
      }
      $9 = $9 + 1 | 0;
      break label$315;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$317 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$317
     }
     $9 = $9 + 1 | 0;
     break label$314;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$318 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$318
    }
    break label$305;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$319 : {
    label$320 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$320
     }
     $9 = $9 + 1 | 0;
     break label$319;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$321 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$321
    }
    $9 = $9 + 1 | 0;
    break label$305;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$322 : {
   label$323 : {
    $6 = HEAP16[($1 + 40 | 0) >> 1] | 0;
    if ($6) {
     break label$323
    }
    $12 = $12 + 1 | 0;
    break label$322;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$324 : {
    label$325 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$325
     }
     break label$324;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$326 : {
     label$327 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$327
      }
      break label$326;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$328 : {
      label$329 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$329
       }
       $9 = $9 + 1 | 0;
       break label$328;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$330 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$330
      }
      $9 = $9 + 1 | 0;
      break label$326;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$331 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$331
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$332 : {
     label$333 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$333
      }
      $9 = $9 + 1 | 0;
      break label$332;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$334 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$334
     }
     $9 = $9 + 1 | 0;
     break label$331;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$335 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$335
    }
    break label$322;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$336 : {
    label$337 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$337
     }
     $9 = $9 + 1 | 0;
     break label$336;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$338 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$338
    }
    $9 = $9 + 1 | 0;
    break label$322;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$339 : {
   label$340 : {
    $6 = HEAP16[($1 + 26 | 0) >> 1] | 0;
    if ($6) {
     break label$340
    }
    $12 = $12 + 1 | 0;
    break label$339;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$341 : {
    label$342 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$342
     }
     break label$341;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$343 : {
     label$344 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$344
      }
      break label$343;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$345 : {
      label$346 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$346
       }
       $9 = $9 + 1 | 0;
       break label$345;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$347 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$347
      }
      $9 = $9 + 1 | 0;
      break label$343;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$348 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$348
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$349 : {
     label$350 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$350
      }
      $9 = $9 + 1 | 0;
      break label$349;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$351 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$351
     }
     $9 = $9 + 1 | 0;
     break label$348;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$352 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$352
    }
    break label$339;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$353 : {
    label$354 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$354
     }
     $9 = $9 + 1 | 0;
     break label$353;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$355 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$355
    }
    $9 = $9 + 1 | 0;
    break label$339;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$356 : {
   label$357 : {
    $6 = HEAP16[($1 + 12 | 0) >> 1] | 0;
    if ($6) {
     break label$357
    }
    $12 = $12 + 1 | 0;
    break label$356;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$358 : {
    label$359 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$359
     }
     break label$358;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$360 : {
     label$361 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$361
      }
      break label$360;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$362 : {
      label$363 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$363
       }
       $9 = $9 + 1 | 0;
       break label$362;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$364 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$364
      }
      $9 = $9 + 1 | 0;
      break label$360;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$365 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$365
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$366 : {
     label$367 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$367
      }
      $9 = $9 + 1 | 0;
      break label$366;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$368 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$368
     }
     $9 = $9 + 1 | 0;
     break label$365;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$369 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$369
    }
    break label$356;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$370 : {
    label$371 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$371
     }
     $9 = $9 + 1 | 0;
     break label$370;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$372 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$372
    }
    $9 = $9 + 1 | 0;
    break label$356;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$373 : {
   label$374 : {
    $6 = HEAP16[($1 + 14 | 0) >> 1] | 0;
    if ($6) {
     break label$374
    }
    $12 = $12 + 1 | 0;
    break label$373;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$375 : {
    label$376 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$376
     }
     break label$375;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$377 : {
     label$378 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$378
      }
      break label$377;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$379 : {
      label$380 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$380
       }
       $9 = $9 + 1 | 0;
       break label$379;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$381 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$381
      }
      $9 = $9 + 1 | 0;
      break label$377;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$382 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$382
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$383 : {
     label$384 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$384
      }
      $9 = $9 + 1 | 0;
      break label$383;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$385 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$385
     }
     $9 = $9 + 1 | 0;
     break label$382;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$386 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$386
    }
    break label$373;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$387 : {
    label$388 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$388
     }
     $9 = $9 + 1 | 0;
     break label$387;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$389 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$389
    }
    $9 = $9 + 1 | 0;
    break label$373;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$390 : {
   label$391 : {
    $6 = HEAP16[($1 + 28 | 0) >> 1] | 0;
    if ($6) {
     break label$391
    }
    $12 = $12 + 1 | 0;
    break label$390;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$392 : {
    label$393 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$393
     }
     break label$392;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$394 : {
     label$395 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$395
      }
      break label$394;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$396 : {
      label$397 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$397
       }
       $9 = $9 + 1 | 0;
       break label$396;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$398 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$398
      }
      $9 = $9 + 1 | 0;
      break label$394;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$399 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$399
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$400 : {
     label$401 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$401
      }
      $9 = $9 + 1 | 0;
      break label$400;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$402 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$402
     }
     $9 = $9 + 1 | 0;
     break label$399;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$403 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$403
    }
    break label$390;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$404 : {
    label$405 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$405
     }
     $9 = $9 + 1 | 0;
     break label$404;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$406 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$406
    }
    $9 = $9 + 1 | 0;
    break label$390;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$407 : {
   label$408 : {
    $6 = HEAP16[($1 + 42 | 0) >> 1] | 0;
    if ($6) {
     break label$408
    }
    $12 = $12 + 1 | 0;
    break label$407;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$409 : {
    label$410 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$410
     }
     break label$409;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$411 : {
     label$412 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$412
      }
      break label$411;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$413 : {
      label$414 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$414
       }
       $9 = $9 + 1 | 0;
       break label$413;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$415 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$415
      }
      $9 = $9 + 1 | 0;
      break label$411;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$416 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$416
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$417 : {
     label$418 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$418
      }
      $9 = $9 + 1 | 0;
      break label$417;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$419 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$419
     }
     $9 = $9 + 1 | 0;
     break label$416;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$420 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$420
    }
    break label$407;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$421 : {
    label$422 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$422
     }
     $9 = $9 + 1 | 0;
     break label$421;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$423 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$423
    }
    $9 = $9 + 1 | 0;
    break label$407;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$424 : {
   label$425 : {
    $6 = HEAP16[($1 + 56 | 0) >> 1] | 0;
    if ($6) {
     break label$425
    }
    $12 = $12 + 1 | 0;
    break label$424;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$426 : {
    label$427 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$427
     }
     break label$426;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$428 : {
     label$429 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$429
      }
      break label$428;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$430 : {
      label$431 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$431
       }
       $9 = $9 + 1 | 0;
       break label$430;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$432 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$432
      }
      $9 = $9 + 1 | 0;
      break label$428;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$433 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$433
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$434 : {
     label$435 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$435
      }
      $9 = $9 + 1 | 0;
      break label$434;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$436 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$436
     }
     $9 = $9 + 1 | 0;
     break label$433;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$437 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$437
    }
    break label$424;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$438 : {
    label$439 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$439
     }
     $9 = $9 + 1 | 0;
     break label$438;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$440 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$440
    }
    $9 = $9 + 1 | 0;
    break label$424;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$441 : {
   label$442 : {
    $6 = HEAP16[($1 + 70 | 0) >> 1] | 0;
    if ($6) {
     break label$442
    }
    $12 = $12 + 1 | 0;
    break label$441;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$443 : {
    label$444 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$444
     }
     break label$443;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$445 : {
     label$446 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$446
      }
      break label$445;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$447 : {
      label$448 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$448
       }
       $9 = $9 + 1 | 0;
       break label$447;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$449 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$449
      }
      $9 = $9 + 1 | 0;
      break label$445;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -16 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$450 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$450
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$451 : {
     label$452 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$452
      }
      $9 = $9 + 1 | 0;
      break label$451;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$453 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$453
     }
     $9 = $9 + 1 | 0;
     break label$450;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$454 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$454
    }
    break label$441;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$455 : {
    label$456 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$456
     }
     $9 = $9 + 1 | 0;
     break label$455;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$457 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$457
    }
    $9 = $9 + 1 | 0;
    break label$441;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$458 : {
   label$459 : {
    $6 = HEAP16[($1 + 84 | 0) >> 1] | 0;
    if ($6) {
     break label$459
    }
    $12 = $12 + 1 | 0;
    break label$458;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$460 : {
    label$461 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$461
     }
     break label$460;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$462 : {
     label$463 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$463
      }
      break label$462;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$464 : {
      label$465 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$465
       }
       $9 = $9 + 1 | 0;
       break label$464;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$466 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$466
      }
      $9 = $9 + 1 | 0;
      break label$462;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$467 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$467
     }
     $12 = $12 + -16 | 0;
     break label$460;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$468 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$468
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$469 : {
      label$470 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$470
       }
       $9 = $9 + 1 | 0;
       break label$469;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$471 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$471
      }
      $9 = $9 + 1 | 0;
      break label$468;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$472 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$472
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$473 : {
     label$474 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$474
      }
      $9 = $9 + 1 | 0;
      break label$473;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$475 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$475
     }
     $9 = $9 + 1 | 0;
     break label$472;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$476 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$476
    }
    break label$458;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$477 : {
    label$478 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$478
     }
     $9 = $9 + 1 | 0;
     break label$477;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$479 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$479
    }
    $9 = $9 + 1 | 0;
    break label$458;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$480 : {
   label$481 : {
    $6 = HEAP16[($1 + 98 | 0) >> 1] | 0;
    if ($6) {
     break label$481
    }
    $12 = $12 + 1 | 0;
    break label$480;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$482 : {
    label$483 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$483
     }
     break label$482;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$484 : {
     label$485 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$485
      }
      break label$484;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$486 : {
      label$487 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$487
       }
       $9 = $9 + 1 | 0;
       break label$486;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$488 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$488
      }
      $9 = $9 + 1 | 0;
      break label$484;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$489 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$489
     }
     $12 = $12 + -16 | 0;
     break label$482;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$490 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$490
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$491 : {
      label$492 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$492
       }
       $9 = $9 + 1 | 0;
       break label$491;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$493 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$493
      }
      $9 = $9 + 1 | 0;
      break label$490;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$494 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$494
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$495 : {
     label$496 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$496
      }
      $9 = $9 + 1 | 0;
      break label$495;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$497 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$497
     }
     $9 = $9 + 1 | 0;
     break label$494;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$498 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$498
    }
    break label$480;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$499 : {
    label$500 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$500
     }
     $9 = $9 + 1 | 0;
     break label$499;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$501 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$501
    }
    $9 = $9 + 1 | 0;
    break label$480;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$502 : {
   label$503 : {
    $6 = HEAP16[($1 + 112 | 0) >> 1] | 0;
    if ($6) {
     break label$503
    }
    $12 = $12 + 1 | 0;
    break label$502;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$504 : {
    label$505 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$505
     }
     break label$504;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$506 : {
     label$507 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$507
      }
      break label$506;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$508 : {
      label$509 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$509
       }
       $9 = $9 + 1 | 0;
       break label$508;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$510 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$510
      }
      $9 = $9 + 1 | 0;
      break label$506;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$511 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$511
     }
     $12 = $12 + -16 | 0;
     break label$504;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$512 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$512
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$513 : {
      label$514 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$514
       }
       $9 = $9 + 1 | 0;
       break label$513;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$515 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$515
      }
      $9 = $9 + 1 | 0;
      break label$512;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$516 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$516
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$517 : {
     label$518 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$518
      }
      $9 = $9 + 1 | 0;
      break label$517;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$519 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$519
     }
     $9 = $9 + 1 | 0;
     break label$516;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$520 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$520
    }
    break label$502;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$521 : {
    label$522 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$522
     }
     $9 = $9 + 1 | 0;
     break label$521;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$523 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$523
    }
    $9 = $9 + 1 | 0;
    break label$502;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$524 : {
   label$525 : {
    $6 = HEAP16[($1 + 114 | 0) >> 1] | 0;
    if ($6) {
     break label$525
    }
    $12 = $12 + 1 | 0;
    break label$524;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$526 : {
    label$527 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$527
     }
     break label$526;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$528 : {
     label$529 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$529
      }
      break label$528;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$530 : {
      label$531 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$531
       }
       $9 = $9 + 1 | 0;
       break label$530;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$532 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$532
      }
      $9 = $9 + 1 | 0;
      break label$528;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$533 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$533
     }
     $12 = $12 + -16 | 0;
     break label$526;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$534 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$534
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$535 : {
      label$536 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$536
       }
       $9 = $9 + 1 | 0;
       break label$535;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$537 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$537
      }
      $9 = $9 + 1 | 0;
      break label$534;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$538 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$538
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$539 : {
     label$540 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$540
      }
      $9 = $9 + 1 | 0;
      break label$539;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$541 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$541
     }
     $9 = $9 + 1 | 0;
     break label$538;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$542 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$542
    }
    break label$524;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$543 : {
    label$544 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$544
     }
     $9 = $9 + 1 | 0;
     break label$543;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$545 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$545
    }
    $9 = $9 + 1 | 0;
    break label$524;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$546 : {
   label$547 : {
    $6 = HEAP16[($1 + 100 | 0) >> 1] | 0;
    if ($6) {
     break label$547
    }
    $12 = $12 + 1 | 0;
    break label$546;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$548 : {
    label$549 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$549
     }
     break label$548;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$550 : {
     label$551 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$551
      }
      break label$550;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$552 : {
      label$553 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$553
       }
       $9 = $9 + 1 | 0;
       break label$552;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$554 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$554
      }
      $9 = $9 + 1 | 0;
      break label$550;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$555 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$555
     }
     $12 = $12 + -16 | 0;
     break label$548;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$556 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$556
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$557 : {
      label$558 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$558
       }
       $9 = $9 + 1 | 0;
       break label$557;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$559 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$559
      }
      $9 = $9 + 1 | 0;
      break label$556;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$560 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$560
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$561 : {
     label$562 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$562
      }
      $9 = $9 + 1 | 0;
      break label$561;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$563 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$563
     }
     $9 = $9 + 1 | 0;
     break label$560;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$564 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$564
    }
    break label$546;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$565 : {
    label$566 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$566
     }
     $9 = $9 + 1 | 0;
     break label$565;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$567 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$567
    }
    $9 = $9 + 1 | 0;
    break label$546;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$568 : {
   label$569 : {
    $6 = HEAP16[($1 + 86 | 0) >> 1] | 0;
    if ($6) {
     break label$569
    }
    $12 = $12 + 1 | 0;
    break label$568;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$570 : {
    label$571 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$571
     }
     break label$570;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$572 : {
     label$573 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$573
      }
      break label$572;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$574 : {
      label$575 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$575
       }
       $9 = $9 + 1 | 0;
       break label$574;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$576 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$576
      }
      $9 = $9 + 1 | 0;
      break label$572;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$577 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$577
     }
     $12 = $12 + -16 | 0;
     break label$570;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$578 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$578
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$579 : {
      label$580 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$580
       }
       $9 = $9 + 1 | 0;
       break label$579;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$581 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$581
      }
      $9 = $9 + 1 | 0;
      break label$578;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$582 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$582
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$583 : {
     label$584 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$584
      }
      $9 = $9 + 1 | 0;
      break label$583;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$585 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$585
     }
     $9 = $9 + 1 | 0;
     break label$582;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$586 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$586
    }
    break label$568;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$587 : {
    label$588 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$588
     }
     $9 = $9 + 1 | 0;
     break label$587;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$589 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$589
    }
    $9 = $9 + 1 | 0;
    break label$568;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$590 : {
   label$591 : {
    $6 = HEAP16[($1 + 72 | 0) >> 1] | 0;
    if ($6) {
     break label$591
    }
    $12 = $12 + 1 | 0;
    break label$590;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$592 : {
    label$593 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$593
     }
     break label$592;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$594 : {
     label$595 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$595
      }
      break label$594;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$596 : {
      label$597 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$597
       }
       $9 = $9 + 1 | 0;
       break label$596;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$598 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$598
      }
      $9 = $9 + 1 | 0;
      break label$594;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$599 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$599
     }
     $12 = $12 + -16 | 0;
     break label$592;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$600 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$600
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$601 : {
      label$602 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$602
       }
       $9 = $9 + 1 | 0;
       break label$601;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$603 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$603
      }
      $9 = $9 + 1 | 0;
      break label$600;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$604 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$604
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$605 : {
     label$606 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$606
      }
      $9 = $9 + 1 | 0;
      break label$605;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$607 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$607
     }
     $9 = $9 + 1 | 0;
     break label$604;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$608 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$608
    }
    break label$590;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$609 : {
    label$610 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$610
     }
     $9 = $9 + 1 | 0;
     break label$609;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$611 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$611
    }
    $9 = $9 + 1 | 0;
    break label$590;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$612 : {
   label$613 : {
    $6 = HEAP16[($1 + 58 | 0) >> 1] | 0;
    if ($6) {
     break label$613
    }
    $12 = $12 + 1 | 0;
    break label$612;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$614 : {
    label$615 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$615
     }
     break label$614;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$616 : {
     label$617 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$617
      }
      break label$616;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$618 : {
      label$619 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$619
       }
       $9 = $9 + 1 | 0;
       break label$618;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$620 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$620
      }
      $9 = $9 + 1 | 0;
      break label$616;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$621 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$621
     }
     $12 = $12 + -16 | 0;
     break label$614;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$622 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$622
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$623 : {
      label$624 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$624
       }
       $9 = $9 + 1 | 0;
       break label$623;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$625 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$625
      }
      $9 = $9 + 1 | 0;
      break label$622;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$626 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$626
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$627 : {
     label$628 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$628
      }
      $9 = $9 + 1 | 0;
      break label$627;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$629 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$629
     }
     $9 = $9 + 1 | 0;
     break label$626;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$630 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$630
    }
    break label$612;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$631 : {
    label$632 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$632
     }
     $9 = $9 + 1 | 0;
     break label$631;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$633 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$633
    }
    $9 = $9 + 1 | 0;
    break label$612;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$634 : {
   label$635 : {
    $6 = HEAP16[($1 + 44 | 0) >> 1] | 0;
    if ($6) {
     break label$635
    }
    $12 = $12 + 1 | 0;
    break label$634;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$636 : {
    label$637 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$637
     }
     break label$636;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$638 : {
     label$639 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$639
      }
      break label$638;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$640 : {
      label$641 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$641
       }
       $9 = $9 + 1 | 0;
       break label$640;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$642 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$642
      }
      $9 = $9 + 1 | 0;
      break label$638;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$643 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$643
     }
     $12 = $12 + -16 | 0;
     break label$636;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$644 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$644
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$645 : {
      label$646 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$646
       }
       $9 = $9 + 1 | 0;
       break label$645;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$647 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$647
      }
      $9 = $9 + 1 | 0;
      break label$644;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$648 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$648
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$649 : {
     label$650 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$650
      }
      $9 = $9 + 1 | 0;
      break label$649;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$651 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$651
     }
     $9 = $9 + 1 | 0;
     break label$648;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$652 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$652
    }
    break label$634;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$653 : {
    label$654 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$654
     }
     $9 = $9 + 1 | 0;
     break label$653;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$655 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$655
    }
    $9 = $9 + 1 | 0;
    break label$634;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$656 : {
   label$657 : {
    $6 = HEAP16[($1 + 30 | 0) >> 1] | 0;
    if ($6) {
     break label$657
    }
    $12 = $12 + 1 | 0;
    break label$656;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$658 : {
    label$659 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$659
     }
     break label$658;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$660 : {
     label$661 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$661
      }
      break label$660;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$662 : {
      label$663 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$663
       }
       $9 = $9 + 1 | 0;
       break label$662;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$664 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$664
      }
      $9 = $9 + 1 | 0;
      break label$660;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$665 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$665
     }
     $12 = $12 + -16 | 0;
     break label$658;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$666 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$666
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$667 : {
      label$668 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$668
       }
       $9 = $9 + 1 | 0;
       break label$667;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$669 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$669
      }
      $9 = $9 + 1 | 0;
      break label$666;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$670 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$670
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$671 : {
     label$672 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$672
      }
      $9 = $9 + 1 | 0;
      break label$671;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$673 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$673
     }
     $9 = $9 + 1 | 0;
     break label$670;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$674 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$674
    }
    break label$656;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$675 : {
    label$676 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$676
     }
     $9 = $9 + 1 | 0;
     break label$675;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$677 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$677
    }
    $9 = $9 + 1 | 0;
    break label$656;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$678 : {
   label$679 : {
    $6 = HEAP16[($1 + 46 | 0) >> 1] | 0;
    if ($6) {
     break label$679
    }
    $12 = $12 + 1 | 0;
    break label$678;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$680 : {
    label$681 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$681
     }
     break label$680;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$682 : {
     label$683 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$683
      }
      break label$682;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$684 : {
      label$685 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$685
       }
       $9 = $9 + 1 | 0;
       break label$684;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$686 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$686
      }
      $9 = $9 + 1 | 0;
      break label$682;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$687 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$687
     }
     $12 = $12 + -16 | 0;
     break label$680;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$688 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$688
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$689 : {
      label$690 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$690
       }
       $9 = $9 + 1 | 0;
       break label$689;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$691 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$691
      }
      $9 = $9 + 1 | 0;
      break label$688;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$692 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$692
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$693 : {
     label$694 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$694
      }
      $9 = $9 + 1 | 0;
      break label$693;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$695 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$695
     }
     $9 = $9 + 1 | 0;
     break label$692;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$696 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$696
    }
    break label$678;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$697 : {
    label$698 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$698
     }
     $9 = $9 + 1 | 0;
     break label$697;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$699 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$699
    }
    $9 = $9 + 1 | 0;
    break label$678;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$700 : {
   label$701 : {
    $6 = HEAP16[($1 + 60 | 0) >> 1] | 0;
    if ($6) {
     break label$701
    }
    $12 = $12 + 1 | 0;
    break label$700;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$702 : {
    label$703 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$703
     }
     break label$702;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$704 : {
     label$705 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$705
      }
      break label$704;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$706 : {
      label$707 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$707
       }
       $9 = $9 + 1 | 0;
       break label$706;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$708 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$708
      }
      $9 = $9 + 1 | 0;
      break label$704;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$709 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$709
     }
     $12 = $12 + -16 | 0;
     break label$702;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$710 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$710
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$711 : {
      label$712 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$712
       }
       $9 = $9 + 1 | 0;
       break label$711;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$713 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$713
      }
      $9 = $9 + 1 | 0;
      break label$710;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$714 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$714
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$715 : {
     label$716 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$716
      }
      $9 = $9 + 1 | 0;
      break label$715;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$717 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$717
     }
     $9 = $9 + 1 | 0;
     break label$714;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$718 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$718
    }
    break label$700;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$719 : {
    label$720 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$720
     }
     $9 = $9 + 1 | 0;
     break label$719;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$721 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$721
    }
    $9 = $9 + 1 | 0;
    break label$700;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$722 : {
   label$723 : {
    $6 = HEAP16[($1 + 74 | 0) >> 1] | 0;
    if ($6) {
     break label$723
    }
    $12 = $12 + 1 | 0;
    break label$722;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$724 : {
    label$725 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$725
     }
     break label$724;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$726 : {
     label$727 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$727
      }
      break label$726;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$728 : {
      label$729 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$729
       }
       $9 = $9 + 1 | 0;
       break label$728;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$730 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$730
      }
      $9 = $9 + 1 | 0;
      break label$726;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$731 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$731
     }
     $12 = $12 + -16 | 0;
     break label$724;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$732 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$732
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$733 : {
      label$734 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$734
       }
       $9 = $9 + 1 | 0;
       break label$733;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$735 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$735
      }
      $9 = $9 + 1 | 0;
      break label$732;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$736 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$736
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$737 : {
     label$738 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$738
      }
      $9 = $9 + 1 | 0;
      break label$737;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$739 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$739
     }
     $9 = $9 + 1 | 0;
     break label$736;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$740 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$740
    }
    break label$722;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$741 : {
    label$742 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$742
     }
     $9 = $9 + 1 | 0;
     break label$741;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$743 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$743
    }
    $9 = $9 + 1 | 0;
    break label$722;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$744 : {
   label$745 : {
    $6 = HEAP16[($1 + 88 | 0) >> 1] | 0;
    if ($6) {
     break label$745
    }
    $12 = $12 + 1 | 0;
    break label$744;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$746 : {
    label$747 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$747
     }
     break label$746;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$748 : {
     label$749 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$749
      }
      break label$748;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$750 : {
      label$751 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$751
       }
       $9 = $9 + 1 | 0;
       break label$750;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$752 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$752
      }
      $9 = $9 + 1 | 0;
      break label$748;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$753 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$753
     }
     $12 = $12 + -16 | 0;
     break label$746;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$754 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$754
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$755 : {
      label$756 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$756
       }
       $9 = $9 + 1 | 0;
       break label$755;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$757 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$757
      }
      $9 = $9 + 1 | 0;
      break label$754;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$758 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$758
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$759 : {
     label$760 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$760
      }
      $9 = $9 + 1 | 0;
      break label$759;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$761 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$761
     }
     $9 = $9 + 1 | 0;
     break label$758;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$762 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$762
    }
    break label$744;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$763 : {
    label$764 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$764
     }
     $9 = $9 + 1 | 0;
     break label$763;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$765 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$765
    }
    $9 = $9 + 1 | 0;
    break label$744;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$766 : {
   label$767 : {
    $6 = HEAP16[($1 + 102 | 0) >> 1] | 0;
    if ($6) {
     break label$767
    }
    $12 = $12 + 1 | 0;
    break label$766;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$768 : {
    label$769 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$769
     }
     break label$768;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$770 : {
     label$771 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$771
      }
      break label$770;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$772 : {
      label$773 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$773
       }
       $9 = $9 + 1 | 0;
       break label$772;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$774 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$774
      }
      $9 = $9 + 1 | 0;
      break label$770;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$775 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$775
     }
     $12 = $12 + -16 | 0;
     break label$768;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$776 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$776
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$777 : {
      label$778 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$778
       }
       $9 = $9 + 1 | 0;
       break label$777;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$779 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$779
      }
      $9 = $9 + 1 | 0;
      break label$776;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$780 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$780
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$781 : {
     label$782 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$782
      }
      $9 = $9 + 1 | 0;
      break label$781;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$783 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$783
     }
     $9 = $9 + 1 | 0;
     break label$780;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$784 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$784
    }
    break label$766;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$785 : {
    label$786 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$786
     }
     $9 = $9 + 1 | 0;
     break label$785;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$787 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$787
    }
    $9 = $9 + 1 | 0;
    break label$766;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$788 : {
   label$789 : {
    $6 = HEAP16[($1 + 116 | 0) >> 1] | 0;
    if ($6) {
     break label$789
    }
    $12 = $12 + 1 | 0;
    break label$788;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$790 : {
    label$791 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$791
     }
     break label$790;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$792 : {
     label$793 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$793
      }
      break label$792;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$794 : {
      label$795 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$795
       }
       $9 = $9 + 1 | 0;
       break label$794;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$796 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$796
      }
      $9 = $9 + 1 | 0;
      break label$792;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$797 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$797
     }
     $12 = $12 + -16 | 0;
     break label$790;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$798 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$798
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$799 : {
      label$800 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$800
       }
       $9 = $9 + 1 | 0;
       break label$799;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$801 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$801
      }
      $9 = $9 + 1 | 0;
      break label$798;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -32 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$802 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$802
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$803 : {
     label$804 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$804
      }
      $9 = $9 + 1 | 0;
      break label$803;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$805 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$805
     }
     $9 = $9 + 1 | 0;
     break label$802;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$806 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$806
    }
    break label$788;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$807 : {
    label$808 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$808
     }
     $9 = $9 + 1 | 0;
     break label$807;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$809 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$809
    }
    $9 = $9 + 1 | 0;
    break label$788;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$810 : {
   label$811 : {
    $6 = HEAP16[($1 + 118 | 0) >> 1] | 0;
    if ($6) {
     break label$811
    }
    $12 = $12 + 1 | 0;
    break label$810;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$812 : {
    label$813 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$813
     }
     break label$812;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$814 : {
     label$815 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$815
      }
      break label$814;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$816 : {
      label$817 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$817
       }
       $9 = $9 + 1 | 0;
       break label$816;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$818 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$818
      }
      $9 = $9 + 1 | 0;
      break label$814;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$819 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$819
     }
     $12 = $12 + -16 | 0;
     break label$812;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$820 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$820
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$821 : {
      label$822 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$822
       }
       $9 = $9 + 1 | 0;
       break label$821;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$823 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$823
      }
      $9 = $9 + 1 | 0;
      break label$820;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$824 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$824
     }
     $12 = $12 + -32 | 0;
     break label$812;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$825 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$825
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$826 : {
      label$827 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$827
       }
       $9 = $9 + 1 | 0;
       break label$826;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$828 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$828
      }
      $9 = $9 + 1 | 0;
      break label$825;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$829 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$829
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$830 : {
     label$831 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$831
      }
      $9 = $9 + 1 | 0;
      break label$830;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$832 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$832
     }
     $9 = $9 + 1 | 0;
     break label$829;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$833 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$833
    }
    break label$810;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$834 : {
    label$835 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$835
     }
     $9 = $9 + 1 | 0;
     break label$834;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$836 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$836
    }
    $9 = $9 + 1 | 0;
    break label$810;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$837 : {
   label$838 : {
    $6 = HEAP16[($1 + 104 | 0) >> 1] | 0;
    if ($6) {
     break label$838
    }
    $12 = $12 + 1 | 0;
    break label$837;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$839 : {
    label$840 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$840
     }
     break label$839;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$841 : {
     label$842 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$842
      }
      break label$841;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$843 : {
      label$844 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$844
       }
       $9 = $9 + 1 | 0;
       break label$843;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$845 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$845
      }
      $9 = $9 + 1 | 0;
      break label$841;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$846 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$846
     }
     $12 = $12 + -16 | 0;
     break label$839;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$847 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$847
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$848 : {
      label$849 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$849
       }
       $9 = $9 + 1 | 0;
       break label$848;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$850 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$850
      }
      $9 = $9 + 1 | 0;
      break label$847;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$851 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$851
     }
     $12 = $12 + -32 | 0;
     break label$839;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$852 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$852
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$853 : {
      label$854 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$854
       }
       $9 = $9 + 1 | 0;
       break label$853;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$855 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$855
      }
      $9 = $9 + 1 | 0;
      break label$852;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$856 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$856
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$857 : {
     label$858 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$858
      }
      $9 = $9 + 1 | 0;
      break label$857;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$859 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$859
     }
     $9 = $9 + 1 | 0;
     break label$856;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$860 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$860
    }
    break label$837;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$861 : {
    label$862 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$862
     }
     $9 = $9 + 1 | 0;
     break label$861;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$863 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$863
    }
    $9 = $9 + 1 | 0;
    break label$837;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$864 : {
   label$865 : {
    $6 = HEAP16[($1 + 90 | 0) >> 1] | 0;
    if ($6) {
     break label$865
    }
    $12 = $12 + 1 | 0;
    break label$864;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$866 : {
    label$867 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$867
     }
     break label$866;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$868 : {
     label$869 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$869
      }
      break label$868;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$870 : {
      label$871 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$871
       }
       $9 = $9 + 1 | 0;
       break label$870;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$872 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$872
      }
      $9 = $9 + 1 | 0;
      break label$868;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$873 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$873
     }
     $12 = $12 + -16 | 0;
     break label$866;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$874 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$874
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$875 : {
      label$876 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$876
       }
       $9 = $9 + 1 | 0;
       break label$875;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$877 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$877
      }
      $9 = $9 + 1 | 0;
      break label$874;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$878 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$878
     }
     $12 = $12 + -32 | 0;
     break label$866;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$879 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$879
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$880 : {
      label$881 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$881
       }
       $9 = $9 + 1 | 0;
       break label$880;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$882 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$882
      }
      $9 = $9 + 1 | 0;
      break label$879;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$883 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$883
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$884 : {
     label$885 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$885
      }
      $9 = $9 + 1 | 0;
      break label$884;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$886 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$886
     }
     $9 = $9 + 1 | 0;
     break label$883;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$887 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$887
    }
    break label$864;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$888 : {
    label$889 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$889
     }
     $9 = $9 + 1 | 0;
     break label$888;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$890 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$890
    }
    $9 = $9 + 1 | 0;
    break label$864;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$891 : {
   label$892 : {
    $6 = HEAP16[($1 + 76 | 0) >> 1] | 0;
    if ($6) {
     break label$892
    }
    $12 = $12 + 1 | 0;
    break label$891;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$893 : {
    label$894 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$894
     }
     break label$893;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$895 : {
     label$896 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$896
      }
      break label$895;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$897 : {
      label$898 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$898
       }
       $9 = $9 + 1 | 0;
       break label$897;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$899 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$899
      }
      $9 = $9 + 1 | 0;
      break label$895;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$900 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$900
     }
     $12 = $12 + -16 | 0;
     break label$893;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$901 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$901
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$902 : {
      label$903 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$903
       }
       $9 = $9 + 1 | 0;
       break label$902;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$904 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$904
      }
      $9 = $9 + 1 | 0;
      break label$901;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$905 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$905
     }
     $12 = $12 + -32 | 0;
     break label$893;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$906 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$906
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$907 : {
      label$908 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$908
       }
       $9 = $9 + 1 | 0;
       break label$907;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$909 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$909
      }
      $9 = $9 + 1 | 0;
      break label$906;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$910 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$910
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$911 : {
     label$912 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$912
      }
      $9 = $9 + 1 | 0;
      break label$911;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$913 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$913
     }
     $9 = $9 + 1 | 0;
     break label$910;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$914 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$914
    }
    break label$891;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$915 : {
    label$916 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$916
     }
     $9 = $9 + 1 | 0;
     break label$915;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$917 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$917
    }
    $9 = $9 + 1 | 0;
    break label$891;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$918 : {
   label$919 : {
    $6 = HEAP16[($1 + 62 | 0) >> 1] | 0;
    if ($6) {
     break label$919
    }
    $12 = $12 + 1 | 0;
    break label$918;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$920 : {
    label$921 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$921
     }
     break label$920;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$922 : {
     label$923 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$923
      }
      break label$922;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$924 : {
      label$925 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$925
       }
       $9 = $9 + 1 | 0;
       break label$924;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$926 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$926
      }
      $9 = $9 + 1 | 0;
      break label$922;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$927 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$927
     }
     $12 = $12 + -16 | 0;
     break label$920;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$928 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$928
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$929 : {
      label$930 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$930
       }
       $9 = $9 + 1 | 0;
       break label$929;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$931 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$931
      }
      $9 = $9 + 1 | 0;
      break label$928;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$932 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$932
     }
     $12 = $12 + -32 | 0;
     break label$920;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$933 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$933
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$934 : {
      label$935 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$935
       }
       $9 = $9 + 1 | 0;
       break label$934;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$936 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$936
      }
      $9 = $9 + 1 | 0;
      break label$933;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$937 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$937
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$938 : {
     label$939 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$939
      }
      $9 = $9 + 1 | 0;
      break label$938;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$940 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$940
     }
     $9 = $9 + 1 | 0;
     break label$937;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$941 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$941
    }
    break label$918;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$942 : {
    label$943 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$943
     }
     $9 = $9 + 1 | 0;
     break label$942;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$944 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$944
    }
    $9 = $9 + 1 | 0;
    break label$918;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$945 : {
   label$946 : {
    $6 = HEAP16[($1 + 78 | 0) >> 1] | 0;
    if ($6) {
     break label$946
    }
    $12 = $12 + 1 | 0;
    break label$945;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$947 : {
    label$948 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$948
     }
     break label$947;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$949 : {
     label$950 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$950
      }
      break label$949;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$951 : {
      label$952 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$952
       }
       $9 = $9 + 1 | 0;
       break label$951;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$953 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$953
      }
      $9 = $9 + 1 | 0;
      break label$949;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$954 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$954
     }
     $12 = $12 + -16 | 0;
     break label$947;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$955 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$955
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$956 : {
      label$957 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$957
       }
       $9 = $9 + 1 | 0;
       break label$956;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$958 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$958
      }
      $9 = $9 + 1 | 0;
      break label$955;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$959 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$959
     }
     $12 = $12 + -32 | 0;
     break label$947;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$960 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$960
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$961 : {
      label$962 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$962
       }
       $9 = $9 + 1 | 0;
       break label$961;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$963 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$963
      }
      $9 = $9 + 1 | 0;
      break label$960;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$964 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$964
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$965 : {
     label$966 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$966
      }
      $9 = $9 + 1 | 0;
      break label$965;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$967 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$967
     }
     $9 = $9 + 1 | 0;
     break label$964;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$968 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$968
    }
    break label$945;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$969 : {
    label$970 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$970
     }
     $9 = $9 + 1 | 0;
     break label$969;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$971 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$971
    }
    $9 = $9 + 1 | 0;
    break label$945;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$972 : {
   label$973 : {
    $6 = HEAP16[($1 + 92 | 0) >> 1] | 0;
    if ($6) {
     break label$973
    }
    $12 = $12 + 1 | 0;
    break label$972;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$974 : {
    label$975 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$975
     }
     break label$974;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$976 : {
     label$977 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$977
      }
      break label$976;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$978 : {
      label$979 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$979
       }
       $9 = $9 + 1 | 0;
       break label$978;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$980 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$980
      }
      $9 = $9 + 1 | 0;
      break label$976;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$981 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$981
     }
     $12 = $12 + -16 | 0;
     break label$974;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$982 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$982
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$983 : {
      label$984 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$984
       }
       $9 = $9 + 1 | 0;
       break label$983;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$985 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$985
      }
      $9 = $9 + 1 | 0;
      break label$982;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$986 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$986
     }
     $12 = $12 + -32 | 0;
     break label$974;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$987 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$987
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$988 : {
      label$989 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$989
       }
       $9 = $9 + 1 | 0;
       break label$988;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$990 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$990
      }
      $9 = $9 + 1 | 0;
      break label$987;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$991 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$991
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$992 : {
     label$993 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$993
      }
      $9 = $9 + 1 | 0;
      break label$992;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$994 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$994
     }
     $9 = $9 + 1 | 0;
     break label$991;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$995 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$995
    }
    break label$972;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$996 : {
    label$997 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$997
     }
     $9 = $9 + 1 | 0;
     break label$996;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$998 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$998
    }
    $9 = $9 + 1 | 0;
    break label$972;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$999 : {
   label$1000 : {
    $6 = HEAP16[($1 + 106 | 0) >> 1] | 0;
    if ($6) {
     break label$1000
    }
    $12 = $12 + 1 | 0;
    break label$999;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1001 : {
    label$1002 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1002
     }
     break label$1001;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1003 : {
     label$1004 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$1004
      }
      break label$1003;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1005 : {
      label$1006 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1006
       }
       $9 = $9 + 1 | 0;
       break label$1005;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1007 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1007
      }
      $9 = $9 + 1 | 0;
      break label$1003;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1008 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1008
     }
     $12 = $12 + -16 | 0;
     break label$1001;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1009 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1009
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1010 : {
      label$1011 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1011
       }
       $9 = $9 + 1 | 0;
       break label$1010;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1012 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1012
      }
      $9 = $9 + 1 | 0;
      break label$1009;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1013 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1013
     }
     $12 = $12 + -32 | 0;
     break label$1001;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1014 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1014
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1015 : {
      label$1016 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1016
       }
       $9 = $9 + 1 | 0;
       break label$1015;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1017 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1017
      }
      $9 = $9 + 1 | 0;
      break label$1014;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1018 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1018
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1019 : {
     label$1020 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1020
      }
      $9 = $9 + 1 | 0;
      break label$1019;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1021 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1021
     }
     $9 = $9 + 1 | 0;
     break label$1018;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1022 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1022
    }
    break label$999;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1023 : {
    label$1024 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1024
     }
     $9 = $9 + 1 | 0;
     break label$1023;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1025 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1025
    }
    $9 = $9 + 1 | 0;
    break label$999;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1026 : {
   label$1027 : {
    $6 = HEAP16[($1 + 120 | 0) >> 1] | 0;
    if ($6) {
     break label$1027
    }
    $12 = $12 + 1 | 0;
    break label$1026;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1028 : {
    label$1029 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1029
     }
     break label$1028;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1030 : {
     label$1031 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$1031
      }
      break label$1030;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1032 : {
      label$1033 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1033
       }
       $9 = $9 + 1 | 0;
       break label$1032;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1034 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1034
      }
      $9 = $9 + 1 | 0;
      break label$1030;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1035 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1035
     }
     $12 = $12 + -16 | 0;
     break label$1028;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1036 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1036
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1037 : {
      label$1038 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1038
       }
       $9 = $9 + 1 | 0;
       break label$1037;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1039 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1039
      }
      $9 = $9 + 1 | 0;
      break label$1036;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1040 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1040
     }
     $12 = $12 + -32 | 0;
     break label$1028;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1041 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1041
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1042 : {
      label$1043 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1043
       }
       $9 = $9 + 1 | 0;
       break label$1042;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1044 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1044
      }
      $9 = $9 + 1 | 0;
      break label$1041;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1045 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1045
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1046 : {
     label$1047 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1047
      }
      $9 = $9 + 1 | 0;
      break label$1046;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1048 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1048
     }
     $9 = $9 + 1 | 0;
     break label$1045;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1049 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1049
    }
    break label$1026;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1050 : {
    label$1051 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1051
     }
     $9 = $9 + 1 | 0;
     break label$1050;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1052 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1052
    }
    $9 = $9 + 1 | 0;
    break label$1026;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1053 : {
   label$1054 : {
    $6 = HEAP16[($1 + 122 | 0) >> 1] | 0;
    if ($6) {
     break label$1054
    }
    $12 = $12 + 1 | 0;
    break label$1053;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1055 : {
    label$1056 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1056
     }
     break label$1055;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1057 : {
     label$1058 : {
      $2 = $2 + $7 | 0;
      if (($2 | 0) >= (16 | 0)) {
       break label$1058
      }
      break label$1057;
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1059 : {
      label$1060 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1060
       }
       $9 = $9 + 1 | 0;
       break label$1059;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1061 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1061
      }
      $9 = $9 + 1 | 0;
      break label$1057;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1062 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1062
     }
     $12 = $12 + -16 | 0;
     break label$1055;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1063 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1063
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1064 : {
      label$1065 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1065
       }
       $9 = $9 + 1 | 0;
       break label$1064;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1066 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1066
      }
      $9 = $9 + 1 | 0;
      break label$1063;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1067 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1067
     }
     $12 = $12 + -32 | 0;
     break label$1055;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1068 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1068
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1069 : {
      label$1070 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1070
       }
       $9 = $9 + 1 | 0;
       break label$1069;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1071 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1071
      }
      $9 = $9 + 1 | 0;
      break label$1068;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1072 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1072
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1073 : {
     label$1074 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1074
      }
      $9 = $9 + 1 | 0;
      break label$1073;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1075 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1075
     }
     $9 = $9 + 1 | 0;
     break label$1072;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1076 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1076
    }
    break label$1053;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1077 : {
    label$1078 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1078
     }
     $9 = $9 + 1 | 0;
     break label$1077;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1079 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1079
    }
    $9 = $9 + 1 | 0;
    break label$1053;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1080 : {
   label$1081 : {
    $6 = HEAP16[($1 + 108 | 0) >> 1] | 0;
    if ($6) {
     break label$1081
    }
    $12 = $12 + 1 | 0;
    break label$1080;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1082 : {
    label$1083 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1083
     }
     break label$1082;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1084 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1084
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1085 : {
      label$1086 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1086
       }
       $9 = $9 + 1 | 0;
       break label$1085;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1087 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1087
      }
      $9 = $9 + 1 | 0;
      break label$1084;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1088 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1088
     }
     $12 = $12 + -16 | 0;
     break label$1082;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1089 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1089
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1090 : {
      label$1091 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1091
       }
       $9 = $9 + 1 | 0;
       break label$1090;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1092 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1092
      }
      $9 = $9 + 1 | 0;
      break label$1089;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1093 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1093
     }
     $12 = $12 + -32 | 0;
     break label$1082;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1094 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1094
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1095 : {
      label$1096 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1096
       }
       $9 = $9 + 1 | 0;
       break label$1095;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1097 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1097
      }
      $9 = $9 + 1 | 0;
      break label$1094;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1098 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1098
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1099 : {
     label$1100 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1100
      }
      $9 = $9 + 1 | 0;
      break label$1099;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1101 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1101
     }
     $9 = $9 + 1 | 0;
     break label$1098;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1102 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1102
    }
    break label$1080;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1103 : {
    label$1104 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1104
     }
     $9 = $9 + 1 | 0;
     break label$1103;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1105 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1105
    }
    $9 = $9 + 1 | 0;
    break label$1080;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1106 : {
   label$1107 : {
    $6 = HEAP16[($1 + 94 | 0) >> 1] | 0;
    if ($6) {
     break label$1107
    }
    $12 = $12 + 1 | 0;
    break label$1106;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1108 : {
    label$1109 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1109
     }
     break label$1108;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1110 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1110
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1111 : {
      label$1112 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1112
       }
       $9 = $9 + 1 | 0;
       break label$1111;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1113 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1113
      }
      $9 = $9 + 1 | 0;
      break label$1110;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1114 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1114
     }
     $12 = $12 + -16 | 0;
     break label$1108;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1115 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1115
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1116 : {
      label$1117 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1117
       }
       $9 = $9 + 1 | 0;
       break label$1116;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1118 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1118
      }
      $9 = $9 + 1 | 0;
      break label$1115;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1119 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1119
     }
     $12 = $12 + -32 | 0;
     break label$1108;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1120 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1120
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1121 : {
      label$1122 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1122
       }
       $9 = $9 + 1 | 0;
       break label$1121;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1123 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1123
      }
      $9 = $9 + 1 | 0;
      break label$1120;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1124 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1124
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1125 : {
     label$1126 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1126
      }
      $9 = $9 + 1 | 0;
      break label$1125;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1127 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1127
     }
     $9 = $9 + 1 | 0;
     break label$1124;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1128 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1128
    }
    break label$1106;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1129 : {
    label$1130 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1130
     }
     $9 = $9 + 1 | 0;
     break label$1129;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1131 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1131
    }
    $9 = $9 + 1 | 0;
    break label$1106;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1132 : {
   label$1133 : {
    $6 = HEAP16[($1 + 110 | 0) >> 1] | 0;
    if ($6) {
     break label$1133
    }
    $12 = $12 + 1 | 0;
    break label$1132;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1134 : {
    label$1135 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1135
     }
     break label$1134;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1136 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1136
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1137 : {
      label$1138 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1138
       }
       $9 = $9 + 1 | 0;
       break label$1137;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1139 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1139
      }
      $9 = $9 + 1 | 0;
      break label$1136;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1140 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1140
     }
     $12 = $12 + -16 | 0;
     break label$1134;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1141 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1141
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1142 : {
      label$1143 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1143
       }
       $9 = $9 + 1 | 0;
       break label$1142;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1144 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1144
      }
      $9 = $9 + 1 | 0;
      break label$1141;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1145 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1145
     }
     $12 = $12 + -32 | 0;
     break label$1134;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1146 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1146
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1147 : {
      label$1148 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1148
       }
       $9 = $9 + 1 | 0;
       break label$1147;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1149 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1149
      }
      $9 = $9 + 1 | 0;
      break label$1146;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1150 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1150
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1151 : {
     label$1152 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1152
      }
      $9 = $9 + 1 | 0;
      break label$1151;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1153 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1153
     }
     $9 = $9 + 1 | 0;
     break label$1150;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1154 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1154
    }
    break label$1132;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1155 : {
    label$1156 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1156
     }
     $9 = $9 + 1 | 0;
     break label$1155;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1157 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1157
    }
    $9 = $9 + 1 | 0;
    break label$1132;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1158 : {
   label$1159 : {
    $6 = HEAP16[($1 + 124 | 0) >> 1] | 0;
    if ($6) {
     break label$1159
    }
    $12 = $12 + 1 | 0;
    break label$1158;
   }
   $8 = $6 >> 31 | 0;
   $13 = HEAPU8[((($8 ^ $6 | 0) - $8 | 0) + 66832 | 0) >> 0] | 0;
   $6 = $8 + $6 | 0;
   label$1160 : {
    label$1161 : {
     if ($12 >>> 0 >= 16 >>> 0) {
      break label$1161
     }
     break label$1160;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1162 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1162
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1163 : {
      label$1164 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1164
       }
       $9 = $9 + 1 | 0;
       break label$1163;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1165 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1165
      }
      $9 = $9 + 1 | 0;
      break label$1162;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1166 : {
     if (($12 | 0) >= (32 | 0)) {
      break label$1166
     }
     $12 = $12 + -16 | 0;
     break label$1160;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1167 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1167
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1168 : {
      label$1169 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1169
       }
       $9 = $9 + 1 | 0;
       break label$1168;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1170 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1170
      }
      $9 = $9 + 1 | 0;
      break label$1167;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    label$1171 : {
     if (($12 | 0) >= (48 | 0)) {
      break label$1171
     }
     $12 = $12 + -32 | 0;
     break label$1160;
    }
    $3 = $3 << $7 | 0 | $11 | 0;
    label$1172 : {
     $2 = $2 + $7 | 0;
     if (($2 | 0) < (16 | 0)) {
      break label$1172
     }
     $8 = $3 >>> ($2 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $8;
     label$1173 : {
      label$1174 : {
       if (($8 & 255 | 0 | 0) == (255 | 0)) {
        break label$1174
       }
       $9 = $9 + 1 | 0;
       break label$1173;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $9 = $9 + 2 | 0;
     }
     $2 = $2 + -16 | 0;
     $8 = $3 >>> $2 | 0;
     HEAP8[$9 >> 0] = $8;
     label$1175 : {
      if (($8 & 255 | 0 | 0) == (255 | 0)) {
       break label$1175
      }
      $9 = $9 + 1 | 0;
      break label$1172;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $12 = $12 + -48 | 0;
   }
   $12 = ($12 << 4 | 0) + $13 | 0;
   $8 = HEAP8[(($4 + $12 | 0) + 1024 | 0) >> 0] | 0;
   $3 = $3 << $8 | 0 | (HEAP32[($4 + ($12 << 2 | 0) | 0) >> 2] | 0) | 0;
   $12 = $6 & ((-1 << $13 | 0) ^ -1 | 0) | 0;
   label$1176 : {
    $2 = $2 + $8 | 0;
    if (($2 | 0) < (16 | 0)) {
     break label$1176
    }
    $6 = $3 >>> ($2 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $6;
    label$1177 : {
     label$1178 : {
      if (($6 & 255 | 0 | 0) == (255 | 0)) {
       break label$1178
      }
      $9 = $9 + 1 | 0;
      break label$1177;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $9 = $9 + 2 | 0;
    }
    $2 = $2 + -16 | 0;
    $6 = $3 >>> $2 | 0;
    HEAP8[$9 >> 0] = $6;
    label$1179 : {
     if (($6 & 255 | 0 | 0) == (255 | 0)) {
      break label$1179
     }
     $9 = $9 + 1 | 0;
     break label$1176;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $3 = $3 << $13 | 0 | $12 | 0;
   $12 = 0;
   label$1180 : {
    $2 = $2 + $13 | 0;
    if (($2 | 0) >= (16 | 0)) {
     break label$1180
    }
    break label$1158;
   }
   $13 = $3 >>> ($2 + -8 | 0) | 0;
   HEAP8[$9 >> 0] = $13;
   label$1181 : {
    label$1182 : {
     if (($13 & 255 | 0 | 0) == (255 | 0)) {
      break label$1182
     }
     $9 = $9 + 1 | 0;
     break label$1181;
    }
    HEAP8[($9 + 1 | 0) >> 0] = 0;
    $9 = $9 + 2 | 0;
   }
   $2 = $2 + -16 | 0;
   $13 = $3 >>> $2 | 0;
   HEAP8[$9 >> 0] = $13;
   label$1183 : {
    if (($13 & 255 | 0 | 0) == (255 | 0)) {
     break label$1183
    }
    $9 = $9 + 1 | 0;
    break label$1158;
   }
   $12 = 0;
   HEAP8[($9 + 1 | 0) >> 0] = 0;
   $9 = $9 + 2 | 0;
  }
  label$1184 : {
   label$1185 : {
    label$1186 : {
     $13 = HEAP16[($1 + 126 | 0) >> 1] | 0;
     if (!$13) {
      break label$1186
     }
     $6 = $13 >> 31 | 0;
     $1 = HEAPU8[((($6 ^ $13 | 0) - $6 | 0) + 66832 | 0) >> 0] | 0;
     $13 = $6 + $13 | 0;
     label$1187 : {
      label$1188 : {
       if ($12 >>> 0 >= 16 >>> 0) {
        break label$1188
       }
       break label$1187;
      }
      $3 = $3 << $7 | 0 | $11 | 0;
      label$1189 : {
       $2 = $2 + $7 | 0;
       if (($2 | 0) < (16 | 0)) {
        break label$1189
       }
       $6 = $3 >>> ($2 + -8 | 0) | 0;
       HEAP8[$9 >> 0] = $6;
       label$1190 : {
        label$1191 : {
         if (($6 & 255 | 0 | 0) == (255 | 0)) {
          break label$1191
         }
         $9 = $9 + 1 | 0;
         break label$1190;
        }
        HEAP8[($9 + 1 | 0) >> 0] = 0;
        $9 = $9 + 2 | 0;
       }
       $2 = $2 + -16 | 0;
       $6 = $3 >>> $2 | 0;
       HEAP8[$9 >> 0] = $6;
       label$1192 : {
        if (($6 & 255 | 0 | 0) == (255 | 0)) {
         break label$1192
        }
        $9 = $9 + 1 | 0;
        break label$1189;
       }
       HEAP8[($9 + 1 | 0) >> 0] = 0;
       $9 = $9 + 2 | 0;
      }
      label$1193 : {
       if (($12 | 0) >= (32 | 0)) {
        break label$1193
       }
       $12 = $12 + -16 | 0;
       break label$1187;
      }
      $3 = $3 << $7 | 0 | $11 | 0;
      label$1194 : {
       $2 = $2 + $7 | 0;
       if (($2 | 0) < (16 | 0)) {
        break label$1194
       }
       $6 = $3 >>> ($2 + -8 | 0) | 0;
       HEAP8[$9 >> 0] = $6;
       label$1195 : {
        label$1196 : {
         if (($6 & 255 | 0 | 0) == (255 | 0)) {
          break label$1196
         }
         $9 = $9 + 1 | 0;
         break label$1195;
        }
        HEAP8[($9 + 1 | 0) >> 0] = 0;
        $9 = $9 + 2 | 0;
       }
       $2 = $2 + -16 | 0;
       $6 = $3 >>> $2 | 0;
       HEAP8[$9 >> 0] = $6;
       label$1197 : {
        if (($6 & 255 | 0 | 0) == (255 | 0)) {
         break label$1197
        }
        $9 = $9 + 1 | 0;
        break label$1194;
       }
       HEAP8[($9 + 1 | 0) >> 0] = 0;
       $9 = $9 + 2 | 0;
      }
      label$1198 : {
       if (($12 | 0) >= (48 | 0)) {
        break label$1198
       }
       $12 = $12 + -32 | 0;
       break label$1187;
      }
      $3 = $3 << $7 | 0 | $11 | 0;
      label$1199 : {
       $2 = $2 + $7 | 0;
       if (($2 | 0) < (16 | 0)) {
        break label$1199
       }
       $7 = $3 >>> ($2 + -8 | 0) | 0;
       HEAP8[$9 >> 0] = $7;
       label$1200 : {
        label$1201 : {
         if (($7 & 255 | 0 | 0) == (255 | 0)) {
          break label$1201
         }
         $9 = $9 + 1 | 0;
         break label$1200;
        }
        HEAP8[($9 + 1 | 0) >> 0] = 0;
        $9 = $9 + 2 | 0;
       }
       $2 = $2 + -16 | 0;
       $7 = $3 >>> $2 | 0;
       HEAP8[$9 >> 0] = $7;
       label$1202 : {
        if (($7 & 255 | 0 | 0) == (255 | 0)) {
         break label$1202
        }
        $9 = $9 + 1 | 0;
        break label$1199;
       }
       HEAP8[($9 + 1 | 0) >> 0] = 0;
       $9 = $9 + 2 | 0;
      }
      $12 = $12 + -48 | 0;
     }
     $7 = ($12 << 4 | 0) + $1 | 0;
     $11 = HEAP8[(($4 + $7 | 0) + 1024 | 0) >> 0] | 0;
     $4 = $3 << $11 | 0 | (HEAP32[($4 + ($7 << 2 | 0) | 0) >> 2] | 0) | 0;
     $7 = $13 & ((-1 << $1 | 0) ^ -1 | 0) | 0;
     label$1203 : {
      $3 = $2 + $11 | 0;
      if (($3 | 0) < (16 | 0)) {
       break label$1203
      }
      $2 = $4 >>> ($3 + -8 | 0) | 0;
      HEAP8[$9 >> 0] = $2;
      label$1204 : {
       label$1205 : {
        if (($2 & 255 | 0 | 0) == (255 | 0)) {
         break label$1205
        }
        $2 = $9 + 1 | 0;
        break label$1204;
       }
       HEAP8[($9 + 1 | 0) >> 0] = 0;
       $2 = $9 + 2 | 0;
      }
      $3 = $3 + -16 | 0;
      $9 = $4 >>> $3 | 0;
      HEAP8[$2 >> 0] = $9;
      label$1206 : {
       if (($9 & 255 | 0 | 0) == (255 | 0)) {
        break label$1206
       }
       $9 = $2 + 1 | 0;
       break label$1203;
      }
      HEAP8[($2 + 1 | 0) >> 0] = 0;
      $9 = $2 + 2 | 0;
     }
     $4 = $4 << $1 | 0 | $7 | 0;
     $3 = $3 + $1 | 0;
     if (($3 | 0) < (16 | 0)) {
      break label$1184
     }
     $2 = $4 >>> ($3 + -8 | 0) | 0;
     HEAP8[$9 >> 0] = $2;
     label$1207 : {
      label$1208 : {
       if (($2 & 255 | 0 | 0) == (255 | 0)) {
        break label$1208
       }
       $2 = $9 + 1 | 0;
       break label$1207;
      }
      HEAP8[($9 + 1 | 0) >> 0] = 0;
      $2 = $9 + 2 | 0;
     }
     $3 = $3 + -16 | 0;
     $9 = $4 >>> $3 | 0;
     HEAP8[$2 >> 0] = $9;
     if (($9 & 255 | 0 | 0) == (255 | 0)) {
      break label$1185
     }
     $9 = $2 + 1 | 0;
     break label$1184;
    }
    $1 = HEAP8[($4 + 1024 | 0) >> 0] | 0;
    $4 = $3 << $1 | 0 | (HEAP32[$4 >> 2] | 0) | 0;
    $3 = $2 + $1 | 0;
    if (($3 | 0) < (16 | 0)) {
     break label$1184
    }
    $2 = $4 >>> ($3 + -8 | 0) | 0;
    HEAP8[$9 >> 0] = $2;
    label$1209 : {
     label$1210 : {
      if (($2 & 255 | 0 | 0) == (255 | 0)) {
       break label$1210
      }
      $2 = $9 + 1 | 0;
      break label$1209;
     }
     HEAP8[($9 + 1 | 0) >> 0] = 0;
     $2 = $9 + 2 | 0;
    }
    $3 = $3 + -16 | 0;
    $9 = $4 >>> $3 | 0;
    HEAP8[$2 >> 0] = $9;
    if (($9 & 255 | 0 | 0) == (255 | 0)) {
     break label$1185
    }
    $9 = $2 + 1 | 0;
    break label$1184;
   }
   HEAP8[($2 + 1 | 0) >> 0] = 0;
   $9 = $2 + 2 | 0;
  }
  HEAP32[($0 + 12 | 0) >> 2] = $3;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  label$1211 : {
   label$1212 : {
    if ($10 >>> 0 > 255 >>> 0) {
     break label$1212
    }
    $1 = 1;
    $2 = $9 - $5 | 0;
    if (!$2) {
     break label$1211
    }
    $9 = $5;
    label$1213 : while (1) {
     $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $3 = $2 >>> 0 < $3 >>> 0 ? $2 : $3;
     __memcpy(HEAP32[$0 >> 2] | 0 | 0, $9 | 0, $3 | 0) | 0;
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + $3 | 0;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $4 - $3 | 0;
     label$1214 : {
      if (($4 | 0) != ($3 | 0)) {
       break label$1214
      }
      label$1215 : {
       $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       $11546 = $4;
       $4 = HEAP32[($4 + 24 | 0) >> 2] | 0;
       if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($11546) | 0) {
        break label$1215
       }
       $1 = 0;
       break label$1211;
      }
      HEAP32[$0 >> 2] = HEAP32[$4 >> 2] | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
     }
     $9 = $9 + $3 | 0;
     $2 = $2 - $3 | 0;
     if ($2) {
      continue label$1213
     }
     break label$1211;
    };
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $9;
   HEAP32[($0 + 4 | 0) >> 2] = ($3 - $9 | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
   $1 = 1;
  }
  __stack_pointer = $5 + 256 | 0;
  return $1 | 0;
 }
 
 function jinit_c_coef_controller($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 144) | 0;
  HEAP32[($0 + 344 | 0) >> 2] = $2;
  HEAP32[$2 >> 2] = 35;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    $3 = 0;
    label$3 : while (1) {
     $4 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
     $5 = $2 + ($3 << 2 | 0) | 0;
     (wasm2js_i32$0 = $5 + 64 | 0, wasm2js_i32$1 = FUNCTION_TABLE[$4 | 0]($0, 1, 0, jround_up(HEAP32[($1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0) | 0, jround_up(HEAP32[($1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0, HEAP32[($1 + 12 | 0) >> 2] | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $4 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
     (wasm2js_i32$0 = $5 + 104 | 0, wasm2js_i32$1 = FUNCTION_TABLE[$4 | 0]($0, 1, 0, jround_up(HEAP32[($1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0) | 0, jround_up(HEAP32[($1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0, HEAP32[($1 + 12 | 0) >> 2] | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     $1 = $1 + 84 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   $1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, 1, 1280) | 0;
   HEAP32[($2 + 64 | 0) >> 2] = 0;
   HEAP32[($2 + 24 | 0) >> 2] = $1;
   HEAP32[($2 + 60 | 0) >> 2] = $1 + 1152 | 0;
   HEAP32[($2 + 56 | 0) >> 2] = $1 + 1024 | 0;
   HEAP32[($2 + 52 | 0) >> 2] = $1 + 896 | 0;
   HEAP32[($2 + 48 | 0) >> 2] = $1 + 768 | 0;
   HEAP32[($2 + 44 | 0) >> 2] = $1 + 640 | 0;
   HEAP32[($2 + 40 | 0) >> 2] = $1 + 512 | 0;
   HEAP32[($2 + 36 | 0) >> 2] = $1 + 384 | 0;
   HEAP32[($2 + 32 | 0) >> 2] = $1 + 256 | 0;
   HEAP32[($2 + 28 | 0) >> 2] = $1 + 128 | 0;
  }
 }
 
 function start_pass_coef($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[($0 + 344 | 0) >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = 0;
  $3 = 1;
  label$1 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) > (1 | 0)) {
    break label$1
   }
   $3 = HEAP32[((HEAP32[($0 + 248 | 0) >> 2] | 0) + ((HEAP32[($0 + 240 | 0) >> 2] | 0 | 0) == (1 | 0) ? 72 : 12) | 0) >> 2] | 0;
  }
  HEAP32[($2 + 12 | 0) >> 2] = 0;
  HEAP32[($2 + 16 | 0) >> 2] = 0;
  HEAP32[($2 + 20 | 0) >> 2] = $3;
  label$2 : {
   switch ($1 | 0) {
   case 0:
    label$7 : {
     if (!(HEAP32[($2 + 64 | 0) >> 2] | 0)) {
      break label$7
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 4;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    HEAP32[($2 + 4 | 0) >> 2] = 36;
    return;
   case 3:
    label$8 : {
     if (HEAP32[($2 + 64 | 0) >> 2] | 0) {
      break label$8
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 4;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    HEAP32[($2 + 4 | 0) >> 2] = 37;
    return;
   case 2:
    label$9 : {
     if (HEAP32[($2 + 64 | 0) >> 2] | 0) {
      break label$9
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 4;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    HEAP32[($2 + 4 | 0) >> 2] = 38;
    return;
   case 4:
    label$10 : {
     if (HEAP32[($2 + 64 | 0) >> 2] | 0) {
      break label$10
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 4;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    HEAP32[($2 + 4 | 0) >> 2] = 39;
    return;
   default:
    break label$2;
   };
  }
  $2 = HEAP32[$0 >> 2] | 0;
  HEAP32[($2 + 20 | 0) >> 2] = 4;
  FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
 }
 
 function compress_data($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, $3 = 0, $18 = 0, $19 = 0, $12 = 0, $20 = 0, $9 = 0, $4 = 0, $14 = 0, $8 = 0, $11 = 0, $16 = 0, $7 = 0, $17 = 0, $23 = 0, $15 = 0, $21 = 0, $6 = 0, $10 = 0, $13 = 0, $22 = 0;
  $2 = HEAP32[($0 + 344 | 0) >> 2] | 0;
  $3 = $2;
  label$1 : {
   $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   if (($4 | 0) >= ($5 | 0)) {
    break label$1
   }
   $6 = (HEAP32[($0 + 240 | 0) >> 2] | 0) + -1 | 0;
   $7 = (HEAP32[($0 + 264 | 0) >> 2] | 0) + -1 | 0;
   $8 = $2 + 24 | 0;
   $9 = HEAP32[($2 + 12 | 0) >> 2] | 0;
   label$2 : while (1) {
    label$3 : {
     if ($9 >>> 0 > $7 >>> 0) {
      break label$3
     }
     $10 = $4 << 3 | 0;
     label$4 : while (1) {
      label$5 : {
       $5 = HEAP32[($0 + 244 | 0) >> 2] | 0;
       if (($5 | 0) < (1 | 0)) {
        break label$5
       }
       $3 = 0;
       $11 = 0;
       label$6 : while (1) {
        label$7 : {
         $12 = HEAP32[(($0 + ($11 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
         if ((HEAP32[($12 + 56 | 0) >> 2] | 0 | 0) < (1 | 0)) {
          break label$7
         }
         $13 = Math_imul(HEAP32[($12 + 64 | 0) >> 2] | 0, $9);
         $14 = HEAP32[($12 + ($9 >>> 0 < $7 >>> 0 ? 52 : 68) | 0) >> 2] | 0;
         $15 = $14 + 1 | 0;
         $16 = 0;
         $17 = $10;
         label$8 : while (1) {
          label$9 : {
           label$10 : {
            label$11 : {
             if ((HEAP32[($2 + 8 | 0) >> 2] | 0) >>> 0 < $6 >>> 0) {
              break label$11
             }
             if (($16 + $4 | 0 | 0) >= (HEAP32[($12 + 72 | 0) >> 2] | 0 | 0)) {
              break label$10
             }
            }
            FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 360 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $12, HEAP32[($1 + ((HEAP32[($12 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0, HEAP32[(($2 + ($3 << 2 | 0) | 0) + 24 | 0) >> 2] | 0, $17, $13, $14, 0);
            $18 = HEAP32[($12 + 52 | 0) >> 2] | 0;
            if (($18 | 0) <= ($14 | 0)) {
             break label$9
            }
            $19 = $2 + (($3 + $14 | 0) << 2 | 0) | 0;
            $20 = $19 + 24 | 0;
            jzero_far(HEAP32[$20 >> 2] | 0 | 0, ($18 - $14 | 0) << 7 | 0 | 0);
            $18 = HEAP32[($12 + 52 | 0) >> 2] | 0;
            if (($18 | 0) <= ($14 | 0)) {
             break label$9
            }
            $5 = $14;
            label$12 : {
             if (!(($18 - $5 | 0) & 1 | 0)) {
              break label$12
             }
             HEAP16[(HEAP32[$20 >> 2] | 0) >> 1] = HEAPU16[(HEAP32[($19 + 20 | 0) >> 2] | 0) >> 1] | 0;
             $5 = $15;
            }
            if (($18 | 0) == ($15 | 0)) {
             break label$9
            }
            label$13 : while (1) {
             $19 = $2 + (($5 + $3 | 0) << 2 | 0) | 0;
             $20 = $19 + 24 | 0;
             HEAP16[(HEAP32[$20 >> 2] | 0) >> 1] = HEAPU16[(HEAP32[($19 + 20 | 0) >> 2] | 0) >> 1] | 0;
             HEAP16[(HEAP32[($19 + 28 | 0) >> 2] | 0) >> 1] = HEAPU16[(HEAP32[$20 >> 2] | 0) >> 1] | 0;
             $5 = $5 + 2 | 0;
             if (($5 | 0) != ($18 | 0)) {
              continue label$13
             }
             break label$9;
            };
           }
           $5 = $2 + ($3 << 2 | 0) | 0;
           jzero_far(HEAP32[($5 + 24 | 0) >> 2] | 0 | 0, (HEAP32[($12 + 52 | 0) >> 2] | 0) << 7 | 0 | 0);
           $18 = HEAP32[($12 + 52 | 0) >> 2] | 0;
           if (($18 | 0) < (1 | 0)) {
            break label$9
           }
           $21 = $18 & 3 | 0;
           $19 = HEAP32[($5 + 20 | 0) >> 2] | 0;
           $20 = 0;
           $5 = 0;
           label$14 : {
            if (($18 + -1 | 0) >>> 0 < 3 >>> 0) {
             break label$14
            }
            $22 = $18 & -4 | 0;
            $5 = 0;
            $23 = 0;
            label$15 : while (1) {
             HEAP16[(HEAP32[($8 + (($5 + $3 | 0) << 2 | 0) | 0) >> 2] | 0) >> 1] = HEAPU16[$19 >> 1] | 0;
             HEAP16[(HEAP32[($8 + ((($5 | 1 | 0) + $3 | 0) << 2 | 0) | 0) >> 2] | 0) >> 1] = HEAPU16[$19 >> 1] | 0;
             HEAP16[(HEAP32[($8 + ((($5 | 2 | 0) + $3 | 0) << 2 | 0) | 0) >> 2] | 0) >> 1] = HEAPU16[$19 >> 1] | 0;
             HEAP16[(HEAP32[($8 + ((($5 | 3 | 0) + $3 | 0) << 2 | 0) | 0) >> 2] | 0) >> 1] = HEAPU16[$19 >> 1] | 0;
             $5 = $5 + 4 | 0;
             $23 = $23 + 4 | 0;
             if (($23 | 0) != ($22 | 0)) {
              continue label$15
             }
             break label$15;
            };
           }
           if (!$21) {
            break label$9
           }
           label$16 : while (1) {
            HEAP16[(HEAP32[(($2 + (($5 + $3 | 0) << 2 | 0) | 0) + 24 | 0) >> 2] | 0) >> 1] = HEAPU16[$19 >> 1] | 0;
            $5 = $5 + 1 | 0;
            $20 = $20 + 1 | 0;
            if (($20 | 0) != ($21 | 0)) {
             continue label$16
            }
            break label$16;
           };
          }
          $17 = $17 + 8 | 0;
          $3 = $18 + $3 | 0;
          $16 = $16 + 1 | 0;
          if (($16 | 0) < (HEAP32[($12 + 56 | 0) >> 2] | 0 | 0)) {
           continue label$8
          }
          break label$8;
         };
         $5 = HEAP32[($0 + 244 | 0) >> 2] | 0;
        }
        $11 = $11 + 1 | 0;
        if (($11 | 0) < ($5 | 0)) {
         continue label$6
        }
        break label$6;
       };
      }
      label$17 : {
       if (FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 364 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $8) | 0) {
        break label$17
       }
       HEAP32[($2 + 12 | 0) >> 2] = $9;
       HEAP32[($2 + 16 | 0) >> 2] = $4;
       return 0 | 0;
      }
      $9 = $9 + 1 | 0;
      if ($9 >>> 0 <= $7 >>> 0) {
       continue label$4
      }
      break label$4;
     };
     $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    }
    $9 = 0;
    HEAP32[($2 + 12 | 0) >> 2] = 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < ($5 | 0)) {
     continue label$2
    }
    break label$2;
   };
   $3 = HEAP32[($0 + 344 | 0) >> 2] | 0;
  }
  HEAP32[($2 + 8 | 0) >> 2] = (HEAP32[($2 + 8 | 0) >> 2] | 0) + 1 | 0;
  $5 = 1;
  label$18 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) > (1 | 0)) {
    break label$18
   }
   $5 = HEAP32[((HEAP32[($0 + 248 | 0) >> 2] | 0) + ((HEAP32[($3 + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[($0 + 240 | 0) >> 2] | 0) + -1 | 0) >>> 0 ? 12 : 72) | 0) >> 2] | 0;
  }
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = 0;
  HEAP32[($3 + 20 | 0) >> 2] = $5;
  return 1 | 0;
 }
 
 function compress_first_pass($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $7 = 0, $8 = 0, $6 = 0, $4 = 0, $11 = 0, $21 = 0, $12 = 0, $13 = 0, $20 = 0, $22 = 0, $14 = 0, $3 = 0, $10 = 0, $18 = 0, $5 = 0, $9 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $56 = 0, $19 = 0;
  label$1 : {
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = (HEAP32[($0 + 240 | 0) >> 2] | 0) + -1 | 0;
   $3 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $5 = 0;
   label$2 : while (1) {
    $6 = $5 << 2 | 0;
    $7 = $3 + $6 | 0;
    $8 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    $9 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0, HEAP32[($7 + 64 | 0) >> 2] | 0, Math_imul($8, HEAP32[($3 + 8 | 0) >> 2] | 0), $8, 1) | 0;
    $56 = HEAP32[($7 + 104 | 0) >> 2] | 0;
    $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    $10 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0, $56, Math_imul($7, HEAP32[($3 + 8 | 0) >> 2] | 0), $7, 1) | 0;
    label$3 : {
     label$4 : {
      if ((HEAP32[($3 + 8 | 0) >> 2] | 0) >>> 0 >= $2 >>> 0) {
       break label$4
      }
      $11 = HEAP32[($4 + 12 | 0) >> 2] | 0;
      break label$3;
     }
     $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $8 = ((HEAP32[($4 + 32 | 0) >> 2] | 0) >>> 0) % ($7 >>> 0) | 0;
     $11 = $8 ? $8 : $7;
    }
    $12 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    $13 = HEAP32[($4 + 28 | 0) >> 2] | 0;
    $7 = ($13 >>> 0) % ($12 >>> 0) | 0;
    $14 = ($7 | 0) > (0 | 0) ? $12 - $7 | 0 : $7;
    label$5 : {
     if (($11 | 0) < (1 | 0)) {
      break label$5
     }
     $15 = $1 + $6 | 0;
     label$6 : {
      if (($14 | 0) >= (1 | 0)) {
       break label$6
      }
      $7 = 0;
      label$7 : while (1) {
       $8 = $7 << 2 | 0;
       FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 360 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $4, HEAP32[$15 >> 2] | 0, HEAP32[($9 + $8 | 0) >> 2] | 0, $7 << 3 | 0, 0, $13, HEAP32[($10 + $8 | 0) >> 2] | 0);
       $7 = $7 + 1 | 0;
       if (($7 | 0) != ($11 | 0)) {
        continue label$7
       }
       break label$5;
      };
     }
     $16 = $14 << 7 | 0;
     $17 = $14 & -8 | 0;
     $18 = $14 & 7 | 0;
     $19 = $14 + -1 | 0;
     $20 = 0;
     label$8 : while (1) {
      $7 = $20 << 2 | 0;
      $8 = HEAP32[($9 + $7 | 0) >> 2] | 0;
      FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 360 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $4, HEAP32[$15 >> 2] | 0, $8, $20 << 3 | 0, 0, $13, HEAP32[($10 + $7 | 0) >> 2] | 0);
      $7 = $8 + ($13 << 7 | 0) | 0;
      jzero_far($7 | 0, $16 | 0);
      $8 = HEAPU16[($7 + -128 | 0) >> 1] | 0;
      $21 = 0;
      $22 = 0;
      label$9 : {
       if ($19 >>> 0 < 7 >>> 0) {
        break label$9
       }
       label$10 : while (1) {
        $6 = $21 << 7 | 0;
        HEAP16[($7 + $6 | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 128 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 256 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 384 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 512 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 640 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 768 | 0) | 0) >> 1] = $8;
        HEAP16[($7 + ($6 | 896 | 0) | 0) >> 1] = $8;
        $21 = $21 + 8 | 0;
        $22 = $22 + 8 | 0;
        if (($22 | 0) != ($17 | 0)) {
         continue label$10
        }
        break label$10;
       };
      }
      $6 = 0;
      label$11 : {
       if (!$18) {
        break label$11
       }
       label$12 : while (1) {
        HEAP16[($7 + ($21 << 7 | 0) | 0) >> 1] = $8;
        $21 = $21 + 1 | 0;
        $6 = $6 + 1 | 0;
        if (($6 | 0) != ($18 | 0)) {
         continue label$12
        }
        break label$12;
       };
      }
      $20 = $20 + 1 | 0;
      if (($20 | 0) != ($11 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    label$13 : {
     if ((HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
      break label$13
     }
     $7 = $14 + $13 | 0;
     $8 = ($7 >>> 0) / ($12 >>> 0) | 0;
     if (($11 | 0) >= (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     $16 = $7 << 7 | 0;
     label$14 : {
      if ($12 >>> 0 > $7 >>> 0) {
       break label$14
      }
      $10 = $12 + -1 | 0;
      $15 = $8 >>> 0 > 1 >>> 0 ? $8 : 1;
      $17 = $12 & -8 | 0;
      $18 = $12 & 7 | 0;
      label$15 : while (1) {
       $7 = $9 + ($11 << 2 | 0) | 0;
       $20 = HEAP32[($7 + -4 | 0) >> 2] | 0;
       $7 = HEAP32[$7 >> 2] | 0;
       jzero_far($7 | 0, $16 | 0);
       $13 = 0;
       label$16 : {
        if (($12 | 0) <= (0 | 0)) {
         break label$16
        }
        label$17 : while (1) {
         $8 = HEAPU16[($20 + ($10 << 7 | 0) | 0) >> 1] | 0;
         $21 = 0;
         $22 = 0;
         label$18 : {
          if ($10 >>> 0 < 7 >>> 0) {
           break label$18
          }
          label$19 : while (1) {
           $6 = $21 << 7 | 0;
           HEAP16[($7 + $6 | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 128 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 256 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 384 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 512 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 640 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 768 | 0) | 0) >> 1] = $8;
           HEAP16[($7 + ($6 | 896 | 0) | 0) >> 1] = $8;
           $21 = $21 + 8 | 0;
           $22 = $22 + 8 | 0;
           if (($22 | 0) != ($17 | 0)) {
            continue label$19
           }
           break label$19;
          };
         }
         $6 = 0;
         label$20 : {
          if (!$18) {
           break label$20
          }
          label$21 : while (1) {
           HEAP16[($7 + ($21 << 7 | 0) | 0) >> 1] = $8;
           $21 = $21 + 1 | 0;
           $6 = $6 + 1 | 0;
           if (($6 | 0) != ($18 | 0)) {
            continue label$21
           }
           break label$21;
          };
         }
         $8 = $12 << 7 | 0;
         $20 = $20 + $8 | 0;
         $7 = $7 + $8 | 0;
         $13 = $13 + 1 | 0;
         if (($13 | 0) != ($15 | 0)) {
          continue label$17
         }
         break label$17;
        };
       }
       $11 = $11 + 1 | 0;
       if (($11 | 0) < (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0)) {
        continue label$15
       }
       break label$13;
      };
     }
     label$22 : while (1) {
      jzero_far(HEAP32[($9 + ($11 << 2 | 0) | 0) >> 2] | 0 | 0, $16 | 0);
      $11 = $11 + 1 | 0;
      if (($11 | 0) < (HEAP32[($4 + 12 | 0) >> 2] | 0 | 0)) {
       continue label$22
      }
      break label$22;
     };
    }
    $4 = $4 + 84 | 0;
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return compress_output($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function compress_output($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $7 = 0, $9 = 0, $6 = 0, $14 = 0, $2 = 0, $10 = 0, $11 = 0, $19 = 0, $12 = 0, $13 = 0, $17 = 0, $33 = 0, $46 = 0, $8 = 0, $15 = 0, $16 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[($0 + 344 | 0) >> 2] | 0;
  label$1 : {
   $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = 0;
   label$2 : while (1) {
    $4 = $5 << 2 | 0;
    $33 = $2 + $4 | 0;
    $4 = HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] | 0;
    $46 = HEAP32[(($3 + ((HEAP32[($4 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) + 64 | 0) >> 2] | 0;
    $4 = HEAP32[($4 + 12 | 0) >> 2] | 0;
    (wasm2js_i32$0 = $33, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0, $46, Math_imul($4, HEAP32[($3 + 8 | 0) >> 2] | 0), $4, 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $5 = $5 + 1 | 0;
    $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
    if (($5 | 0) < ($4 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  label$3 : {
   label$4 : {
    $6 = HEAP32[($3 + 16 | 0) >> 2] | 0;
    $7 = HEAP32[($3 + 20 | 0) >> 2] | 0;
    if (($6 | 0) >= ($7 | 0)) {
     break label$4
    }
    $8 = $3 + 24 | 0;
    $5 = HEAP32[($0 + 264 | 0) >> 2] | 0;
    $9 = HEAP32[($3 + 12 | 0) >> 2] | 0;
    label$5 : while (1) {
     label$6 : {
      if ($9 >>> 0 >= $5 >>> 0) {
       break label$6
      }
      label$7 : while (1) {
       $10 = 0;
       $11 = 0;
       label$8 : {
        $12 = HEAP32[($0 + 244 | 0) >> 2] | 0;
        if (($12 | 0) < (1 | 0)) {
         break label$8
        }
        label$9 : while (1) {
         label$10 : {
          $4 = $10 << 2 | 0;
          $5 = HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] | 0;
          $13 = HEAP32[($5 + 56 | 0) >> 2] | 0;
          if (($13 | 0) < (1 | 0)) {
           break label$10
          }
          $14 = HEAP32[($5 + 52 | 0) >> 2] | 0;
          if (($14 | 0) < (1 | 0)) {
           break label$10
          }
          $15 = Math_imul($14, $9);
          $16 = HEAP32[($2 + $4 | 0) >> 2] | 0;
          $17 = $14 & 7 | 0;
          $18 = $14 + -1 | 0;
          $19 = 0;
          label$11 : while (1) {
           $5 = (HEAP32[($16 + (($19 + $6 | 0) << 2 | 0) | 0) >> 2] | 0) + ($15 << 7 | 0) | 0;
           $7 = $11;
           $4 = 0;
           label$12 : {
            if (!$17) {
             break label$12
            }
            label$13 : while (1) {
             HEAP32[(($3 + ($7 << 2 | 0) | 0) + 24 | 0) >> 2] = $5;
             $7 = $7 + 1 | 0;
             $5 = $5 + 128 | 0;
             $4 = $4 + 1 | 0;
             if (($4 | 0) != ($17 | 0)) {
              continue label$13
             }
             break label$13;
            };
           }
           $11 = $14 + $11 | 0;
           label$14 : {
            if ($18 >>> 0 < 7 >>> 0) {
             break label$14
            }
            label$15 : while (1) {
             $4 = $3 + ($7 << 2 | 0) | 0;
             HEAP32[($4 + 28 | 0) >> 2] = $5 + 128 | 0;
             HEAP32[($4 + 24 | 0) >> 2] = $5;
             HEAP32[($4 + 32 | 0) >> 2] = $5 + 256 | 0;
             HEAP32[($4 + 36 | 0) >> 2] = $5 + 384 | 0;
             HEAP32[($4 + 40 | 0) >> 2] = $5 + 512 | 0;
             HEAP32[($4 + 44 | 0) >> 2] = $5 + 640 | 0;
             HEAP32[($4 + 48 | 0) >> 2] = $5 + 768 | 0;
             HEAP32[($4 + 52 | 0) >> 2] = $5 + 896 | 0;
             $5 = $5 + 1024 | 0;
             $7 = $7 + 8 | 0;
             if (($7 | 0) != ($11 | 0)) {
              continue label$15
             }
             break label$15;
            };
           }
           $19 = $19 + 1 | 0;
           if (($19 | 0) != ($13 | 0)) {
            continue label$11
           }
           break label$11;
          };
         }
         $10 = $10 + 1 | 0;
         if (($10 | 0) != ($12 | 0)) {
          continue label$9
         }
         break label$9;
        };
       }
       label$16 : {
        if (FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 364 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $8) | 0) {
         break label$16
        }
        HEAP32[($3 + 12 | 0) >> 2] = $9;
        HEAP32[($3 + 16 | 0) >> 2] = $6;
        $5 = 0;
        break label$3;
       }
       $9 = $9 + 1 | 0;
       $5 = HEAP32[($0 + 264 | 0) >> 2] | 0;
       if ($9 >>> 0 < $5 >>> 0) {
        continue label$7
       }
       break label$7;
      };
      $7 = HEAP32[($3 + 20 | 0) >> 2] | 0;
     }
     $9 = 0;
     HEAP32[($3 + 12 | 0) >> 2] = 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) < ($7 | 0)) {
      continue label$5
     }
     break label$5;
    };
    $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
   }
   $5 = 1;
   HEAP32[($3 + 8 | 0) >> 2] = (HEAP32[($3 + 8 | 0) >> 2] | 0) + 1 | 0;
   $7 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   $3 = 1;
   label$17 : {
    if (($4 | 0) > (1 | 0)) {
     break label$17
    }
    $3 = HEAP32[((HEAP32[($0 + 248 | 0) >> 2] | 0) + ((HEAP32[($7 + 8 | 0) >> 2] | 0) >>> 0 < ((HEAP32[($0 + 240 | 0) >> 2] | 0) + -1 | 0) >>> 0 ? 12 : 72) | 0) >> 2] | 0;
   }
   HEAP32[($7 + 12 | 0) >> 2] = 0;
   HEAP32[($7 + 16 | 0) >> 2] = 0;
   HEAP32[($7 + 20 | 0) >> 2] = $3;
  }
  __stack_pointer = $2 + 16 | 0;
  return $5 | 0;
 }
 
 function compress_trellis_pass($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $7 = 0, $10 = 0, $2 = 0, $12 = 0, $21 = 0, $6 = 0, $11 = 0, $13 = 0, $14 = 0, $20 = 0, $15 = 0, $19 = 0, $9 = 0, $4 = 0, $16 = 0, $18 = 0, $5 = 0, $8 = 0, $17 = 0, $3 = 0, $177 = 0, $212 = 0;
  $2 = __stack_pointer - 5152 | 0;
  __stack_pointer = $2;
  label$1 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = (HEAP32[($0 + 240 | 0) >> 2] | 0) + -1 | 0;
   $4 = HEAP32[($0 + 344 | 0) >> 2] | 0;
   $5 = 0;
   label$2 : while (1) {
    HEAP32[($2 + 3860 | 0) >> 2] = $2 + 3864 | 0;
    HEAP32[($2 + 2572 | 0) >> 2] = $2 + 2576 | 0;
    $6 = HEAP32[(($0 + ($5 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
    $7 = HEAP32[($6 + 20 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
       break label$4
      }
      jget_arith_rates($0 | 0, $7 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, $2 | 0);
      break label$3;
     }
     jpeg_make_c_derived_tbl($0 | 0, 1 | 0, $7 | 0, $2 + 3860 | 0 | 0);
     jpeg_make_c_derived_tbl($0 | 0, 0 | 0, HEAP32[($6 + 24 | 0) >> 2] | 0 | 0, $2 + 2572 | 0 | 0);
    }
    $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    $8 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0, HEAP32[(($4 + ((HEAP32[($6 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) + 64 | 0) >> 2] | 0, Math_imul($7, HEAP32[($4 + 8 | 0) >> 2] | 0), $7, 1) | 0;
    $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
    $9 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0]($0, HEAP32[(($4 + ((HEAP32[($6 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) + 104 | 0) >> 2] | 0, Math_imul($7, HEAP32[($4 + 8 | 0) >> 2] | 0), $7, 1) | 0;
    label$5 : {
     label$6 : {
      $10 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      if ($10 >>> 0 >= $3 >>> 0) {
       break label$6
      }
      $11 = HEAP32[($6 + 12 | 0) >> 2] | 0;
      break label$5;
     }
     $7 = HEAP32[($6 + 12 | 0) >> 2] | 0;
     $12 = ((HEAP32[($6 + 32 | 0) >> 2] | 0) >>> 0) % ($7 >>> 0) | 0;
     $11 = $12 ? $12 : $7;
    }
    $13 = HEAP32[($6 + 8 | 0) >> 2] | 0;
    $14 = HEAP32[($6 + 28 | 0) >> 2] | 0;
    HEAP16[($2 + 5150 | 0) >> 1] = 0;
    $7 = ($14 >>> 0) % ($13 >>> 0) | 0;
    $15 = ($7 | 0) > (0 | 0) ? $13 - $7 | 0 : $7;
    label$7 : {
     if (($11 | 0) < (1 | 0)) {
      break label$7
     }
     $16 = $15 + -2 | 0;
     $17 = $15 << 7 | 0;
     $7 = $15 + -1 | 0;
     $18 = $7 & -4 | 0;
     $19 = $7 & 3 | 0;
     $20 = 0;
     label$8 : while (1) {
      $12 = $20 << 2 | 0;
      $7 = $8 + $12 | 0;
      $10 = 0;
      label$9 : {
       if (!$20) {
        break label$9
       }
       $10 = HEAP32[($7 + -4 | 0) >> 2] | 0;
      }
      $7 = HEAP32[$7 >> 2] | 0;
      label$10 : {
       label$11 : {
        if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
         break label$11
        }
        $12 = $9 + $12 | 0;
        $21 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        $177 = HEAP32[(($0 + ($21 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
        $21 = (HEAP32[($0 + 332 | 0) >> 2] | 0) + ($21 << 9 | 0) | 0;
        quantize_trellis_arith($0 | 0, $2 | 0, $7 | 0, HEAP32[$12 >> 2] | 0 | 0, $14 | 0, $177 | 0, $21 + 56 | 0 | 0, $21 + 2104 | 0 | 0, $2 + 5150 | 0 | 0, $10 | 0, HEAP32[($12 + -4 | 0) >> 2] | 0 | 0);
        break label$10;
       }
       $12 = $9 + $12 | 0;
       $21 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       $212 = HEAP32[(($0 + ($21 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
       $21 = (HEAP32[($0 + 332 | 0) >> 2] | 0) + ($21 << 9 | 0) | 0;
       quantize_trellis($0 | 0, HEAP32[($2 + 3860 | 0) >> 2] | 0 | 0, HEAP32[($2 + 2572 | 0) >> 2] | 0 | 0, $7 | 0, HEAP32[$12 >> 2] | 0 | 0, $14 | 0, $212 | 0, $21 + 56 | 0 | 0, $21 + 2104 | 0 | 0, $2 + 5150 | 0 | 0, $10 | 0, HEAP32[($12 + -4 | 0) >> 2] | 0 | 0);
      }
      label$12 : {
       if (($15 | 0) < (1 | 0)) {
        break label$12
       }
       $12 = $7 + ($14 << 7 | 0) | 0;
       jzero_far($12 | 0, $17 | 0);
       $7 = HEAPU16[($12 + -128 | 0) >> 1] | 0;
       HEAP16[($2 + 5150 | 0) >> 1] = $7;
       HEAP16[$12 >> 1] = $7;
       if (($15 | 0) == (1 | 0)) {
        break label$12
       }
       $21 = 0;
       $7 = 1;
       label$13 : {
        if ($16 >>> 0 < 3 >>> 0) {
         break label$13
        }
        label$14 : while (1) {
         $10 = $12 + ($7 << 7 | 0) | 0;
         HEAP16[$10 >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
         HEAP16[($10 + 128 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
         HEAP16[($10 + 256 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
         HEAP16[($10 + 384 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
         $7 = $7 + 4 | 0;
         $21 = $21 + 4 | 0;
         if (($21 | 0) != ($18 | 0)) {
          continue label$14
         }
         break label$14;
        };
       }
       $10 = 0;
       if (!$19) {
        break label$12
       }
       label$15 : while (1) {
        HEAP16[($12 + ($7 << 7 | 0) | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
        $7 = $7 + 1 | 0;
        $10 = $10 + 1 | 0;
        if (($10 | 0) != ($19 | 0)) {
         continue label$15
        }
        break label$15;
       };
      }
      $20 = $20 + 1 | 0;
      if (($20 | 0) != ($11 | 0)) {
       continue label$8
      }
      break label$8;
     };
     $10 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    }
    label$16 : {
     if (($10 | 0) != ($3 | 0)) {
      break label$16
     }
     $7 = $15 + $14 | 0;
     $10 = ($7 >>> 0) / ($13 >>> 0) | 0;
     if (($11 | 0) >= (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0)) {
      break label$16
     }
     $16 = $7 << 7 | 0;
     label$17 : {
      if ($13 >>> 0 > $7 >>> 0) {
       break label$17
      }
      $14 = $13 + -1 | 0;
      $9 = $10 >>> 0 > 1 >>> 0 ? $10 : 1;
      label$18 : {
       if (($13 | 0) > (0 | 0)) {
        break label$18
       }
       $18 = $9 & -4 | 0;
       $19 = $9 & 3 | 0;
       $20 = $9 + -1 | 0;
       label$19 : while (1) {
        $10 = $8 + ($11 << 2 | 0) | 0;
        $7 = HEAP32[($10 + -4 | 0) >> 2] | 0;
        jzero_far(HEAP32[$10 >> 2] | 0 | 0, $16 | 0);
        $21 = 0;
        label$20 : {
         if ($20 >>> 0 < 3 >>> 0) {
          break label$20
         }
         label$21 : while (1) {
          $10 = $14 << 7 | 0;
          HEAP16[($2 + 5150 | 0) >> 1] = HEAPU16[($7 + $10 | 0) >> 1] | 0;
          $12 = $13 << 7 | 0;
          $7 = $7 + $12 | 0;
          HEAP16[($2 + 5150 | 0) >> 1] = HEAPU16[($7 + $10 | 0) >> 1] | 0;
          $7 = $7 + $12 | 0;
          HEAP16[($2 + 5150 | 0) >> 1] = HEAPU16[($7 + $10 | 0) >> 1] | 0;
          $7 = $7 + $12 | 0;
          HEAP16[($2 + 5150 | 0) >> 1] = HEAPU16[($7 + $10 | 0) >> 1] | 0;
          $7 = $7 + $12 | 0;
          $21 = $21 + 4 | 0;
          if (($21 | 0) != ($18 | 0)) {
           continue label$21
          }
          break label$21;
         };
        }
        $10 = 0;
        label$22 : {
         if (!$19) {
          break label$22
         }
         label$23 : while (1) {
          HEAP16[($2 + 5150 | 0) >> 1] = HEAPU16[($7 + ($14 << 7 | 0) | 0) >> 1] | 0;
          $7 = $7 + ($13 << 7 | 0) | 0;
          $10 = $10 + 1 | 0;
          if (($10 | 0) != ($19 | 0)) {
           continue label$23
          }
          break label$23;
         };
        }
        $11 = $11 + 1 | 0;
        if (($11 | 0) < (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0)) {
         continue label$19
        }
        break label$16;
       };
      }
      $17 = $13 + -2 | 0;
      $18 = $14 & -4 | 0;
      $19 = $14 & 3 | 0;
      label$24 : while (1) {
       $7 = $8 + ($11 << 2 | 0) | 0;
       $20 = HEAP32[($7 + -4 | 0) >> 2] | 0;
       $12 = HEAP32[$7 >> 2] | 0;
       jzero_far($12 | 0, $16 | 0);
       $15 = 0;
       label$25 : while (1) {
        $7 = HEAPU16[($20 + ($14 << 7 | 0) | 0) >> 1] | 0;
        HEAP16[($2 + 5150 | 0) >> 1] = $7;
        HEAP16[$12 >> 1] = $7;
        label$26 : {
         if (($13 | 0) == (1 | 0)) {
          break label$26
         }
         $21 = 0;
         $7 = 1;
         label$27 : {
          if ($17 >>> 0 < 3 >>> 0) {
           break label$27
          }
          label$28 : while (1) {
           $10 = $12 + ($7 << 7 | 0) | 0;
           HEAP16[$10 >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
           HEAP16[($10 + 128 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
           HEAP16[($10 + 256 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
           HEAP16[($10 + 384 | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
           $7 = $7 + 4 | 0;
           $21 = $21 + 4 | 0;
           if (($21 | 0) != ($18 | 0)) {
            continue label$28
           }
           break label$28;
          };
         }
         $10 = 0;
         if (!$19) {
          break label$26
         }
         label$29 : while (1) {
          HEAP16[($12 + ($7 << 7 | 0) | 0) >> 1] = HEAPU16[($2 + 5150 | 0) >> 1] | 0;
          $7 = $7 + 1 | 0;
          $10 = $10 + 1 | 0;
          if (($10 | 0) != ($19 | 0)) {
           continue label$29
          }
          break label$29;
         };
        }
        $7 = $13 << 7 | 0;
        $20 = $20 + $7 | 0;
        $12 = $12 + $7 | 0;
        $15 = $15 + 1 | 0;
        if (($15 | 0) != ($9 | 0)) {
         continue label$25
        }
        break label$25;
       };
       $11 = $11 + 1 | 0;
       if (($11 | 0) < (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0)) {
        continue label$24
       }
       break label$16;
      };
     }
     label$30 : while (1) {
      jzero_far(HEAP32[($8 + ($11 << 2 | 0) | 0) >> 2] | 0 | 0, $16 | 0);
      $11 = $11 + 1 | 0;
      if (($11 | 0) < (HEAP32[($6 + 12 | 0) >> 2] | 0 | 0)) {
       continue label$30
      }
      break label$30;
     };
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $7 = compress_output($0 | 0, $1 | 0) | 0;
  __stack_pointer = $2 + 5152 | 0;
  return $7 | 0;
 }
 
 function jinit_compress_master($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  jinit_c_master_control($0 | 0, 0 | 0);
  label$1 : {
   if (HEAP32[($0 + 176 | 0) >> 2] | 0) {
    break label$1
   }
   jinit_color_converter($0 | 0);
   jinit_downsampler($0 | 0);
   jinit_c_prep_controller($0 | 0, 0 | 0);
  }
  jinit_forward_dct($0 | 0);
  label$2 : {
   label$3 : {
    if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
     break label$3
    }
    jinit_arith_encoder($0 | 0);
    break label$2;
   }
   label$4 : {
    if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
     break label$4
    }
    jinit_phuff_encoder($0 | 0);
    break label$2;
   }
   jinit_huff_encoder($0 | 0);
  }
  $1 = 1;
  label$5 : {
   if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) > (1 | 0)) {
    break label$5
   }
   if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
    break label$5
   }
   $2 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   if (HEAP32[($2 + 20 | 0) >> 2] | 0) {
    break label$5
   }
   $1 = (HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) != (0 | 0);
  }
  jinit_c_coef_controller($0 | 0, $1 | 0);
  jinit_c_main_controller($0 | 0, 0 | 0);
  jinit_marker_writer($0 | 0);
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0);
  FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 348 | 0) >> 2] | 0) >> 2] | 0 | 0]($0);
 }
 
 function jinit_c_main_controller($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 64) | 0;
  HEAP32[($0 + 336 | 0) >> 2] = $2;
  HEAP32[$2 >> 2] = 40;
  label$1 : {
   if (HEAP32[($0 + 176 | 0) >> 2] | 0) {
    break label$1
   }
   label$2 : {
    if (!$1) {
     break label$2
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 4;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    return;
   }
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $3 = 0;
   label$3 : while (1) {
    (wasm2js_i32$0 = ($2 + ($3 << 2 | 0) | 0) + 24 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0, 1, (HEAP32[($1 + 28 | 0) >> 2] | 0) << 3 | 0, (HEAP32[($1 + 12 | 0) >> 2] | 0) << 3 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1 = $1 + 84 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function start_pass_main($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   if (HEAP32[($0 + 176 | 0) >> 2] | 0) {
    break label$1
   }
   $2 = HEAP32[($0 + 336 | 0) >> 2] | 0;
   label$2 : {
    if (!$1) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 4;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   HEAP32[($2 + 20 | 0) >> 2] = $1;
   HEAP32[($2 + 16 | 0) >> 2] = 0;
   HEAP32[($2 + 8 | 0) >> 2] = 0;
   HEAP32[($2 + 12 | 0) >> 2] = 0;
   HEAP32[($2 + 4 | 0) >> 2] = 41;
  }
 }
 
 function process_data_simple_main($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $7 = 0, $8 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $4 = HEAP32[($0 + 336 | 0) >> 2] | 0;
   if ((HEAP32[($4 + 8 | 0) >> 2] | 0) >>> 0 >= (HEAP32[($0 + 240 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   $5 = $4 + 24 | 0;
   $6 = $4 + 12 | 0;
   $7 = HEAP32[($4 + 12 | 0) >> 2] | 0;
   label$2 : while (1) {
    label$3 : {
     if ($7 >>> 0 > 7 >>> 0) {
      break label$3
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 340 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $5, $6, 8);
     $7 = HEAP32[$6 >> 2] | 0;
    }
    if (($7 | 0) != (8 | 0)) {
     break label$1
    }
    $7 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 344 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $5) | 0;
    $8 = HEAP32[($4 + 16 | 0) >> 2] | 0;
    label$4 : {
     if ($7) {
      break label$4
     }
     if ($8) {
      break label$1
     }
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1 | 0;
     HEAP32[($4 + 16 | 0) >> 2] = 1;
     return;
    }
    label$5 : {
     if (!$8) {
      break label$5
     }
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
     HEAP32[($4 + 16 | 0) >> 2] = 0;
    }
    $7 = 0;
    HEAP32[($4 + 12 | 0) >> 2] = 0;
    $8 = (HEAP32[($4 + 8 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($4 + 8 | 0) >> 2] = $8;
    if ($8 >>> 0 < (HEAP32[($0 + 240 | 0) >> 2] | 0) >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function jinit_marker_writer($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 32) | 0;
  HEAP32[($0 + 348 | 0) >> 2] = $1;
  HEAP32[($1 + 28 | 0) >> 2] = 0;
  HEAP32[($1 + 24 | 0) >> 2] = 42;
  HEAP32[($1 + 20 | 0) >> 2] = 43;
  HEAP32[($1 + 16 | 0) >> 2] = 44;
  HEAP32[($1 + 12 | 0) >> 2] = 45;
  HEAP32[($1 + 8 | 0) >> 2] = 46;
  HEAP32[($1 + 4 | 0) >> 2] = 47;
  HEAP32[$1 >> 2] = 48;
 }
 
 function write_marker_byte($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$1 : {
   if ($1) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
 }
 
 function write_marker_header($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if ($2 >>> 0 < 65534 >>> 0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 11;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = $4 + 1 | 0;
  HEAP8[$4 >> 0] = 255;
  $4 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $4;
  label$2 : {
   if ($4) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = $4 + 1 | 0;
  HEAP8[$4 >> 0] = $1;
  $1 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $1;
  label$3 : {
   if ($1) {
    break label$3
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$3
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $1 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = $1 + 1 | 0;
  $2 = $2 + 2 | 0;
  HEAP8[$1 >> 0] = $2 >>> 8 | 0;
  $1 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $1;
  label$4 : {
   if ($1) {
    break label$4
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$4
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $1 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = $1 + 1 | 0;
  HEAP8[$1 >> 0] = $2;
  $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  label$5 : {
   if ($2) {
    break label$5
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$5
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
 }
 
 function write_tables_only($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 255;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$1 : {
   if ($2) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 216;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$2 : {
   if ($2) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  label$3 : {
   if (!(HEAP32[($0 + 72 | 0) >> 2] | 0)) {
    break label$3
   }
   emit_dqt($0 | 0, 0 | 0) | 0;
  }
  label$4 : {
   if (!(HEAP32[($0 + 76 | 0) >> 2] | 0)) {
    break label$4
   }
   emit_dqt($0 | 0, 1 | 0) | 0;
  }
  label$5 : {
   if (!(HEAP32[($0 + 80 | 0) >> 2] | 0)) {
    break label$5
   }
   emit_dqt($0 | 0, 2 | 0) | 0;
  }
  label$6 : {
   if (!(HEAP32[($0 + 84 | 0) >> 2] | 0)) {
    break label$6
   }
   emit_dqt($0 | 0, 3 | 0) | 0;
  }
  label$7 : {
   if (HEAP32[($0 + 180 | 0) >> 2] | 0) {
    break label$7
   }
   label$8 : {
    if (!(HEAP32[($0 + 88 | 0) >> 2] | 0)) {
     break label$8
    }
    emit_dht($0 | 0, 0 | 0, 0 | 0);
   }
   label$9 : {
    if (!(HEAP32[($0 + 104 | 0) >> 2] | 0)) {
     break label$9
    }
    emit_dht($0 | 0, 0 | 0, 1 | 0);
   }
   label$10 : {
    if (!(HEAP32[($0 + 92 | 0) >> 2] | 0)) {
     break label$10
    }
    emit_dht($0 | 0, 1 | 0, 0 | 0);
   }
   label$11 : {
    if (!(HEAP32[($0 + 108 | 0) >> 2] | 0)) {
     break label$11
    }
    emit_dht($0 | 0, 1 | 0, 1 | 0);
   }
   label$12 : {
    if (!(HEAP32[($0 + 96 | 0) >> 2] | 0)) {
     break label$12
    }
    emit_dht($0 | 0, 2 | 0, 0 | 0);
   }
   label$13 : {
    if (!(HEAP32[($0 + 112 | 0) >> 2] | 0)) {
     break label$13
    }
    emit_dht($0 | 0, 2 | 0, 1 | 0);
   }
   label$14 : {
    if (!(HEAP32[($0 + 100 | 0) >> 2] | 0)) {
     break label$14
    }
    emit_dht($0 | 0, 3 | 0, 0 | 0);
   }
   if (!(HEAP32[($0 + 116 | 0) >> 2] | 0)) {
    break label$7
   }
   emit_dht($0 | 0, 3 | 0, 1 | 0);
  }
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 255;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$15 : {
   if ($2) {
    break label$15
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$15
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 217;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$16 : {
   if ($2) {
    break label$16
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$16
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
 }
 
 function write_file_trailer($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 255;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$1 : {
   if ($2) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = $2 + 1 | 0;
  HEAP8[$2 >> 0] = 217;
  $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  label$2 : {
   if ($2) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
 }
 
 function write_scan_header($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $1 = 0, $9 = 0, $8 = 0, $6 = 0, i64toi32_i32$0 = 0, $5 = 0, $10 = 0, $2 = 0, $11 = 0, $12 = 0;
  $1 = __stack_pointer - 64 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[($0 + 348 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 48 | 0) >> 2] = 0;
    HEAP32[($1 + 52 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 56 | 0) >> 2] = 0;
    HEAP32[($1 + 60 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 40 | 0) >> 2] = 0;
    HEAP32[($1 + 44 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[($1 + 32 | 0) >> 2] = 0;
    HEAP32[($1 + 36 | 0) >> 2] = i64toi32_i32$0;
    label$3 : {
     $3 = HEAP32[($0 + 244 | 0) >> 2] | 0;
     if (($3 | 0) < (1 | 0)) {
      break label$3
     }
     $4 = HEAP32[($0 + 320 | 0) >> 2] | 0;
     label$4 : {
      if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
       break label$4
      }
      label$5 : {
       if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
        break label$5
       }
       label$6 : {
        if (!$4) {
         break label$6
        }
        $5 = $3 & 1 | 0;
        $4 = 0;
        label$7 : {
         if (($3 | 0) == (1 | 0)) {
          break label$7
         }
         $6 = $3 & -2 | 0;
         $4 = 0;
         $3 = $0 + 248 | 0;
         $7 = 0;
         label$8 : while (1) {
          $8 = $4 << 2 | 0;
          $9 = HEAP32[($3 + $8 | 0) >> 2] | 0;
          HEAP8[(($1 + 48 | 0) + (HEAP32[($9 + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
          HEAP8[(($1 + 32 | 0) + (HEAP32[($9 + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
          $8 = HEAP32[($3 + ($8 | 4 | 0) | 0) >> 2] | 0;
          HEAP8[(($1 + 48 | 0) + (HEAP32[($8 + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
          HEAP8[(($1 + 32 | 0) + (HEAP32[($8 + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
          $4 = $4 + 2 | 0;
          $7 = $7 + 2 | 0;
          if (($7 | 0) != ($6 | 0)) {
           continue label$8
          }
          break label$8;
         };
        }
        if (!$5) {
         break label$3
        }
        $4 = HEAP32[(($0 + ($4 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
        HEAP8[(($1 + 48 | 0) + (HEAP32[($4 + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
        HEAP8[(($1 + 32 | 0) + (HEAP32[($4 + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
        break label$3;
       }
       $6 = $3 & 3 | 0;
       $8 = 0;
       $4 = 0;
       label$9 : {
        if (($3 + -1 | 0) >>> 0 < 3 >>> 0) {
         break label$9
        }
        $5 = $3 & -4 | 0;
        $4 = 0;
        $3 = $0 + 248 | 0;
        $9 = 0;
        label$10 : while (1) {
         $7 = $4 << 2 | 0;
         HEAP8[(($1 + 48 | 0) + (HEAP32[((HEAP32[($3 + $7 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
         HEAP8[(($1 + 48 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 4 | 0) | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
         HEAP8[(($1 + 48 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 8 | 0) | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
         HEAP8[(($1 + 48 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 12 | 0) | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
         $4 = $4 + 4 | 0;
         $9 = $9 + 4 | 0;
         if (($9 | 0) != ($5 | 0)) {
          continue label$10
         }
         break label$10;
        };
       }
       if (!$6) {
        break label$3
       }
       label$11 : while (1) {
        HEAP8[(($1 + 48 | 0) + (HEAP32[((HEAP32[(($0 + ($4 << 2 | 0) | 0) + 248 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) | 0) >> 0] = 1;
        $4 = $4 + 1 | 0;
        $8 = $8 + 1 | 0;
        if (($8 | 0) != ($6 | 0)) {
         continue label$11
        }
        break label$3;
       };
      }
      if (!$4) {
       break label$3
      }
      $6 = $3 & 3 | 0;
      $8 = 0;
      $4 = 0;
      label$12 : {
       if (($3 + -1 | 0) >>> 0 < 3 >>> 0) {
        break label$12
       }
       $5 = $3 & -4 | 0;
       $4 = 0;
       $3 = $0 + 248 | 0;
       $9 = 0;
       label$13 : while (1) {
        $7 = $4 << 2 | 0;
        HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + $7 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
        HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 4 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
        HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 8 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
        HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 12 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
        $4 = $4 + 4 | 0;
        $9 = $9 + 4 | 0;
        if (($9 | 0) != ($5 | 0)) {
         continue label$13
        }
        break label$13;
       };
      }
      if (!$6) {
       break label$3
      }
      label$14 : while (1) {
       HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[(($0 + ($4 << 2 | 0) | 0) + 248 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
       $4 = $4 + 1 | 0;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($6 | 0)) {
        continue label$14
       }
       break label$3;
      };
     }
     if (!$4) {
      break label$3
     }
     $6 = $3 & 3 | 0;
     $8 = 0;
     $4 = 0;
     label$15 : {
      if (($3 + -1 | 0) >>> 0 < 3 >>> 0) {
       break label$15
      }
      $5 = $3 & -4 | 0;
      $4 = 0;
      $3 = $0 + 248 | 0;
      $9 = 0;
      label$16 : while (1) {
       $7 = $4 << 2 | 0;
       HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + $7 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
       HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 4 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
       HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 8 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
       HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[($3 + ($7 | 12 | 0) | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
       $4 = $4 + 4 | 0;
       $9 = $9 + 4 | 0;
       if (($9 | 0) != ($5 | 0)) {
        continue label$16
       }
       break label$16;
      };
     }
     if (!$6) {
      break label$3
     }
     label$17 : while (1) {
      HEAP8[(($1 + 32 | 0) + (HEAP32[((HEAP32[(($0 + ($4 << 2 | 0) | 0) + 248 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) | 0) >> 0] = 1;
      $4 = $4 + 1 | 0;
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($6 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    $3 = (((((((((((((((((((((((((((((((HEAP8[($1 + 32 | 0) >> 0] | 0) + (HEAP8[($1 + 48 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 49 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 33 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 50 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 34 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 51 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 35 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 52 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 36 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 53 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 37 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 54 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 38 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 55 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 39 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 56 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 40 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 57 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 41 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 58 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 42 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 59 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 43 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 60 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 44 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 61 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 45 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 62 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 46 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 63 | 0) >> 0] | 0) | 0) + (HEAP8[($1 + 47 | 0) >> 0] | 0) | 0;
    if (!$3) {
     break label$1
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $7 + 1 | 0;
    HEAP8[$7 >> 0] = 255;
    $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $7;
    label$18 : {
     if ($7) {
      break label$18
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$18
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $7 + 1 | 0;
    HEAP8[$7 >> 0] = 204;
    $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $7;
    label$19 : {
     if ($7) {
      break label$19
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$19
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $7 + 1 | 0;
    $3 = ($3 << 1 | 0) + 2 | 0;
    HEAP8[$7 >> 0] = $3 >>> 8 | 0;
    $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $7;
    label$20 : {
     if ($7) {
      break label$20
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$20
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $7 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $7 + 1 | 0;
    HEAP8[$7 >> 0] = $3;
    $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $3;
    label$21 : {
     if ($3) {
      break label$21
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$21
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = 0;
    label$22 : while (1) {
     label$23 : {
      if (!(HEAPU8[(($1 + 48 | 0) + $4 | 0) >> 0] | 0)) {
       break label$23
      }
      $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $7 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $7 + 1 | 0;
      HEAP8[$7 >> 0] = $4;
      $7 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $7;
      label$24 : {
       if ($7) {
        break label$24
       }
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$24
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
      }
      $3 = $0 + $4 | 0;
      $7 = HEAPU8[($3 + 120 | 0) >> 0] | 0;
      $8 = HEAPU8[($3 + 136 | 0) >> 0] | 0;
      $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $9 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $9 + 1 | 0;
      HEAP8[$9 >> 0] = $7 + ($8 << 4 | 0) | 0;
      $7 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $7;
      if ($7) {
       break label$23
      }
      if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$23
      }
      $3 = HEAP32[$0 >> 2] | 0;
      HEAP32[($3 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
     }
     label$25 : {
      if (!(HEAPU8[(($1 + 32 | 0) + $4 | 0) >> 0] | 0)) {
       break label$25
      }
      $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $7 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $7 + 1 | 0;
      HEAP8[$7 >> 0] = $4 + 16 | 0;
      $7 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $7;
      label$26 : {
       if ($7) {
        break label$26
       }
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$26
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
      }
      $7 = HEAPU8[(($0 + $4 | 0) + 152 | 0) >> 0] | 0;
      $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $8 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $8 + 1 | 0;
      HEAP8[$8 >> 0] = $7;
      $7 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $7;
      if ($7) {
       break label$25
      }
      if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$25
      }
      $3 = HEAP32[$0 >> 2] | 0;
      HEAP32[($3 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) != (16 | 0)) {
      continue label$22
     }
     break label$1;
    };
   }
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 56 | 0) >> 2] = 0;
   HEAP32[($1 + 60 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 48 | 0) >> 2] = 0;
   HEAP32[($1 + 52 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 40 | 0) >> 2] = 0;
   HEAP32[($1 + 44 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 32 | 0) >> 2] = 0;
   HEAP32[($1 + 36 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 24 | 0) >> 2] = 0;
   HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[($1 + 8 | 0) >> 2] = 0;
   HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   HEAP32[$1 >> 2] = 0;
   HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
   label$27 : {
    if ((HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] | 0 | 0) == (720002228 | 0)) {
     break label$27
    }
    label$28 : {
     label$29 : {
      if (($4 | 0) >= (1 | 0)) {
       break label$29
      }
      $6 = 2;
      break label$28;
     }
     $3 = 0;
     $6 = 2;
     label$30 : while (1) {
      $7 = $3 << 2 | 0;
      $9 = HEAP32[(($0 + $7 | 0) + 248 | 0) >> 2] | 0;
      $8 = HEAP32[($9 + 24 | 0) >> 2] | 0;
      $4 = HEAP32[(($0 + ($8 << 2 | 0) | 0) + 104 | 0) >> 2] | 0;
      label$31 : {
       label$32 : {
        if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
         break label$32
        }
        if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
         break label$32
        }
        label$33 : {
         $5 = HEAP32[($9 + 20 | 0) >> 2] | 0;
         $9 = HEAP32[(($0 + ($5 << 2 | 0) | 0) + 88 | 0) >> 2] | 0;
         if ($9) {
          break label$33
         }
         $10 = HEAP32[$0 >> 2] | 0;
         HEAP32[($10 + 24 | 0) >> 2] = $5;
         HEAP32[($10 + 20 | 0) >> 2] = 50;
         FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
        }
        if (HEAP32[($9 + 276 | 0) >> 2] | 0) {
         break label$31
        }
        if ((((($9 | 0) == (HEAP32[($1 + 20 | 0) >> 2] | 0 | 0)) + (($9 | 0) == (HEAP32[($1 + 16 | 0) >> 2] | 0 | 0)) | 0) + (($9 | 0) == (HEAP32[($1 + 24 | 0) >> 2] | 0 | 0)) | 0 | 0) != ((($9 | 0) == (HEAP32[($1 + 28 | 0) >> 2] | 0 | 0) ? -1 : 0) | 0)) {
         break label$31
        }
        HEAP32[(($1 + 16 | 0) + $7 | 0) >> 2] = $9;
        $5 = ($1 + 48 | 0) + $7 | 0;
        $9 = ((((((((((((((((HEAP32[$5 >> 2] | 0) + (HEAPU8[($9 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 3 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 4 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 5 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 6 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 7 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 8 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 9 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 10 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 11 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 12 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 13 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 14 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 15 | 0) >> 0] | 0) | 0) + (HEAPU8[($9 + 16 | 0) >> 0] | 0) | 0;
        HEAP32[$5 >> 2] = $9;
        $6 = ($6 + $9 | 0) + 17 | 0;
       }
       if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
        break label$31
       }
       label$34 : {
        if ($4) {
         break label$34
        }
        $9 = HEAP32[$0 >> 2] | 0;
        HEAP32[($9 + 24 | 0) >> 2] = $8 + 16 | 0;
        HEAP32[($9 + 20 | 0) >> 2] = 50;
        FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       }
       if (HEAP32[($4 + 276 | 0) >> 2] | 0) {
        break label$31
       }
       if ((((($4 | 0) == (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0)) + (($4 | 0) == (HEAP32[$1 >> 2] | 0 | 0)) | 0) + (($4 | 0) == (HEAP32[($1 + 8 | 0) >> 2] | 0 | 0)) | 0 | 0) != ((($4 | 0) == (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) ? -1 : 0) | 0)) {
        break label$31
       }
       HEAP32[($1 + $7 | 0) >> 2] = $4;
       $7 = ($1 + 32 | 0) + $7 | 0;
       $4 = ((((((((((((((((HEAP32[$7 >> 2] | 0) + (HEAPU8[($4 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 3 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 4 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 5 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 6 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 7 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 8 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 9 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 10 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 11 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 12 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 13 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 14 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 15 | 0) >> 0] | 0) | 0) + (HEAPU8[($4 + 16 | 0) >> 0] | 0) | 0;
       HEAP32[$7 >> 2] = $4;
       $6 = ($6 + $4 | 0) + 17 | 0;
      }
      $3 = $3 + 1 | 0;
      $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
      if (($3 | 0) < ($4 | 0)) {
       continue label$30
      }
      break label$30;
     };
     if (($6 | 0) > (65535 | 0)) {
      break label$27
     }
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $3 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = 255;
    $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $3;
    label$35 : {
     if ($3) {
      break label$35
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$35
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $3 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = 196;
    $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $3;
    label$36 : {
     if ($3) {
      break label$36
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$36
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $3 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $6 >>> 8 | 0;
    $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $3;
    label$37 : {
     if ($3) {
      break label$37
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$37
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $3 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $6;
    $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $3;
    label$38 : {
     if ($3) {
      break label$38
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$38
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $5 = 0;
    label$39 : while (1) {
     $10 = $5 << 2 | 0;
     $4 = HEAP32[(($0 + $10 | 0) + 248 | 0) >> 2] | 0;
     $11 = HEAP32[($4 + 24 | 0) >> 2] | 0;
     $9 = HEAP32[(($0 + ($11 << 2 | 0) | 0) + 104 | 0) >> 2] | 0;
     label$40 : {
      if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
       break label$40
      }
      if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
       break label$40
      }
      $3 = HEAP32[($4 + 20 | 0) >> 2] | 0;
      $6 = HEAP32[(($0 + ($3 << 2 | 0) | 0) + 88 | 0) >> 2] | 0;
      if (HEAP32[($6 + 276 | 0) >> 2] | 0) {
       break label$40
      }
      $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $7 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $7 + 1 | 0;
      HEAP8[$7 >> 0] = $3;
      $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($4 + 4 | 0) >> 2] = $3;
      label$41 : {
       if ($3) {
        break label$41
       }
       if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$41
       }
       $4 = HEAP32[$0 >> 2] | 0;
       HEAP32[($4 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
      }
      $3 = 1;
      label$42 : while (1) {
       $7 = HEAPU8[($6 + $3 | 0) >> 0] | 0;
       $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $8 = HEAP32[$4 >> 2] | 0;
       HEAP32[$4 >> 2] = $8 + 1 | 0;
       HEAP8[$8 >> 0] = $7;
       $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($4 + 4 | 0) >> 2] = $7;
       label$43 : {
        if ($7) {
         break label$43
        }
        if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
         break label$43
        }
        $4 = HEAP32[$0 >> 2] | 0;
        HEAP32[($4 + 20 | 0) >> 2] = 24;
        FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) != (17 | 0)) {
        continue label$42
       }
       break label$42;
      };
      $3 = 0;
      label$44 : {
       $12 = HEAP32[(($1 + 48 | 0) + $10 | 0) >> 2] | 0;
       if (($12 | 0) <= (0 | 0)) {
        break label$44
       }
       label$45 : while (1) {
        $7 = HEAPU8[(($6 + $3 | 0) + 17 | 0) >> 0] | 0;
        $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $8 = HEAP32[$4 >> 2] | 0;
        HEAP32[$4 >> 2] = $8 + 1 | 0;
        HEAP8[$8 >> 0] = $7;
        $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = $7;
        label$46 : {
         if ($7) {
          break label$46
         }
         if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$46
         }
         $4 = HEAP32[$0 >> 2] | 0;
         HEAP32[($4 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
        }
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($12 | 0)) {
         continue label$45
        }
        break label$45;
       };
      }
      HEAP32[($6 + 276 | 0) >> 2] = 1;
     }
     label$47 : {
      if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
       break label$47
      }
      if (HEAP32[($9 + 276 | 0) >> 2] | 0) {
       break label$47
      }
      $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $3 = HEAP32[$4 >> 2] | 0;
      HEAP32[$4 >> 2] = $3 + 1 | 0;
      HEAP8[$3 >> 0] = $11 + 16 | 0;
      $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($4 + 4 | 0) >> 2] = $3;
      label$48 : {
       if ($3) {
        break label$48
       }
       if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$48
       }
       $4 = HEAP32[$0 >> 2] | 0;
       HEAP32[($4 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
      }
      $3 = 1;
      label$49 : while (1) {
       $7 = HEAPU8[($9 + $3 | 0) >> 0] | 0;
       $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $8 = HEAP32[$4 >> 2] | 0;
       HEAP32[$4 >> 2] = $8 + 1 | 0;
       HEAP8[$8 >> 0] = $7;
       $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($4 + 4 | 0) >> 2] = $7;
       label$50 : {
        if ($7) {
         break label$50
        }
        if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
         break label$50
        }
        $4 = HEAP32[$0 >> 2] | 0;
        HEAP32[($4 + 20 | 0) >> 2] = 24;
        FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) != (17 | 0)) {
        continue label$49
       }
       break label$49;
      };
      $3 = 0;
      label$51 : {
       $6 = HEAP32[(($1 + 32 | 0) + $10 | 0) >> 2] | 0;
       if (($6 | 0) <= (0 | 0)) {
        break label$51
       }
       label$52 : while (1) {
        $7 = HEAPU8[(($9 + $3 | 0) + 17 | 0) >> 0] | 0;
        $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $8 = HEAP32[$4 >> 2] | 0;
        HEAP32[$4 >> 2] = $8 + 1 | 0;
        HEAP8[$8 >> 0] = $7;
        $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($4 + 4 | 0) >> 2] = $7;
        label$53 : {
         if ($7) {
          break label$53
         }
         if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$53
         }
         $4 = HEAP32[$0 >> 2] | 0;
         HEAP32[($4 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
        }
        $3 = $3 + 1 | 0;
        if (($3 | 0) != ($6 | 0)) {
         continue label$52
        }
        break label$52;
       };
      }
      HEAP32[($9 + 276 | 0) >> 2] = 1;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$39
     }
     break label$1;
    };
   }
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = 0;
   label$54 : while (1) {
    $3 = HEAP32[(($0 + ($4 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
    label$55 : {
     if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
      break label$55
     }
     if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
      break label$55
     }
     emit_dht($0 | 0, HEAP32[($3 + 20 | 0) >> 2] | 0 | 0, 0 | 0);
    }
    label$56 : {
     if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
      break label$56
     }
     emit_dht($0 | 0, HEAP32[($3 + 24 | 0) >> 2] | 0 | 0, 1 | 0);
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$54
    }
    break label$54;
   };
  }
  label$57 : {
   if ((HEAP32[($0 + 200 | 0) >> 2] | 0 | 0) == (HEAP32[($2 + 28 | 0) >> 2] | 0 | 0)) {
    break label$57
   }
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $3 + 1 | 0;
   HEAP8[$3 >> 0] = 255;
   $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $3;
   label$58 : {
    if ($3) {
     break label$58
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$58
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $3 + 1 | 0;
   HEAP8[$3 >> 0] = 221;
   $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $3;
   label$59 : {
    if ($3) {
     break label$59
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$59
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $3 + 1 | 0;
   HEAP8[$3 >> 0] = 0;
   $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $3;
   label$60 : {
    if ($3) {
     break label$60
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$60
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $3 + 1 | 0;
   HEAP8[$3 >> 0] = 4;
   $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $3;
   label$61 : {
    if ($3) {
     break label$61
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$61
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $7 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $7 + 1 | 0;
   HEAP8[$7 >> 0] = $3 >>> 8 | 0;
   $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $7;
   label$62 : {
    if ($7) {
     break label$62
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$62
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $7 = HEAP32[$4 >> 2] | 0;
   HEAP32[$4 >> 2] = $7 + 1 | 0;
   HEAP8[$7 >> 0] = $3;
   $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($4 + 4 | 0) >> 2] = $3;
   label$63 : {
    if ($3) {
     break label$63
    }
    if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$63
    }
    $4 = HEAP32[$0 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   }
   HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($0 + 200 | 0) >> 2] | 0;
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = 255;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$64 : {
   if ($3) {
    break label$64
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$64
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = 218;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$65 : {
   if ($3) {
    break label$65
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$65
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 244 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $7 + 1 | 0;
  $3 = ($3 << 1 | 0) + 6 | 0;
  HEAP8[$7 >> 0] = $3 >>> 8 | 0;
  $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $7;
  label$66 : {
   if ($7) {
    break label$66
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$66
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $7 + 1 | 0;
  HEAP8[$7 >> 0] = $3;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$67 : {
   if ($3) {
    break label$67
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$67
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 244 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $7 + 1 | 0;
  HEAP8[$7 >> 0] = $3;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$68 : {
   if ($3) {
    break label$68
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$68
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  label$69 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$69
   }
   $3 = 0;
   label$70 : while (1) {
    $9 = HEAP32[(($0 + ($3 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
    $7 = HEAP32[$9 >> 2] | 0;
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $8 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $8 + 1 | 0;
    HEAP8[$8 >> 0] = $7;
    $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $7;
    label$71 : {
     if ($7) {
      break label$71
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$71
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $7 = 0;
    $8 = 0;
    label$72 : {
     if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
      break label$72
     }
     $8 = 0;
     if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
      break label$72
     }
     $8 = HEAP32[($9 + 20 | 0) >> 2] | 0;
    }
    label$73 : {
     if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
      break label$73
     }
     $7 = HEAP32[($9 + 24 | 0) >> 2] | 0;
    }
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[$4 >> 2] | 0;
    HEAP32[$4 >> 2] = $9 + 1 | 0;
    HEAP8[$9 >> 0] = $7 + ($8 << 4 | 0) | 0;
    $7 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4 + 4 | 0) >> 2] = $7;
    label$74 : {
     if ($7) {
      break label$74
     }
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$74
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$70
    }
    break label$70;
   };
  }
  $3 = HEAP32[($0 + 316 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $7 + 1 | 0;
  HEAP8[$7 >> 0] = $3;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$75 : {
   if ($3) {
    break label$75
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$75
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $7 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $7 + 1 | 0;
  HEAP8[$7 >> 0] = $3;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$76 : {
   if ($3) {
    break label$76
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$76
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  $3 = HEAP32[($0 + 328 | 0) >> 2] | 0;
  $7 = HEAP32[($0 + 324 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $8 = HEAP32[$4 >> 2] | 0;
  HEAP32[$4 >> 2] = $8 + 1 | 0;
  HEAP8[$8 >> 0] = $3 + ($7 << 4 | 0) | 0;
  $3 = (HEAP32[($4 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = $3;
  label$77 : {
   if ($3) {
    break label$77
   }
   if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$77
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  __stack_pointer = $1 + 64 | 0;
 }
 
 function write_frame_header($0) {
  $0 = $0 | 0;
  var $6 = 0, $9 = 0, $7 = 0, $8 = 0, $3 = 0, $1 = 0, $2 = 0, $5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0, $10 = 0;
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  i64toi32_i32$1 = $1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 0;
  HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] | 0 | 0) != (720002228 | 0)) {
      break label$3
     }
     $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
     $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     label$5 : {
      $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      if (($2 | 0) >= (1 | 0)) {
       break label$5
      }
      $4 = 0;
      break label$4;
     }
     $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     $4 = 0;
     $5 = 0;
     label$6 : while (1) {
      $6 = HEAP32[(($0 + ((HEAP32[(($3 + Math_imul($5, 84) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
      if (!$6) {
       break label$2
      }
      $7 = 0;
      $8 = 0;
      if ((HEAP32[($6 + 128 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      label$7 : while (1) {
       $9 = $7 << 1 | 0;
       $8 = (((($8 | 0) != (((HEAPU16[($6 + $9 | 0) >> 1] | 0) >>> 0 > 255 >>> 0 ? -1 : 0) | 0) | 0) != (((HEAPU16[($6 + ($9 | 2 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0 ? -1 : 0) | 0) | 0) != (((HEAPU16[($6 + ($9 | 4 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0 ? -1 : 0) | 0) | 0) != (((HEAPU16[($6 + ($9 | 6 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0 ? -1 : 0) | 0);
       $7 = $7 + 4 | 0;
       if (($7 | 0) != (64 | 0)) {
        continue label$7
       }
       break label$7;
      };
      HEAP32[(($1 + 48 | 0) + ($5 << 2 | 0) | 0) >> 2] = $8;
      $4 = $4 + $8 | 0;
      $5 = $5 + 1 | 0;
      if (($5 | 0) != ($2 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $9 + 1 | 0;
    HEAP8[$9 >> 0] = 255;
    $9 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $9;
    label$8 : {
     if ($9) {
      break label$8
     }
     if (FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$8
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
    }
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $9 + 1 | 0;
    HEAP8[$9 >> 0] = 219;
    $9 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $9;
    label$9 : {
     if ($9) {
      break label$9
     }
     if (FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$9
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
    }
    label$10 : {
     label$11 : {
      $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      if (($6 | 0) >= (1 | 0)) {
       break label$11
      }
      $8 = 0;
      break label$10;
     }
     $10 = $6 & 1 | 0;
     $9 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     label$12 : {
      label$13 : {
       if (($6 | 0) != (1 | 0)) {
        break label$13
       }
       $6 = 0;
       $8 = 0;
       break label$12;
      }
      $5 = $6 & -2 | 0;
      $6 = 0;
      $8 = 0;
      $7 = 0;
      label$14 : while (1) {
       label$15 : {
        $3 = $1 + ((HEAP32[(($9 + Math_imul($6, 84) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
        if (HEAP32[$3 >> 2] | 0) {
         break label$15
        }
        $2 = HEAP32[(($1 + 48 | 0) + ($6 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[$3 >> 2] = 1;
        $8 = ($8 + ($2 << 6 | 0) | 0) + 65 | 0;
       }
       label$16 : {
        $3 = $6 | 1 | 0;
        $2 = $1 + ((HEAP32[(($9 + Math_imul($3, 84) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
        if (HEAP32[$2 >> 2] | 0) {
         break label$16
        }
        $3 = HEAP32[(($1 + 48 | 0) + ($3 << 2 | 0) | 0) >> 2] | 0;
        HEAP32[$2 >> 2] = 1;
        $8 = ($8 + ($3 << 6 | 0) | 0) + 65 | 0;
       }
       $6 = $6 + 2 | 0;
       $7 = $7 + 2 | 0;
       if (($7 | 0) != ($5 | 0)) {
        continue label$14
       }
       break label$14;
      };
     }
     if (!$10) {
      break label$10
     }
     $9 = $1 + ((HEAP32[(($9 + Math_imul($6, 84) | 0) + 16 | 0) >> 2] | 0) << 2 | 0) | 0;
     if (HEAP32[$9 >> 2] | 0) {
      break label$10
     }
     $6 = HEAP32[(($1 + 48 | 0) + ($6 << 2 | 0) | 0) >> 2] | 0;
     HEAP32[$9 >> 2] = 1;
     $8 = ($8 + ($6 << 6 | 0) | 0) + 65 | 0;
    }
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $9 + 1 | 0;
    $7 = $8 + 2 | 0;
    HEAP8[$9 >> 0] = $7 >>> 8 | 0;
    $9 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $9;
    label$17 : {
     if ($9) {
      break label$17
     }
     if (FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$17
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
    }
    $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $9 = HEAP32[$6 >> 2] | 0;
    HEAP32[$6 >> 2] = $9 + 1 | 0;
    HEAP8[$9 >> 0] = $7;
    $9 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($6 + 4 | 0) >> 2] = $9;
    label$18 : {
     if ($9) {
      break label$18
     }
     if (FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$18
     }
     $6 = HEAP32[$0 >> 2] | 0;
     HEAP32[($6 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
    }
    $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    if (($2 | 0) < (1 | 0)) {
     break label$1
    }
    $5 = 0;
    label$19 : while (1) {
     label$20 : {
      $9 = HEAP32[(((HEAP32[($0 + 68 | 0) >> 2] | 0) + Math_imul($5, 84) | 0) + 16 | 0) >> 2] | 0;
      $3 = HEAP32[(($0 + ($9 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
      if ((HEAP32[($3 + 128 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$20
      }
      $7 = HEAP32[(($1 + 48 | 0) + ($5 << 2 | 0) | 0) >> 2] | 0;
      $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $8 = HEAP32[$6 >> 2] | 0;
      HEAP32[$6 >> 2] = $8 + 1 | 0;
      HEAP8[$8 >> 0] = ($7 << 4 | 0) + $9 | 0;
      $9 = (HEAP32[($6 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($6 + 4 | 0) >> 2] = $9;
      label$21 : {
       if ($9) {
        break label$21
       }
       if (FUNCTION_TABLE[HEAP32[($6 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$21
       }
       $6 = HEAP32[$0 >> 2] | 0;
       HEAP32[($6 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
      }
      $6 = 0;
      label$22 : {
       label$23 : {
        if ($7) {
         break label$23
        }
        label$24 : while (1) {
         $7 = HEAPU8[($3 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 0] | 0;
         $9 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $8 = HEAP32[$9 >> 2] | 0;
         HEAP32[$9 >> 2] = $8 + 1 | 0;
         HEAP8[$8 >> 0] = $7;
         $7 = (HEAP32[($9 + 4 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($9 + 4 | 0) >> 2] = $7;
         label$25 : {
          if ($7) {
           break label$25
          }
          if (FUNCTION_TABLE[HEAP32[($9 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
           break label$25
          }
          $9 = HEAP32[$0 >> 2] | 0;
          HEAP32[($9 + 20 | 0) >> 2] = 24;
          FUNCTION_TABLE[HEAP32[$9 >> 2] | 0 | 0]($0);
         }
         $6 = $6 + 1 | 0;
         if (($6 | 0) != (64 | 0)) {
          continue label$24
         }
         break label$22;
        };
       }
       label$26 : while (1) {
        $7 = HEAPU16[($3 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
        $9 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $8 = HEAP32[$9 >> 2] | 0;
        HEAP32[$9 >> 2] = $8 + 1 | 0;
        HEAP8[$8 >> 0] = $7 >>> 8 | 0;
        $8 = (HEAP32[($9 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($9 + 4 | 0) >> 2] = $8;
        label$27 : {
         if ($8) {
          break label$27
         }
         if (FUNCTION_TABLE[HEAP32[($9 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$27
         }
         $9 = HEAP32[$0 >> 2] | 0;
         HEAP32[($9 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$9 >> 2] | 0 | 0]($0);
        }
        $9 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $8 = HEAP32[$9 >> 2] | 0;
        HEAP32[$9 >> 2] = $8 + 1 | 0;
        HEAP8[$8 >> 0] = $7;
        $7 = (HEAP32[($9 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($9 + 4 | 0) >> 2] = $7;
        label$28 : {
         if ($7) {
          break label$28
         }
         if (FUNCTION_TABLE[HEAP32[($9 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$28
         }
         $9 = HEAP32[$0 >> 2] | 0;
         HEAP32[($9 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$9 >> 2] | 0 | 0]($0);
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != (64 | 0)) {
         continue label$26
        }
        break label$26;
       };
      }
      HEAP32[($3 + 128 | 0) >> 2] = 1;
      $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
     }
     $5 = $5 + 1 | 0;
     if (($5 | 0) < ($2 | 0)) {
      continue label$19
     }
     break label$1;
    };
   }
   $4 = 0;
   if (($2 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = 0;
   label$29 : while (1) {
    $4 = (emit_dqt($0 | 0, HEAP32[($3 + 16 | 0) >> 2] | 0 | 0) | 0) + $4 | 0;
    $3 = $3 + 84 | 0;
    $6 = $6 + 1 | 0;
    $2 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    if (($6 | 0) < ($2 | 0)) {
     continue label$29
    }
    break label$29;
   };
  }
  label$30 : {
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       if (HEAP32[($0 + 180 | 0) >> 2] | 0) {
        break label$34
       }
       $9 = 194;
       if (HEAP32[($0 + 228 | 0) >> 2] | 0) {
        break label$30
       }
       $7 = 0;
       if ((HEAP32[($0 + 56 | 0) >> 2] | 0 | 0) != (8 | 0)) {
        break label$32
       }
       $7 = 1;
       label$35 : {
        if (($2 | 0) < (1 | 0)) {
         break label$35
        }
        $7 = 1;
        $5 = $2 & 1 | 0;
        $6 = HEAP32[($0 + 68 | 0) >> 2] | 0;
        label$36 : {
         if (($2 | 0) == (1 | 0)) {
          break label$36
         }
         $3 = $2 & -2 | 0;
         $8 = 0;
         $7 = 1;
         label$37 : while (1) {
          label$38 : {
           label$39 : {
            if ((HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) > (1 | 0)) {
             break label$39
            }
            if ((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) < (2 | 0)) {
             break label$38
            }
           }
           $7 = 0;
          }
          label$40 : {
           label$41 : {
            if ((HEAP32[($6 + 104 | 0) >> 2] | 0 | 0) > (1 | 0)) {
             break label$41
            }
            if ((HEAP32[($6 + 108 | 0) >> 2] | 0 | 0) < (2 | 0)) {
             break label$40
            }
           }
           $7 = 0;
          }
          $6 = $6 + 168 | 0;
          $8 = $8 + 2 | 0;
          if (($8 | 0) != ($3 | 0)) {
           continue label$37
          }
          break label$37;
         };
        }
        if (!$5) {
         break label$35
        }
        label$42 : {
         if ((HEAP32[($6 + 20 | 0) >> 2] | 0 | 0) > (1 | 0)) {
          break label$42
         }
         if ((HEAP32[($6 + 24 | 0) >> 2] | 0 | 0) < (2 | 0)) {
          break label$35
         }
        }
        $7 = 0;
       }
       if (!$4) {
        break label$32
       }
       if (!$7) {
        break label$32
       }
       $6 = HEAP32[$0 >> 2] | 0;
       HEAP32[($6 + 20 | 0) >> 2] = 75;
       FUNCTION_TABLE[HEAP32[($6 + 4 | 0) >> 2] | 0 | 0]($0, 0);
       if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
        break label$33
       }
      }
      $9 = HEAP32[($0 + 228 | 0) >> 2] | 0 ? 202 : 201;
      break label$30;
     }
     if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
      break label$31
     }
     break label$30;
    }
    if (HEAP32[($0 + 228 | 0) >> 2] | 0) {
     break label$30
    }
    $9 = 192;
    if ($7) {
     break label$30
    }
   }
   $9 = 193;
  }
  emit_sof($0 | 0, $9 | 0);
  __stack_pointer = $1 + 96 | 0;
 }
 
 function write_file_header($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $3 = 0, $4 = 0;
  $1 = HEAP32[($0 + 348 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = 255;
  $4 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $4;
  $3 = $0 + 24 | 0;
  label$1 : {
   if ($4) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[$3 >> 2] | 0;
  $4 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $4 + 1 | 0;
  HEAP8[$4 >> 0] = 216;
  $4 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $4;
  label$2 : {
   if ($4) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  HEAP32[($1 + 28 | 0) >> 2] = 0;
  label$3 : {
   if (!(HEAP32[($0 + 208 | 0) >> 2] | 0)) {
    break label$3
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 255;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$4 : {
    if ($1) {
     break label$4
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$4
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 224;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$5 : {
    if ($1) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$5
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$6 : {
    if ($1) {
     break label$6
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$6
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 16;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$7 : {
    if ($1) {
     break label$7
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$7
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 74;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$8 : {
    if ($1) {
     break label$8
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$8
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 70;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$9 : {
    if ($1) {
     break label$9
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$9
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 73;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$10 : {
    if ($1) {
     break label$10
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$10
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 70;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$11 : {
    if ($1) {
     break label$11
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$11
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$12 : {
    if ($1) {
     break label$12
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$12
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $1 = HEAPU8[($0 + 212 | 0) >> 0] | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$13 : {
    if ($1) {
     break label$13
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$13
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $1 = HEAPU8[($0 + 213 | 0) >> 0] | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$14 : {
    if ($1) {
     break label$14
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$14
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $1 = HEAPU8[($0 + 214 | 0) >> 0] | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$15 : {
    if ($1) {
     break label$15
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$15
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $1 = HEAPU16[($0 + 216 | 0) >> 1] | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1 >>> 8 | 0;
   $4 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $4;
   label$16 : {
    if ($4) {
     break label$16
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$16
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$17 : {
    if ($1) {
     break label$17
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$17
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $1 = HEAPU16[($0 + 218 | 0) >> 1] | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1 >>> 8 | 0;
   $4 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $4;
   label$18 : {
    if ($4) {
     break label$18
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$18
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $4 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$19 : {
    if ($1) {
     break label$19
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$19
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$20 : {
    if ($1) {
     break label$20
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$20
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   if ($1) {
    break label$3
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$3
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$21 : {
   if (!(HEAP32[($0 + 220 | 0) >> 2] | 0)) {
    break label$21
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 255;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$22 : {
    if ($1) {
     break label$22
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$22
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 238;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$23 : {
    if ($1) {
     break label$23
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$23
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$24 : {
    if ($1) {
     break label$24
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$24
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 14;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$25 : {
    if ($1) {
     break label$25
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$25
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 65;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$26 : {
    if ($1) {
     break label$26
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$26
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 100;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$27 : {
    if ($1) {
     break label$27
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$27
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 111;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$28 : {
    if ($1) {
     break label$28
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$28
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 98;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$29 : {
    if ($1) {
     break label$29
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$29
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 101;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$30 : {
    if ($1) {
     break label$30
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$30
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$31 : {
    if ($1) {
     break label$31
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$31
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 100;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$32 : {
    if ($1) {
     break label$32
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$32
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$33 : {
    if ($1) {
     break label$33
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$33
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$34 : {
    if ($1) {
     break label$34
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$34
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$35 : {
    if ($1) {
     break label$35
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$35
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   $2 = HEAP32[$3 >> 2] | 0;
   $1 = HEAP32[$2 >> 2] | 0;
   HEAP32[$2 >> 2] = $1 + 1 | 0;
   HEAP8[$1 >> 0] = 0;
   $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $1;
   label$36 : {
    if ($1) {
     break label$36
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$36
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
   }
   label$37 : {
    label$38 : {
     switch ((HEAP32[($0 + 64 | 0) >> 2] | 0) + -3 | 0 | 0) {
     case 0:
      $3 = HEAP32[$3 >> 2] | 0;
      $2 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $2 + 1 | 0;
      HEAP8[$2 >> 0] = 1;
      $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $2;
      if ($2) {
       break label$21
      }
      if (!(FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0)) {
       break label$37
      }
      break label$21;
     case 2:
      $3 = HEAP32[$3 >> 2] | 0;
      $2 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $2 + 1 | 0;
      HEAP8[$2 >> 0] = 2;
      $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $2;
      if ($2) {
       break label$21
      }
      if (!(FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0)) {
       break label$37
      }
      break label$21;
     default:
      break label$38;
     };
    }
    $3 = HEAP32[$3 >> 2] | 0;
    $2 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $2 + 1 | 0;
    HEAP8[$2 >> 0] = 0;
    $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = $2;
    if ($2) {
     break label$21
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$21
    }
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
 }
 
 function emit_dqt($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $6 = 0, $2 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  label$1 : {
   $2 = HEAP32[(($0 + ($1 << 2 | 0) | 0) + 72 | 0) >> 2] | 0;
   if ($2) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = 52;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $4 = 0;
  $5 = 0;
  label$2 : while (1) {
   $3 = $5 << 1 | 0;
   $4 = (wasm2js_i32$0 = 1, wasm2js_i32$1 = (wasm2js_i32$3 = 1, wasm2js_i32$4 = (wasm2js_i32$6 = 1, wasm2js_i32$7 = (HEAPU16[($2 + $3 | 0) >> 1] | 0) >>> 0 > 255 >>> 0 ? 1 : $4, wasm2js_i32$8 = (HEAPU16[($2 + ($3 | 2 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0, wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$5 = (HEAPU16[($2 + ($3 | 4 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$2 = (HEAPU16[($2 + ($3 | 6 | 0) | 0) >> 1] | 0) >>> 0 > 255 >>> 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $5 = $5 + 4 | 0;
   if (($5 | 0) != (64 | 0)) {
    continue label$2
   }
   break label$2;
  };
  label$3 : {
   if (HEAP32[($2 + 128 | 0) >> 2] | 0) {
    break label$3
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = 255;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
   label$4 : {
    if ($5) {
     break label$4
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$4
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = 219;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
   label$5 : {
    if ($5) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$5
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = 0;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
   label$6 : {
    if ($5) {
     break label$6
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$6
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = $4 ? -125 : 67;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
   label$7 : {
    if ($5) {
     break label$7
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$7
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = ($4 << 4 | 0) + $1 | 0;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
   label$8 : {
    if ($5) {
     break label$8
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$8
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = 0;
   label$9 : {
    label$10 : {
     if ($4) {
      break label$10
     }
     label$11 : while (1) {
      $1 = HEAPU8[($2 + ((HEAP32[(144016 + ($3 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 0] | 0;
      $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $6 = HEAP32[$5 >> 2] | 0;
      HEAP32[$5 >> 2] = $6 + 1 | 0;
      HEAP8[$6 >> 0] = $1;
      $1 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($5 + 4 | 0) >> 2] = $1;
      label$12 : {
       if ($1) {
        break label$12
       }
       if (FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$12
       }
       $5 = HEAP32[$0 >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
      }
      $3 = $3 + 1 | 0;
      if (($3 | 0) != (64 | 0)) {
       continue label$11
      }
      break label$9;
     };
    }
    label$13 : while (1) {
     $1 = HEAPU16[($2 + ((HEAP32[(144016 + ($3 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
     $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $6 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $6 + 1 | 0;
     HEAP8[$6 >> 0] = $1 >>> 8 | 0;
     $6 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $6;
     label$14 : {
      if ($6) {
       break label$14
      }
      if (FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$14
      }
      $5 = HEAP32[$0 >> 2] | 0;
      HEAP32[($5 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
     }
     $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $6 = HEAP32[$5 >> 2] | 0;
     HEAP32[$5 >> 2] = $6 + 1 | 0;
     HEAP8[$6 >> 0] = $1;
     $1 = (HEAP32[($5 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($5 + 4 | 0) >> 2] = $1;
     label$15 : {
      if ($1) {
       break label$15
      }
      if (FUNCTION_TABLE[HEAP32[($5 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$15
      }
      $5 = HEAP32[$0 >> 2] | 0;
      HEAP32[($5 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != (64 | 0)) {
      continue label$13
     }
     break label$13;
    };
   }
   HEAP32[($2 + 128 | 0) >> 2] = 1;
  }
  return $4 | 0;
 }
 
 function emit_sof($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, i64toi32_i32$1 = 0, $6 = 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = 255;
  $3 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $3;
  label$1 : {
   if ($3) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$2 : {
   if ($1) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  $1 = Math_imul($1, 3) + 8 | 0;
  HEAP8[$3 >> 0] = $1 >>> 8 | 0;
  $3 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $3;
  label$3 : {
   if ($3) {
    break label$3
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$3
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$4 : {
   if ($1) {
    break label$4
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$4
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$5 : {
   label$6 : {
    if ((HEAP32[($0 + 32 | 0) >> 2] | 0 | 0) > (65535 | 0)) {
     break label$6
    }
    if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) < (65536 | 0)) {
     break label$5
    }
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 41;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 65535;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 56 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$7 : {
   if ($1) {
    break label$7
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$7
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1 >>> 8 | 0;
  $3 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $3;
  label$8 : {
   if ($3) {
    break label$8
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$8
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$9 : {
   if ($1) {
    break label$9
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$9
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1 >>> 8 | 0;
  $3 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $3;
  label$10 : {
   if ($3) {
    break label$10
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$10
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$11 : {
   if ($1) {
    break label$11
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$11
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = $3 + 1 | 0;
  HEAP8[$3 >> 0] = $1;
  $1 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  label$12 : {
   if ($1) {
    break label$12
   }
   if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$12
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$13 : {
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$13
   }
   $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $3 = 0;
   label$14 : while (1) {
    $4 = HEAP32[$2 >> 2] | 0;
    $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = $5 + 1 | 0;
    HEAP8[$5 >> 0] = $4;
    $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $4;
    label$15 : {
     if ($4) {
      break label$15
     }
     if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$15
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAP32[($1 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($2 + 12 | 0) >> 2] | 0;
    $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
    $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $6 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = $6 + 1 | 0;
    HEAP8[$6 >> 0] = $4 + ($5 << 4 | 0) | 0;
    $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $4;
    label$16 : {
     if ($4) {
      break label$16
     }
     if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$16
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAP32[($1 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = $5 + 1 | 0;
    HEAP8[$5 >> 0] = $4;
    $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $4;
    label$17 : {
     if ($4) {
      break label$17
     }
     if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$17
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAP32[($1 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    }
    $2 = $2 + 84 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$14
    }
    break label$14;
   };
  }
 }
 
 function emit_dht($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, $6 = 0, $20 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $3 = $2 ? $1 + 16 | 0 : $1;
  label$1 : {
   $1 = $0 + ($1 << 2 | 0) | 0;
   $4 = HEAP32[($2 ? $1 + 104 | 0 : $1 + 88 | 0) >> 2] | 0;
   if ($4) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 24 | 0) >> 2] = $3;
   HEAP32[($1 + 20 | 0) >> 2] = 50;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if (HEAP32[($4 + 276 | 0) >> 2] | 0) {
    break label$2
   }
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $2 + 1 | 0;
   HEAP8[$2 >> 0] = 255;
   $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   label$3 : {
    if ($2) {
     break label$3
    }
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$3
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $2 + 1 | 0;
   HEAP8[$2 >> 0] = 196;
   $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   label$4 : {
    if ($2) {
     break label$4
    }
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$4
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   $2 = HEAPU8[($4 + 16 | 0) >> 0] | 0;
   $5 = HEAPU8[($4 + 15 | 0) >> 0] | 0;
   $6 = HEAPU8[($4 + 14 | 0) >> 0] | 0;
   $7 = HEAPU8[($4 + 13 | 0) >> 0] | 0;
   $8 = HEAPU8[($4 + 12 | 0) >> 0] | 0;
   $9 = HEAPU8[($4 + 11 | 0) >> 0] | 0;
   $10 = HEAPU8[($4 + 10 | 0) >> 0] | 0;
   $11 = HEAPU8[($4 + 9 | 0) >> 0] | 0;
   $12 = HEAPU8[($4 + 8 | 0) >> 0] | 0;
   $13 = HEAPU8[($4 + 7 | 0) >> 0] | 0;
   $14 = HEAPU8[($4 + 6 | 0) >> 0] | 0;
   $15 = HEAPU8[($4 + 5 | 0) >> 0] | 0;
   $16 = HEAPU8[($4 + 4 | 0) >> 0] | 0;
   $17 = HEAPU8[($4 + 3 | 0) >> 0] | 0;
   $18 = HEAPU8[($4 + 2 | 0) >> 0] | 0;
   $19 = HEAPU8[($4 + 1 | 0) >> 0] | 0;
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $20 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $20 + 1 | 0;
   $6 = $2 + ($5 + ($6 + ($7 + ($8 + ($9 + ($10 + ($11 + ($12 + ($13 + ($14 + ($15 + ($16 + ($17 + ($19 + $18 | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0) | 0;
   $2 = $6 + 19 | 0;
   HEAP8[$20 >> 0] = $2 >>> 8 | 0;
   $5 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $5;
   label$5 : {
    if ($5) {
     break label$5
    }
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$5
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $5 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $5 + 1 | 0;
   HEAP8[$5 >> 0] = $2;
   $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   label$6 : {
    if ($2) {
     break label$6
    }
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$6
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $2 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $2 + 1 | 0;
   HEAP8[$2 >> 0] = $3;
   $2 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   label$7 : {
    if ($2) {
     break label$7
    }
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$7
    }
    $1 = HEAP32[$0 >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
   }
   $2 = 1;
   label$8 : while (1) {
    $3 = HEAPU8[($4 + $2 | 0) >> 0] | 0;
    $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $5 = HEAP32[$1 >> 2] | 0;
    HEAP32[$1 >> 2] = $5 + 1 | 0;
    HEAP8[$5 >> 0] = $3;
    $3 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $3;
    label$9 : {
     if ($3) {
      break label$9
     }
     if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$9
     }
     $1 = HEAP32[$0 >> 2] | 0;
     HEAP32[($1 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) != (17 | 0)) {
     continue label$8
    }
    break label$8;
   };
   label$10 : {
    if (!$6) {
     break label$10
    }
    $2 = 0;
    label$11 : while (1) {
     $3 = HEAPU8[(($4 + $2 | 0) + 17 | 0) >> 0] | 0;
     $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $5 = HEAP32[$1 >> 2] | 0;
     HEAP32[$1 >> 2] = $5 + 1 | 0;
     HEAP8[$5 >> 0] = $3;
     $3 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $3;
     label$12 : {
      if ($3) {
       break label$12
      }
      if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$12
      }
      $1 = HEAP32[$0 >> 2] | 0;
      HEAP32[($1 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
     }
     $2 = $2 + 1 | 0;
     if ($2 >>> 0 < $6 >>> 0) {
      continue label$11
     }
     break label$11;
    };
   }
   HEAP32[($4 + 276 | 0) >> 2] = 1;
  }
 }
 
 function jinit_c_master_control($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $3 = 0, $6 = 0, $9 = 0, $10 = 0, $8 = 0, $11 = 0, $14 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $12 = 0, $13 = 0, $19 = 0, $18 = 0, $15 = 0, $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 2608 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[($0 + 332 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 49;
  HEAP32[($3 + 4 | 0) >> 2] = 50;
  HEAP32[$3 >> 2] = 51;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 12 | 0) >> 2] = 0;
  HEAP32[($3 + 16 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (!$4) {
     break label$2
    }
    if (!(HEAP32[($0 + 28 | 0) >> 2] | 0)) {
     break label$2
    }
    if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($0 + 36 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$1
    }
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 32;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : {
    if (($4 | 0) > (65500 | 0)) {
     break label$4
    }
    if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) < (65501 | 0)) {
     break label$3
    }
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 65500;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 41;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$5 : {
   $4 = HEAP32[($0 + 56 | 0) >> 2] | 0;
   if (($4 | 0) == (8 | 0)) {
    break label$5
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $4;
   HEAP32[($5 + 20 | 0) >> 2] = 15;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$6 : {
   $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($6 | 0) < (11 | 0)) {
    break label$6
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 24 | 0) >> 2] = $6;
   HEAP32[($4 + 20 | 0) >> 2] = 26;
   HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 10;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 1;
  HEAP32[($0 + 232 | 0) >> 2] = 1;
  HEAP32[($0 + 236 | 0) >> 2] = i64toi32_i32$0;
  $7 = 1;
  label$7 : {
   if (($6 | 0) < (1 | 0)) {
    break label$7
   }
   $4 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $8 = 0;
   $7 = 1;
   $5 = 1;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
      if (($9 + -5 | 0) >>> 0 < -4 >>> 0) {
       break label$10
      }
      $10 = HEAP32[($4 + 12 | 0) >> 2] | 0;
      if (($10 + -5 | 0) >>> 0 > -5 >>> 0) {
       break label$9
      }
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[($5 + 20 | 0) >> 2] = 18;
     FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
     $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
     $10 = HEAP32[($4 + 12 | 0) >> 2] | 0;
     $7 = HEAP32[($0 + 236 | 0) >> 2] | 0;
     $9 = HEAP32[($4 + 8 | 0) >> 2] | 0;
     $5 = HEAP32[($0 + 232 | 0) >> 2] | 0;
    }
    $7 = ($7 | 0) > ($10 | 0) ? $7 : $10;
    HEAP32[($0 + 236 | 0) >> 2] = $7;
    $5 = ($5 | 0) > ($9 | 0) ? $5 : $9;
    HEAP32[($0 + 232 | 0) >> 2] = $5;
    $4 = $4 + 84 | 0;
    $8 = $8 + 1 | 0;
    if (($8 | 0) < ($6 | 0)) {
     continue label$8
    }
    break label$8;
   };
   if (($6 | 0) < (1 | 0)) {
    break label$7
   }
   $4 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $7 = 0;
   label$11 : {
    label$12 : while (1) {
     HEAP32[($4 + 36 | 0) >> 2] = 8;
     HEAP32[($4 + 4 | 0) >> 2] = $7;
     (wasm2js_i32$0 = $4, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, HEAP32[($0 + 28 | 0) >> 2] | 0) | 0, $5 << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 28 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $4, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[($4 + 12 | 0) >> 2] | 0, HEAP32[($0 + 32 | 0) >> 2] | 0) | 0, (HEAP32[($0 + 236 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 32 | 0) >> 2] = wasm2js_i32$1;
     (wasm2js_i32$0 = $4, wasm2js_i32$1 = jdiv_round_up(Math_imul(HEAP32[($4 + 8 | 0) >> 2] | 0, HEAP32[($0 + 28 | 0) >> 2] | 0) | 0, HEAP32[($0 + 232 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 40 | 0) >> 2] = wasm2js_i32$1;
     $5 = jdiv_round_up(Math_imul(HEAP32[($4 + 12 | 0) >> 2] | 0, HEAP32[($0 + 32 | 0) >> 2] | 0) | 0, HEAP32[($0 + 236 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($4 + 48 | 0) >> 2] = 1;
     HEAP32[($4 + 44 | 0) >> 2] = $5;
     $7 = $7 + 1 | 0;
     if (($7 | 0) >= (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
      break label$11
     }
     $4 = $4 + 84 | 0;
     $5 = HEAP32[($0 + 232 | 0) >> 2] | 0;
     continue label$12;
    };
   }
   $7 = HEAP32[($0 + 236 | 0) >> 2] | 0;
  }
  (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, $7 << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 240 | 0) >> 2] = wasm2js_i32$1;
  label$13 : {
   label$14 : {
    label$15 : {
     $11 = HEAP32[($0 + 172 | 0) >> 2] | 0;
     if (!$11) {
      break label$15
     }
     label$16 : {
      label$17 : {
       if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0)) {
        break label$17
       }
       HEAP32[($0 + 228 | 0) >> 2] = 1;
       break label$16;
      }
      label$18 : {
       if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) > (0 | 0)) {
        break label$18
       }
       i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 19;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       $11 = HEAP32[($0 + 172 | 0) >> 2] | 0;
      }
      label$19 : {
       label$20 : {
        label$21 : {
         if (HEAP32[($11 + 20 | 0) >> 2] | 0) {
          break label$21
         }
         if ((HEAP32[($11 + 24 | 0) >> 2] | 0 | 0) == (63 | 0)) {
          break label$20
         }
        }
        $4 = 1;
        HEAP32[($0 + 228 | 0) >> 2] = 1;
        $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
        if (($5 | 0) < (1 | 0)) {
         break label$19
        }
        memset($2 | 0, 255 | 0, $5 << 8 | 0 | 0) | 0;
        break label$19;
       }
       $4 = 0;
       HEAP32[($0 + 228 | 0) >> 2] = 0;
       $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       if (($5 | 0) < (1 | 0)) {
        break label$19
       }
       $4 = 0;
       memset($2 + 2560 | 0 | 0, 0 | 0, $5 << 2 | 0 | 0) | 0;
      }
      label$22 : {
       if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) < (1 | 0)) {
        break label$22
       }
       $4 = 1;
       label$23 : while (1) {
        $6 = $4;
        label$24 : {
         label$25 : {
          $12 = HEAP32[$11 >> 2] | 0;
          if (($12 + -5 | 0) >>> 0 > -5 >>> 0) {
           break label$25
          }
          $4 = HEAP32[$0 >> 2] | 0;
          HEAP32[($4 + 24 | 0) >> 2] = $12;
          HEAP32[($4 + 20 | 0) >> 2] = 26;
          HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 4;
          FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          if (($12 | 0) >= (1 | 0)) {
           break label$25
          }
          $5 = 0;
          break label$24;
         }
         label$26 : {
          label$27 : {
           $4 = HEAP32[($11 + 4 | 0) >> 2] | 0;
           if (($4 | 0) < (0 | 0)) {
            break label$27
           }
           if (($4 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
            break label$26
           }
          }
          $4 = HEAP32[$0 >> 2] | 0;
          HEAP32[($4 + 24 | 0) >> 2] = $6;
          HEAP32[($4 + 20 | 0) >> 2] = 19;
          FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
         }
         $4 = 1;
         $5 = 1;
         if (($12 | 0) == (1 | 0)) {
          break label$24
         }
         label$28 : while (1) {
          label$29 : {
           label$30 : {
            $7 = $11 + ($4 << 2 | 0) | 0;
            $5 = HEAP32[($7 + 4 | 0) >> 2] | 0;
            if (($5 | 0) < (0 | 0)) {
             break label$30
            }
            if (($5 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
             break label$29
            }
           }
           $9 = HEAP32[$0 >> 2] | 0;
           HEAP32[($9 + 24 | 0) >> 2] = $6;
           HEAP32[($9 + 20 | 0) >> 2] = 19;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          label$31 : {
           if (($5 | 0) > (HEAP32[$7 >> 2] | 0 | 0)) {
            break label$31
           }
           $5 = HEAP32[$0 >> 2] | 0;
           HEAP32[($5 + 24 | 0) >> 2] = $6;
           HEAP32[($5 + 20 | 0) >> 2] = 19;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          $5 = 1;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($12 | 0)) {
           continue label$28
          }
          break label$28;
         };
        }
        $10 = HEAP32[($11 + 32 | 0) >> 2] | 0;
        $13 = HEAP32[($11 + 28 | 0) >> 2] | 0;
        $8 = HEAP32[($11 + 24 | 0) >> 2] | 0;
        $14 = HEAP32[($11 + 20 | 0) >> 2] | 0;
        label$32 : {
         label$33 : {
          if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
           break label$33
          }
          label$34 : {
           label$35 : {
            if ($14 >>> 0 > 63 >>> 0) {
             break label$35
            }
            if (($8 | 0) < ($14 | 0)) {
             break label$35
            }
            if (($8 | 0) > (63 | 0)) {
             break label$35
            }
            if (($13 | 0) < (0 | 0)) {
             break label$35
            }
            if (($13 | 0) > (10 | 0)) {
             break label$35
            }
            if (($10 | 0) < (0 | 0)) {
             break label$35
            }
            if (($10 | 0) < (11 | 0)) {
             break label$34
            }
           }
           $4 = HEAP32[$0 >> 2] | 0;
           HEAP32[($4 + 24 | 0) >> 2] = $6;
           HEAP32[($4 + 20 | 0) >> 2] = 17;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          label$36 : {
           label$37 : {
            label$38 : {
             if ($14) {
              break label$38
             }
             if ($8) {
              break label$37
             }
             break label$36;
            }
            if (($12 | 0) == (1 | 0)) {
             break label$36
            }
           }
           $4 = HEAP32[$0 >> 2] | 0;
           HEAP32[($4 + 24 | 0) >> 2] = $6;
           HEAP32[($4 + 20 | 0) >> 2] = 17;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          if (!$5) {
           break label$32
          }
          $15 = $14 + 1 | 0;
          $16 = (($8 - $14 | 0) + 1 | 0) & 1 | 0;
          $17 = ($10 | 0) == ($13 + -1 | 0 | 0);
          $18 = 0;
          label$39 : while (1) {
           $7 = $2 + ((HEAP32[(($11 + ($18 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) << 8 | 0) | 0;
           label$40 : {
            if (!$14) {
             break label$40
            }
            if ((HEAP32[$7 >> 2] | 0 | 0) > (-1 | 0)) {
             break label$40
            }
            $4 = HEAP32[$0 >> 2] | 0;
            HEAP32[($4 + 24 | 0) >> 2] = $6;
            HEAP32[($4 + 20 | 0) >> 2] = 17;
            FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
           }
           label$41 : {
            if (($8 | 0) < ($14 | 0)) {
             break label$41
            }
            $4 = $14;
            label$42 : {
             if ($13) {
              break label$42
             }
             label$43 : {
              if ($17 & 1 | 0) {
               break label$43
              }
              $4 = $14;
              label$44 : {
               if (!$16) {
                break label$44
               }
               label$45 : {
                $4 = $7 + ($14 << 2 | 0) | 0;
                if ((HEAP32[$4 >> 2] | 0 | 0) < (0 | 0)) {
                 break label$45
                }
                $5 = HEAP32[$0 >> 2] | 0;
                HEAP32[($5 + 24 | 0) >> 2] = $6;
                HEAP32[($5 + 20 | 0) >> 2] = 17;
                FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
               }
               HEAP32[$4 >> 2] = $10;
               $4 = $15;
              }
              if (($8 | 0) == ($14 | 0)) {
               break label$41
              }
              label$46 : while (1) {
               label$47 : {
                $5 = $7 + ($4 << 2 | 0) | 0;
                if ((HEAP32[$5 >> 2] | 0 | 0) < (0 | 0)) {
                 break label$47
                }
                $9 = HEAP32[$0 >> 2] | 0;
                HEAP32[($9 + 24 | 0) >> 2] = $6;
                HEAP32[($9 + 20 | 0) >> 2] = 17;
                FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
               }
               HEAP32[$5 >> 2] = $10;
               label$48 : {
                $5 = $4 + 1 | 0;
                $9 = $7 + ($5 << 2 | 0) | 0;
                if ((HEAP32[$9 >> 2] | 0 | 0) < (0 | 0)) {
                 break label$48
                }
                $19 = HEAP32[$0 >> 2] | 0;
                HEAP32[($19 + 24 | 0) >> 2] = $6;
                HEAP32[($19 + 20 | 0) >> 2] = 17;
                FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
               }
               HEAP32[$9 >> 2] = $10;
               $4 = $4 + 2 | 0;
               if (($5 | 0) != ($8 | 0)) {
                continue label$46
               }
               break label$41;
              };
             }
             $4 = $14;
             label$49 : {
              if (!$16) {
               break label$49
              }
              label$50 : {
               $4 = $7 + ($14 << 2 | 0) | 0;
               if ((HEAP32[$4 >> 2] | 0 | 0) < (1 | 0)) {
                break label$50
               }
               $5 = HEAP32[$0 >> 2] | 0;
               HEAP32[($5 + 24 | 0) >> 2] = $6;
               HEAP32[($5 + 20 | 0) >> 2] = 17;
               FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
              }
              HEAP32[$4 >> 2] = $10;
              $4 = $15;
             }
             if (($8 | 0) == ($14 | 0)) {
              break label$41
             }
             label$51 : while (1) {
              label$52 : {
               $5 = $7 + ($4 << 2 | 0) | 0;
               if ((HEAP32[$5 >> 2] | 0 | 0) < (1 | 0)) {
                break label$52
               }
               $9 = HEAP32[$0 >> 2] | 0;
               HEAP32[($9 + 24 | 0) >> 2] = $6;
               HEAP32[($9 + 20 | 0) >> 2] = 17;
               FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
              }
              HEAP32[$5 >> 2] = $10;
              label$53 : {
               $5 = $4 + 1 | 0;
               $9 = $7 + ($5 << 2 | 0) | 0;
               if ((HEAP32[$9 >> 2] | 0 | 0) < (1 | 0)) {
                break label$53
               }
               $19 = HEAP32[$0 >> 2] | 0;
               HEAP32[($19 + 24 | 0) >> 2] = $6;
               HEAP32[($19 + 20 | 0) >> 2] = 17;
               FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
              }
              HEAP32[$9 >> 2] = $10;
              $4 = $4 + 2 | 0;
              if (($5 | 0) != ($8 | 0)) {
               continue label$51
              }
              break label$41;
             };
            }
            label$54 : while (1) {
             label$55 : {
              label$56 : {
               $5 = $7 + ($4 << 2 | 0) | 0;
               $9 = HEAP32[$5 >> 2] | 0;
               if (($9 | 0) < (0 | 0)) {
                break label$56
               }
               if ($17 & ($13 | 0) == ($9 | 0) | 0) {
                break label$55
               }
              }
              $9 = HEAP32[$0 >> 2] | 0;
              HEAP32[($9 + 24 | 0) >> 2] = $6;
              HEAP32[($9 + 20 | 0) >> 2] = 17;
              FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
             }
             HEAP32[$5 >> 2] = $10;
             $5 = ($4 | 0) != ($8 | 0);
             $4 = $4 + 1 | 0;
             if ($5) {
              continue label$54
             }
             break label$54;
            };
           }
           $18 = $18 + 1 | 0;
           if (($18 | 0) != ($12 | 0)) {
            continue label$39
           }
           break label$32;
          };
         }
         label$57 : {
          label$58 : {
           if ($14) {
            break label$58
           }
           if (($8 | 0) != (63 | 0)) {
            break label$58
           }
           if ($13) {
            break label$58
           }
           if (!$10) {
            break label$57
           }
          }
          $4 = HEAP32[$0 >> 2] | 0;
          HEAP32[($4 + 24 | 0) >> 2] = $6;
          HEAP32[($4 + 20 | 0) >> 2] = 17;
          FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
         }
         $4 = 0;
         if (!$5) {
          break label$32
         }
         label$59 : while (1) {
          label$60 : {
           $5 = ($2 + 2560 | 0) + ((HEAP32[(($11 + ($4 << 2 | 0) | 0) + 4 | 0) >> 2] | 0) << 2 | 0) | 0;
           if (!(HEAP32[$5 >> 2] | 0)) {
            break label$60
           }
           $7 = HEAP32[$0 >> 2] | 0;
           HEAP32[($7 + 24 | 0) >> 2] = $6;
           HEAP32[($7 + 20 | 0) >> 2] = 19;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          HEAP32[$5 >> 2] = 1;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($12 | 0)) {
           continue label$59
          }
          break label$59;
         };
        }
        $4 = $6 + 1 | 0;
        $11 = $11 + 36 | 0;
        if (($6 | 0) < (HEAP32[($0 + 168 | 0) >> 2] | 0 | 0)) {
         continue label$23
        }
        break label$23;
       };
       $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       $4 = HEAP32[($0 + 228 | 0) >> 2] | 0;
      }
      label$61 : {
       if (!$4) {
        break label$61
       }
       $4 = 0;
       if (($5 | 0) <= (0 | 0)) {
        break label$16
       }
       label$62 : while (1) {
        label$63 : {
         if ((HEAP32[($2 + ($4 << 8 | 0) | 0) >> 2] | 0 | 0) > (-1 | 0)) {
          break label$63
         }
         $5 = HEAP32[$0 >> 2] | 0;
         HEAP32[($5 + 20 | 0) >> 2] = 45;
         FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
         $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
        }
        $4 = $4 + 1 | 0;
        if (($4 | 0) < ($5 | 0)) {
         continue label$62
        }
        break label$16;
       };
      }
      $4 = 0;
      if (($5 | 0) <= (0 | 0)) {
       break label$16
      }
      label$64 : while (1) {
       label$65 : {
        if (HEAP32[(($2 + 2560 | 0) + ($4 << 2 | 0) | 0) >> 2] | 0) {
         break label$65
        }
        $5 = HEAP32[$0 >> 2] | 0;
        HEAP32[($5 + 20 | 0) >> 2] = 45;
        FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
        $5 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) < ($5 | 0)) {
        continue label$64
       }
       break label$64;
      };
     }
     if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
      break label$13
     }
     if (HEAP32[($0 + 180 | 0) >> 2] | 0) {
      break label$13
     }
     $4 = $0 + 184 | 0;
     break label$14;
    }
    HEAP32[($0 + 228 | 0) >> 2] = 0;
    $4 = $0 + 168 | 0;
   }
   HEAP32[$4 >> 2] = 1;
  }
  label$66 : {
   label$67 : {
    label$68 : {
     label$69 : {
      label$70 : {
       if (!$1) {
        break label$70
       }
       label$71 : {
        if (!(HEAP32[($0 + 184 | 0) >> 2] | 0)) {
         break label$71
        }
        HEAP32[($3 + 4220 | 0) >> 2] = 0;
        i64toi32_i32$1 = $3;
        i64toi32_i32$0 = 0;
        HEAP32[($3 + 4208 | 0) >> 2] = 1;
        HEAP32[($3 + 4212 | 0) >> 2] = i64toi32_i32$0;
        break label$68;
       }
       HEAP32[($3 + 4220 | 0) >> 2] = 0;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = 0;
       HEAP32[($3 + 4208 | 0) >> 2] = 2;
       HEAP32[($3 + 4212 | 0) >> 2] = i64toi32_i32$0;
       break label$69;
      }
      HEAP32[($3 + 4208 | 0) >> 2] = 0;
      $4 = HEAP32[($0 + 184 | 0) >> 2] | 0;
      HEAP32[($3 + 4212 | 0) >> 2] = 0;
      HEAP32[($3 + 4220 | 0) >> 2] = 0;
      if ($4) {
       break label$68
      }
     }
     $4 = HEAP32[($0 + 168 | 0) >> 2] | 0;
     HEAP32[($3 + 5024 | 0) >> 2] = 138270;
     HEAP32[($3 + 4216 | 0) >> 2] = $4;
     HEAP32[($3 + 4224 | 0) >> 2] = 0;
     $5 = HEAP32[($0 + 332 | 0) >> 2] | 0;
     if (!(HEAP32[($5 + 24 | 0) >> 2] | 0)) {
      break label$66
     }
     $0 = Math_imul(Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0 ? 2 : 1, HEAP32[($0 + 60 | 0) >> 2] | 0), HEAP32[($5 + 4168 | 0) >> 2] | 0) + 1 | 0;
     $7 = $4;
     break label$67;
    }
    $4 = HEAP32[($0 + 168 | 0) >> 2] | 0;
    HEAP32[($3 + 5024 | 0) >> 2] = 138270;
    HEAP32[($3 + 4224 | 0) >> 2] = 0;
    $7 = $4 << 1 | 0;
    HEAP32[($3 + 4216 | 0) >> 2] = $7;
    $5 = HEAP32[($0 + 332 | 0) >> 2] | 0;
    if (!(HEAP32[($5 + 24 | 0) >> 2] | 0)) {
     break label$66
    }
    $0 = Math_imul(Math_imul(HEAP32[($5 + 40 | 0) >> 2] | 0 ? 4 : 2, HEAP32[($0 + 60 | 0) >> 2] | 0), HEAP32[($5 + 4168 | 0) >> 2] | 0);
   }
   HEAP32[($3 + 4224 | 0) >> 2] = $0;
   HEAP32[($3 + 4216 | 0) >> 2] = $7 + $0 | 0;
  }
  label$72 : {
   if (!(HEAP32[($5 + 20 | 0) >> 2] | 0)) {
    break label$72
   }
   HEAP32[($3 + 5012 | 0) >> 2] = 0;
   if (($4 | 0) < (1 | 0)) {
    break label$72
   }
   memset($3 + 4228 | 0 | 0, 0 | 0, $4 << 2 | 0 | 0) | 0;
  }
  __stack_pointer = $2 + 2608 | 0;
 }
 
 function finish_pass_master($0) {
  $0 = $0 | 0;
  var $5 = 0, $4 = 0, $3 = 0, $6 = 0, $10 = 0, $11 = 0, $20 = 0.0, $1 = 0, $14 = 0, $7 = 0, $16 = 0, $9 = 0, $12 = 0, $13 = 0, $17 = 0, $2 = 0, $15 = 0, $18 = 0, $8 = 0, $19 = 0, $740 = 0;
  $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 364 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
  label$1 : {
   label$2 : {
    switch (HEAP32[($1 + 4208 | 0) >> 2] | 0 | 0) {
    case 0:
     label$6 : {
      if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0)) {
       break label$6
      }
      HEAP32[($1 + 4208 | 0) >> 2] = 3;
      break label$1;
     }
     HEAP32[($1 + 4208 | 0) >> 2] = 2;
     if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
      break label$1
     }
     HEAP32[($1 + 4220 | 0) >> 2] = (HEAP32[($1 + 4220 | 0) >> 2] | 0) + 1 | 0;
     break label$1;
    case 1:
     HEAP32[($1 + 4208 | 0) >> 2] = (HEAP32[($1 + 4212 | 0) >> 2] | 0 | 0) < ((HEAP32[($1 + 4224 | 0) >> 2] | 0) + -1 | 0 | 0) ? 3 : 2;
     break label$1;
    case 2:
     label$7 : {
      if (!(HEAP32[($0 + 184 | 0) >> 2] | 0)) {
       break label$7
      }
      HEAP32[($1 + 4208 | 0) >> 2] = 1;
     }
     label$8 : {
      if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0)) {
       break label$8
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0]($0);
      HEAP32[($0 + 24 | 0) >> 2] = HEAP32[($1 + 5020 | 0) >> 2] | 0;
      $2 = HEAP32[($0 + 184 | 0) >> 2] | 0 ? 2 : 1;
      $3 = HEAP32[($0 + 332 | 0) >> 2] | 0;
      $4 = HEAP32[($3 + 4172 | 0) >> 2] | 0;
      $5 = (HEAP32[($3 + 4180 | 0) >> 2] | 0) + $4 | 0;
      $6 = $5 + 4 | 0;
      $7 = $6 + Math_imul(HEAP32[($3 + 4192 | 0) >> 2] | 0, 6) | 0;
      $8 = Math_imul(HEAP32[($3 + 4188 | 0) >> 2] | 0, 3) + (HEAP32[($3 + 4176 | 0) >> 2] | 0) | 0;
      $9 = $8 + 2 | 0;
      label$9 : {
       label$10 : {
        $10 = HEAP32[($1 + 4220 | 0) >> 2] | 0;
        if (($10 | 0) < (1 | 0)) {
         break label$10
        }
        if (($10 | 0) >= ($9 | 0)) {
         break label$10
        }
        $11 = 0;
        $12 = ($10 >>> 0) / (3 >>> 0) | 0;
        if (($10 - Math_imul($12, 3) | 0 | 0) != (2 | 0)) {
         break label$9
        }
        $4 = $3 + ($10 << 2 | 0) | 0;
        $5 = (HEAP32[($4 + 4484 | 0) >> 2] | 0) + (HEAP32[($4 + 4480 | 0) >> 2] | 0) | 0;
        label$11 : {
         label$12 : {
          if ($10 >>> 0 < 3 >>> 0) {
           break label$12
          }
          $13 = $12 & 3 | 0;
          $14 = 0;
          label$13 : {
           label$14 : {
            if (($12 + -1 | 0) >>> 0 >= 3 >>> 0) {
             break label$14
            }
            $4 = 0;
            break label$13;
           }
           $15 = $12 & 2147483644 | 0;
           $4 = 0;
           $6 = $3 + 4484 | 0;
           $16 = 0;
           label$15 : while (1) {
            $5 = (HEAP32[((Math_imul($4 | 3 | 0, 12) + $6 | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[((Math_imul($4 | 2 | 0, 12) + $6 | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[((Math_imul($4 | 1 | 0, 12) + $6 | 0) + 12 | 0) >> 2] | 0) + ((HEAP32[($6 + (Math_imul($4, 12) | 12 | 0) | 0) >> 2] | 0) + $5 | 0) | 0) | 0) | 0;
            $4 = $4 + 4 | 0;
            $16 = $16 + 4 | 0;
            if (($16 | 0) != ($15 | 0)) {
             continue label$15
            }
            break label$15;
           };
          }
          label$16 : {
           if (!$13) {
            break label$16
           }
           label$17 : while (1) {
            $5 = (HEAP32[((Math_imul($4, 12) + $3 | 0) + 4496 | 0) >> 2] | 0) + $5 | 0;
            $4 = $4 + 1 | 0;
            $14 = $14 + 1 | 0;
            if (($14 | 0) != ($13 | 0)) {
             continue label$17
            }
            break label$17;
           };
          }
          if (($10 + 2 | 0) >>> 0 < 5 >>> 0) {
           break label$12
          }
          if ($5 >>> 0 >= (HEAP32[($3 + 4996 | 0) >> 2] | 0) >>> 0) {
           break label$11
          }
         }
         HEAP32[($3 + 5008 | 0) >> 2] = $12;
         HEAP32[($3 + 4996 | 0) >> 2] = $5;
         break label$9;
        }
        HEAP32[($3 + 4220 | 0) >> 2] = $8 + 1 | 0;
        HEAP32[($3 + 4212 | 0) >> 2] = (Math_imul($2, $9) + (HEAP32[($3 + 4224 | 0) >> 2] | 0) | 0) + -1 | 0;
        $11 = 0;
        break label$9;
       }
       $14 = $10 + 1 | 0;
       label$18 : {
        if (($10 | 0) < ($9 | 0)) {
         break label$18
        }
        if (($4 | 0) <= ($10 | 0)) {
         break label$18
        }
        label$19 : {
         if (($9 | 0) != ($10 | 0)) {
          break label$19
         }
         $11 = 0;
         HEAP32[($3 + 5e3 | 0) >> 2] = 0;
         HEAP32[($3 + 4996 | 0) >> 2] = HEAP32[(($3 + ($10 << 2 | 0) | 0) + 4484 | 0) >> 2] | 0;
         break label$9;
        }
        $11 = 0;
        $5 = $14 - $9 | 0;
        if (($5 & -2147483647 | 0 | 0) != (1 | 0)) {
         break label$9
        }
        $5 = $5 >>> 1 | 0;
        label$20 : {
         $6 = $3 + ($10 << 2 | 0) | 0;
         $6 = (HEAP32[($6 + 4484 | 0) >> 2] | 0) + (HEAP32[($6 + 4480 | 0) >> 2] | 0) | 0;
         if ($6 >>> 0 >= (HEAP32[($3 + 4996 | 0) >> 2] | 0) >>> 0) {
          break label$20
         }
         HEAP32[($3 + 5e3 | 0) >> 2] = $5;
         HEAP32[($3 + 4996 | 0) >> 2] = $6;
        }
        label$21 : {
         label$22 : {
          switch ($5 + -2 | 0 | 0) {
          case 0:
           if (!(HEAP32[($3 + 5e3 | 0) >> 2] | 0)) {
            break label$21
           }
           break label$9;
          case 1:
           if ((HEAP32[($3 + 5e3 | 0) >> 2] | 0 | 0) != (2 | 0)) {
            break label$21
           }
           break label$9;
          case 2:
           break label$22;
          default:
           break label$9;
          };
         }
         if ((HEAP32[($3 + 5e3 | 0) >> 2] | 0 | 0) == (4 | 0)) {
          break label$9
         }
        }
        HEAP32[($3 + 4220 | 0) >> 2] = $4 + -1 | 0;
        $4 = Math_imul($2, $4) + (HEAP32[($3 + 4224 | 0) >> 2] | 0) | 0;
        HEAP32[($3 + 4212 | 0) >> 2] = $4 + -1 | 0;
        HEAP32[($3 + 16 | 0) >> 2] = ($4 | 0) == (HEAP32[($3 + 4216 | 0) >> 2] | 0 | 0);
        break label$9;
       }
       $11 = 0;
       $16 = HEAP32[($0 + 168 | 0) >> 2] | 0;
       if (($16 | 0) <= ($4 | 0)) {
        break label$9
       }
       label$25 : {
        if (($14 | 0) != ($5 | 0)) {
         break label$25
        }
        $5 = $3 + ($4 << 2 | 0) | 0;
        HEAP32[($3 + 5016 | 0) >> 2] = (HEAP32[($5 + 4484 | 0) >> 2] | 0) >>> 0 <= ((HEAP32[($5 + 4492 | 0) >> 2] | 0) + (HEAP32[($5 + 4488 | 0) >> 2] | 0) | 0) >>> 0;
        $11 = $4;
        break label$9;
       }
       label$26 : {
        if (($10 | 0) < ($5 | 0)) {
         break label$26
        }
        if (($10 | 0) >= ($7 | 0)) {
         break label$26
        }
        label$27 : {
         $17 = $14 - $5 | 0;
         $18 = ($17 | 0) / (6 | 0) | 0;
         if (($17 - Math_imul($18, 6) | 0 | 0) == (4 | 0)) {
          break label$27
         }
         $11 = $5;
         break label$9;
        }
        $4 = $3 + ($10 << 2 | 0) | 0;
        $11 = (((HEAP32[($4 + 4476 | 0) >> 2] | 0) + (HEAP32[($4 + 4472 | 0) >> 2] | 0) | 0) + (HEAP32[($4 + 4480 | 0) >> 2] | 0) | 0) + (HEAP32[($4 + 4484 | 0) >> 2] | 0) | 0;
        label$28 : {
         if (($17 | 0) < (6 | 0)) {
          break label$28
         }
         $19 = $18 & 1 | 0;
         $14 = $5 + 5 | 0;
         label$29 : {
          label$30 : {
           if (($17 + -6 | 0) >>> 0 >= 6 >>> 0) {
            break label$30
           }
           $4 = 0;
           break label$29;
          }
          $12 = $18 & -2 | 0;
          $4 = 0;
          $10 = $3 + 4484 | 0;
          $16 = 0;
          label$31 : while (1) {
           $13 = Math_imul($4 | 1 | 0, 6);
           $15 = Math_imul($4, 6);
           $11 = ((HEAP32[($10 + (($13 + $6 | 0) << 2 | 0) | 0) >> 2] | 0) + (((HEAP32[($10 + (($15 + $6 | 0) << 2 | 0) | 0) >> 2] | 0) + $11 | 0) + (HEAP32[($10 + (($14 + $15 | 0) << 2 | 0) | 0) >> 2] | 0) | 0) | 0) + (HEAP32[($10 + (($14 + $13 | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
           $4 = $4 + 2 | 0;
           $16 = $16 + 2 | 0;
           if (($16 | 0) != ($12 | 0)) {
            continue label$31
           }
           break label$31;
          };
         }
         if (!$19) {
          break label$28
         }
         $10 = $3 + 4484 | 0;
         $4 = Math_imul($4, 6);
         $11 = ((HEAP32[($10 + (($4 + $6 | 0) << 2 | 0) | 0) >> 2] | 0) + $11 | 0) + (HEAP32[($10 + (($14 + $4 | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
        }
        label$32 : {
         label$33 : {
          if (($17 + 5 | 0) >>> 0 < 11 >>> 0) {
           break label$33
          }
          if ($11 >>> 0 >= (HEAP32[($3 + 4996 | 0) >> 2] | 0) >>> 0) {
           break label$32
          }
         }
         HEAP32[($3 + 5012 | 0) >> 2] = $18;
         HEAP32[($3 + 4996 | 0) >> 2] = $11;
         $11 = $5;
         break label$9;
        }
        HEAP32[($3 + 4220 | 0) >> 2] = $7 + -1 | 0;
        HEAP32[($3 + 4212 | 0) >> 2] = (Math_imul($2, $7) + (HEAP32[($3 + 4224 | 0) >> 2] | 0) | 0) + -1 | 0;
        $11 = $5;
        break label$9;
       }
       if (($10 | 0) < ($7 | 0)) {
        break label$9
       }
       if (($16 | 0) <= ($10 | 0)) {
        break label$9
       }
       label$34 : {
        if (($7 + 1 | 0 | 0) != ($10 | 0)) {
         break label$34
        }
        $11 = 0;
        HEAP32[($3 + 5004 | 0) >> 2] = 0;
        $4 = $3 + ($10 << 2 | 0) | 0;
        $5 = HEAP32[($4 + 4480 | 0) >> 2] | 0;
        HEAP32[($3 + 4996 | 0) >> 2] = $5;
        HEAP32[($3 + 4996 | 0) >> 2] = $5 + (HEAP32[($4 + 4484 | 0) >> 2] | 0) | 0;
        break label$9;
       }
       $4 = $14 - $7 | 0;
       if (($4 & -2147483645 | 0 | 0) != (2 | 0)) {
        break label$9
       }
       $5 = $4 >>> 2 | 0;
       label$35 : {
        $4 = $3 + ($10 << 2 | 0) | 0;
        $4 = (((HEAP32[($4 + 4476 | 0) >> 2] | 0) + (HEAP32[($4 + 4472 | 0) >> 2] | 0) | 0) + (HEAP32[($4 + 4480 | 0) >> 2] | 0) | 0) + (HEAP32[($4 + 4484 | 0) >> 2] | 0) | 0;
        if ($4 >>> 0 >= (HEAP32[($3 + 4996 | 0) >> 2] | 0) >>> 0) {
         break label$35
        }
        HEAP32[($3 + 5004 | 0) >> 2] = $5;
        HEAP32[($3 + 4996 | 0) >> 2] = $4;
       }
       label$36 : {
        label$37 : {
         switch ($5 + -2 | 0 | 0) {
         case 0:
          if (!(HEAP32[($3 + 5004 | 0) >> 2] | 0)) {
           break label$36
          }
          break label$9;
         case 1:
          if ((HEAP32[($3 + 5004 | 0) >> 2] | 0 | 0) != (2 | 0)) {
           break label$36
          }
          break label$9;
         case 2:
          break label$37;
         default:
          break label$9;
         };
        }
        if ((HEAP32[($3 + 5004 | 0) >> 2] | 0 | 0) == (4 | 0)) {
         break label$9
        }
       }
       HEAP32[($3 + 4220 | 0) >> 2] = $16 + -1 | 0;
       $4 = Math_imul($16, $2) + (HEAP32[($3 + 4224 | 0) >> 2] | 0) | 0;
       HEAP32[($3 + 4212 | 0) >> 2] = $4 + -1 | 0;
       HEAP32[($3 + 16 | 0) >> 2] = ($4 | 0) == (HEAP32[($3 + 4216 | 0) >> 2] | 0 | 0);
      }
      if ((HEAP32[($3 + 4220 | 0) >> 2] | 0 | 0) != ((HEAP32[($0 + 168 | 0) >> 2] | 0) + -1 | 0 | 0)) {
       break label$8
      }
      $4 = HEAP32[($3 + 5012 | 0) >> 2] | 0;
      $5 = HEAP32[($3 + 5008 | 0) >> 2] | 0;
      copy_buffer($0 | 0, 0 | 0);
      $6 = ($5 | 0) < ($4 | 0);
      label$40 : {
       $14 = HEAP32[($0 + 332 | 0) >> 2] | 0;
       $10 = HEAP32[($14 + 4172 | 0) >> 2] | 0;
       if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) <= ($10 | 0)) {
        break label$40
       }
       $14 = HEAP32[($14 + 4156 | 0) >> 2] | 0;
       if (!$14) {
        break label$40
       }
       label$41 : {
        label$42 : {
         if (!(HEAP32[($3 + 5016 | 0) >> 2] | 0)) {
          break label$42
         }
         $11 = $10;
         if (($14 | 0) != (1 | 0)) {
          break label$41
         }
        }
        copy_buffer($0 | 0, $10 + 1 | 0 | 0);
        $11 = $10 + 2 | 0;
       }
       copy_buffer($0 | 0, $11 | 0);
       $11 = $10;
      }
      $4 = $6 ? $5 : $4;
      label$43 : {
       $5 = HEAP32[($3 + 5e3 | 0) >> 2] | 0;
       if (!$5) {
        break label$43
       }
       copy_buffer($0 | 0, ($8 + ($5 << 1 | 0) | 0) + 1 | 0 | 0);
       $9 = ((HEAP32[($3 + 5e3 | 0) >> 2] | 0) << 1 | 0) + $9 | 0;
      }
      copy_buffer($0 | 0, $9 | 0);
      label$44 : {
       $5 = HEAP32[($3 + 5008 | 0) >> 2] | 0;
       if (($5 | 0) <= ($4 | 0)) {
        break label$44
       }
       label$45 : while (1) {
        $5 = $5 + -1 | 0;
        copy_buffer($0 | 0, Math_imul($5, 3) + 3 | 0 | 0);
        if (($5 | 0) > ($4 | 0)) {
         continue label$45
        }
        break label$45;
       };
      }
      label$46 : {
       if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4172 | 0) >> 2] | 0 | 0)) {
        break label$46
       }
       label$47 : {
        label$48 : {
         $5 = HEAP32[($3 + 5004 | 0) >> 2] | 0;
         if ($5) {
          break label$48
         }
         copy_buffer($0 | 0, $7 | 0);
         $5 = $7 + 1 | 0;
         break label$47;
        }
        copy_buffer($0 | 0, ($7 + ($5 << 2 | 0) | 0) + -2 | 0 | 0);
        copy_buffer($0 | 0, ($7 + ((HEAP32[($3 + 5004 | 0) >> 2] | 0) << 2 | 0) | 0) + -1 | 0 | 0);
        copy_buffer($0 | 0, ((HEAP32[($3 + 5004 | 0) >> 2] | 0) << 2 | 0) + $7 | 0 | 0);
        $5 = ($7 + ((HEAP32[($3 + 5004 | 0) >> 2] | 0) << 2 | 0) | 0) + 1 | 0;
       }
       copy_buffer($0 | 0, $5 | 0);
       $5 = HEAP32[($0 + 332 | 0) >> 2] | 0;
       $11 = (HEAP32[($5 + 4180 | 0) >> 2] | 0) + (HEAP32[($5 + 4172 | 0) >> 2] | 0) | 0;
       $5 = HEAP32[($3 + 5012 | 0) >> 2] | 0;
       if (($5 | 0) <= ($4 | 0)) {
        break label$46
       }
       label$49 : while (1) {
        $5 = $5 + -1 | 0;
        $6 = Math_imul($5, 6) + $11 | 0;
        copy_buffer($0 | 0, $6 + 4 | 0 | 0);
        copy_buffer($0 | 0, $6 + 5 | 0 | 0);
        if (($5 | 0) > ($4 | 0)) {
         continue label$49
        }
        break label$49;
       };
      }
      $5 = 0;
      label$50 : {
       if (($4 | 0) <= (0 | 0)) {
        break label$50
       }
       label$51 : while (1) {
        $6 = $4 + -1 | 0;
        copy_buffer($0 | 0, Math_imul($6, 3) + 3 | 0 | 0);
        label$52 : {
         if ((HEAP32[($0 + 168 | 0) >> 2] | 0 | 0) <= (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4172 | 0) >> 2] | 0 | 0)) {
          break label$52
         }
         $10 = Math_imul($6, 6) + $11 | 0;
         copy_buffer($0 | 0, $10 + 4 | 0 | 0);
         copy_buffer($0 | 0, $10 + 5 | 0 | 0);
        }
        $10 = $4 >>> 0 > 1 >>> 0;
        $4 = $6;
        if ($10) {
         continue label$51
        }
        break label$51;
       };
      }
      $4 = HEAP32[($0 + 168 | 0) >> 2] | 0;
      if (($4 | 0) <= (0 | 0)) {
       break label$8
      }
      label$53 : while (1) {
       label$54 : {
        $6 = HEAP32[(($3 + ($5 << 2 | 0) | 0) + 4228 | 0) >> 2] | 0;
        if (!$6) {
         break label$54
        }
        free($6 | 0);
        $4 = HEAP32[($0 + 168 | 0) >> 2] | 0;
       }
       $5 = $5 + 1 | 0;
       if (($5 | 0) < ($4 | 0)) {
        continue label$53
       }
       break label$53;
      };
     }
     HEAP32[($1 + 4220 | 0) >> 2] = (HEAP32[($1 + 4220 | 0) >> 2] | 0) + 1 | 0;
     break label$1;
    case 3:
     break label$2;
    default:
     break label$1;
    };
   }
   $4 = HEAP32[($1 + 4212 | 0) >> 2] | 0;
   $5 = 1;
   label$55 : {
    if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
     break label$55
    }
    $5 = ($4 | 0) < ((HEAP32[($1 + 4224 | 0) >> 2] | 0) + -1 | 0 | 0) ? 3 : 2;
   }
   HEAP32[($1 + 4208 | 0) >> 2] = $5;
   $740 = $4 + 1 | 0;
   $4 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   if (($740 | 0) % (Math_imul(HEAP32[($4 + 40 | 0) >> 2] | 0 ? 4 : 2, HEAP32[($0 + 60 | 0) >> 2] | 0) | 0) | 0) {
    break label$1
   }
   if (!(HEAP32[($4 + 48 | 0) >> 2] | 0)) {
    break label$1
   }
   $5 = 1;
   label$56 : while (1) {
    label$57 : {
     $6 = $4 + ($5 << 3 | 0) | 0;
     $20 = +HEAPF64[($6 + 2104 | 0) >> 3];
     if ($20 == 0.0) {
      break label$57
     }
     label$58 : {
      label$59 : {
       $20 = +HEAPF64[($6 + 56 | 0) >> 3] / $20 + .5;
       if (!(Math_abs($20) < 2147483648.0)) {
        break label$59
       }
       $6 = ~~$20;
       break label$58;
      }
      $6 = -2147483648;
     }
     $6 = ($6 | 0) < (254 | 0) ? $6 : 254;
     HEAP16[((HEAP32[($0 + 72 | 0) >> 2] | 0) + ($5 << 1 | 0) | 0) >> 1] = ($6 | 0) > (1 | 0) ? $6 : 1;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != (64 | 0)) {
     continue label$56
    }
    break label$56;
   };
   $5 = 1;
   label$60 : while (1) {
    label$61 : {
     $6 = $4 + ($5 << 3 | 0) | 0;
     $20 = +HEAPF64[($6 + 2616 | 0) >> 3];
     if ($20 == 0.0) {
      break label$61
     }
     label$62 : {
      label$63 : {
       $20 = +HEAPF64[($6 + 568 | 0) >> 3] / $20 + .5;
       if (!(Math_abs($20) < 2147483648.0)) {
        break label$63
       }
       $6 = ~~$20;
       break label$62;
      }
      $6 = -2147483648;
     }
     $6 = ($6 | 0) < (254 | 0) ? $6 : 254;
     HEAP16[((HEAP32[($0 + 76 | 0) >> 2] | 0) + ($5 << 1 | 0) | 0) >> 1] = ($6 | 0) > (1 | 0) ? $6 : 1;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != (64 | 0)) {
     continue label$60
    }
    break label$60;
   };
   $5 = 1;
   label$64 : while (1) {
    label$65 : {
     $6 = $4 + ($5 << 3 | 0) | 0;
     $20 = +HEAPF64[($6 + 3128 | 0) >> 3];
     if ($20 == 0.0) {
      break label$65
     }
     label$66 : {
      label$67 : {
       $20 = +HEAPF64[($6 + 1080 | 0) >> 3] / $20 + .5;
       if (!(Math_abs($20) < 2147483648.0)) {
        break label$67
       }
       $6 = ~~$20;
       break label$66;
      }
      $6 = -2147483648;
     }
     $6 = ($6 | 0) < (254 | 0) ? $6 : 254;
     HEAP16[((HEAP32[($0 + 80 | 0) >> 2] | 0) + ($5 << 1 | 0) | 0) >> 1] = ($6 | 0) > (1 | 0) ? $6 : 1;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != (64 | 0)) {
     continue label$64
    }
    break label$64;
   };
   $5 = 1;
   label$68 : while (1) {
    label$69 : {
     $6 = $4 + ($5 << 3 | 0) | 0;
     $20 = +HEAPF64[($6 + 3640 | 0) >> 3];
     if ($20 == 0.0) {
      break label$69
     }
     label$70 : {
      label$71 : {
       $20 = +HEAPF64[($6 + 1592 | 0) >> 3] / $20 + .5;
       if (!(Math_abs($20) < 2147483648.0)) {
        break label$71
       }
       $6 = ~~$20;
       break label$70;
      }
      $6 = -2147483648;
     }
     $6 = ($6 | 0) < (254 | 0) ? $6 : 254;
     HEAP16[((HEAP32[($0 + 84 | 0) >> 2] | 0) + ($5 << 1 | 0) | 0) >> 1] = ($6 | 0) > (1 | 0) ? $6 : 1;
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) != (64 | 0)) {
     continue label$68
    }
    break label$68;
   };
  }
  HEAP32[($1 + 4212 | 0) >> 2] = (HEAP32[($1 + 4212 | 0) >> 2] | 0) + 1 | 0;
 }
 
 function pass_startup($0) {
  $0 = $0 | 0;
  HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0);
  FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
 }
 
 function prepare_for_pass($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 4212 | 0) >> 2] | 0;
  HEAP32[($1 + 44 | 0) >> 2] = ($2 | 0) < (HEAP32[($1 + 4224 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    switch (HEAP32[($1 + 4208 | 0) >> 2] | 0 | 0) {
    case 0:
     select_scan_parameters($0 | 0);
     per_scan_setup($0 | 0);
     label$7 : {
      if (HEAP32[($0 + 176 | 0) >> 2] | 0) {
       break label$7
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 352 | 0) >> 2] | 0) >> 2] | 0 | 0]($0);
      FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 356 | 0) >> 2] | 0) >> 2] | 0 | 0]($0);
      FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 340 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0);
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 360 | 0) >> 2] | 0) >> 2] | 0 | 0]($0);
     $2 = HEAP32[(HEAP32[($0 + 364 | 0) >> 2] | 0) >> 2] | 0;
     label$8 : {
      label$9 : {
       if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
        break label$9
       }
       if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) {
        break label$9
       }
       $3 = 0;
       break label$8;
      }
      $3 = !(HEAP32[($0 + 180 | 0) >> 2] | 0);
     }
     FUNCTION_TABLE[$2 | 0]($0, $3);
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 344 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, (HEAP32[($1 + 4216 | 0) >> 2] | 0 | 0) > (1 | 0) ? 3 : 0);
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 336 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0);
     label$10 : {
      label$11 : {
       if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
        break label$11
       }
       if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0)) {
        break label$10
       }
      }
      HEAP32[($1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($1 + 12 | 0) >> 2] = 1;
     break label$1;
    case 1:
     select_scan_parameters($0 | 0);
     per_scan_setup($0 | 0);
     label$12 : {
      label$13 : {
       if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
        break label$13
       }
       if (!(HEAP32[($0 + 324 | 0) >> 2] | 0)) {
        break label$13
       }
       if (!(HEAP32[($0 + 180 | 0) >> 2] | 0)) {
        break label$12
       }
      }
      FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 364 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1);
      FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 344 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 2);
      HEAP32[($1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
     HEAP32[($1 + 4208 | 0) >> 2] = 2;
     HEAP32[($1 + 4212 | 0) >> 2] = (HEAP32[($1 + 4212 | 0) >> 2] | 0) + 1 | 0;
    case 2:
     label$14 : {
      if (HEAP32[($0 + 184 | 0) >> 2] | 0) {
       break label$14
      }
      select_scan_parameters($0 | 0);
      per_scan_setup($0 | 0);
     }
     label$15 : {
      if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0)) {
       break label$15
      }
      HEAP32[($1 + 5020 | 0) >> 2] = HEAP32[($0 + 24 | 0) >> 2] | 0;
      HEAP32[($0 + 24 | 0) >> 2] = 0;
      $2 = $1 + ((HEAP32[($1 + 4220 | 0) >> 2] | 0) << 2 | 0) | 0;
      $3 = $2 + 4484 | 0;
      HEAP32[$3 >> 2] = 0;
      jpeg_mem_dest_internal($0 | 0, $2 + 4228 | 0 | 0, $3 | 0, 1 | 0);
      FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 364 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0);
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 344 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 2);
     label$16 : {
      if (HEAP32[($1 + 4220 | 0) >> 2] | 0) {
       break label$16
      }
      FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 348 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0);
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 348 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
     HEAP32[($1 + 12 | 0) >> 2] = 0;
     break label$1;
    case 3:
     label$17 : {
      if ((($2 | 0) % (Math_imul(HEAP32[($1 + 40 | 0) >> 2] | 0 ? 4 : 2, HEAP32[($0 + 60 | 0) >> 2] | 0) | 0) | 0 | 0) != (1 | 0)) {
       break label$17
      }
      if (!(HEAP32[($1 + 48 | 0) >> 2] | 0)) {
       break label$17
      }
      memset($1 + 64 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 2112 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 576 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 2624 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 1088 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 3136 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 1600 | 0 | 0, 0 | 0, 504 | 0) | 0;
      memset($1 + 3648 | 0 | 0, 0 | 0, 504 | 0) | 0;
     }
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 364 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, !(HEAP32[($0 + 180 | 0) >> 2] | 0));
     FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 344 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 4);
     HEAP32[($1 + 12 | 0) >> 2] = 0;
     break label$1;
    default:
     break label$2;
    };
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 48;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  $2 = HEAP32[($1 + 4212 | 0) >> 2] | 0;
  $3 = HEAP32[($1 + 4216 | 0) >> 2] | 0;
  HEAP32[($1 + 16 | 0) >> 2] = ($2 | 0) == ($3 + -1 | 0 | 0);
  label$18 : {
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (!$0) {
    break label$18
   }
   HEAP32[($0 + 16 | 0) >> 2] = $3;
   HEAP32[($0 + 12 | 0) >> 2] = $2;
  }
 }
 
 function select_scan_parameters($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $3 = 0, $9 = 0, $1 = 0, $11 = 0, $6 = 0, $12 = 0, $14 = 0, $13 = 0, i64toi32_i32$0 = 0, $7 = 0, $5 = 0, $8 = 0, $10 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 4212 | 0) >> 2] | 0;
   if (($2 | 0) >= (HEAP32[($1 + 4224 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   HEAP32[($0 + 244 | 0) >> 2] = 1;
   $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $4 = HEAP32[($1 + 4168 | 0) >> 2] | 0;
   label$2 : {
    if (!(HEAP32[($1 + 40 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($0 + 248 | 0) >> 2] = $3 + Math_imul(($2 | 0) / ($4 << 2 | 0 | 0) | 0, 84) | 0;
    $3 = HEAP32[($1 + 4164 | 0) >> 2] | 0;
    $2 = (($2 | 0) % (4 | 0) | 0 | 0) < (2 | 0);
    HEAP32[($0 + 320 | 0) >> 2] = $2 ? $3 : 63;
    HEAP32[($0 + 316 | 0) >> 2] = $2 ? 1 : $3 + 1 | 0;
    return;
   }
   i64toi32_i32$0 = 63;
   HEAP32[($0 + 316 | 0) >> 2] = 1;
   HEAP32[($0 + 320 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[($0 + 248 | 0) >> 2] = $3 + Math_imul(($2 | 0) / ($4 << 1 | 0 | 0) | 0, 84) | 0;
   return;
  }
  label$3 : {
   $5 = HEAP32[($0 + 172 | 0) >> 2] | 0;
   if (!$5) {
    break label$3
   }
   $6 = HEAP32[($1 + 4220 | 0) >> 2] | 0;
   $7 = $5 + Math_imul($6, 36) | 0;
   $4 = HEAP32[$7 >> 2] | 0;
   HEAP32[($0 + 244 | 0) >> 2] = $4;
   $2 = $1;
   label$4 : {
    if (($4 | 0) < (1 | 0)) {
     break label$4
    }
    $8 = $4 & 3 | 0;
    $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    $9 = 0;
    $2 = 0;
    label$5 : {
     if (($4 + -1 | 0) >>> 0 < 3 >>> 0) {
      break label$5
     }
     $10 = $4 & -4 | 0;
     $2 = 0;
     $11 = $0 + 248 | 0;
     $12 = ($5 + Math_imul($6, 36) | 0) + 4 | 0;
     $13 = 0;
     label$6 : while (1) {
      $4 = $2 << 2 | 0;
      HEAP32[($11 + $4 | 0) >> 2] = $3 + Math_imul(HEAP32[($12 + $4 | 0) >> 2] | 0, 84) | 0;
      $14 = $4 | 4 | 0;
      HEAP32[($11 + $14 | 0) >> 2] = $3 + Math_imul(HEAP32[($12 + $14 | 0) >> 2] | 0, 84) | 0;
      $14 = $4 | 8 | 0;
      HEAP32[($11 + $14 | 0) >> 2] = $3 + Math_imul(HEAP32[($12 + $14 | 0) >> 2] | 0, 84) | 0;
      $4 = $4 | 12 | 0;
      HEAP32[($11 + $4 | 0) >> 2] = $3 + Math_imul(HEAP32[($12 + $4 | 0) >> 2] | 0, 84) | 0;
      $2 = $2 + 4 | 0;
      $13 = $13 + 4 | 0;
      if (($13 | 0) != ($10 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     if (!$8) {
      break label$7
     }
     $11 = $5 + Math_imul($6, 36) | 0;
     label$8 : while (1) {
      $4 = $2 << 2 | 0;
      HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] = $3 + Math_imul(HEAP32[(($11 + $4 | 0) + 4 | 0) >> 2] | 0, 84) | 0;
      $2 = $2 + 1 | 0;
      $9 = $9 + 1 | 0;
      if (($9 | 0) != ($8 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    $2 = HEAP32[($0 + 332 | 0) >> 2] | 0;
   }
   HEAP32[($0 + 316 | 0) >> 2] = HEAP32[($7 + 20 | 0) >> 2] | 0;
   HEAP32[($0 + 320 | 0) >> 2] = HEAP32[($7 + 24 | 0) >> 2] | 0;
   HEAP32[($0 + 324 | 0) >> 2] = HEAP32[($7 + 28 | 0) >> 2] | 0;
   $3 = HEAP32[($7 + 32 | 0) >> 2] | 0;
   HEAP32[($0 + 328 | 0) >> 2] = $3;
   label$9 : {
    if (!(HEAP32[($2 + 20 | 0) >> 2] | 0)) {
     break label$9
    }
    $4 = HEAP32[($2 + 4172 | 0) >> 2] | 0;
    label$10 : {
     if (($6 | 0) < (((HEAP32[($2 + 4176 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 4188 | 0) >> 2] | 0, 3) | 0) + 2 | 0 | 0)) {
      break label$10
     }
     if (($6 | 0) >= ($4 | 0)) {
      break label$10
     }
     $3 = HEAP32[($1 + 5008 | 0) >> 2] | 0;
     HEAP32[($0 + 328 | 0) >> 2] = $3;
    }
    if (($6 | 0) < ((($4 + (HEAP32[($2 + 4180 | 0) >> 2] | 0) | 0) + Math_imul(HEAP32[($2 + 4192 | 0) >> 2] | 0, 6) | 0) + 4 | 0 | 0)) {
     break label$9
    }
    if (($6 | 0) >= (HEAP32[($0 + 168 | 0) >> 2] | 0 | 0)) {
     break label$9
    }
    $3 = HEAP32[($1 + 5012 | 0) >> 2] | 0;
    HEAP32[($0 + 328 | 0) >> 2] = $3;
   }
   HEAP32[(($1 + ($6 << 2 | 0) | 0) + 4740 | 0) >> 2] = $3;
   return;
  }
  label$11 : {
   $4 = HEAP32[($0 + 60 | 0) >> 2] | 0;
   if (($4 | 0) < (5 | 0)) {
    break label$11
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 24 | 0) >> 2] = $4;
   HEAP32[($2 + 20 | 0) >> 2] = 26;
   HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 4;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   $4 = HEAP32[($0 + 60 | 0) >> 2] | 0;
  }
  HEAP32[($0 + 244 | 0) >> 2] = $4;
  label$12 : {
   if (($4 | 0) < (1 | 0)) {
    break label$12
   }
   $13 = $4 & 3 | 0;
   $3 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $11 = 0;
   $2 = 0;
   label$13 : {
    if (($4 + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$13
    }
    $14 = $4 & -4 | 0;
    $2 = 0;
    $4 = $0 + 248 | 0;
    $12 = 0;
    label$14 : while (1) {
     HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] = $3 + Math_imul($2, 84) | 0;
     $9 = $2 | 1 | 0;
     HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] = $3 + Math_imul($9, 84) | 0;
     $9 = $2 | 2 | 0;
     HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] = $3 + Math_imul($9, 84) | 0;
     $9 = $2 | 3 | 0;
     HEAP32[($4 + ($9 << 2 | 0) | 0) >> 2] = $3 + Math_imul($9, 84) | 0;
     $2 = $2 + 4 | 0;
     $12 = $12 + 4 | 0;
     if (($12 | 0) != ($14 | 0)) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$13) {
    break label$12
   }
   label$15 : while (1) {
    HEAP32[(($0 + ($2 << 2 | 0) | 0) + 248 | 0) >> 2] = $3 + Math_imul($2, 84) | 0;
    $2 = $2 + 1 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($13 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 324 | 0) >> 2] = 0;
  HEAP32[($0 + 328 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 63;
  HEAP32[($0 + 316 | 0) >> 2] = 0;
  HEAP32[($0 + 320 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function per_scan_setup($0) {
  $0 = $0 | 0;
  var $1 = 0, $5 = 0, $2 = 0, $6 = 0, $3 = 0, $7 = 0, i64toi32_i32$0 = 0, $4 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 244 | 0) >> 2] | 0;
    if (($1 | 0) != (1 | 0)) {
     break label$2
    }
    $1 = HEAP32[($0 + 248 | 0) >> 2] | 0;
    HEAP32[($0 + 264 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 32 | 0) >> 2] | 0;
    HEAP32[($0 + 268 | 0) >> 2] = $2;
    HEAP32[($1 + 68 | 0) >> 2] = 1;
    i64toi32_i32$0 = 8;
    HEAP32[($1 + 60 | 0) >> 2] = 1;
    HEAP32[($1 + 64 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 1;
    HEAP32[($1 + 52 | 0) >> 2] = 1;
    HEAP32[($1 + 56 | 0) >> 2] = i64toi32_i32$0;
    $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $2 = ($2 >>> 0) % ($3 >>> 0) | 0;
    HEAP32[($1 + 72 | 0) >> 2] = $2 ? $2 : $3;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 272 | 0) >> 2] = 1;
    HEAP32[($0 + 276 | 0) >> 2] = i64toi32_i32$0;
    break label$1;
   }
   label$3 : {
    if (($1 + -5 | 0) >>> 0 > -5 >>> 0) {
     break label$3
    }
    $2 = HEAP32[$0 >> 2] | 0;
    HEAP32[($2 + 24 | 0) >> 2] = $1;
    HEAP32[($2 + 20 | 0) >> 2] = 26;
    HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 4;
    FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = jdiv_round_up(HEAP32[($0 + 28 | 0) >> 2] | 0 | 0, (HEAP32[($0 + 232 | 0) >> 2] | 0) << 3 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 264 | 0) >> 2] = wasm2js_i32$1;
   $4 = 0;
   $1 = jdiv_round_up(HEAP32[($0 + 32 | 0) >> 2] | 0 | 0, (HEAP32[($0 + 236 | 0) >> 2] | 0) << 3 | 0 | 0) | 0;
   HEAP32[($0 + 272 | 0) >> 2] = 0;
   HEAP32[($0 + 268 | 0) >> 2] = $1;
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $3 = $0 + 276 | 0;
   $2 = 0;
   label$4 : while (1) {
    $5 = HEAP32[(($0 + ($2 << 2 | 0) | 0) + 248 | 0) >> 2] | 0;
    $6 = HEAP32[($5 + 8 | 0) >> 2] | 0;
    HEAP32[($5 + 52 | 0) >> 2] = $6;
    $7 = HEAP32[($5 + 12 | 0) >> 2] | 0;
    HEAP32[($5 + 56 | 0) >> 2] = $7;
    HEAP32[($5 + 64 | 0) >> 2] = $6 << 3 | 0;
    $1 = Math_imul($7, $6);
    HEAP32[($5 + 60 | 0) >> 2] = $1;
    $8 = ((HEAP32[($5 + 28 | 0) >> 2] | 0) >>> 0) % ($6 >>> 0) | 0;
    HEAP32[($5 + 68 | 0) >> 2] = $8 ? $8 : $6;
    $6 = ((HEAP32[($5 + 32 | 0) >> 2] | 0) >>> 0) % ($7 >>> 0) | 0;
    HEAP32[($5 + 72 | 0) >> 2] = $6 ? $6 : $7;
    label$5 : {
     if (($4 + $1 | 0 | 0) < (11 | 0)) {
      break label$5
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[($5 + 20 | 0) >> 2] = 13;
     FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
    }
    label$6 : {
     if (($1 | 0) < (1 | 0)) {
      break label$6
     }
     $4 = $1 + -1 | 0;
     $5 = 0;
     label$7 : {
      $7 = $1 & 3 | 0;
      if (!$7) {
       break label$7
      }
      label$8 : while (1) {
       $6 = HEAP32[($0 + 272 | 0) >> 2] | 0;
       HEAP32[($0 + 272 | 0) >> 2] = $6 + 1 | 0;
       HEAP32[(($0 + ($6 << 2 | 0) | 0) + 276 | 0) >> 2] = $2;
       $1 = $1 + -1 | 0;
       $5 = $5 + 1 | 0;
       if (($5 | 0) != ($7 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     if ($4 >>> 0 < 3 >>> 0) {
      break label$6
     }
     label$9 : while (1) {
      $5 = HEAP32[($0 + 272 | 0) >> 2] | 0;
      HEAP32[($0 + 272 | 0) >> 2] = $5 + 1 | 0;
      HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] = $2;
      $5 = HEAP32[($0 + 272 | 0) >> 2] | 0;
      HEAP32[($0 + 272 | 0) >> 2] = $5 + 1 | 0;
      HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] = $2;
      $5 = HEAP32[($0 + 272 | 0) >> 2] | 0;
      HEAP32[($0 + 272 | 0) >> 2] = $5 + 1 | 0;
      HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] = $2;
      $5 = HEAP32[($0 + 272 | 0) >> 2] | 0;
      HEAP32[($0 + 272 | 0) >> 2] = $5 + 1 | 0;
      HEAP32[($3 + ($5 << 2 | 0) | 0) >> 2] = $2;
      $5 = $1 + -5 | 0;
      $1 = $1 + -4 | 0;
      if ($5 >>> 0 < -2 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) >= (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
    $4 = HEAP32[($0 + 272 | 0) >> 2] | 0;
    continue label$4;
   };
  }
  label$10 : {
   $1 = HEAP32[($0 + 204 | 0) >> 2] | 0;
   if (($1 | 0) < (1 | 0)) {
    break label$10
   }
   $1 = Math_imul(HEAP32[($0 + 264 | 0) >> 2] | 0, $1);
   HEAP32[($0 + 200 | 0) >> 2] = ($1 | 0) < (65535 | 0) ? $1 : 65535;
  }
 }
 
 function copy_buffer($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $5 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[($0 + 332 | 0) >> 2] | 0;
  $4 = $3 + ($1 << 2 | 0) | 0;
  $5 = HEAP32[($4 + 4228 | 0) >> 2] | 0;
  $6 = HEAP32[($4 + 4484 | 0) >> 2] | 0;
  label$1 : {
   if ((HEAP32[((HEAP32[$0 >> 2] | 0) + 104 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $4 = 0;
   $7 = HEAP32[(0 + 158296 | 0) >> 2] | 0;
   fwrite(138309 | 0, 5 | 0, 1 | 0, $7 | 0) | 0;
   label$2 : {
    $8 = HEAP32[($0 + 172 | 0) >> 2] | 0;
    $9 = Math_imul($1, 36);
    if ((HEAP32[($8 + $9 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     HEAP32[($2 + 36 | 0) >> 2] = HEAP32[((($8 + $9 | 0) + ($4 << 2 | 0) | 0) + 4 | 0) >> 2] | 0;
     HEAP32[($2 + 32 | 0) >> 2] = $4 ? 138194 : 138354;
     fiprintf($7 | 0, 136186 | 0, $2 + 32 | 0 | 0) | 0;
     $4 = $4 + 1 | 0;
     $8 = HEAP32[($0 + 172 | 0) >> 2] | 0;
     if (($4 | 0) < (HEAP32[($8 + $9 | 0) >> 2] | 0 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   i64toi32_i32$2 = $8 + $9 | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 24 | 0) >> 2] | 0;
   HEAP32[($2 + 16 | 0) >> 2] = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = i64toi32_i32$1;
   fiprintf($7 | 0, 137132 | 0, $2 + 16 | 0 | 0) | 0;
   $4 = HEAP32[(((HEAP32[($0 + 172 | 0) >> 2] | 0) + $9 | 0) + 28 | 0) >> 2] | 0;
   HEAP32[($2 + 4 | 0) >> 2] = HEAP32[(($3 + ($1 << 2 | 0) | 0) + 4740 | 0) >> 2] | 0;
   HEAP32[$2 >> 2] = $4;
   fiprintf($7 | 0, 137133 | 0, $2 | 0) | 0;
   fputc(10 | 0, $7 | 0) | 0;
  }
  label$4 : {
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
   if ($6 >>> 0 < $1 >>> 0) {
    break label$4
   }
   label$5 : while (1) {
    __memcpy(HEAP32[$4 >> 2] | 0 | 0, $5 | 0, $1 | 0) | 0;
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    HEAP32[($4 + 4 | 0) >> 2] = 0;
    HEAP32[$4 >> 2] = $1 + (HEAP32[$4 >> 2] | 0) | 0;
    $6 = $6 - $1 | 0;
    label$6 : {
     if (FUNCTION_TABLE[HEAP32[($4 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$6
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 129;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $5 = $5 + $1 | 0;
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
    if ($6 >>> 0 >= $1 >>> 0) {
     continue label$5
    }
    break label$5;
   };
  }
  __memcpy(HEAP32[$4 >> 2] | 0 | 0, $5 | 0, $6 | 0) | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $6 | 0;
  HEAP32[($4 + 4 | 0) >> 2] = (HEAP32[($4 + 4 | 0) >> 2] | 0) - $6 | 0;
  __stack_pointer = $2 + 48 | 0;
 }
 
 function jpeg_abort($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 36 | 0) >> 2] | 0 | 0]($0, 1);
   label$2 : {
    if (!(HEAP32[($0 + 16 | 0) >> 2] | 0)) {
     break label$2
    }
    HEAP32[($0 + 304 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = 200;
    return;
   }
   HEAP32[($0 + 20 | 0) >> 2] = 100;
  }
 }
 
 function jpeg_destroy($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   if (!$1) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($1 + 40 | 0) >> 2] | 0 | 0]($0);
  }
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
 }
 
 function jpeg_alloc_quant_table($0) {
  $0 = $0 | 0;
  $0 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, 132) | 0;
  HEAP32[($0 + 128 | 0) >> 2] = 0;
  return $0 | 0;
 }
 
 function jpeg_alloc_huff_table($0) {
  $0 = $0 | 0;
  $0 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, 280) | 0;
  HEAP32[($0 + 276 | 0) >> 2] = 0;
  return $0 | 0;
 }
 
 function jpeg_add_quant_table($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0;
  label$1 : {
   $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($5 | 0) == (100 | 0)) {
    break label$1
   }
   $6 = HEAP32[$0 >> 2] | 0;
   HEAP32[($6 + 24 | 0) >> 2] = $5;
   HEAP32[($6 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if ($1 >>> 0 < 4 >>> 0) {
    break label$2
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $1;
   HEAP32[($5 + 20 | 0) >> 2] = 31;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$3 : {
   $1 = ($0 + ($1 << 2 | 0) | 0) + 72 | 0;
   $5 = HEAP32[$1 >> 2] | 0;
   if ($5) {
    break label$3
   }
   $5 = jpeg_alloc_quant_table($0 | 0) | 0;
   HEAP32[$1 >> 2] = $5;
  }
  $0 = 0;
  label$4 : while (1) {
   $1 = (Math_imul(HEAP32[($2 + ($0 << 2 | 0) | 0) >> 2] | 0, $3) + 50 | 0 | 0) / (100 | 0) | 0;
   $1 = ($1 | 0) > (1 | 0) ? $1 : 1;
   $1 = $1 >>> 0 < 32767 >>> 0 ? $1 : 32767;
   HEAP16[($5 + ($0 << 1 | 0) | 0) >> 1] = $4 ? ($1 >>> 0 > 255 >>> 0 ? 255 : $1) : $1;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (64 | 0)) {
    continue label$4
   }
   break label$4;
  };
  HEAP32[($5 + 128 | 0) >> 2] = 0;
 }
 
 function jpeg_set_linear_quality($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $6 = 0;
  $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4160 | 0) >> 2] | 0;
  label$1 : {
   $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($4 | 0) == (100 | 0)) {
    break label$1
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $4;
   HEAP32[($5 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $3 = $3 << 8 | 0;
  label$2 : {
   $5 = HEAP32[($0 + 72 | 0) >> 2] | 0;
   if ($5) {
    break label$2
   }
   $5 = jpeg_alloc_quant_table($0 | 0) | 0;
   HEAP32[($0 + 72 | 0) >> 2] = $5;
  }
  $6 = $3 + 138368 | 0;
  $3 = 0;
  label$3 : while (1) {
   $4 = (Math_imul(HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] | 0, $1) + 50 | 0 | 0) / (100 | 0) | 0;
   $4 = ($4 | 0) > (1 | 0) ? $4 : 1;
   $4 = $4 >>> 0 < 32767 >>> 0 ? $4 : 32767;
   HEAP16[($5 + ($3 << 1 | 0) | 0) >> 1] = $2 ? ($4 >>> 0 > 255 >>> 0 ? 255 : $4) : $4;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (64 | 0)) {
    continue label$3
   }
   break label$3;
  };
  HEAP32[($5 + 128 | 0) >> 2] = 0;
  $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4160 | 0) >> 2] | 0;
  label$4 : {
   $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($4 | 0) == (100 | 0)) {
    break label$4
   }
   $5 = HEAP32[$0 >> 2] | 0;
   HEAP32[($5 + 24 | 0) >> 2] = $4;
   HEAP32[($5 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $3 = $3 << 8 | 0;
  label$5 : {
   $5 = HEAP32[($0 + 76 | 0) >> 2] | 0;
   if ($5) {
    break label$5
   }
   $5 = jpeg_alloc_quant_table($0 | 0) | 0;
   HEAP32[($0 + 76 | 0) >> 2] = $5;
  }
  $6 = $3 + 140672 | 0;
  $3 = 0;
  label$6 : while (1) {
   $4 = (Math_imul(HEAP32[($6 + ($3 << 2 | 0) | 0) >> 2] | 0, $1) + 50 | 0 | 0) / (100 | 0) | 0;
   $4 = ($4 | 0) > (1 | 0) ? $4 : 1;
   $4 = $4 >>> 0 < 32767 >>> 0 ? $4 : 32767;
   HEAP16[($5 + ($3 << 1 | 0) | 0) >> 1] = $2 ? ($4 >>> 0 > 255 >>> 0 ? 255 : $4) : $4;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != (64 | 0)) {
    continue label$6
   }
   break label$6;
  };
  HEAP32[($5 + 128 | 0) >> 2] = 0;
 }
 
 function jpeg_float_quality_scaling($0) {
  $0 = Math_fround($0);
  label$1 : {
   $0 = Math_fround(Math_min($0 <= Math_fround(0.0) ? Math_fround(1.0) : $0, Math_fround(100.0)));
   if (!($0 < Math_fround(50.0))) {
    break label$1
   }
   return Math_fround(Math_fround(Math_fround(5.0e3) / $0));
  }
  return Math_fround(Math_fround(Math_fround(200.0) - Math_fround($0 + $0)));
 }
 
 function jpeg_set_defaults($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $2 = 0, $1 = 0, $3 = 0, $6 = 0, $4 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $5 = 0, $54 = 0, $56 = 0, $60 = 0, $7 = 0, $92 = 0, $94 = 0, $120 = 0, $122 = 0, $126 = 0, $147 = 0, $149 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($1 | 0) == (100 | 0)) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 24 | 0) >> 2] = $1;
   HEAP32[($2 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if (HEAP32[($0 + 68 | 0) >> 2] | 0) {
    break label$2
   }
   (wasm2js_i32$0 = $0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, 840) | 0), HEAP32[(wasm2js_i32$0 + 68 | 0) >> 2] = wasm2js_i32$1;
  }
  HEAP32[($0 + 56 | 0) >> 2] = 8;
  jpeg_set_linear_quality($0 | 0, 50 | 0, 1 | 0);
  $1 = HEAP32[($0 + 16 | 0) >> 2] | 0;
  $3 = $1 ? 196 : 104;
  $4 = $0 + 88 | 0;
  $5 = $0 + 180 | 0;
  label$3 : {
   $2 = $0 + ($1 ? 180 : 88) | 0;
   if (HEAP32[$2 >> 2] | 0) {
    break label$3
   }
   $6 = jpeg_alloc_huff_table($0 | 0) | 0;
   HEAP32[$2 >> 2] = $6;
   HEAP8[($6 + 16 | 0) >> 0] = HEAPU8[(0 + 142992 | 0) >> 0] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 142984 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 142988 | 0) >> 2] | 0;
   $54 = i64toi32_i32$0;
   i64toi32_i32$0 = $6 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $54;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 142976 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 142980 | 0) >> 2] | 0;
   $56 = i64toi32_i32$1;
   i64toi32_i32$1 = $6;
   HEAP32[i64toi32_i32$1 >> 2] = $56;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   $6 = HEAP32[$2 >> 2] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 143025 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 143026 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 143027 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 143028 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 143029 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 143030 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 143031 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 143032 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $60 = i64toi32_i32$0;
   i64toi32_i32$0 = $6;
   $21 = $60;
   HEAP8[(i64toi32_i32$0 + 17 | 0) >> 0] = $21;
   HEAP8[(i64toi32_i32$0 + 18 | 0) >> 0] = $21 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 19 | 0) >> 0] = $21 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 20 | 0) >> 0] = $21 >>> 24 | 0;
   HEAP8[(i64toi32_i32$0 + 21 | 0) >> 0] = i64toi32_i32$1;
   HEAP8[(i64toi32_i32$0 + 22 | 0) >> 0] = i64toi32_i32$1 >>> 8 | 0;
   HEAP8[(i64toi32_i32$0 + 23 | 0) >> 0] = i64toi32_i32$1 >>> 16 | 0;
   HEAP8[(i64toi32_i32$0 + 24 | 0) >> 0] = i64toi32_i32$1 >>> 24 | 0;
   $22 = 0;
   $23 = i64toi32_i32$0 + 25 | 0;
   $24 = HEAPU8[($22 + 143033 | 0) >> 0] | 0 | ((HEAPU8[($22 + 143034 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($22 + 143035 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($22 + 143036 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$23 >> 0] = $24;
   HEAP8[($23 + 1 | 0) >> 0] = $24 >>> 8 | 0;
   HEAP8[($23 + 2 | 0) >> 0] = $24 >>> 16 | 0;
   HEAP8[($23 + 3 | 0) >> 0] = $24 >>> 24 | 0;
   memset((HEAP32[$2 >> 2] | 0) + 29 | 0 | 0, 0 | 0, 244 | 0) | 0;
   HEAP32[((HEAP32[$2 >> 2] | 0) + 276 | 0) >> 2] = 0;
  }
  $6 = $0 + 104 | 0;
  $7 = $0 + 196 | 0;
  $2 = $1 ? $5 : $4;
  label$4 : {
   $3 = $0 + $3 | 0;
   if (HEAP32[$3 >> 2] | 0) {
    break label$4
   }
   $4 = jpeg_alloc_huff_table($0 | 0) | 0;
   HEAP32[$3 >> 2] = $4;
   HEAP8[($4 + 16 | 0) >> 0] = HEAPU8[(0 + 143056 | 0) >> 0] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143048 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143052 | 0) >> 2] | 0;
   $92 = i64toi32_i32$1;
   i64toi32_i32$1 = $4 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $92;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143040 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143044 | 0) >> 2] | 0;
   $94 = i64toi32_i32$0;
   i64toi32_i32$0 = $4;
   HEAP32[i64toi32_i32$0 >> 2] = $94;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   __memcpy((HEAP32[$3 >> 2] | 0) + 17 | 0 | 0, 143072 | 0, 162 | 0) | 0;
   memset((HEAP32[$3 >> 2] | 0) + 179 | 0 | 0, 0 | 0, 94 | 0) | 0;
   HEAP32[((HEAP32[$3 >> 2] | 0) + 276 | 0) >> 2] = 0;
  }
  $1 = $1 ? $7 : $6;
  label$5 : {
   if (HEAP32[($2 + 4 | 0) >> 2] | 0) {
    break label$5
   }
   $3 = jpeg_alloc_huff_table($0 | 0) | 0;
   HEAP32[($2 + 4 | 0) >> 2] = $3;
   HEAP8[($3 + 16 | 0) >> 0] = HEAPU8[(0 + 143024 | 0) >> 0] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143016 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143020 | 0) >> 2] | 0;
   $120 = i64toi32_i32$1;
   i64toi32_i32$1 = $3 + 8 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $120;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143008 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143012 | 0) >> 2] | 0;
   $122 = i64toi32_i32$0;
   i64toi32_i32$0 = $3;
   HEAP32[i64toi32_i32$0 >> 2] = $122;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAPU8[(i64toi32_i32$2 + 143025 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 143026 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 143027 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 143028 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   i64toi32_i32$0 = HEAPU8[(i64toi32_i32$2 + 143029 | 0) >> 0] | 0 | ((HEAPU8[(i64toi32_i32$2 + 143030 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[(i64toi32_i32$2 + 143031 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[(i64toi32_i32$2 + 143032 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   $126 = i64toi32_i32$1;
   i64toi32_i32$1 = $3;
   $25 = $126;
   HEAP8[(i64toi32_i32$1 + 17 | 0) >> 0] = $25;
   HEAP8[(i64toi32_i32$1 + 18 | 0) >> 0] = $25 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 19 | 0) >> 0] = $25 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 20 | 0) >> 0] = $25 >>> 24 | 0;
   HEAP8[(i64toi32_i32$1 + 21 | 0) >> 0] = i64toi32_i32$0;
   HEAP8[(i64toi32_i32$1 + 22 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
   HEAP8[(i64toi32_i32$1 + 23 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
   HEAP8[(i64toi32_i32$1 + 24 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
   $26 = 0;
   $27 = i64toi32_i32$1 + 25 | 0;
   $28 = HEAPU8[($26 + 143033 | 0) >> 0] | 0 | ((HEAPU8[($26 + 143034 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($26 + 143035 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($26 + 143036 | 0) >> 0] | 0) << 24 | 0) | 0) | 0;
   HEAP8[$27 >> 0] = $28;
   HEAP8[($27 + 1 | 0) >> 0] = $28 >>> 8 | 0;
   HEAP8[($27 + 2 | 0) >> 0] = $28 >>> 16 | 0;
   HEAP8[($27 + 3 | 0) >> 0] = $28 >>> 24 | 0;
   memset((HEAP32[($2 + 4 | 0) >> 2] | 0) + 29 | 0 | 0, 0 | 0, 244 | 0) | 0;
   HEAP32[((HEAP32[($2 + 4 | 0) >> 2] | 0) + 276 | 0) >> 2] = 0;
  }
  label$6 : {
   if (HEAP32[($1 + 4 | 0) >> 2] | 0) {
    break label$6
   }
   $2 = jpeg_alloc_huff_table($0 | 0) | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $2;
   HEAP8[($2 + 16 | 0) >> 0] = HEAPU8[(0 + 143264 | 0) >> 0] | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143256 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143260 | 0) >> 2] | 0;
   $147 = i64toi32_i32$0;
   i64toi32_i32$0 = $2 + 8 | 0;
   HEAP32[i64toi32_i32$0 >> 2] = $147;
   HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 143248 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 143252 | 0) >> 2] | 0;
   $149 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   HEAP32[i64toi32_i32$1 >> 2] = $149;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   __memcpy((HEAP32[($1 + 4 | 0) >> 2] | 0) + 17 | 0 | 0, 143280 | 0, 162 | 0) | 0;
   memset((HEAP32[($1 + 4 | 0) >> 2] | 0) + 179 | 0 | 0, 0 | 0, 94 | 0) | 0;
   HEAP32[((HEAP32[($1 + 4 | 0) >> 2] | 0) + 276 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 168 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 172 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$1 + 128 | 0;
  i64toi32_i32$0 = 0;
  $29 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $29;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $29 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $29 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $29 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 120 | 0;
  i64toi32_i32$0 = 0;
  $30 = 0;
  HEAP8[i64toi32_i32$1 >> 0] = $30;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $30 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $30 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $30 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 136 | 0;
  i64toi32_i32$0 = 16843009;
  $31 = 16843009;
  HEAP8[i64toi32_i32$1 >> 0] = $31;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $31 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $31 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $31 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 144 | 0;
  i64toi32_i32$0 = 16843009;
  $32 = 16843009;
  HEAP8[i64toi32_i32$1 >> 0] = $32;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $32 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $32 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $32 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 152 | 0;
  i64toi32_i32$0 = 84215045;
  $33 = 84215045;
  HEAP8[i64toi32_i32$1 >> 0] = $33;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $33 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $33 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $33 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 160 | 0;
  i64toi32_i32$0 = 84215045;
  $34 = 84215045;
  HEAP8[i64toi32_i32$1 >> 0] = $34;
  HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $34 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $34 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $34 >>> 24 | 0;
  HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
  HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
  HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
  HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
  i64toi32_i32$1 = $0 + 176 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 4152 | 0) >> 2] | 0;
  HEAP32[($0 + 188 | 0) >> 2] = 0;
  $2 = ($2 | 0) == (1560820397 | 0);
  HEAP32[($0 + 184 | 0) >> 2] = (HEAP32[($0 + 56 | 0) >> 2] | 0 | 0) > (8 | 0) ? 1 : $2;
  HEAP32[($1 + 52 | 0) >> 2] = $2;
  i64toi32_i32$1 = $0 + 200 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 65537;
  HEAP8[(i64toi32_i32$1 + 214 | 0) >> 0] = 0;
  HEAP16[(i64toi32_i32$1 + 212 | 0) >> 1] = 257;
  jpeg_default_colorspace(i64toi32_i32$1 | 0);
  $1 = HEAP32[(i64toi32_i32$1 + 332 | 0) >> 2] | 0;
  HEAP32[($1 + 4156 | 0) >> 2] = 1;
  label$7 : {
   label$8 : {
    $2 = HEAP32[($1 + 4152 | 0) >> 2] | 0;
    if (($2 | 0) != (1560820397 | 0)) {
     break label$8
    }
    HEAP32[($1 + 20 | 0) >> 2] = 1;
    jpeg_simple_progression($0 | 0);
    $1 = HEAP32[($0 + 332 | 0) >> 2] | 0;
    $2 = HEAP32[($1 + 4152 | 0) >> 2] | 0;
    break label$7;
   }
   HEAP32[($1 + 20 | 0) >> 2] = 0;
  }
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 1099169792;
  HEAP32[(i64toi32_i32$1 + 4196 | 0) >> 2] = 1097596928;
  HEAP32[(i64toi32_i32$1 + 4200 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 1;
  HEAP32[(i64toi32_i32$1 + 4164 | 0) >> 2] = 8;
  HEAP32[(i64toi32_i32$1 + 4168 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4204 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
  $0 = ($2 | 0) == (1560820397 | 0);
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = $0;
  HEAP32[(i64toi32_i32$1 + 4160 | 0) >> 2] = $0 ? 3 : 0;
 }
 
 function jpeg_default_colorspace($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $1 = 0, $2 = 0, $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  label$1 : {
   switch (HEAP32[($0 + 40 | 0) >> 2] | 0 | 0) {
   case 1:
    label$8 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$8
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    HEAP32[($0 + 220 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 60 | 0) >> 2] = 1;
    HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 208 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    return;
   case 2:
   case 6:
   case 7:
   case 8:
   case 9:
   case 10:
   case 11:
   case 12:
   case 13:
   case 14:
   case 15:
    label$9 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$9
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    HEAP32[($0 + 220 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 3;
    HEAP32[($0 + 60 | 0) >> 2] = 3;
    HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 208 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 168 | 0) >> 2] = 3;
    HEAP32[($0 + 84 | 0) >> 2] = 2;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 2;
    HEAP32[($0 + 8 | 0) >> 2] = 2;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 192 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    label$10 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$10
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    HEAP32[($0 + 220 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 3;
    HEAP32[($0 + 60 | 0) >> 2] = 3;
    HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 208 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 168 | 0) >> 2] = 3;
    HEAP32[($0 + 84 | 0) >> 2] = 2;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 2;
    HEAP32[($0 + 8 | 0) >> 2] = 2;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 192 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    label$11 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$11
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    HEAP32[($0 + 220 | 0) >> 2] = 1;
    HEAP32[($0 + 208 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 4;
    HEAP32[($0 + 60 | 0) >> 2] = 4;
    HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 252 | 0) >> 2] = 75;
    HEAP32[($0 + 168 | 0) >> 2] = 89;
    HEAP32[($0 + 84 | 0) >> 2] = 77;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 67;
    HEAP32[($0 + 276 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 268 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 260 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 192 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 5:
    label$12 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$12
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    HEAP32[($0 + 220 | 0) >> 2] = 1;
    HEAP32[($0 + 208 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 5;
    HEAP32[($0 + 60 | 0) >> 2] = 4;
    HEAP32[($0 + 64 | 0) >> 2] = i64toi32_i32$0;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 252 | 0) >> 2] = 4;
    HEAP32[($0 + 168 | 0) >> 2] = 3;
    HEAP32[($0 + 84 | 0) >> 2] = 2;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 2;
    HEAP32[($0 + 8 | 0) >> 2] = 2;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 276 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 268 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 260 | 0;
    i64toi32_i32$0 = 2;
    HEAP32[i64toi32_i32$1 >> 2] = 2;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 192 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 0:
    label$13 : {
     $1 = HEAP32[($0 + 20 | 0) >> 2] | 0;
     if (($1 | 0) == (100 | 0)) {
      break label$13
     }
     $2 = HEAP32[$0 >> 2] | 0;
     HEAP32[($2 + 24 | 0) >> 2] = $1;
     HEAP32[($2 + 20 | 0) >> 2] = 20;
     FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    }
    $1 = 0;
    HEAP32[($0 + 220 | 0) >> 2] = 0;
    HEAP32[($0 + 208 | 0) >> 2] = 0;
    HEAP32[($0 + 64 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 36 | 0) >> 2] | 0;
    HEAP32[($0 + 60 | 0) >> 2] = $3;
    label$14 : {
     label$15 : {
      if (($3 + -11 | 0) >>> 0 > -11 >>> 0) {
       break label$15
      }
      $2 = HEAP32[$0 >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = $3;
      HEAP32[($2 + 20 | 0) >> 2] = 26;
      HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 10;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
      $3 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      if (($3 | 0) < (1 | 0)) {
       break label$14
      }
     }
     $4 = $3 & 1 | 0;
     $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     label$16 : {
      if (($3 | 0) == (1 | 0)) {
       break label$16
      }
      $5 = $3 & -2 | 0;
      $1 = 0;
      $3 = 0;
      label$17 : while (1) {
       $0 = $2 + Math_imul($1, 84) | 0;
       HEAP32[($0 + 24 | 0) >> 2] = 0;
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 1;
       HEAP32[($0 + 8 | 0) >> 2] = 1;
       HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[$0 >> 2] = $1;
       $6 = $1 | 1 | 0;
       $0 = $2 + Math_imul($6, 84) | 0;
       HEAP32[($0 + 24 | 0) >> 2] = 0;
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 1;
       HEAP32[($0 + 8 | 0) >> 2] = 1;
       HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[$0 >> 2] = $6;
       $1 = $1 + 2 | 0;
       $3 = $3 + 2 | 0;
       if (($3 | 0) != ($5 | 0)) {
        continue label$17
       }
       break label$17;
      };
     }
     if (!$4) {
      break label$14
     }
     $0 = $2 + Math_imul($1, 84) | 0;
     HEAP32[($0 + 24 | 0) >> 2] = 0;
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 0;
     HEAP32[($0 + 16 | 0) >> 2] = 0;
     HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $0;
     i64toi32_i32$0 = 1;
     HEAP32[($0 + 8 | 0) >> 2] = 1;
     HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[$0 >> 2] = $1;
    }
    return;
   default:
    break label$1;
   };
  }
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 9;
  FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
 }
 
 function jpeg_simple_progression($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $9 = 0, $6 = 0, $4 = 0, $8 = 0, $10 = 0, $5 = 0, $1 = 0, $7 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0)) {
           break label$8
          }
          $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
          label$9 : {
           $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
           if (($2 | 0) == (100 | 0)) {
            break label$9
           }
           $3 = HEAP32[$0 >> 2] | 0;
           HEAP32[($3 + 24 | 0) >> 2] = $2;
           HEAP32[($3 + 20 | 0) >> 2] = 20;
           FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
          }
          $3 = 23;
          label$10 : {
           label$11 : {
            switch ($1 + -1 | 0 | 0) {
            case 2:
             $3 = 64;
             if ((HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) != (3 | 0)) {
              break label$10
             }
             break;
            case 0:
             break label$11;
            default:
             break label$10;
            };
           }
           label$13 : {
            label$14 : {
             $2 = HEAP32[($0 + 368 | 0) >> 2] | 0;
             if (!$2) {
              break label$14
             }
             if ((HEAP32[($0 + 372 | 0) >> 2] | 0 | 0) >= ($3 | 0)) {
              break label$13
             }
            }
            HEAP32[($0 + 372 | 0) >> 2] = 64;
            $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, 2304) | 0;
            HEAP32[($0 + 368 | 0) >> 2] = $2;
           }
           HEAP32[($0 + 168 | 0) >> 2] = $3;
           HEAP32[($0 + 172 | 0) >> 2] = $2;
           $4 = HEAP32[($0 + 332 | 0) >> 2] | 0;
           i64toi32_i32$1 = $4;
           i64toi32_i32$0 = 1;
           HEAP32[(i64toi32_i32$1 + 4172 | 0) >> 2] = 23;
           HEAP32[(i64toi32_i32$1 + 4176 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 3;
           HEAP32[(i64toi32_i32$1 + 4184 | 0) >> 2] = 5;
           HEAP32[(i64toi32_i32$1 + 4188 | 0) >> 2] = i64toi32_i32$0;
           if (HEAP32[(i64toi32_i32$1 + 4156 | 0) >> 2] | 0) {
            break label$7
           }
           HEAP32[$2 >> 2] = $1;
           $5 = $1 & 7 | 0;
           $6 = 0;
           $3 = 0;
           label$15 : {
            if (($1 + -1 | 0) >>> 0 < 7 >>> 0) {
             break label$15
            }
            $7 = $1 & -8 | 0;
            $3 = 0;
            $8 = 0;
            label$16 : while (1) {
             $9 = $2 + 4 | 0;
             HEAP32[($9 + ($3 << 2 | 0) | 0) >> 2] = $3;
             $10 = $3 | 1 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 2 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 3 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 4 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 5 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 6 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $10 = $3 | 7 | 0;
             HEAP32[($9 + ($10 << 2 | 0) | 0) >> 2] = $10;
             $3 = $3 + 8 | 0;
             $8 = $8 + 8 | 0;
             if (($8 | 0) != ($7 | 0)) {
              continue label$16
             }
             break label$16;
            };
           }
           if (!$5) {
            break label$3
           }
           label$17 : while (1) {
            HEAP32[(($2 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] = $3;
            $3 = $3 + 1 | 0;
            $6 = $6 + 1 | 0;
            if (($6 | 0) != ($5 | 0)) {
             continue label$17
            }
            break label$3;
           };
          }
          HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4172 | 0) >> 2] = 0;
         }
         label$18 : {
          $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
          if (($2 | 0) == (100 | 0)) {
           break label$18
          }
          $3 = HEAP32[$0 >> 2] | 0;
          HEAP32[($3 + 24 | 0) >> 2] = $2;
          HEAP32[($3 + 20 | 0) >> 2] = 20;
          FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
         }
         label$19 : {
          label$20 : {
           label$21 : {
            $6 = HEAP32[($0 + 60 | 0) >> 2] | 0;
            if (($6 | 0) != (3 | 0)) {
             break label$21
            }
            $9 = HEAP32[($0 + 332 | 0) >> 2] | 0;
            $2 = HEAP32[($9 + 4152 | 0) >> 2] | 0;
            if ((HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) != (3 | 0)) {
             break label$20
            }
            $3 = 10;
            if (($2 | 0) != (1560820397 | 0)) {
             break label$4
            }
            $2 = HEAP32[($9 + 4156 | 0) >> 2] | 0;
            $3 = $2 ? (($2 | 0) == (1 | 0) ? 11 : 10) : 9;
            break label$4;
           }
           if ((HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] | 0 | 0) == (1560820397 | 0)) {
            break label$6
           }
           if (($6 | 0) < (5 | 0)) {
            break label$19
           }
           $3 = Math_imul($6, 6);
           break label$4;
          }
          if (($2 | 0) == (1560820397 | 0)) {
           break label$5
          }
         }
         $3 = $6 << 2 | 0 | 2 | 0;
         break label$4;
        }
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 1;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        break label$3;
       }
       if (($6 | 0) < (5 | 0)) {
        break label$5
       }
       $3 = Math_imul($6, 5);
       break label$4;
      }
      $3 = $6 << 2 | 0 | 1 | 0;
     }
     label$22 : {
      label$23 : {
       $2 = HEAP32[($0 + 368 | 0) >> 2] | 0;
       if (!$2) {
        break label$23
       }
       if ((HEAP32[($0 + 372 | 0) >> 2] | 0 | 0) >= ($3 | 0)) {
        break label$22
       }
      }
      $2 = ($3 | 0) > (10 | 0) ? $3 : 10;
      HEAP32[($0 + 372 | 0) >> 2] = $2;
      $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 0, Math_imul($2, 36)) | 0;
      HEAP32[($0 + 368 | 0) >> 2] = $2;
     }
     HEAP32[($0 + 168 | 0) >> 2] = $3;
     HEAP32[($0 + 172 | 0) >> 2] = $2;
     label$24 : {
      label$25 : {
       label$26 : {
        label$27 : {
         label$28 : {
          label$29 : {
           label$30 : {
            label$31 : {
             label$32 : {
              label$33 : {
               label$34 : {
                label$35 : {
                 label$36 : {
                  label$37 : {
                   label$38 : {
                    label$39 : {
                     label$40 : {
                      label$41 : {
                       label$42 : {
                        if (($6 | 0) != (3 | 0)) {
                         break label$42
                        }
                        $9 = HEAP32[($0 + 332 | 0) >> 2] | 0;
                        $3 = HEAP32[($9 + 4152 | 0) >> 2] | 0;
                        label$43 : {
                         if ((HEAP32[($0 + 64 | 0) >> 2] | 0 | 0) != (3 | 0)) {
                          break label$43
                         }
                         if (($3 | 0) != (1560820397 | 0)) {
                          break label$30
                         }
                         label$44 : {
                          label$45 : {
                           switch (HEAP32[($9 + 4156 | 0) >> 2] | 0 | 0) {
                           case 0:
                            i64toi32_i32$1 = $2;
                            i64toi32_i32$0 = 0;
                            HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 3;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
                            i64toi32_i32$0 = 2;
                            HEAP32[i64toi32_i32$1 >> 2] = 1;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = $2 + 28 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            $2 = $2 + 36 | 0;
                            break label$44;
                           case 1:
                            i64toi32_i32$1 = $2;
                            i64toi32_i32$0 = 0;
                            HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 1;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$0 = 1;
                            HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
                            HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$0 = 2;
                            HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
                            HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = i64toi32_i32$1 + 28 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = $2 + 56 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = $2 + 64 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = $2 + 92 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            i64toi32_i32$1 = $2 + 100 | 0;
                            i64toi32_i32$0 = 0;
                            HEAP32[i64toi32_i32$1 >> 2] = 0;
                            HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                            $2 = $2 + 108 | 0;
                            break label$44;
                           default:
                            break label$45;
                           };
                          }
                          i64toi32_i32$1 = $2;
                          i64toi32_i32$0 = 0;
                          HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                          HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$0 = 0;
                          HEAP32[i64toi32_i32$1 >> 2] = 1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$0 = 1;
                          HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 2;
                          HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$1 = i64toi32_i32$1 + 28 | 0;
                          i64toi32_i32$0 = 0;
                          HEAP32[i64toi32_i32$1 >> 2] = 0;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          i64toi32_i32$1 = $2 + 56 | 0;
                          i64toi32_i32$0 = 0;
                          HEAP32[i64toi32_i32$1 >> 2] = 0;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          HEAP32[($2 + 44 | 0) >> 2] = 2;
                          i64toi32_i32$1 = $2 + 64 | 0;
                          i64toi32_i32$0 = 0;
                          HEAP32[i64toi32_i32$1 >> 2] = 0;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          $2 = $2 + 72 | 0;
                         }
                         i64toi32_i32$1 = $2;
                         i64toi32_i32$0 = 2;
                         HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 1;
                         HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 2;
                         HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 1;
                         HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 2;
                         HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                         HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 8;
                         HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$0 = 0;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         HEAP32[(i64toi32_i32$1 + 280 | 0) >> 2] = 0;
                         i64toi32_i32$1 = i64toi32_i32$1 + 272 | 0;
                         i64toi32_i32$0 = 63;
                         HEAP32[i64toi32_i32$1 >> 2] = 9;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 244 | 0;
                         i64toi32_i32$0 = 0;
                         HEAP32[i64toi32_i32$1 >> 2] = 0;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 236 | 0;
                         i64toi32_i32$0 = 63;
                         HEAP32[i64toi32_i32$1 >> 2] = 9;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 208 | 0;
                         i64toi32_i32$0 = 0;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 200 | 0;
                         i64toi32_i32$0 = 63;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 172 | 0;
                         i64toi32_i32$0 = 1;
                         HEAP32[i64toi32_i32$1 >> 2] = 2;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 164 | 0;
                         i64toi32_i32$0 = 63;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 136 | 0;
                         i64toi32_i32$0 = 2;
                         HEAP32[i64toi32_i32$1 >> 2] = 0;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 128 | 0;
                         i64toi32_i32$0 = 63;
                         HEAP32[i64toi32_i32$1 >> 2] = 9;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 100 | 0;
                         i64toi32_i32$0 = 0;
                         HEAP32[i64toi32_i32$1 >> 2] = 0;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 92 | 0;
                         i64toi32_i32$0 = 8;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 64 | 0;
                         i64toi32_i32$0 = 0;
                         HEAP32[i64toi32_i32$1 >> 2] = 0;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         i64toi32_i32$1 = $2 + 56 | 0;
                         i64toi32_i32$0 = 8;
                         HEAP32[i64toi32_i32$1 >> 2] = 1;
                         HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                         $2 = $2 + 284 | 0;
                         break label$2;
                        }
                        HEAP32[$2 >> 2] = $6;
                        if (($3 | 0) == (1560820397 | 0)) {
                         break label$28
                        }
                        break label$41;
                       }
                       if ((HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 4152 | 0) >> 2] | 0 | 0) == (1560820397 | 0)) {
                        break label$29
                       }
                       label$48 : {
                        if (($6 | 0) < (5 | 0)) {
                         break label$48
                        }
                        $8 = $6 & 3 | 0;
                        $9 = 0;
                        if (($6 + -1 | 0) >>> 0 >= 3 >>> 0) {
                         break label$40
                        }
                        $3 = 0;
                        break label$39;
                       }
                       HEAP32[$2 >> 2] = $6;
                       if (($6 | 0) < (1 | 0)) {
                        break label$36
                       }
                      }
                      $10 = $6 & 7 | 0;
                      $4 = 0;
                      $3 = 0;
                      label$49 : {
                       if (($6 + -1 | 0) >>> 0 < 7 >>> 0) {
                        break label$49
                       }
                       $5 = $6 & -8 | 0;
                       $3 = 0;
                       $8 = 0;
                       label$50 : while (1) {
                        $9 = $2 + 4 | 0;
                        HEAP32[($9 + ($3 << 2 | 0) | 0) >> 2] = $3;
                        $0 = $3 | 1 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 2 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 3 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 4 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 5 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 6 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $0 = $3 | 7 | 0;
                        HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                        $3 = $3 + 8 | 0;
                        $8 = $8 + 8 | 0;
                        if (($8 | 0) != ($5 | 0)) {
                         continue label$50
                        }
                        break label$50;
                       };
                      }
                      label$51 : {
                       if (!$10) {
                        break label$51
                       }
                       label$52 : while (1) {
                        HEAP32[(($2 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] = $3;
                        $3 = $3 + 1 | 0;
                        $4 = $4 + 1 | 0;
                        if (($4 | 0) != ($10 | 0)) {
                         continue label$52
                        }
                        break label$52;
                       };
                      }
                      i64toi32_i32$1 = $2;
                      i64toi32_i32$0 = 1;
                      HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                      if (($6 | 0) <= (0 | 0)) {
                       break label$35
                      }
                      $2 = $2 + 36 | 0;
                      $7 = 1;
                      break label$38;
                     }
                     $0 = $6 & -4 | 0;
                     $3 = 0;
                     $4 = 0;
                     label$53 : while (1) {
                      HEAP32[($2 + 108 | 0) >> 2] = 1;
                      HEAP32[($2 + 72 | 0) >> 2] = 1;
                      HEAP32[($2 + 36 | 0) >> 2] = 1;
                      i64toi32_i32$1 = $2;
                      i64toi32_i32$0 = 1;
                      HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                      HEAP32[i64toi32_i32$1 >> 2] = 1;
                      i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
                      i64toi32_i32$0 = 1;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$1 = $2 + 128 | 0;
                      i64toi32_i32$0 = 0;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
                      i64toi32_i32$1 = $2 + 100 | 0;
                      i64toi32_i32$0 = 1;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$1 = $2 + 92 | 0;
                      i64toi32_i32$0 = 0;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
                      i64toi32_i32$1 = $2 + 64 | 0;
                      i64toi32_i32$0 = 1;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$1 = $2 + 56 | 0;
                      i64toi32_i32$0 = 0;
                      HEAP32[i64toi32_i32$1 >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
                      $3 = $3 + 4 | 0;
                      $2 = $2 + 144 | 0;
                      $4 = $4 + 4 | 0;
                      if (($4 | 0) != ($0 | 0)) {
                       continue label$53
                      }
                      break label$53;
                     };
                    }
                    label$54 : {
                     if (!$8) {
                      break label$54
                     }
                     label$55 : while (1) {
                      i64toi32_i32$1 = $2;
                      i64toi32_i32$0 = 1;
                      HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                      i64toi32_i32$0 = 0;
                      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                      HEAP32[i64toi32_i32$1 >> 2] = 1;
                      $3 = $3 + 1 | 0;
                      $2 = i64toi32_i32$1 + 36 | 0;
                      $9 = $9 + 1 | 0;
                      if (($9 | 0) != ($8 | 0)) {
                       continue label$55
                      }
                      break label$55;
                     };
                    }
                    $7 = 0;
                    if (($6 | 0) < (1 | 0)) {
                     break label$37
                    }
                   }
                   $8 = $6 & 3 | 0;
                   $9 = 0;
                   label$56 : {
                    label$57 : {
                     $5 = $6 + -1 | 0;
                     if ($5 >>> 0 >= 3 >>> 0) {
                      break label$57
                     }
                     $3 = 0;
                     break label$56;
                    }
                    $0 = $6 & -4 | 0;
                    $3 = 0;
                    $4 = 0;
                    label$58 : while (1) {
                     HEAP32[($2 + 108 | 0) >> 2] = 1;
                     HEAP32[($2 + 72 | 0) >> 2] = 1;
                     HEAP32[($2 + 36 | 0) >> 2] = 1;
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 2;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 5;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 128 | 0;
                     i64toi32_i32$0 = 5;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
                     i64toi32_i32$1 = $2 + 100 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 92 | 0;
                     i64toi32_i32$0 = 5;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
                     i64toi32_i32$1 = $2 + 64 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 56 | 0;
                     i64toi32_i32$0 = 5;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
                     $3 = $3 + 4 | 0;
                     $2 = $2 + 144 | 0;
                     $4 = $4 + 4 | 0;
                     if (($4 | 0) != ($0 | 0)) {
                      continue label$58
                     }
                     break label$58;
                    };
                   }
                   label$59 : {
                    if (!$8) {
                     break label$59
                    }
                    label$60 : while (1) {
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 2;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 5;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     $3 = $3 + 1 | 0;
                     $2 = i64toi32_i32$1 + 36 | 0;
                     $9 = $9 + 1 | 0;
                     if (($9 | 0) != ($8 | 0)) {
                      continue label$60
                     }
                     break label$60;
                    };
                   }
                   $8 = $6 & 3 | 0;
                   $9 = 0;
                   label$61 : {
                    label$62 : {
                     if ($5 >>> 0 >= 3 >>> 0) {
                      break label$62
                     }
                     $3 = 0;
                     break label$61;
                    }
                    $0 = $6 & -4 | 0;
                    $3 = 0;
                    $4 = 0;
                    label$63 : while (1) {
                     HEAP32[($2 + 108 | 0) >> 2] = 1;
                     HEAP32[($2 + 72 | 0) >> 2] = 1;
                     HEAP32[($2 + 36 | 0) >> 2] = 1;
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 2;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 63;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 6;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 128 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 6;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
                     i64toi32_i32$1 = $2 + 100 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 92 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 6;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
                     i64toi32_i32$1 = $2 + 64 | 0;
                     i64toi32_i32$0 = 2;
                     HEAP32[i64toi32_i32$1 >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 56 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 6;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
                     $3 = $3 + 4 | 0;
                     $2 = $2 + 144 | 0;
                     $4 = $4 + 4 | 0;
                     if (($4 | 0) != ($0 | 0)) {
                      continue label$63
                     }
                     break label$63;
                    };
                   }
                   label$64 : {
                    if (!$8) {
                     break label$64
                    }
                    label$65 : while (1) {
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 2;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 63;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 6;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     $3 = $3 + 1 | 0;
                     $2 = i64toi32_i32$1 + 36 | 0;
                     $9 = $9 + 1 | 0;
                     if (($9 | 0) != ($8 | 0)) {
                      continue label$65
                     }
                     break label$65;
                    };
                   }
                   $0 = $6 & 3 | 0;
                   $4 = 0;
                   label$66 : {
                    label$67 : {
                     if ($5 >>> 0 >= 3 >>> 0) {
                      break label$67
                     }
                     $9 = 0;
                     break label$66;
                    }
                    $10 = $6 & -4 | 0;
                    $9 = 0;
                    $8 = 0;
                    label$68 : while (1) {
                     $3 = $2;
                     HEAP32[($2 + 108 | 0) >> 2] = 1;
                     HEAP32[($2 + 72 | 0) >> 2] = 1;
                     HEAP32[($2 + 36 | 0) >> 2] = 1;
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 1;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 2;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 63;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $9;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
                     i64toi32_i32$0 = 1;
                     HEAP32[i64toi32_i32$1 >> 2] = 2;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 128 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 112 | 0) >> 2] = $9 | 3 | 0;
                     i64toi32_i32$1 = $2 + 100 | 0;
                     i64toi32_i32$0 = 1;
                     HEAP32[i64toi32_i32$1 >> 2] = 2;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 92 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 76 | 0) >> 2] = $9 | 2 | 0;
                     i64toi32_i32$1 = $2 + 64 | 0;
                     i64toi32_i32$0 = 1;
                     HEAP32[i64toi32_i32$1 >> 2] = 2;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$1 = $2 + 56 | 0;
                     i64toi32_i32$0 = 63;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[($2 + 40 | 0) >> 2] = $9 | 1 | 0;
                     $9 = $9 + 4 | 0;
                     $2 = $2 + 144 | 0;
                     $8 = $8 + 4 | 0;
                     if (($8 | 0) != ($10 | 0)) {
                      continue label$68
                     }
                     break label$68;
                    };
                    $3 = $3 + 108 | 0;
                   }
                   label$69 : {
                    if (!$0) {
                     break label$69
                    }
                    label$70 : while (1) {
                     $3 = $2;
                     i64toi32_i32$1 = $2;
                     i64toi32_i32$0 = 1;
                     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 2;
                     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                     i64toi32_i32$0 = 63;
                     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
                     HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $9;
                     HEAP32[i64toi32_i32$1 >> 2] = 1;
                     $9 = $9 + 1 | 0;
                     $2 = i64toi32_i32$1 + 36 | 0;
                     $4 = $4 + 1 | 0;
                     if (($4 | 0) != ($0 | 0)) {
                      continue label$70
                     }
                     break label$70;
                    };
                   }
                   if ($7) {
                    break label$34
                   }
                   $7 = 1;
                  }
                  $8 = $6 & 3 | 0;
                  $9 = 0;
                  if (($6 + -1 | 0) >>> 0 >= 3 >>> 0) {
                   break label$33
                  }
                  $3 = 0;
                  break label$32;
                 }
                 i64toi32_i32$1 = $2;
                 i64toi32_i32$0 = 1;
                 HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
                 HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
                 i64toi32_i32$0 = 0;
                 HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
                 HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
                }
                HEAP32[($2 + 36 | 0) >> 2] = $6;
                HEAP32[($2 + 64 | 0) >> 2] = 1;
                i64toi32_i32$1 = $2 + 56 | 0;
                i64toi32_i32$0 = 0;
                HEAP32[i64toi32_i32$1 >> 2] = 0;
                HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                $2 = $2 + 68 | 0;
                break label$2;
               }
               HEAP32[$2 >> 2] = $6;
               $10 = $6 & 7 | 0;
               $4 = 0;
               $2 = 0;
               label$71 : {
                if ($5 >>> 0 < 7 >>> 0) {
                 break label$71
                }
                $5 = $6 & -8 | 0;
                $2 = 0;
                $9 = $3 + 40 | 0;
                $8 = 0;
                label$72 : while (1) {
                 HEAP32[($9 + ($2 << 2 | 0) | 0) >> 2] = $2;
                 $0 = $2 | 1 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 2 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 3 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 4 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 5 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 6 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $0 = $2 | 7 | 0;
                 HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
                 $2 = $2 + 8 | 0;
                 $8 = $8 + 8 | 0;
                 if (($8 | 0) != ($5 | 0)) {
                  continue label$72
                 }
                 break label$72;
                };
               }
               label$73 : {
                if (!$10) {
                 break label$73
                }
                label$74 : while (1) {
                 HEAP32[(($3 + ($2 << 2 | 0) | 0) + 40 | 0) >> 2] = $2;
                 $2 = $2 + 1 | 0;
                 $4 = $4 + 1 | 0;
                 if (($4 | 0) != ($10 | 0)) {
                  continue label$74
                 }
                 break label$74;
                };
               }
               i64toi32_i32$1 = $3 + 64 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$1 = $3 + 56 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               $2 = $3 + 72 | 0;
               break label$31;
              }
              $0 = $6 & -4 | 0;
              $3 = 0;
              $4 = 0;
              label$75 : while (1) {
               HEAP32[($2 + 108 | 0) >> 2] = 1;
               HEAP32[($2 + 72 | 0) >> 2] = 1;
               HEAP32[($2 + 36 | 0) >> 2] = 1;
               i64toi32_i32$1 = $2;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$1 = $2 + 128 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
               i64toi32_i32$1 = $2 + 100 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$1 = $2 + 92 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
               i64toi32_i32$1 = $2 + 64 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$1 = $2 + 56 | 0;
               i64toi32_i32$0 = 0;
               HEAP32[i64toi32_i32$1 >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
               $3 = $3 + 4 | 0;
               $2 = $2 + 144 | 0;
               $4 = $4 + 4 | 0;
               if (($4 | 0) != ($0 | 0)) {
                continue label$75
               }
               break label$75;
              };
             }
             label$76 : {
              if (!$8) {
               break label$76
              }
              label$77 : while (1) {
               i64toi32_i32$1 = $2;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
               HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
               i64toi32_i32$0 = 0;
               HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
               HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
               HEAP32[i64toi32_i32$1 >> 2] = 1;
               $3 = $3 + 1 | 0;
               $2 = i64toi32_i32$1 + 36 | 0;
               $9 = $9 + 1 | 0;
               if (($9 | 0) != ($8 | 0)) {
                continue label$77
               }
               break label$77;
              };
             }
             if (!$7) {
              break label$1
             }
            }
            $4 = $6 & 3 | 0;
            $9 = 0;
            label$78 : {
             label$79 : {
              if (($6 + -1 | 0) >>> 0 >= 3 >>> 0) {
               break label$79
              }
              $3 = 0;
              break label$78;
             }
             $8 = $6 & -4 | 0;
             $3 = 0;
             $6 = 0;
             label$80 : while (1) {
              HEAP32[($2 + 108 | 0) >> 2] = 1;
              HEAP32[($2 + 72 | 0) >> 2] = 1;
              HEAP32[($2 + 36 | 0) >> 2] = 1;
              i64toi32_i32$1 = $2;
              i64toi32_i32$0 = 0;
              HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$0 = 63;
              HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $2 + 128 | 0;
              i64toi32_i32$0 = 63;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
              i64toi32_i32$1 = $2 + 100 | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $2 + 92 | 0;
              i64toi32_i32$0 = 63;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
              i64toi32_i32$1 = $2 + 64 | 0;
              i64toi32_i32$0 = 0;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              i64toi32_i32$1 = $2 + 56 | 0;
              i64toi32_i32$0 = 63;
              HEAP32[i64toi32_i32$1 >> 2] = 1;
              HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
              HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
              $3 = $3 + 4 | 0;
              $2 = $2 + 144 | 0;
              $6 = $6 + 4 | 0;
              if (($6 | 0) != ($8 | 0)) {
               continue label$80
              }
              break label$80;
             };
            }
            if (!$4) {
             break label$1
            }
            label$81 : while (1) {
             i64toi32_i32$1 = $2;
             i64toi32_i32$0 = 0;
             HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
             HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$0 = 63;
             HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
             HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
             HEAP32[i64toi32_i32$1 >> 2] = 1;
             $3 = $3 + 1 | 0;
             $2 = i64toi32_i32$1 + 36 | 0;
             $9 = $9 + 1 | 0;
             if (($9 | 0) != ($4 | 0)) {
              continue label$81
             }
             break label$1;
            };
           }
           i64toi32_i32$1 = $2;
           i64toi32_i32$0 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 3;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 3;
           HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 1;
           HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 2;
           HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 1;
           HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = i64toi32_i32$1 + 8 | 0;
           i64toi32_i32$0 = 2;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($2 + 240 | 0) >> 2] = 0;
           i64toi32_i32$1 = $2 + 224 | 0;
           i64toi32_i32$0 = 2;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 208 | 0;
           i64toi32_i32$0 = 1;
           HEAP32[i64toi32_i32$1 >> 2] = 2;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 200 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 172 | 0;
           i64toi32_i32$0 = 2;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 164 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 6;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 136 | 0;
           i64toi32_i32$0 = 1;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 128 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 100 | 0;
           i64toi32_i32$0 = 1;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 92 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 64 | 0;
           i64toi32_i32$0 = 2;
           HEAP32[i64toi32_i32$1 >> 2] = 0;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 56 | 0;
           i64toi32_i32$0 = 5;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($2 + 352 | 0) >> 2] = 1;
           i64toi32_i32$1 = $2 + 344 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2;
           i64toi32_i32$0 = 0;
           HEAP32[(i64toi32_i32$1 + 324 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 328 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = i64toi32_i32$1 + 316 | 0;
           i64toi32_i32$0 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 308 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2;
           i64toi32_i32$0 = 1;
           HEAP32[(i64toi32_i32$1 + 288 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 292 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = i64toi32_i32$1 + 280 | 0;
           i64toi32_i32$0 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2 + 272 | 0;
           i64toi32_i32$0 = 63;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = $2;
           i64toi32_i32$0 = 2;
           HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] = i64toi32_i32$0;
           i64toi32_i32$1 = i64toi32_i32$1 + 244 | 0;
           i64toi32_i32$0 = 0;
           HEAP32[i64toi32_i32$1 >> 2] = 1;
           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
           HEAP32[($2 + 236 | 0) >> 2] = 0;
           $2 = $2 + 356 | 0;
           break label$2;
          }
          label$82 : {
           if (($6 | 0) < (5 | 0)) {
            break label$82
           }
           $8 = $6 & 3 | 0;
           $9 = 0;
           if (($6 + -1 | 0) >>> 0 >= 3 >>> 0) {
            break label$26
           }
           $3 = 0;
           break label$25;
          }
          HEAP32[$2 >> 2] = $6;
          if (($6 | 0) < (1 | 0)) {
           break label$27
          }
         }
         $10 = $6 & 7 | 0;
         $4 = 0;
         $3 = 0;
         label$83 : {
          if (($6 + -1 | 0) >>> 0 < 7 >>> 0) {
           break label$83
          }
          $5 = $6 & -8 | 0;
          $3 = 0;
          $8 = 0;
          label$84 : while (1) {
           $9 = $2 + 4 | 0;
           HEAP32[($9 + ($3 << 2 | 0) | 0) >> 2] = $3;
           $0 = $3 | 1 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 2 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 3 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 4 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 5 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 6 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $0 = $3 | 7 | 0;
           HEAP32[($9 + ($0 << 2 | 0) | 0) >> 2] = $0;
           $3 = $3 + 8 | 0;
           $8 = $8 + 8 | 0;
           if (($8 | 0) != ($5 | 0)) {
            continue label$84
           }
           break label$84;
          };
         }
         if (!$10) {
          break label$27
         }
         label$85 : while (1) {
          HEAP32[(($2 + ($3 << 2 | 0) | 0) + 4 | 0) >> 2] = $3;
          $3 = $3 + 1 | 0;
          $4 = $4 + 1 | 0;
          if (($4 | 0) != ($10 | 0)) {
           continue label$85
          }
          break label$85;
         };
        }
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = i64toi32_i32$1 + 28 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $2 = $2 + 36 | 0;
        break label$24;
       }
       $0 = $6 & -4 | 0;
       $3 = 0;
       $4 = 0;
       label$86 : while (1) {
        i64toi32_i32$1 = $2;
        i64toi32_i32$0 = 0;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
        HEAP32[i64toi32_i32$1 >> 2] = 1;
        HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
        HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
        HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
        i64toi32_i32$1 = i64toi32_i32$1 + 28 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $2 + 56 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
        i64toi32_i32$1 = $2 + 64 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $2 + 92 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
        i64toi32_i32$1 = $2 + 100 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        i64toi32_i32$1 = $2 + 128 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
        i64toi32_i32$1 = $2 + 136 | 0;
        i64toi32_i32$0 = 0;
        HEAP32[i64toi32_i32$1 >> 2] = 0;
        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
        $3 = $3 + 4 | 0;
        $2 = $2 + 144 | 0;
        $4 = $4 + 4 | 0;
        if (($4 | 0) != ($0 | 0)) {
         continue label$86
        }
        break label$86;
       };
      }
      if (!$8) {
       break label$24
      }
      label$87 : while (1) {
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       i64toi32_i32$1 = i64toi32_i32$1 + 28 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $3 = $3 + 1 | 0;
       $2 = $2 + 36 | 0;
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue label$87
       }
       break label$87;
      };
     }
     if (($6 | 0) < (1 | 0)) {
      break label$1
     }
     $8 = $6 & 3 | 0;
     $9 = 0;
     label$88 : {
      label$89 : {
       $10 = $6 + -1 | 0;
       if ($10 >>> 0 >= 3 >>> 0) {
        break label$89
       }
       $3 = 0;
       break label$88;
      }
      $0 = $6 & -4 | 0;
      $3 = 0;
      $4 = 0;
      label$90 : while (1) {
       HEAP32[($2 + 108 | 0) >> 2] = 1;
       HEAP32[($2 + 72 | 0) >> 2] = 1;
       HEAP32[($2 + 36 | 0) >> 2] = 1;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 2;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 8;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 128 | 0;
       i64toi32_i32$0 = 8;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 8;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
       i64toi32_i32$1 = $2 + 64 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 56 | 0;
       i64toi32_i32$0 = 8;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
       $3 = $3 + 4 | 0;
       $2 = $2 + 144 | 0;
       $4 = $4 + 4 | 0;
       if (($4 | 0) != ($0 | 0)) {
        continue label$90
       }
       break label$90;
      };
     }
     label$91 : {
      if (!$8) {
       break label$91
      }
      label$92 : while (1) {
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 2;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 8;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       $3 = $3 + 1 | 0;
       $2 = i64toi32_i32$1 + 36 | 0;
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue label$92
       }
       break label$92;
      };
     }
     $8 = $6 & 3 | 0;
     $9 = 0;
     label$93 : {
      label$94 : {
       if ($10 >>> 0 >= 3 >>> 0) {
        break label$94
       }
       $3 = 0;
       break label$93;
      }
      $0 = $6 & -4 | 0;
      $3 = 0;
      $4 = 0;
      label$95 : while (1) {
       HEAP32[($2 + 108 | 0) >> 2] = 1;
       HEAP32[($2 + 72 | 0) >> 2] = 1;
       HEAP32[($2 + 36 | 0) >> 2] = 1;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 2;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 63;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 9;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 128 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 9;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 9;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
       i64toi32_i32$1 = $2 + 64 | 0;
       i64toi32_i32$0 = 2;
       HEAP32[i64toi32_i32$1 >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 56 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 9;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
       $3 = $3 + 4 | 0;
       $2 = $2 + 144 | 0;
       $4 = $4 + 4 | 0;
       if (($4 | 0) != ($0 | 0)) {
        continue label$95
       }
       break label$95;
      };
     }
     label$96 : {
      if (!$8) {
       break label$96
      }
      label$97 : while (1) {
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 2;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 63;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 9;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       $3 = $3 + 1 | 0;
       $2 = i64toi32_i32$1 + 36 | 0;
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue label$97
       }
       break label$97;
      };
     }
     $8 = $6 & 3 | 0;
     $9 = 0;
     label$98 : {
      label$99 : {
       if ($10 >>> 0 >= 3 >>> 0) {
        break label$99
       }
       $3 = 0;
       break label$98;
      }
      $0 = $6 & -4 | 0;
      $3 = 0;
      $4 = 0;
      label$100 : while (1) {
       HEAP32[($2 + 108 | 0) >> 2] = 1;
       HEAP32[($2 + 72 | 0) >> 2] = 1;
       HEAP32[($2 + 36 | 0) >> 2] = 1;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 1;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 2;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 63;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 2;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 128 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 2;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
       i64toi32_i32$1 = $2 + 64 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 2;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 56 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
       $3 = $3 + 4 | 0;
       $2 = $2 + 144 | 0;
       $4 = $4 + 4 | 0;
       if (($4 | 0) != ($0 | 0)) {
        continue label$100
       }
       break label$100;
      };
     }
     label$101 : {
      if (!$8) {
       break label$101
      }
      label$102 : while (1) {
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 1;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 2;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 63;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       $3 = $3 + 1 | 0;
       $2 = i64toi32_i32$1 + 36 | 0;
       $9 = $9 + 1 | 0;
       if (($9 | 0) != ($8 | 0)) {
        continue label$102
       }
       break label$102;
      };
     }
     $4 = $6 & 3 | 0;
     $9 = 0;
     label$103 : {
      label$104 : {
       if ($10 >>> 0 >= 3 >>> 0) {
        break label$104
       }
       $3 = 0;
       break label$103;
      }
      $8 = $6 & -4 | 0;
      $3 = 0;
      $6 = 0;
      label$105 : while (1) {
       HEAP32[($2 + 108 | 0) >> 2] = 1;
       HEAP32[($2 + 72 | 0) >> 2] = 1;
       HEAP32[($2 + 36 | 0) >> 2] = 1;
       i64toi32_i32$1 = $2;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 63;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 128 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 112 | 0) >> 2] = $3 | 3 | 0;
       i64toi32_i32$1 = $2 + 100 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 92 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 76 | 0) >> 2] = $3 | 2 | 0;
       i64toi32_i32$1 = $2 + 64 | 0;
       i64toi32_i32$0 = 0;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $2 + 56 | 0;
       i64toi32_i32$0 = 63;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[($2 + 40 | 0) >> 2] = $3 | 1 | 0;
       $3 = $3 + 4 | 0;
       $2 = $2 + 144 | 0;
       $6 = $6 + 4 | 0;
       if (($6 | 0) != ($8 | 0)) {
        continue label$105
       }
       break label$105;
      };
     }
     if (!$4) {
      break label$1
     }
     label$106 : while (1) {
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 63;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = $3;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      $3 = $3 + 1 | 0;
      $2 = i64toi32_i32$1 + 36 | 0;
      $9 = $9 + 1 | 0;
      if (($9 | 0) != ($4 | 0)) {
       continue label$106
      }
      break label$1;
     };
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2 + 92 | 0;
    i64toi32_i32$0 = 63;
    HEAP32[i64toi32_i32$1 >> 2] = 9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2 + 64 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2 + 56 | 0;
    i64toi32_i32$0 = 8;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2 + 28 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $3 = $2 + 108 | 0;
    label$107 : {
     label$108 : {
      if ((HEAP32[($4 + 4188 | 0) >> 2] | 0 | 0) >= (1 | 0)) {
       break label$108
      }
      $8 = $2;
      break label$107;
     }
     $6 = 0;
     label$109 : while (1) {
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
      $9 = $6 + 1 | 0;
      HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = $9;
      HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = 0;
      i64toi32_i32$1 = i64toi32_i32$1 + 200 | 0;
      i64toi32_i32$0 = 63;
      HEAP32[i64toi32_i32$1 >> 2] = 9;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 176 | 0) >> 2] = $9;
      HEAP32[($2 + 172 | 0) >> 2] = 0;
      i64toi32_i32$1 = $2 + 164 | 0;
      i64toi32_i32$0 = 8;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 140 | 0) >> 2] = $6;
      HEAP32[($2 + 136 | 0) >> 2] = $9;
      i64toi32_i32$1 = $2 + 128 | 0;
      i64toi32_i32$0 = 63;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $8 = $3;
      $3 = $3 + 108 | 0;
      $6 = $9;
      $2 = $8;
      if (($9 | 0) < (HEAP32[($4 + 4188 | 0) >> 2] | 0 | 0)) {
       continue label$109
      }
      break label$109;
     };
    }
    i64toi32_i32$1 = $8;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $8 + 128 | 0;
    i64toi32_i32$0 = 63;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $9 = $3 + 36 | 0;
    label$110 : {
     if ((HEAP32[($4 + 4184 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$110
     }
     $2 = 0;
     label$111 : while (1) {
      HEAP32[$9 >> 2] = 1;
      HEAP32[($3 + 104 | 0) >> 2] = 0;
      i64toi32_i32$1 = $3 + 96 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 63;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = $3;
      i64toi32_i32$0 = 0;
      HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$1 = i64toi32_i32$1 + 64 | 0;
      i64toi32_i32$0 = 0;
      HEAP32[i64toi32_i32$1 >> 2] = 0;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($3 + 56 | 0) >> 2] = 1;
      HEAP32[($3 + 40 | 0) >> 2] = 0;
      $9 = HEAP32[(($2 << 2 | 0) + 143456 | 0) >> 2] | 0;
      HEAP32[($3 + 60 | 0) >> 2] = $9;
      HEAP32[($3 + 92 | 0) >> 2] = $9 + 1 | 0;
      $9 = $3 + 108 | 0;
      $3 = $3 + 72 | 0;
      $2 = $2 + 1 | 0;
      if (($2 | 0) < (HEAP32[($4 + 4184 | 0) >> 2] | 0 | 0)) {
       continue label$111
      }
      break label$111;
     };
    }
    label$112 : {
     if (($1 | 0) != (1 | 0)) {
      break label$112
     }
     HEAP32[($4 + 4192 | 0) >> 2] = 0;
     $2 = $4 + 4180 | 0;
     break label$2;
    }
    HEAP32[($4 + 4180 | 0) >> 2] = 3;
    HEAP32[($4 + 4192 | 0) >> 2] = 2;
    HEAP32[$9 >> 2] = 2;
    i64toi32_i32$1 = $3 + 56 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 40 | 0;
    i64toi32_i32$0 = 2;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 64 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 92 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 1;
    HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 128 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 2;
    HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 136 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 280 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 272 | 0;
    i64toi32_i32$0 = 63;
    HEAP32[i64toi32_i32$1 >> 2] = 9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 2;
    HEAP32[(i64toi32_i32$1 + 252 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 256 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 244 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 236 | 0;
    i64toi32_i32$0 = 8;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 2;
    HEAP32[(i64toi32_i32$1 + 216 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 220 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 208 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 200 | 0;
    i64toi32_i32$0 = 63;
    HEAP32[i64toi32_i32$1 >> 2] = 9;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 1;
    HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 172 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3 + 164 | 0;
    i64toi32_i32$0 = 8;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 1;
    HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
    $2 = i64toi32_i32$1 + 288 | 0;
    label$113 : {
     $6 = HEAP32[($0 + 332 | 0) >> 2] | 0;
     if ((HEAP32[($6 + 4192 | 0) >> 2] | 0 | 0) < (1 | 0)) {
      break label$113
     }
     $9 = 0;
     label$114 : while (1) {
      i64toi32_i32$1 = $2;
      i64toi32_i32$0 = 2;
      HEAP32[(i64toi32_i32$1 + 180 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 184 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 2;
      HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 1;
      HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 1;
      HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 76 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 2;
      HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = $9;
      i64toi32_i32$0 = 63;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
      i64toi32_i32$0 = 1;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      $3 = $9 + 1 | 0;
      HEAP32[(i64toi32_i32$1 + 212 | 0) >> 2] = $3;
      HEAP32[(i64toi32_i32$1 + 208 | 0) >> 2] = 0;
      i64toi32_i32$1 = i64toi32_i32$1 + 200 | 0;
      i64toi32_i32$0 = 63;
      HEAP32[i64toi32_i32$1 >> 2] = 9;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 176 | 0) >> 2] = $3;
      HEAP32[($2 + 172 | 0) >> 2] = 0;
      i64toi32_i32$1 = $2 + 164 | 0;
      i64toi32_i32$0 = 8;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 140 | 0) >> 2] = $3;
      HEAP32[($2 + 136 | 0) >> 2] = 0;
      i64toi32_i32$1 = $2 + 128 | 0;
      i64toi32_i32$0 = 63;
      HEAP32[i64toi32_i32$1 >> 2] = 9;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 104 | 0) >> 2] = $3;
      HEAP32[($2 + 100 | 0) >> 2] = 0;
      i64toi32_i32$1 = $2 + 92 | 0;
      i64toi32_i32$0 = 8;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 68 | 0) >> 2] = $9;
      HEAP32[($2 + 64 | 0) >> 2] = $3;
      i64toi32_i32$1 = $2 + 56 | 0;
      i64toi32_i32$0 = 63;
      HEAP32[i64toi32_i32$1 >> 2] = 1;
      HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($2 + 28 | 0) >> 2] = $3;
      $2 = $2 + 216 | 0;
      $9 = $3;
      if (($3 | 0) < (HEAP32[($6 + 4192 | 0) >> 2] | 0 | 0)) {
       continue label$114
      }
      break label$114;
     };
    }
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = 2;
    HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 63;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = i64toi32_i32$1 + 64 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $2 + 56 | 0;
    i64toi32_i32$0 = 63;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    if ((HEAP32[($6 + 4184 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$1
    }
    $2 = $2 + 72 | 0;
    $3 = 0;
    label$115 : while (1) {
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 2;
     HEAP32[(i64toi32_i32$1 + 108 | 0) >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = 1;
     HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 1;
     i64toi32_i32$0 = 1;
     HEAP32[i64toi32_i32$1 >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[(i64toi32_i32$1 + 140 | 0) >> 2] = 0;
     i64toi32_i32$1 = i64toi32_i32$1 + 132 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 63;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 100 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($2 + 92 | 0) >> 2] = 1;
     HEAP32[($2 + 76 | 0) >> 2] = 2;
     i64toi32_i32$1 = $2 + 68 | 0;
     i64toi32_i32$0 = 1;
     HEAP32[i64toi32_i32$1 >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$1 = $2 + 60 | 0;
     i64toi32_i32$0 = 0;
     HEAP32[i64toi32_i32$1 >> 2] = 63;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     $9 = HEAP32[(($3 << 2 | 0) + 143456 | 0) >> 2] | 0;
     HEAP32[($2 + 96 | 0) >> 2] = $9;
     HEAP32[($2 + 24 | 0) >> 2] = $9;
     $9 = $9 + 1 | 0;
     HEAP32[($2 + 128 | 0) >> 2] = $9;
     HEAP32[($2 + 56 | 0) >> 2] = $9;
     $2 = $2 + 144 | 0;
     $3 = $3 + 1 | 0;
     if (($3 | 0) < (HEAP32[($6 + 4184 | 0) >> 2] | 0 | 0)) {
      continue label$115
     }
     break label$1;
    };
   }
   HEAP32[$2 >> 2] = 0;
  }
 }
 
 function jpeg_set_colorspace($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $6 = 0, $4 = 0, $5 = 0;
  label$1 : {
   $2 = HEAP32[($0 + 20 | 0) >> 2] | 0;
   if (($2 | 0) == (100 | 0)) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 24 | 0) >> 2] = $2;
   HEAP32[($3 + 20 | 0) >> 2] = 20;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  HEAP32[($0 + 220 | 0) >> 2] = 0;
  HEAP32[($0 + 208 | 0) >> 2] = 0;
  HEAP32[($0 + 64 | 0) >> 2] = $1;
  label$2 : {
   switch ($1 | 0) {
   case 1:
    HEAP32[($0 + 60 | 0) >> 2] = 1;
    HEAP32[($0 + 208 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    return;
   case 2:
    HEAP32[($0 + 60 | 0) >> 2] = 3;
    HEAP32[($0 + 220 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 168 | 0) >> 2] = 66;
    HEAP32[($0 + 84 | 0) >> 2] = 71;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 82;
    HEAP32[($0 + 192 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    HEAP32[($0 + 60 | 0) >> 2] = 3;
    HEAP32[($0 + 208 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 168 | 0) >> 2] = 3;
    HEAP32[($0 + 84 | 0) >> 2] = 2;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 2;
    HEAP32[($0 + 8 | 0) >> 2] = 2;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 192 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    HEAP32[($0 + 60 | 0) >> 2] = 4;
    HEAP32[($0 + 220 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 252 | 0) >> 2] = 75;
    HEAP32[($0 + 168 | 0) >> 2] = 89;
    HEAP32[($0 + 84 | 0) >> 2] = 77;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 1;
    HEAP32[($0 + 8 | 0) >> 2] = 1;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 67;
    HEAP32[($0 + 276 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 268 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 260 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 192 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 5:
    HEAP32[($0 + 60 | 0) >> 2] = 4;
    HEAP32[($0 + 220 | 0) >> 2] = 1;
    $0 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    HEAP32[($0 + 252 | 0) >> 2] = 4;
    HEAP32[($0 + 168 | 0) >> 2] = 3;
    HEAP32[($0 + 84 | 0) >> 2] = 2;
    HEAP32[($0 + 24 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0;
    i64toi32_i32$0 = 2;
    HEAP32[($0 + 8 | 0) >> 2] = 2;
    HEAP32[($0 + 12 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[$0 >> 2] = 1;
    HEAP32[($0 + 276 | 0) >> 2] = 0;
    i64toi32_i32$1 = $0 + 268 | 0;
    i64toi32_i32$0 = 0;
    HEAP32[i64toi32_i32$1 >> 2] = 0;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 260 | 0;
    i64toi32_i32$0 = 2;
    HEAP32[i64toi32_i32$1 >> 2] = 2;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 192 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 184 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 176 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    HEAP32[($0 + 108 | 0) >> 2] = 1;
    i64toi32_i32$1 = $0 + 100 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $0 + 92 | 0;
    i64toi32_i32$0 = 1;
    HEAP32[i64toi32_i32$1 >> 2] = 1;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 0:
    $1 = HEAP32[($0 + 36 | 0) >> 2] | 0;
    HEAP32[($0 + 60 | 0) >> 2] = $1;
    label$9 : {
     label$10 : {
      if (($1 + -11 | 0) >>> 0 > -11 >>> 0) {
       break label$10
      }
      $2 = HEAP32[$0 >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = $1;
      HEAP32[($2 + 20 | 0) >> 2] = 26;
      HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] = 10;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
      $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      if (($1 | 0) < (1 | 0)) {
       break label$9
      }
     }
     $4 = $1 & 1 | 0;
     $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
     $0 = 0;
     label$11 : {
      if (($1 | 0) == (1 | 0)) {
       break label$11
      }
      $5 = $1 & -2 | 0;
      $0 = 0;
      $3 = 0;
      label$12 : while (1) {
       $1 = $2 + Math_imul($0, 84) | 0;
       HEAP32[($1 + 24 | 0) >> 2] = 0;
       i64toi32_i32$1 = $1;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 1;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[i64toi32_i32$1 >> 2] = $0;
       $6 = $0 | 1 | 0;
       $1 = $2 + Math_imul($6, 84) | 0;
       HEAP32[($1 + 24 | 0) >> 2] = 0;
       i64toi32_i32$1 = $1;
       i64toi32_i32$0 = 1;
       HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$0 = 0;
       HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[i64toi32_i32$1 >> 2] = $6;
       $0 = $0 + 2 | 0;
       $3 = $3 + 2 | 0;
       if (($3 | 0) != ($5 | 0)) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$4) {
      break label$9
     }
     $1 = $2 + Math_imul($0, 84) | 0;
     HEAP32[($1 + 24 | 0) >> 2] = 0;
     i64toi32_i32$1 = $1;
     i64toi32_i32$0 = 0;
     HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = 0;
     HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = i64toi32_i32$0;
     i64toi32_i32$0 = 1;
     HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 1;
     HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[i64toi32_i32$1 >> 2] = $0;
    }
    return;
   default:
    break label$2;
   };
  }
  $1 = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = 10;
  FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
 }
 
 function jinit_phuff_encoder($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, $1 = 0, i64toi32_i32$0 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 108) | 0;
  HEAP32[($0 + 364 | 0) >> 2] = $1;
  i64toi32_i32$1 = $1 + 76 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 64 | 0) >> 2] = 0;
  HEAP32[$1 >> 2] = 52;
  i64toi32_i32$1 = $1 + 84 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 92 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 100 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function start_pass_phuff($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $4 = 0, $3 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  HEAP32[($2 + 32 | 0) >> 2] = $0;
  $3 = HEAP32[($0 + 316 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
     break label$2
    }
    label$3 : {
     if ($3) {
      break label$3
     }
     HEAP32[($2 + 4 | 0) >> 2] = 53;
     break label$1;
    }
    HEAP32[($2 + 4 | 0) >> 2] = 54;
    break label$1;
   }
   label$4 : {
    if ($3) {
     break label$4
    }
    HEAP32[($2 + 4 | 0) >> 2] = 55;
    break label$1;
   }
   HEAP32[($2 + 4 | 0) >> 2] = 56;
   if (HEAP32[($2 + 64 | 0) >> 2] | 0) {
    break label$1
   }
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1e3) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if ($1) {
      break label$7
     }
     HEAP32[($2 + 8 | 0) >> 2] = 57;
     $1 = 0;
     if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) <= (0 | 0)) {
      break label$5
     }
     $4 = !$3;
     if ($3) {
      break label$6
     }
     label$8 : while (1) {
      $5 = $1 << 2 | 0;
      $6 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
      HEAP32[(($2 + $5 | 0) + 36 | 0) >> 2] = 0;
      label$9 : {
       if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
        break label$9
       }
       $5 = HEAP32[($6 + 20 | 0) >> 2] | 0;
       jpeg_make_c_derived_tbl($0 | 0, $4 | 0, $5 | 0, ($2 + ($5 << 2 | 0) | 0) + 76 | 0 | 0);
      }
      $1 = $1 + 1 | 0;
      if (($1 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
       continue label$8
      }
      break label$5;
     };
    }
    HEAP32[($2 + 8 | 0) >> 2] = 58;
    if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$5
    }
    $4 = 0;
    label$10 : while (1) {
     $1 = $4 << 2 | 0;
     $5 = HEAP32[(($0 + $1 | 0) + 248 | 0) >> 2] | 0;
     HEAP32[(($2 + $1 | 0) + 36 | 0) >> 2] = 0;
     label$11 : {
      label$12 : {
       label$13 : {
        if ($3) {
         break label$13
        }
        if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
         break label$11
        }
        $1 = HEAP32[($5 + 20 | 0) >> 2] | 0;
        break label$12;
       }
       $1 = HEAP32[($5 + 24 | 0) >> 2] | 0;
       HEAP32[($2 + 52 | 0) >> 2] = $1;
      }
      label$14 : {
       if ($1 >>> 0 < 4 >>> 0) {
        break label$14
       }
       $5 = HEAP32[$0 >> 2] | 0;
       HEAP32[($5 + 24 | 0) >> 2] = $1;
       HEAP32[($5 + 20 | 0) >> 2] = 50;
       FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
      }
      label$15 : {
       $5 = ($2 + ($1 << 2 | 0) | 0) + 92 | 0;
       $1 = HEAP32[$5 >> 2] | 0;
       if ($1) {
        break label$15
       }
       $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 1028) | 0;
       HEAP32[$5 >> 2] = $1;
      }
      memset($1 | 0, 0 | 0, 1028 | 0) | 0;
      if (!(HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0)) {
       break label$11
      }
      $6 = HEAP32[$5 >> 2] | 0;
      $5 = 0;
      label$16 : while (1) {
       $1 = $6 + ($5 << 6 | 0) | 0;
       i64toi32_i32$1 = $1;
       i64toi32_i32$0 = 1;
       HEAP32[$1 >> 2] = 1;
       HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1 + 8 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1 + 16 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1 + 24 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1 + 32 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       i64toi32_i32$1 = $1 + 40 | 0;
       i64toi32_i32$0 = 1;
       HEAP32[i64toi32_i32$1 >> 2] = 1;
       HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
       $5 = $5 + 1 | 0;
       if (($5 | 0) != (16 | 0)) {
        continue label$16
       }
       break label$16;
      };
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$10
     }
     break label$5;
    };
   }
   label$17 : while (1) {
    $5 = $1 << 2 | 0;
    $6 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
    HEAP32[(($2 + $5 | 0) + 36 | 0) >> 2] = 0;
    $5 = HEAP32[($6 + 24 | 0) >> 2] | 0;
    HEAP32[($2 + 52 | 0) >> 2] = $5;
    jpeg_make_c_derived_tbl($0 | 0, $4 | 0, $5 | 0, ($2 + ($5 << 2 | 0) | 0) + 76 | 0 | 0);
    $1 = $1 + 1 | 0;
    if (($1 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 56 | 0) >> 2] = 0;
  HEAP32[($2 + 60 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = 0;
  HEAP32[($2 + 24 | 0) >> 2] = 0;
  HEAP32[($2 + 28 | 0) >> 2] = i64toi32_i32$0;
  $1 = HEAP32[($0 + 200 | 0) >> 2] | 0;
  HEAP32[($2 + 72 | 0) >> 2] = 0;
  HEAP32[($2 + 68 | 0) >> 2] = $1;
 }
 
 function encode_mcu_DC_first($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $6 = 0, $9 = 0, $5 = 0, $8 = 0, $10 = 0, $11 = 0, $2 = 0, $7 = 0;
  $2 = HEAP32[($0 + 328 | 0) >> 2] | 0;
  $3 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   if (HEAP32[($3 + 68 | 0) >> 2] | 0) {
    break label$1
   }
   emit_restart($3 | 0, HEAP32[($3 + 72 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $5 = 0;
   label$3 : while (1) {
    $6 = $5 << 2 | 0;
    $4 = (HEAP32[(($0 + $6 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
    $7 = HEAP32[(($0 + $4 | 0) + 248 | 0) >> 2] | 0;
    $8 = ($3 + $4 | 0) + 36 | 0;
    $4 = HEAP32[$8 >> 2] | 0;
    $9 = (HEAP16[(HEAP32[($1 + $6 | 0) >> 2] | 0) >> 1] | 0) >> $2 | 0;
    HEAP32[$8 >> 2] = $9;
    $10 = $9 - $4 | 0;
    $11 = $10 >> 31 | 0;
    $6 = 0;
    label$4 : {
     if (($9 | 0) == ($4 | 0)) {
      break label$4
     }
     $4 = ($10 ^ $11 | 0) - $11 | 0;
     $6 = 0;
     label$5 : while (1) {
      $8 = $6;
      $6 = $6 + 1 | 0;
      $9 = $4 >>> 0 > 1 >>> 0;
      $4 = $4 >>> 1 | 0;
      if ($9) {
       continue label$5
      }
      break label$5;
     };
     if ($8 >>> 0 < 11 >>> 0) {
      break label$4
     }
     $4 = HEAP32[$0 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 6;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
    }
    $4 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    label$6 : {
     label$7 : {
      if (!(HEAP32[($3 + 12 | 0) >> 2] | 0)) {
       break label$7
      }
      $4 = (HEAP32[(($3 + ($4 << 2 | 0) | 0) + 92 | 0) >> 2] | 0) + ($6 << 2 | 0) | 0;
      HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + 1 | 0;
      break label$6;
     }
     $4 = HEAP32[(($3 + ($4 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
     emit_bits($3 | 0, HEAP32[($4 + ($6 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP8[(($4 + $6 | 0) + 1024 | 0) >> 0] | 0 | 0);
    }
    label$8 : {
     if (!$6) {
      break label$8
     }
     emit_bits($3 | 0, $11 + $10 | 0 | 0, $6 | 0);
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
  label$9 : {
   $6 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   if (!$6) {
    break label$9
   }
   label$10 : {
    $4 = HEAP32[($3 + 68 | 0) >> 2] | 0;
    if ($4) {
     break label$10
    }
    HEAP32[($3 + 72 | 0) >> 2] = ((HEAP32[($3 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
    $4 = $6;
   }
   HEAP32[($3 + 68 | 0) >> 2] = $4 + -1 | 0;
  }
  return 1 | 0;
 }
 
 function encode_mcu_AC_first($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $4 = 0, $13 = 0, $10 = 0, $14 = 0, $15 = 0, $6 = 0, $11 = 0, $2 = 0, $3 = 0, $8 = 0, $12 = 0, $7 = 0, $9 = 0, $90 = 0, $92 = 0, $180 = 0, $217 = 0;
  $2 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  $3 = HEAP32[($0 + 328 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($4 + 16 | 0) >> 2] = HEAP32[$5 >> 2] | 0;
  HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($5 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   if (HEAP32[($4 + 68 | 0) >> 2] | 0) {
    break label$1
   }
   emit_restart($4 | 0, HEAP32[($4 + 72 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   $6 = HEAP32[($0 + 316 | 0) >> 2] | 0;
   if (($6 | 0) > ($2 | 0)) {
    break label$2
   }
   $7 = HEAP32[$1 >> 2] | 0;
   $8 = (-1 << $3 | 0) ^ -1 | 0;
   $9 = $8 << 1 | 0;
   $10 = 0;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $5 = HEAP16[($7 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
      if (($5 + $8 | 0) >>> 0 > $9 >>> 0) {
       break label$5
      }
      $10 = $10 + 1 | 0;
      break label$4;
     }
     $11 = $5 >> 31 | 0;
     $5 = ($11 + $5 | 0) ^ $11 | 0;
     label$6 : {
      if (!(HEAP32[($4 + 56 | 0) >> 2] | 0)) {
       break label$6
      }
      emit_eobrun($4 | 0);
     }
     $12 = $5 >> $3 | 0;
     label$7 : {
      if (($10 | 0) < (16 | 0)) {
       break label$7
      }
      label$8 : {
       label$9 : {
        if (HEAP32[($4 + 12 | 0) >> 2] | 0) {
         break label$9
        }
        $5 = 0;
        break label$8;
       }
       $5 = HEAP32[(($4 + ((HEAP32[($4 + 52 | 0) >> 2] | 0) << 2 | 0) | 0) + 92 | 0) >> 2] | 0;
       $90 = $5;
       $92 = HEAP32[($5 + 960 | 0) >> 2] | 0;
       $5 = ($10 - (($10 | 0) < (31 | 0) ? $10 : 31) | 0) + 15 | 0;
       HEAP32[($90 + 960 | 0) >> 2] = ($92 + ($5 >>> 4 | 0) | 0) + 1 | 0;
       $10 = ($10 - ($5 & -16 | 0) | 0) + -16 | 0;
       break label$7;
      }
      label$10 : while (1) {
       $1 = HEAP32[($4 + 52 | 0) >> 2] | 0;
       label$11 : {
        label$12 : {
         if (!$5) {
          break label$12
         }
         $5 = HEAP32[(($4 + ($1 << 2 | 0) | 0) + 92 | 0) >> 2] | 0;
         HEAP32[($5 + 960 | 0) >> 2] = (HEAP32[($5 + 960 | 0) >> 2] | 0) + 1 | 0;
         break label$11;
        }
        $5 = HEAP32[(($4 + ($1 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
        $1 = HEAP32[($5 + 960 | 0) >> 2] | 0;
        $13 = HEAP32[($4 + 28 | 0) >> 2] | 0;
        label$13 : {
         $5 = HEAP8[($5 + 1264 | 0) >> 0] | 0;
         if ($5) {
          break label$13
         }
         $14 = HEAP32[($4 + 32 | 0) >> 2] | 0;
         $15 = HEAP32[$14 >> 2] | 0;
         HEAP32[($15 + 20 | 0) >> 2] = 40;
         FUNCTION_TABLE[HEAP32[$15 >> 2] | 0 | 0]($14);
         if (HEAP32[($4 + 12 | 0) >> 2] | 0) {
          break label$11
         }
        }
        $13 = $13 + $5 | 0;
        $5 = HEAP32[($4 + 24 | 0) >> 2] | 0 | (($1 & ((-1 << $5 | 0) ^ -1 | 0) | 0) << (24 - $13 | 0) | 0) | 0;
        label$14 : {
         if (($13 | 0) < (8 | 0)) {
          break label$14
         }
         label$15 : while (1) {
          $1 = $13;
          $13 = HEAP32[($4 + 16 | 0) >> 2] | 0;
          HEAP32[($4 + 16 | 0) >> 2] = $13 + 1 | 0;
          HEAP8[$13 >> 0] = $5 >>> 16 | 0;
          $13 = (HEAP32[($4 + 20 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($4 + 20 | 0) >> 2] = $13;
          label$16 : {
           if ($13) {
            break label$16
           }
           label$17 : {
            $13 = HEAP32[($4 + 32 | 0) >> 2] | 0;
            $180 = $13;
            $13 = HEAP32[($13 + 24 | 0) >> 2] | 0;
            if (FUNCTION_TABLE[HEAP32[($13 + 12 | 0) >> 2] | 0 | 0]($180) | 0) {
             break label$17
            }
            $14 = HEAP32[($4 + 32 | 0) >> 2] | 0;
            $15 = HEAP32[$14 >> 2] | 0;
            HEAP32[($15 + 20 | 0) >> 2] = 24;
            FUNCTION_TABLE[HEAP32[$15 >> 2] | 0 | 0]($14);
           }
           HEAP32[($4 + 16 | 0) >> 2] = HEAP32[$13 >> 2] | 0;
           HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($13 + 4 | 0) >> 2] | 0;
          }
          label$18 : {
           if (($5 & 16711680 | 0 | 0) != (16711680 | 0)) {
            break label$18
           }
           $13 = HEAP32[($4 + 16 | 0) >> 2] | 0;
           HEAP32[($4 + 16 | 0) >> 2] = $13 + 1 | 0;
           HEAP8[$13 >> 0] = 0;
           $13 = (HEAP32[($4 + 20 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($4 + 20 | 0) >> 2] = $13;
           if ($13) {
            break label$18
           }
           label$19 : {
            $13 = HEAP32[($4 + 32 | 0) >> 2] | 0;
            $217 = $13;
            $13 = HEAP32[($13 + 24 | 0) >> 2] | 0;
            if (FUNCTION_TABLE[HEAP32[($13 + 12 | 0) >> 2] | 0 | 0]($217) | 0) {
             break label$19
            }
            $14 = HEAP32[($4 + 32 | 0) >> 2] | 0;
            $15 = HEAP32[$14 >> 2] | 0;
            HEAP32[($15 + 20 | 0) >> 2] = 24;
            FUNCTION_TABLE[HEAP32[$15 >> 2] | 0 | 0]($14);
           }
           HEAP32[($4 + 16 | 0) >> 2] = HEAP32[$13 >> 2] | 0;
           HEAP32[($4 + 20 | 0) >> 2] = HEAP32[($13 + 4 | 0) >> 2] | 0;
          }
          $13 = $1 + -8 | 0;
          $5 = $5 << 8 | 0;
          if (($1 | 0) > (15 | 0)) {
           continue label$15
          }
          break label$15;
         };
        }
        HEAP32[($4 + 28 | 0) >> 2] = $13;
        HEAP32[($4 + 24 | 0) >> 2] = $5;
       }
       $1 = $10 + -16 | 0;
       label$20 : {
        if (($10 | 0) < (32 | 0)) {
         break label$20
        }
        $5 = HEAP32[($4 + 12 | 0) >> 2] | 0;
        $10 = $1;
        continue label$10;
       }
       break label$10;
      };
      $10 = $1;
     }
     $1 = 1;
     $5 = $12;
     label$21 : {
      if ($5 >>> 0 < 2 >>> 0) {
       break label$21
      }
      label$22 : while (1) {
       $14 = $1;
       $1 = $1 + 1 | 0;
       $13 = $5 >>> 0 > 3 >>> 0;
       $5 = $5 >> 1 | 0;
       if ($13) {
        continue label$22
       }
       break label$22;
      };
      if ($14 >>> 0 < 10 >>> 0) {
       break label$21
      }
      $5 = HEAP32[$0 >> 2] | 0;
      HEAP32[($5 + 20 | 0) >> 2] = 6;
      FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
     }
     $13 = $12 ^ $11 | 0;
     $5 = $1 + ($10 << 4 | 0) | 0;
     $10 = HEAP32[($4 + 52 | 0) >> 2] | 0;
     label$23 : {
      label$24 : {
       if (!(HEAP32[($4 + 12 | 0) >> 2] | 0)) {
        break label$24
       }
       $5 = (HEAP32[(($4 + ($10 << 2 | 0) | 0) + 92 | 0) >> 2] | 0) + ($5 << 2 | 0) | 0;
       HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
       break label$23;
      }
      $10 = HEAP32[(($4 + ($10 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
      emit_bits($4 | 0, HEAP32[($10 + ($5 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP8[(($10 + $5 | 0) + 1024 | 0) >> 0] | 0 | 0);
     }
     emit_bits($4 | 0, $13 | 0, $1 | 0);
     $10 = 0;
    }
    $5 = ($6 | 0) != ($2 | 0);
    $6 = $6 + 1 | 0;
    if ($5) {
     continue label$3
    }
    break label$3;
   };
   if (($10 | 0) < (1 | 0)) {
    break label$2
   }
   $5 = (HEAP32[($4 + 56 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($4 + 56 | 0) >> 2] = $5;
   if (($5 | 0) != (32767 | 0)) {
    break label$2
   }
   emit_eobrun($4 | 0);
  }
  $5 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$5 >> 2] = HEAP32[($4 + 16 | 0) >> 2] | 0;
  HEAP32[($5 + 4 | 0) >> 2] = HEAP32[($4 + 20 | 0) >> 2] | 0;
  label$25 : {
   $1 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   if (!$1) {
    break label$25
   }
   label$26 : {
    $5 = HEAP32[($4 + 68 | 0) >> 2] | 0;
    if ($5) {
     break label$26
    }
    HEAP32[($4 + 72 | 0) >> 2] = ((HEAP32[($4 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
    $5 = $1;
   }
   HEAP32[($4 + 68 | 0) >> 2] = $5 + -1 | 0;
  }
  return 1 | 0;
 }
 
 function encode_mcu_DC_refine($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $2 = 0;
  $2 = HEAP32[($0 + 328 | 0) >> 2] | 0;
  $3 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = HEAP32[$4 >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   if (HEAP32[($3 + 68 | 0) >> 2] | 0) {
    break label$1
   }
   emit_restart($3 | 0, HEAP32[($3 + 72 | 0) >> 2] | 0 | 0);
  }
  label$2 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $4 = 0;
   label$3 : while (1) {
    emit_bits($3 | 0, (HEAP16[(HEAP32[($1 + ($4 << 2 | 0) | 0) >> 2] | 0) >> 1] | 0) >> $2 | 0 | 0, 1 | 0);
    $4 = $4 + 1 | 0;
    if (($4 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
  }
  $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$4 >> 2] = HEAP32[($3 + 16 | 0) >> 2] | 0;
  HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($3 + 20 | 0) >> 2] | 0;
  label$4 : {
   $0 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   if (!$0) {
    break label$4
   }
   label$5 : {
    $4 = HEAP32[($3 + 68 | 0) >> 2] | 0;
    if ($4) {
     break label$5
    }
    HEAP32[($3 + 72 | 0) >> 2] = ((HEAP32[($3 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
    $4 = $0;
   }
   HEAP32[($3 + 68 | 0) >> 2] = $4 + -1 | 0;
  }
  return 1 | 0;
 }
 
 function encode_mcu_AC_refine($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $15 = 0, $8 = 0, $6 = 0, $16 = 0, $7 = 0, $14 = 0, $17 = 0, $11 = 0, $9 = 0, $13 = 0, $2 = 0, $12 = 0, $4 = 0, $10 = 0, $18 = 0, $20 = 0, $19 = 0, $21 = 0, $76 = 0, $84 = 0, $101 = 0, $109 = 0, $142 = 0, $150 = 0, $265 = 0, $292 = 0, $329 = 0, $398 = 0, $435 = 0, $507 = 0, $544 = 0, $655 = 0, $692 = 0, $760 = 0, $797 = 0, $937 = 0, $974 = 0;
  $2 = __stack_pointer - 256 | 0;
  __stack_pointer = $2;
  $3 = HEAP32[($0 + 328 | 0) >> 2] | 0;
  $4 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $6 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($5 + 16 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  HEAP32[($5 + 20 | 0) >> 2] = HEAP32[($6 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   if (HEAP32[($5 + 68 | 0) >> 2] | 0) {
    break label$1
   }
   emit_restart($5 | 0, HEAP32[($5 + 72 | 0) >> 2] | 0 | 0);
  }
  $6 = $5 + 20 | 0;
  $7 = $5 + 16 | 0;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      $8 = HEAP32[($0 + 316 | 0) >> 2] | 0;
      $9 = ($4 | 0) < ($8 | 0);
      if ($9) {
       break label$5
      }
      $10 = HEAP32[$1 >> 2] | 0;
      $1 = ($4 - $8 | 0) + 1 | 0;
      $11 = $1 & 1 | 0;
      if (($4 | 0) != ($8 | 0)) {
       break label$4
      }
      $12 = 0;
      $1 = $8;
      break label$3;
     }
     $11 = 0;
     $1 = 0;
     break label$2;
    }
    $13 = $1 & -2 | 0;
    $12 = 0;
    $1 = $8;
    $14 = 0;
    label$6 : while (1) {
     $15 = $1 << 2 | 0;
     $76 = $2 + $15 | 0;
     $15 = HEAP16[($10 + ((HEAP32[(144016 + $15 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
     $84 = $15;
     $15 = $15 >> 15 | 0;
     $15 = ((($84 ^ $15 | 0) - $15 | 0) & 65535 | 0) >>> $3 | 0;
     HEAP32[$76 >> 2] = $15;
     $16 = $1 + 1 | 0;
     $17 = $16 << 2 | 0;
     $101 = $2 + $17 | 0;
     $17 = HEAP16[($10 + ((HEAP32[(144016 + $17 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
     $109 = $17;
     $17 = $17 >> 15 | 0;
     $17 = ((($109 ^ $17 | 0) - $17 | 0) & 65535 | 0) >>> $3 | 0;
     HEAP32[$101 >> 2] = $17;
     $12 = ($17 | 0) == (1 | 0) ? $16 : ($15 | 0) == (1 | 0) ? $1 : $12;
     $1 = $1 + 2 | 0;
     $14 = $14 + 2 | 0;
     if (($14 | 0) != ($13 | 0)) {
      continue label$6
     }
     break label$6;
    };
   }
   label$7 : {
    if (!$11) {
     break label$7
    }
    $14 = $1 << 2 | 0;
    $142 = $2 + $14 | 0;
    $14 = HEAP16[($10 + ((HEAP32[(144016 + $14 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
    $150 = $14;
    $14 = $14 >> 15 | 0;
    $3 = ((($150 ^ $14 | 0) - $14 | 0) & 65535 | 0) >>> $3 | 0;
    HEAP32[$142 >> 2] = $3;
    $12 = ($3 | 0) == (1 | 0) ? $1 : $12;
   }
   $11 = 0;
   $1 = 0;
   if ($9) {
    break label$2
   }
   $14 = $5 + 32 | 0;
   $9 = (HEAP32[($5 + 64 | 0) >> 2] | 0) + (HEAP32[($5 + 60 | 0) >> 2] | 0) | 0;
   $1 = 0;
   $11 = 0;
   label$8 : while (1) {
    label$9 : {
     label$10 : {
      $18 = $8;
      $19 = $8 << 2 | 0;
      $20 = HEAP32[($2 + $19 | 0) >> 2] | 0;
      if (!$20) {
       break label$10
      }
      label$11 : {
       if (($1 | 0) < (16 | 0)) {
        break label$11
       }
       if (($18 | 0) > ($12 | 0)) {
        break label$11
       }
       label$12 : while (1) {
        $21 = $1;
        $8 = 0;
        label$13 : {
         label$14 : {
          label$15 : {
           $1 = HEAP32[($5 + 56 | 0) >> 2] | 0;
           switch ($1 | 0) {
           case 0:
            break label$13;
           case 1:
            break label$14;
           default:
            break label$15;
           };
          }
          label$16 : while (1) {
           $15 = $8;
           $8 = $15 + 1 | 0;
           $3 = $1 >>> 0 > 3 >>> 0;
           $1 = $1 >> 1 | 0;
           if ($3) {
            continue label$16
           }
           break label$16;
          };
          if ($15 >>> 0 < 14 >>> 0) {
           break label$14
          }
          $1 = HEAP32[$14 >> 2] | 0;
          $3 = HEAP32[$1 >> 2] | 0;
          HEAP32[($3 + 20 | 0) >> 2] = 40;
          FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($1);
         }
         $1 = $8 << 4 | 0;
         $3 = HEAP32[($5 + 52 | 0) >> 2] | 0;
         label$17 : {
          label$18 : {
           if (!(HEAP32[($5 + 12 | 0) >> 2] | 0)) {
            break label$18
           }
           $1 = (HEAP32[(($5 + ($3 << 2 | 0) | 0) + 92 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0;
           HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
           break label$17;
          }
          $3 = HEAP32[(($5 + ($3 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
          $15 = HEAP32[($3 + ($1 << 2 | 0) | 0) >> 2] | 0;
          $16 = HEAP32[($5 + 28 | 0) >> 2] | 0;
          label$19 : {
           $1 = HEAP8[(($3 + $1 | 0) + 1024 | 0) >> 0] | 0;
           if ($1) {
            break label$19
           }
           $3 = HEAP32[($5 + 32 | 0) >> 2] | 0;
           $17 = HEAP32[$3 >> 2] | 0;
           HEAP32[($17 + 20 | 0) >> 2] = 40;
           FUNCTION_TABLE[HEAP32[$17 >> 2] | 0 | 0]($3);
           if (HEAP32[($5 + 12 | 0) >> 2] | 0) {
            break label$17
           }
          }
          $265 = $15 & ((-1 << $1 | 0) ^ -1 | 0) | 0;
          $15 = $16 + $1 | 0;
          $1 = HEAP32[($5 + 24 | 0) >> 2] | 0 | ($265 << (24 - $15 | 0) | 0) | 0;
          label$20 : {
           if (($15 | 0) < (8 | 0)) {
            break label$20
           }
           label$21 : while (1) {
            $3 = $15;
            $15 = HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $15 + 1 | 0;
            HEAP8[$15 >> 0] = $1 >>> 16 | 0;
            $15 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
            HEAP32[$6 >> 2] = $15;
            label$22 : {
             if ($15) {
              break label$22
             }
             label$23 : {
              $15 = HEAP32[$14 >> 2] | 0;
              $292 = $15;
              $15 = HEAP32[($15 + 24 | 0) >> 2] | 0;
              if (FUNCTION_TABLE[HEAP32[($15 + 12 | 0) >> 2] | 0 | 0]($292) | 0) {
               break label$23
              }
              $16 = HEAP32[$14 >> 2] | 0;
              $17 = HEAP32[$16 >> 2] | 0;
              HEAP32[($17 + 20 | 0) >> 2] = 24;
              FUNCTION_TABLE[HEAP32[$17 >> 2] | 0 | 0]($16);
             }
             HEAP32[$7 >> 2] = HEAP32[$15 >> 2] | 0;
             HEAP32[$6 >> 2] = HEAP32[($15 + 4 | 0) >> 2] | 0;
            }
            label$24 : {
             if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
              break label$24
             }
             $15 = HEAP32[$7 >> 2] | 0;
             HEAP32[$7 >> 2] = $15 + 1 | 0;
             HEAP8[$15 >> 0] = 0;
             $15 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
             HEAP32[$6 >> 2] = $15;
             if ($15) {
              break label$24
             }
             label$25 : {
              $15 = HEAP32[$14 >> 2] | 0;
              $329 = $15;
              $15 = HEAP32[($15 + 24 | 0) >> 2] | 0;
              if (FUNCTION_TABLE[HEAP32[($15 + 12 | 0) >> 2] | 0 | 0]($329) | 0) {
               break label$25
              }
              $16 = HEAP32[$14 >> 2] | 0;
              $17 = HEAP32[$16 >> 2] | 0;
              HEAP32[($17 + 20 | 0) >> 2] = 24;
              FUNCTION_TABLE[HEAP32[$17 >> 2] | 0 | 0]($16);
             }
             HEAP32[$7 >> 2] = HEAP32[$15 >> 2] | 0;
             HEAP32[$6 >> 2] = HEAP32[($15 + 4 | 0) >> 2] | 0;
            }
            $15 = $3 + -8 | 0;
            $1 = $1 << 8 | 0;
            if (($3 | 0) > (15 | 0)) {
             continue label$21
            }
            break label$21;
           };
          }
          HEAP32[($5 + 28 | 0) >> 2] = $15;
          HEAP32[($5 + 24 | 0) >> 2] = $1;
         }
         label$26 : {
          if (!$8) {
           break label$26
          }
          if (HEAP32[($5 + 12 | 0) >> 2] | 0) {
           break label$26
          }
          $3 = (HEAP32[($5 + 28 | 0) >> 2] | 0) + $8 | 0;
          $1 = ((HEAP32[($5 + 56 | 0) >> 2] | 0) & ((-1 << $8 | 0) ^ -1 | 0) | 0) << (24 - $3 | 0) | 0 | (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
          label$27 : {
           if (($3 | 0) < (8 | 0)) {
            break label$27
           }
           label$28 : while (1) {
            $8 = $3;
            $3 = HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $3 + 1 | 0;
            HEAP8[$3 >> 0] = $1 >>> 16 | 0;
            $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
            HEAP32[$6 >> 2] = $3;
            label$29 : {
             if ($3) {
              break label$29
             }
             label$30 : {
              $3 = HEAP32[$14 >> 2] | 0;
              $398 = $3;
              $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
              if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($398) | 0) {
               break label$30
              }
              $15 = HEAP32[$14 >> 2] | 0;
              $16 = HEAP32[$15 >> 2] | 0;
              HEAP32[($16 + 20 | 0) >> 2] = 24;
              FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
             }
             HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
             HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
            }
            label$31 : {
             if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
              break label$31
             }
             $3 = HEAP32[$7 >> 2] | 0;
             HEAP32[$7 >> 2] = $3 + 1 | 0;
             HEAP8[$3 >> 0] = 0;
             $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
             HEAP32[$6 >> 2] = $3;
             if ($3) {
              break label$31
             }
             label$32 : {
              $3 = HEAP32[$14 >> 2] | 0;
              $435 = $3;
              $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
              if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($435) | 0) {
               break label$32
              }
              $15 = HEAP32[$14 >> 2] | 0;
              $16 = HEAP32[$15 >> 2] | 0;
              HEAP32[($16 + 20 | 0) >> 2] = 24;
              FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
             }
             HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
             HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
            }
            $3 = $8 + -8 | 0;
            $1 = $1 << 8 | 0;
            if (($8 | 0) > (15 | 0)) {
             continue label$28
            }
            break label$28;
           };
          }
          HEAP32[($5 + 28 | 0) >> 2] = $3;
          HEAP32[($5 + 24 | 0) >> 2] = $1;
         }
         HEAP32[($5 + 56 | 0) >> 2] = 0;
         label$33 : {
          $16 = HEAP32[($5 + 60 | 0) >> 2] | 0;
          if (!$16) {
           break label$33
          }
          if (HEAP32[($5 + 12 | 0) >> 2] | 0) {
           break label$33
          }
          $15 = HEAP32[($5 + 64 | 0) >> 2] | 0;
          $1 = 0;
          label$34 : while (1) {
           label$35 : {
            if ($1) {
             break label$35
            }
            $8 = HEAP32[($5 + 28 | 0) >> 2] | 0;
            $1 = ((HEAPU8[$15 >> 0] | 0) & 1 | 0) << (23 - $8 | 0) | 0 | (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
            $3 = $8 + 1 | 0;
            label$36 : {
             if (($8 | 0) < (7 | 0)) {
              break label$36
             }
             label$37 : while (1) {
              $8 = $3;
              $3 = HEAP32[$7 >> 2] | 0;
              HEAP32[$7 >> 2] = $3 + 1 | 0;
              HEAP8[$3 >> 0] = $1 >>> 16 | 0;
              $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
              HEAP32[$6 >> 2] = $3;
              label$38 : {
               if ($3) {
                break label$38
               }
               label$39 : {
                $3 = HEAP32[$14 >> 2] | 0;
                $507 = $3;
                $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
                if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($507) | 0) {
                 break label$39
                }
                $17 = HEAP32[$14 >> 2] | 0;
                $13 = HEAP32[$17 >> 2] | 0;
                HEAP32[($13 + 20 | 0) >> 2] = 24;
                FUNCTION_TABLE[HEAP32[$13 >> 2] | 0 | 0]($17);
               }
               HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
               HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
              }
              label$40 : {
               if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
                break label$40
               }
               $3 = HEAP32[$7 >> 2] | 0;
               HEAP32[$7 >> 2] = $3 + 1 | 0;
               HEAP8[$3 >> 0] = 0;
               $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
               HEAP32[$6 >> 2] = $3;
               if ($3) {
                break label$40
               }
               label$41 : {
                $3 = HEAP32[$14 >> 2] | 0;
                $544 = $3;
                $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
                if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($544) | 0) {
                 break label$41
                }
                $17 = HEAP32[$14 >> 2] | 0;
                $13 = HEAP32[$17 >> 2] | 0;
                HEAP32[($13 + 20 | 0) >> 2] = 24;
                FUNCTION_TABLE[HEAP32[$13 >> 2] | 0 | 0]($17);
               }
               HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
               HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
              }
              $3 = $8 + -8 | 0;
              $1 = $1 << 8 | 0;
              if (($8 | 0) > (15 | 0)) {
               continue label$37
              }
              break label$37;
             };
            }
            HEAP32[($5 + 28 | 0) >> 2] = $3;
            HEAP32[($5 + 24 | 0) >> 2] = $1;
           }
           $16 = $16 + -1 | 0;
           if (!$16) {
            break label$33
           }
           $15 = $15 + 1 | 0;
           $1 = HEAP32[($5 + 12 | 0) >> 2] | 0;
           continue label$34;
          };
         }
         HEAP32[($5 + 60 | 0) >> 2] = 0;
        }
        $1 = HEAP32[($5 + 52 | 0) >> 2] | 0;
        label$42 : {
         label$43 : {
          if (!(HEAP32[($5 + 12 | 0) >> 2] | 0)) {
           break label$43
          }
          $1 = HEAP32[(($5 + ($1 << 2 | 0) | 0) + 92 | 0) >> 2] | 0;
          HEAP32[($1 + 960 | 0) >> 2] = (HEAP32[($1 + 960 | 0) >> 2] | 0) + 1 | 0;
          break label$42;
         }
         $1 = HEAP32[(($5 + ($1 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
         $8 = HEAP32[($1 + 960 | 0) >> 2] | 0;
         $3 = HEAP32[($5 + 28 | 0) >> 2] | 0;
         label$44 : {
          $1 = HEAP8[($1 + 1264 | 0) >> 0] | 0;
          if ($1) {
           break label$44
          }
          $15 = HEAP32[($5 + 32 | 0) >> 2] | 0;
          $16 = HEAP32[$15 >> 2] | 0;
          HEAP32[($16 + 20 | 0) >> 2] = 40;
          FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
          if (HEAP32[($5 + 12 | 0) >> 2] | 0) {
           break label$42
          }
         }
         $3 = $3 + $1 | 0;
         $1 = HEAP32[($5 + 24 | 0) >> 2] | 0 | (($8 & ((-1 << $1 | 0) ^ -1 | 0) | 0) << (24 - $3 | 0) | 0) | 0;
         $15 = 0;
         $8 = 0;
         label$45 : {
          if (($3 | 0) < (8 | 0)) {
           break label$45
          }
          label$46 : while (1) {
           $8 = $3;
           $3 = HEAP32[$7 >> 2] | 0;
           HEAP32[$7 >> 2] = $3 + 1 | 0;
           HEAP8[$3 >> 0] = $1 >>> 16 | 0;
           $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
           HEAP32[$6 >> 2] = $3;
           label$47 : {
            if ($3) {
             break label$47
            }
            label$48 : {
             $3 = HEAP32[$14 >> 2] | 0;
             $655 = $3;
             $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
             if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($655) | 0) {
              break label$48
             }
             $16 = HEAP32[$14 >> 2] | 0;
             $17 = HEAP32[$16 >> 2] | 0;
             HEAP32[($17 + 20 | 0) >> 2] = 24;
             FUNCTION_TABLE[HEAP32[$17 >> 2] | 0 | 0]($16);
            }
            HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
            HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
           }
           label$49 : {
            if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
             break label$49
            }
            $3 = HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $3 + 1 | 0;
            HEAP8[$3 >> 0] = 0;
            $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
            HEAP32[$6 >> 2] = $3;
            if ($3) {
             break label$49
            }
            label$50 : {
             $3 = HEAP32[$14 >> 2] | 0;
             $692 = $3;
             $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
             if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($692) | 0) {
              break label$50
             }
             $16 = HEAP32[$14 >> 2] | 0;
             $17 = HEAP32[$16 >> 2] | 0;
             HEAP32[($17 + 20 | 0) >> 2] = 24;
             FUNCTION_TABLE[HEAP32[$17 >> 2] | 0 | 0]($16);
            }
            HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
            HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
           }
           $3 = $8 + -8 | 0;
           $1 = $1 << 8 | 0;
           if (($8 | 0) > (15 | 0)) {
            continue label$46
           }
           break label$46;
          };
          $8 = HEAP32[($5 + 12 | 0) >> 2] | 0;
         }
         HEAP32[($5 + 28 | 0) >> 2] = $3;
         HEAP32[($5 + 24 | 0) >> 2] = $1;
         if (!$11) {
          break label$42
         }
         if ($8) {
          break label$42
         }
         label$51 : while (1) {
          label$52 : {
           if ($15) {
            break label$52
           }
           $8 = HEAP32[($5 + 28 | 0) >> 2] | 0;
           $1 = ((HEAPU8[$9 >> 0] | 0) & 1 | 0) << (23 - $8 | 0) | 0 | (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
           $3 = $8 + 1 | 0;
           label$53 : {
            if (($8 | 0) < (7 | 0)) {
             break label$53
            }
            label$54 : while (1) {
             $8 = $3;
             $3 = HEAP32[$7 >> 2] | 0;
             HEAP32[$7 >> 2] = $3 + 1 | 0;
             HEAP8[$3 >> 0] = $1 >>> 16 | 0;
             $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
             HEAP32[$6 >> 2] = $3;
             label$55 : {
              if ($3) {
               break label$55
              }
              label$56 : {
               $3 = HEAP32[$14 >> 2] | 0;
               $760 = $3;
               $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
               if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($760) | 0) {
                break label$56
               }
               $15 = HEAP32[$14 >> 2] | 0;
               $16 = HEAP32[$15 >> 2] | 0;
               HEAP32[($16 + 20 | 0) >> 2] = 24;
               FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
              }
              HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
              HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
             }
             label$57 : {
              if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
               break label$57
              }
              $3 = HEAP32[$7 >> 2] | 0;
              HEAP32[$7 >> 2] = $3 + 1 | 0;
              HEAP8[$3 >> 0] = 0;
              $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
              HEAP32[$6 >> 2] = $3;
              if ($3) {
               break label$57
              }
              label$58 : {
               $3 = HEAP32[$14 >> 2] | 0;
               $797 = $3;
               $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
               if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($797) | 0) {
                break label$58
               }
               $15 = HEAP32[$14 >> 2] | 0;
               $16 = HEAP32[$15 >> 2] | 0;
               HEAP32[($16 + 20 | 0) >> 2] = 24;
               FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
              }
              HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
              HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
             }
             $3 = $8 + -8 | 0;
             $1 = $1 << 8 | 0;
             if (($8 | 0) > (15 | 0)) {
              continue label$54
             }
             break label$54;
            };
           }
           HEAP32[($5 + 28 | 0) >> 2] = $3;
           HEAP32[($5 + 24 | 0) >> 2] = $1;
          }
          $11 = $11 + -1 | 0;
          if (!$11) {
           break label$42
          }
          $9 = $9 + 1 | 0;
          $15 = HEAP32[($5 + 12 | 0) >> 2] | 0;
          continue label$51;
         };
        }
        $1 = $21 + -16 | 0;
        $9 = HEAP32[($5 + 64 | 0) >> 2] | 0;
        $11 = 0;
        if (($21 | 0) > (31 | 0)) {
         continue label$12
        }
        break label$12;
       };
      }
      label$59 : {
       if (($20 | 0) < (2 | 0)) {
        break label$59
       }
       HEAP8[($9 + $11 | 0) >> 0] = $20 & 1 | 0;
       $11 = $11 + 1 | 0;
       break label$9;
      }
      $1 = $1 << 4 | 0 | 1 | 0;
      emit_eobrun($5 | 0);
      $8 = HEAP32[($5 + 52 | 0) >> 2] | 0;
      label$60 : {
       label$61 : {
        if (!(HEAP32[($5 + 12 | 0) >> 2] | 0)) {
         break label$61
        }
        $1 = (HEAP32[(($5 + ($8 << 2 | 0) | 0) + 92 | 0) >> 2] | 0) + ($1 << 2 | 0) | 0;
        HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1 | 0;
        break label$60;
       }
       $8 = HEAP32[(($5 + ($8 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
       emit_bits($5 | 0, HEAP32[($8 + ($1 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP8[(($8 + $1 | 0) + 1024 | 0) >> 0] | 0 | 0);
      }
      emit_bits($5 | 0, (((HEAPU16[($10 + ((HEAP32[(144016 + $19 | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) ^ -1 | 0) & 32768 | 0) >>> 15 | 0 | 0, 1 | 0);
      label$62 : {
       if (!$11) {
        break label$62
       }
       $1 = 0;
       if (HEAP32[($5 + 12 | 0) >> 2] | 0) {
        break label$62
       }
       label$63 : while (1) {
        label$64 : {
         if ($1) {
          break label$64
         }
         $8 = HEAP32[($5 + 28 | 0) >> 2] | 0;
         $1 = ((HEAPU8[$9 >> 0] | 0) & 1 | 0) << (23 - $8 | 0) | 0 | (HEAP32[($5 + 24 | 0) >> 2] | 0) | 0;
         $3 = $8 + 1 | 0;
         label$65 : {
          if (($8 | 0) < (7 | 0)) {
           break label$65
          }
          label$66 : while (1) {
           $8 = $3;
           $3 = HEAP32[$7 >> 2] | 0;
           HEAP32[$7 >> 2] = $3 + 1 | 0;
           HEAP8[$3 >> 0] = $1 >>> 16 | 0;
           $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
           HEAP32[$6 >> 2] = $3;
           label$67 : {
            if ($3) {
             break label$67
            }
            label$68 : {
             $3 = HEAP32[$14 >> 2] | 0;
             $937 = $3;
             $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
             if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($937) | 0) {
              break label$68
             }
             $15 = HEAP32[$14 >> 2] | 0;
             $16 = HEAP32[$15 >> 2] | 0;
             HEAP32[($16 + 20 | 0) >> 2] = 24;
             FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
            }
            HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
            HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
           }
           label$69 : {
            if (($1 & 16711680 | 0 | 0) != (16711680 | 0)) {
             break label$69
            }
            $3 = HEAP32[$7 >> 2] | 0;
            HEAP32[$7 >> 2] = $3 + 1 | 0;
            HEAP8[$3 >> 0] = 0;
            $3 = (HEAP32[$6 >> 2] | 0) + -1 | 0;
            HEAP32[$6 >> 2] = $3;
            if ($3) {
             break label$69
            }
            label$70 : {
             $3 = HEAP32[$14 >> 2] | 0;
             $974 = $3;
             $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
             if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($974) | 0) {
              break label$70
             }
             $15 = HEAP32[$14 >> 2] | 0;
             $16 = HEAP32[$15 >> 2] | 0;
             HEAP32[($16 + 20 | 0) >> 2] = 24;
             FUNCTION_TABLE[HEAP32[$16 >> 2] | 0 | 0]($15);
            }
            HEAP32[$7 >> 2] = HEAP32[$3 >> 2] | 0;
            HEAP32[$6 >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
           }
           $3 = $8 + -8 | 0;
           $1 = $1 << 8 | 0;
           if (($8 | 0) > (15 | 0)) {
            continue label$66
           }
           break label$66;
          };
         }
         HEAP32[($5 + 28 | 0) >> 2] = $3;
         HEAP32[($5 + 24 | 0) >> 2] = $1;
        }
        $11 = $11 + -1 | 0;
        if (!$11) {
         break label$62
        }
        $9 = $9 + 1 | 0;
        $1 = HEAP32[($5 + 12 | 0) >> 2] | 0;
        continue label$63;
       };
      }
      $9 = HEAP32[($5 + 64 | 0) >> 2] | 0;
      $11 = 0;
      $1 = 0;
      break label$9;
     }
     $1 = $1 + 1 | 0;
    }
    $8 = $18 + 1 | 0;
    if (($18 | 0) != ($4 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  label$71 : {
   label$72 : {
    if (($1 | 0) > (0 | 0)) {
     break label$72
    }
    if (!$11) {
     break label$71
    }
   }
   $1 = (HEAP32[($5 + 56 | 0) >> 2] | 0) + 1 | 0;
   HEAP32[($5 + 56 | 0) >> 2] = $1;
   $8 = (HEAP32[($5 + 60 | 0) >> 2] | 0) + $11 | 0;
   HEAP32[($5 + 60 | 0) >> 2] = $8;
   label$73 : {
    if (($1 | 0) == (32767 | 0)) {
     break label$73
    }
    if ($8 >>> 0 < 938 >>> 0) {
     break label$71
    }
   }
   emit_eobrun($5 | 0);
  }
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$7 >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = HEAP32[$6 >> 2] | 0;
  label$74 : {
   $7 = HEAP32[($0 + 200 | 0) >> 2] | 0;
   if (!$7) {
    break label$74
   }
   label$75 : {
    $6 = HEAP32[($5 + 68 | 0) >> 2] | 0;
    if ($6) {
     break label$75
    }
    HEAP32[($5 + 72 | 0) >> 2] = ((HEAP32[($5 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
    $6 = $7;
   }
   HEAP32[($5 + 68 | 0) >> 2] = $6 + -1 | 0;
  }
  __stack_pointer = $2 + 256 | 0;
  return 1 | 0;
 }
 
 function finish_pass_phuff($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[($1 + 16 | 0) >> 2] = HEAP32[$2 >> 2] | 0;
  HEAP32[($1 + 20 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0;
  emit_eobrun($1 | 0);
  emit_bits($1 | 0, 127 | 0, 7 | 0);
  HEAP32[($1 + 24 | 0) >> 2] = 0;
  HEAP32[($1 + 28 | 0) >> 2] = 0;
  $0 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
  HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
 }
 
 function finish_pass_gather_phuff($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $1 = 0, $6 = 0, $7 = 0, $2 = 0, i64toi32_i32$0 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  emit_eobrun($2 | 0);
  $3 = HEAP32[($0 + 316 | 0) >> 2] | 0;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 8 | 0) >> 2] = 0;
  HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[$1 >> 2] = 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   label$2 : {
    if (!$3) {
     break label$2
    }
    $3 = 0;
    label$3 : while (1) {
     label$4 : {
      $5 = (HEAP32[((HEAP32[(($0 + ($3 << 2 | 0) | 0) + 248 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) << 2 | 0;
      $6 = $1 + $5 | 0;
      if (HEAP32[$6 >> 2] | 0) {
       break label$4
      }
      label$5 : {
       $7 = ($0 + $5 | 0) + 104 | 0;
       $4 = HEAP32[$7 >> 2] | 0;
       if ($4) {
        break label$5
       }
       $4 = jpeg_alloc_huff_table($0 | 0) | 0;
       HEAP32[$7 >> 2] = $4;
      }
      jpeg_gen_optimal_table($0 | 0, $4 | 0, HEAP32[(($2 + $5 | 0) + 92 | 0) >> 2] | 0 | 0);
      HEAP32[$6 >> 2] = 1;
      $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) < ($4 | 0)) {
      continue label$3
     }
     break label$1;
    };
   }
   if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
    break label$1
   }
   $5 = 0;
   $3 = 0;
   label$6 : while (1) {
    label$7 : {
     if ($5) {
      break label$7
     }
     $5 = (HEAP32[((HEAP32[(($0 + ($3 << 2 | 0) | 0) + 248 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) << 2 | 0;
     $6 = $1 + $5 | 0;
     if (HEAP32[$6 >> 2] | 0) {
      break label$7
     }
     label$8 : {
      $7 = ($0 + $5 | 0) + 88 | 0;
      $4 = HEAP32[$7 >> 2] | 0;
      if ($4) {
       break label$8
      }
      $4 = jpeg_alloc_huff_table($0 | 0) | 0;
      HEAP32[$7 >> 2] = $4;
     }
     jpeg_gen_optimal_table($0 | 0, $4 | 0, HEAP32[(($2 + $5 | 0) + 92 | 0) >> 2] | 0 | 0);
     HEAP32[$6 >> 2] = 1;
     $4 = HEAP32[($0 + 244 | 0) >> 2] | 0;
    }
    $3 = $3 + 1 | 0;
    if (($3 | 0) >= ($4 | 0)) {
     break label$1
    }
    $5 = HEAP32[($0 + 324 | 0) >> 2] | 0;
    continue label$6;
   };
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emit_restart($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, i64toi32_i32$0 = 0, $4 = 0, $60 = 0;
  emit_eobrun($0 | 0);
  label$1 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$1
   }
   emit_bits($0 | 0, 127 | 0, 7 | 0);
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 28 | 0) >> 2] = i64toi32_i32$0;
   $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   HEAP32[($0 + 16 | 0) >> 2] = $2 + 1 | 0;
   HEAP8[$2 >> 0] = 255;
   $2 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $2;
   label$2 : {
    label$3 : {
     if (!$2) {
      break label$3
     }
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     break label$2;
    }
    label$4 : {
     $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     $3 = HEAP32[($2 + 24 | 0) >> 2] | 0;
     if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($2) | 0) {
      break label$4
     }
     $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
     $4 = HEAP32[$2 >> 2] | 0;
     HEAP32[($4 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($2);
    }
    $2 = HEAP32[$3 >> 2] | 0;
    HEAP32[($0 + 20 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
   }
   HEAP32[($0 + 16 | 0) >> 2] = $2 + 1 | 0;
   HEAP8[$2 >> 0] = $1 + -48 | 0;
   $1 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($0 + 20 | 0) >> 2] = $1;
   if ($1) {
    break label$1
   }
   label$5 : {
    $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    $60 = $1;
    $1 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($60) | 0) {
     break label$5
    }
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($2);
   }
   HEAP32[($0 + 16 | 0) >> 2] = HEAP32[$1 >> 2] | 0;
   HEAP32[($0 + 20 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
  }
  label$6 : {
   label$7 : {
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    if (HEAP32[($2 + 316 | 0) >> 2] | 0) {
     break label$7
    }
    if ((HEAP32[($2 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$6
    }
    $1 = 0;
    label$8 : while (1) {
     HEAP32[(($0 + ($1 << 2 | 0) | 0) + 36 | 0) >> 2] = 0;
     $1 = $1 + 1 | 0;
     if (($1 | 0) < (HEAP32[($2 + 244 | 0) >> 2] | 0 | 0)) {
      continue label$8
     }
     break label$6;
    };
   }
   i64toi32_i32$0 = 0;
   HEAP32[($0 + 56 | 0) >> 2] = 0;
   HEAP32[($0 + 60 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function emit_bits($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $52 = 0, $89 = 0;
  $3 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   $5 = HEAP32[$4 >> 2] | 0;
   HEAP32[($5 + 20 | 0) >> 2] = 40;
   FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($4);
  }
  label$2 : {
   if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
    break label$2
   }
   $3 = $3 + $2 | 0;
   $2 = HEAP32[($0 + 24 | 0) >> 2] | 0 | ((((-1 << $2 | 0) ^ -1 | 0) & $1 | 0) << (24 - $3 | 0) | 0) | 0;
   label$3 : {
    if (($3 | 0) < (8 | 0)) {
     break label$3
    }
    label$4 : while (1) {
     $1 = $3;
     $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     HEAP32[($0 + 16 | 0) >> 2] = $3 + 1 | 0;
     HEAP8[$3 >> 0] = $2 >>> 16 | 0;
     $3 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($0 + 20 | 0) >> 2] = $3;
     label$5 : {
      if ($3) {
       break label$5
      }
      label$6 : {
       $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       $52 = $3;
       $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($52) | 0) {
        break label$6
       }
       $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       $5 = HEAP32[$4 >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($4);
      }
      HEAP32[($0 + 16 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
      HEAP32[($0 + 20 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
     }
     label$7 : {
      if (($2 & 16711680 | 0 | 0) != (16711680 | 0)) {
       break label$7
      }
      $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
      HEAP32[($0 + 16 | 0) >> 2] = $3 + 1 | 0;
      HEAP8[$3 >> 0] = 0;
      $3 = (HEAP32[($0 + 20 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($0 + 20 | 0) >> 2] = $3;
      if ($3) {
       break label$7
      }
      label$8 : {
       $3 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       $89 = $3;
       $3 = HEAP32[($3 + 24 | 0) >> 2] | 0;
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($89) | 0) {
        break label$8
       }
       $4 = HEAP32[($0 + 32 | 0) >> 2] | 0;
       $5 = HEAP32[$4 >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($4);
      }
      HEAP32[($0 + 16 | 0) >> 2] = HEAP32[$3 >> 2] | 0;
      HEAP32[($0 + 20 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
     }
     $3 = $1 + -8 | 0;
     $2 = $2 << 8 | 0;
     if (($1 | 0) > (15 | 0)) {
      continue label$4
     }
     break label$4;
    };
   }
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   HEAP32[($0 + 24 | 0) >> 2] = $2;
  }
 }
 
 function emit_eobrun($0) {
  $0 = $0 | 0;
  var $2 = 0, $1 = 0, $4 = 0, $3 = 0;
  $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 56 | 0) >> 2] | 0;
     switch ($2 | 0) {
     case 0:
      break label$1;
     case 1:
      break label$2;
     default:
      break label$3;
     };
    }
    label$4 : while (1) {
     $3 = $1;
     $1 = $1 + 1 | 0;
     $4 = $2 >>> 0 > 3 >>> 0;
     $2 = $2 >> 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$4;
    };
    if ($3 >>> 0 < 14 >>> 0) {
     break label$2
    }
    $2 = HEAP32[($0 + 32 | 0) >> 2] | 0;
    $4 = HEAP32[$2 >> 2] | 0;
    HEAP32[($4 + 20 | 0) >> 2] = 40;
    FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($2);
   }
   $2 = $1 << 4 | 0;
   $4 = HEAP32[($0 + 52 | 0) >> 2] | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0 + 12 | 0) >> 2] | 0)) {
      break label$6
     }
     $2 = (HEAP32[(($0 + ($4 << 2 | 0) | 0) + 92 | 0) >> 2] | 0) + ($2 << 2 | 0) | 0;
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1 | 0;
     break label$5;
    }
    $4 = HEAP32[(($0 + ($4 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
    emit_bits($0 | 0, HEAP32[($4 + ($2 << 2 | 0) | 0) >> 2] | 0 | 0, HEAP8[(($4 + $2 | 0) + 1024 | 0) >> 0] | 0 | 0);
   }
   label$7 : {
    if (!$1) {
     break label$7
    }
    emit_bits($0 | 0, HEAP32[($0 + 56 | 0) >> 2] | 0 | 0, $1 | 0);
   }
   HEAP32[($0 + 56 | 0) >> 2] = 0;
   label$8 : {
    $1 = HEAP32[($0 + 60 | 0) >> 2] | 0;
    if (!$1) {
     break label$8
    }
    if (HEAP32[($0 + 12 | 0) >> 2] | 0) {
     break label$8
    }
    $2 = HEAP32[($0 + 64 | 0) >> 2] | 0;
    label$9 : while (1) {
     emit_bits($0 | 0, HEAP8[$2 >> 0] | 0 | 0, 1 | 0);
     $2 = $2 + 1 | 0;
     $1 = $1 + -1 | 0;
     if ($1) {
      continue label$9
     }
     break label$9;
    };
   }
   HEAP32[($0 + 60 | 0) >> 2] = 0;
  }
 }
 
 function jinit_c_prep_controller($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $4 = 0, $3 = 0, $17 = 0, $9 = 0, $2 = 0, $14 = 0, $8 = 0, $13 = 0, $10 = 0, $16 = 0, $5 = 0, $6 = 0, $7 = 0, $18 = 0, $11 = 0, $12 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 4;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  $2 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 64) | 0;
  HEAP32[($0 + 340 | 0) >> 2] = $2;
  HEAP32[$2 >> 2] = 59;
  label$2 : {
   label$3 : {
    if (!(HEAP32[((HEAP32[($0 + 356 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[($2 + 4 | 0) >> 2] = 60;
    $3 = HEAP32[($0 + 236 | 0) >> 2] | 0;
    $4 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, Math_imul(Math_imul($3, HEAP32[($0 + 60 | 0) >> 2] | 0), 20)) | 0;
    if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
     break label$2
    }
    $5 = Math_imul($3, 12);
    $6 = Math_imul($3, 3);
    $7 = Math_imul($3, 5);
    $8 = $3 << 2 | 0;
    $9 = HEAP32[($0 + 68 | 0) >> 2] | 0;
    label$4 : {
     if (($3 | 0) >= (1 | 0)) {
      break label$4
     }
     $1 = 0;
     label$5 : while (1) {
      (wasm2js_i32$0 = ($2 + ($1 << 2 | 0) | 0) + 8 | 0, wasm2js_i32$1 = __memcpy($4 + $8 | 0 | 0, FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0, 1, (Math_imul(HEAP32[($9 + 28 | 0) >> 2] | 0, HEAP32[($0 + 232 | 0) >> 2] | 0) << 3 | 0 | 0) / (HEAP32[($9 + 8 | 0) >> 2] | 0 | 0) | 0, $6) | 0 | 0, $5 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      $9 = $9 + 84 | 0;
      $4 = $4 + ($7 << 2 | 0) | 0;
      $1 = $1 + 1 | 0;
      if (($1 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
       continue label$5
      }
      break label$2;
     };
    }
    $10 = $3 << 1 | 0;
    $11 = $3 & -2 | 0;
    $12 = $3 & 1 | 0;
    $13 = 0;
    label$6 : while (1) {
     $14 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0, 1, (Math_imul(HEAP32[($9 + 28 | 0) >> 2] | 0, HEAP32[($0 + 232 | 0) >> 2] | 0) << 3 | 0 | 0) / (HEAP32[($9 + 8 | 0) >> 2] | 0 | 0) | 0, $6) | 0;
     $15 = __memcpy($4 + $8 | 0 | 0, $14 | 0, $5 | 0) | 0;
     $1 = 0;
     $16 = 0;
     label$7 : {
      if (($3 | 0) == (1 | 0)) {
       break label$7
      }
      label$8 : while (1) {
       $17 = $1 << 2 | 0;
       HEAP32[($4 + $17 | 0) >> 2] = HEAP32[($14 + (($1 + $10 | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($4 + (($1 + $8 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($14 + $17 | 0) >> 2] | 0;
       $17 = $1 | 1 | 0;
       $18 = $17 << 2 | 0;
       HEAP32[($4 + $18 | 0) >> 2] = HEAP32[($14 + (($17 + $10 | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($4 + (($17 + $8 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($14 + $18 | 0) >> 2] | 0;
       $1 = $1 + 2 | 0;
       $16 = $16 + 2 | 0;
       if (($16 | 0) != ($11 | 0)) {
        continue label$8
       }
       break label$8;
      };
     }
     label$9 : {
      if (!$12) {
       break label$9
      }
      $17 = $1 << 2 | 0;
      HEAP32[($4 + $17 | 0) >> 2] = HEAP32[($14 + (($1 + $10 | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($4 + (($1 + $8 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($14 + $17 | 0) >> 2] | 0;
     }
     HEAP32[(($2 + ($13 << 2 | 0) | 0) + 8 | 0) >> 2] = $15;
     $9 = $9 + 84 | 0;
     $4 = $4 + ($7 << 2 | 0) | 0;
     $13 = $13 + 1 | 0;
     if (($13 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
      continue label$6
     }
     break label$2;
    };
   }
   HEAP32[($2 + 4 | 0) >> 2] = 61;
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $1 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $4 = 0;
   label$10 : while (1) {
    (wasm2js_i32$0 = ($2 + ($4 << 2 | 0) | 0) + 8 | 0, wasm2js_i32$1 = FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0, 1, (Math_imul(HEAP32[($1 + 28 | 0) >> 2] | 0, HEAP32[($0 + 232 | 0) >> 2] | 0) << 3 | 0 | 0) / (HEAP32[($1 + 8 | 0) >> 2] | 0 | 0) | 0, HEAP32[($0 + 236 | 0) >> 2] | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $1 = $1 + 84 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$10
    }
    break label$10;
   };
  }
 }
 
 function start_pass_prep($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[($0 + 340 | 0) >> 2] | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 4;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  $1 = HEAP32[($0 + 32 | 0) >> 2] | 0;
  HEAP32[($2 + 52 | 0) >> 2] = 0;
  HEAP32[($2 + 56 | 0) >> 2] = 0;
  HEAP32[($2 + 48 | 0) >> 2] = $1;
  HEAP32[($2 + 60 | 0) >> 2] = (HEAP32[($0 + 236 | 0) >> 2] | 0) << 1 | 0;
 }
 
 function pre_process_context($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $10 = 0, $8 = 0, $11 = 0, $14 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $9 = 0, $36 = 0, $40 = 0;
  label$1 : {
   if ((HEAP32[$5 >> 2] | 0) >>> 0 >= $6 >>> 0) {
    break label$1
   }
   $7 = Math_imul(HEAP32[($0 + 236 | 0) >> 2] | 0, 3);
   $8 = HEAP32[($0 + 340 | 0) >> 2] | 0;
   $9 = $8 + 8 | 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        $10 = HEAP32[$2 >> 2] | 0;
        if ($10 >>> 0 >= $3 >>> 0) {
         break label$6
        }
        $36 = $1 + ($10 << 2 | 0) | 0;
        $11 = HEAP32[($8 + 52 | 0) >> 2] | 0;
        $40 = $11;
        $11 = (HEAP32[($8 + 60 | 0) >> 2] | 0) - $11 | 0;
        $10 = $3 - $10 | 0;
        $12 = $11 >>> 0 < $10 >>> 0 ? $11 : $10;
        FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $36, $9, $40, $12);
        label$7 : {
         if ((HEAP32[($8 + 48 | 0) >> 2] | 0 | 0) != (HEAP32[($0 + 32 | 0) >> 2] | 0 | 0)) {
          break label$7
         }
         $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
         if (($10 | 0) < (1 | 0)) {
          break label$7
         }
         $13 = 0;
         $14 = HEAP32[($0 + 236 | 0) >> 2] | 0;
         if (($14 | 0) < (1 | 0)) {
          break label$7
         }
         label$8 : while (1) {
          label$9 : {
           if (($14 | 0) < (1 | 0)) {
            break label$9
           }
           $15 = ($8 + ($13 << 2 | 0) | 0) + 8 | 0;
           $10 = 1;
           label$10 : while (1) {
            $11 = HEAP32[$15 >> 2] | 0;
            jcopy_sample_rows($11 | 0, 0 | 0, $11 | 0, 0 - $10 | 0 | 0, 1 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0);
            $14 = HEAP32[($0 + 236 | 0) >> 2] | 0;
            $11 = ($10 | 0) < ($14 | 0);
            $10 = $10 + 1 | 0;
            if ($11) {
             continue label$10
            }
            break label$10;
           };
           $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
          }
          $13 = $13 + 1 | 0;
          if (($13 | 0) < ($10 | 0)) {
           continue label$8
          }
          break label$8;
         };
        }
        HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $12 | 0;
        $10 = (HEAP32[($8 + 52 | 0) >> 2] | 0) + $12 | 0;
        HEAP32[($8 + 52 | 0) >> 2] = $10;
        HEAP32[($8 + 48 | 0) >> 2] = (HEAP32[($8 + 48 | 0) >> 2] | 0) - $12 | 0;
        $14 = HEAP32[($8 + 60 | 0) >> 2] | 0;
        break label$5;
       }
       if (HEAP32[($8 + 48 | 0) >> 2] | 0) {
        break label$1
       }
       $10 = HEAP32[($8 + 52 | 0) >> 2] | 0;
       $14 = HEAP32[($8 + 60 | 0) >> 2] | 0;
       if (($10 | 0) >= ($14 | 0)) {
        break label$5
       }
       $12 = 0;
       label$11 : {
        $11 = HEAP32[($0 + 60 | 0) >> 2] | 0;
        if (($11 | 0) < (1 | 0)) {
         break label$11
        }
        label$12 : while (1) {
         label$13 : {
          if (($10 | 0) >= ($14 | 0)) {
           break label$13
          }
          $11 = HEAP32[(($8 + ($12 << 2 | 0) | 0) + 8 | 0) >> 2] | 0;
          $15 = HEAP32[($0 + 28 | 0) >> 2] | 0;
          $13 = $10 + -1 | 0;
          label$14 : while (1) {
           jcopy_sample_rows($11 | 0, $13 | 0, $11 | 0, $10 | 0, 1 | 0, $15 | 0);
           $10 = $10 + 1 | 0;
           if (($10 | 0) != ($14 | 0)) {
            continue label$14
           }
           break label$14;
          };
          $11 = HEAP32[($0 + 60 | 0) >> 2] | 0;
         }
         label$15 : {
          $12 = $12 + 1 | 0;
          if (($12 | 0) >= ($11 | 0)) {
           break label$15
          }
          $14 = HEAP32[($8 + 60 | 0) >> 2] | 0;
          $10 = HEAP32[($8 + 52 | 0) >> 2] | 0;
          continue label$12;
         }
         break label$12;
        };
        $14 = HEAP32[($8 + 60 | 0) >> 2] | 0;
       }
       HEAP32[($8 + 52 | 0) >> 2] = $14;
       break label$4;
      }
      if (($10 | 0) != ($14 | 0)) {
       break label$3
      }
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 356 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $9, HEAP32[($8 + 56 | 0) >> 2] | 0, $4, HEAP32[$5 >> 2] | 0);
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
     $11 = HEAP32[($0 + 236 | 0) >> 2] | 0;
     $10 = (HEAP32[($8 + 56 | 0) >> 2] | 0) + $11 | 0;
     HEAP32[($8 + 56 | 0) >> 2] = ($10 | 0) < ($7 | 0) ? $10 : 0;
     label$16 : {
      $10 = HEAP32[($8 + 52 | 0) >> 2] | 0;
      if (($10 | 0) < ($7 | 0)) {
       break label$16
      }
      $10 = 0;
      HEAP32[($8 + 52 | 0) >> 2] = 0;
     }
     HEAP32[($8 + 60 | 0) >> 2] = $10 + $11 | 0;
    }
    if ((HEAP32[$5 >> 2] | 0) >>> 0 < $6 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function pre_process_data($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $10 = 0, $8 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $9 = 0, $32 = 0, $36 = 0;
  label$1 : {
   $7 = HEAP32[$2 >> 2] | 0;
   if ($7 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $8 = HEAP32[($0 + 340 | 0) >> 2] | 0;
   $9 = $8 + 8 | 0;
   label$2 : while (1) {
    if ((HEAP32[$5 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break label$1
    }
    $32 = $1 + ($7 << 2 | 0) | 0;
    $10 = HEAP32[($8 + 52 | 0) >> 2] | 0;
    $36 = $10;
    $10 = (HEAP32[($0 + 236 | 0) >> 2] | 0) - $10 | 0;
    $7 = $3 - $7 | 0;
    $10 = $10 >>> 0 < $7 >>> 0 ? $10 : $7;
    FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 352 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $32, $9, $36, $10);
    HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $10 | 0;
    $7 = (HEAP32[($8 + 52 | 0) >> 2] | 0) + $10 | 0;
    HEAP32[($8 + 52 | 0) >> 2] = $7;
    $11 = HEAP32[($8 + 48 | 0) >> 2] | 0;
    HEAP32[($8 + 48 | 0) >> 2] = $11 - $10 | 0;
    $12 = HEAP32[($0 + 236 | 0) >> 2] | 0;
    label$3 : {
     label$4 : {
      label$5 : {
       if (($11 | 0) != ($10 | 0)) {
        break label$5
       }
       if (($7 | 0) >= ($12 | 0)) {
        break label$5
       }
       $13 = 0;
       label$6 : {
        $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
        if (($10 | 0) < (1 | 0)) {
         break label$6
        }
        label$7 : while (1) {
         label$8 : {
          if (($7 | 0) >= ($12 | 0)) {
           break label$8
          }
          $10 = HEAP32[(($8 + ($13 << 2 | 0) | 0) + 8 | 0) >> 2] | 0;
          $11 = HEAP32[($0 + 28 | 0) >> 2] | 0;
          $14 = $7 + -1 | 0;
          label$9 : while (1) {
           jcopy_sample_rows($10 | 0, $14 | 0, $10 | 0, $7 | 0, 1 | 0, $11 | 0);
           $7 = $7 + 1 | 0;
           if (($7 | 0) != ($12 | 0)) {
            continue label$9
           }
           break label$9;
          };
          $10 = HEAP32[($0 + 60 | 0) >> 2] | 0;
         }
         label$10 : {
          $13 = $13 + 1 | 0;
          if (($13 | 0) >= ($10 | 0)) {
           break label$10
          }
          $12 = HEAP32[($0 + 236 | 0) >> 2] | 0;
          $7 = HEAP32[($8 + 52 | 0) >> 2] | 0;
          continue label$7;
         }
         break label$7;
        };
        $12 = HEAP32[($0 + 236 | 0) >> 2] | 0;
       }
       HEAP32[($8 + 52 | 0) >> 2] = $12;
       break label$4;
      }
      if (($7 | 0) != ($12 | 0)) {
       break label$3
      }
     }
     FUNCTION_TABLE[HEAP32[((HEAP32[($0 + 356 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0]($0, $9, 0, $4, HEAP32[$5 >> 2] | 0);
     HEAP32[($8 + 52 | 0) >> 2] = 0;
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + 1 | 0;
    }
    label$11 : {
     if (HEAP32[($8 + 48 | 0) >> 2] | 0) {
      break label$11
     }
     $7 = HEAP32[$5 >> 2] | 0;
     if ($7 >>> 0 >= $6 >>> 0) {
      break label$11
     }
     label$12 : {
      $11 = HEAP32[($0 + 60 | 0) >> 2] | 0;
      if (($11 | 0) < (1 | 0)) {
       break label$12
      }
      $13 = HEAP32[($0 + 68 | 0) >> 2] | 0;
      $8 = 0;
      label$13 : while (1) {
       label$14 : {
        $10 = HEAP32[($13 + 12 | 0) >> 2] | 0;
        $7 = Math_imul($10, $7);
        $12 = Math_imul($10, $6);
        if (($7 | 0) >= ($12 | 0)) {
         break label$14
        }
        $11 = (HEAP32[($13 + 28 | 0) >> 2] | 0) << 3 | 0;
        $10 = HEAP32[($4 + ($8 << 2 | 0) | 0) >> 2] | 0;
        $14 = $7 + -1 | 0;
        label$15 : while (1) {
         jcopy_sample_rows($10 | 0, $14 | 0, $10 | 0, $7 | 0, 1 | 0, $11 | 0);
         $7 = $7 + 1 | 0;
         if (($7 | 0) != ($12 | 0)) {
          continue label$15
         }
         break label$15;
        };
        $11 = HEAP32[($0 + 60 | 0) >> 2] | 0;
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) >= ($11 | 0)) {
        break label$12
       }
       $13 = $13 + 84 | 0;
       $7 = HEAP32[$5 >> 2] | 0;
       continue label$13;
      };
     }
     HEAP32[$5 >> 2] = $6;
     return;
    }
    $7 = HEAP32[$2 >> 2] | 0;
    if ($7 >>> 0 < $3 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function jinit_downsampler($0) {
  $0 = $0 | 0;
  var $5 = 0, $2 = 0, $1 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 52) | 0;
  HEAP32[($0 + 356 | 0) >> 2] = $1;
  HEAP32[($1 + 8 | 0) >> 2] = 0;
  HEAP32[($1 + 4 | 0) >> 2] = 62;
  HEAP32[$1 >> 2] = 63;
  label$1 : {
   if (!(HEAP32[($0 + 188 | 0) >> 2] | 0)) {
    break label$1
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 25;
   FUNCTION_TABLE[HEAP32[$2 >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $2 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $3 = 0;
   $4 = 1;
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $5 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      $6 = HEAP32[($0 + 232 | 0) >> 2] | 0;
      if (($5 | 0) != ($6 | 0)) {
       break label$5
      }
      if ((HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) != (HEAP32[($0 + 236 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      $5 = ($1 + ($3 << 2 | 0) | 0) + 12 | 0;
      label$6 : {
       if (!(HEAP32[($0 + 192 | 0) >> 2] | 0)) {
        break label$6
       }
       HEAP32[$5 >> 2] = 64;
       HEAP32[($1 + 8 | 0) >> 2] = 1;
       break label$4;
      }
      HEAP32[$5 >> 2] = 65;
      break label$4;
     }
     label$7 : {
      if (($5 << 1 | 0 | 0) != ($6 | 0)) {
       break label$7
      }
      label$8 : {
       $7 = HEAP32[($2 + 12 | 0) >> 2] | 0;
       $8 = HEAP32[($0 + 236 | 0) >> 2] | 0;
       if (($7 | 0) != ($8 | 0)) {
        break label$8
       }
       $5 = ($1 + ($3 << 2 | 0) | 0) + 12 | 0;
       label$9 : {
        if (!(jsimd_can_h2v1_downsample() | 0)) {
         break label$9
        }
        HEAP32[$5 >> 2] = 66;
        $4 = 0;
        break label$4;
       }
       HEAP32[$5 >> 2] = 67;
       $4 = 0;
       break label$4;
      }
      if (($7 << 1 | 0 | 0) != ($8 | 0)) {
       break label$7
      }
      label$10 : {
       if (!(HEAP32[($0 + 192 | 0) >> 2] | 0)) {
        break label$10
       }
       HEAP32[(($1 + ($3 << 2 | 0) | 0) + 12 | 0) >> 2] = 68;
       HEAP32[($1 + 8 | 0) >> 2] = 1;
       break label$4;
      }
      $5 = ($1 + ($3 << 2 | 0) | 0) + 12 | 0;
      label$11 : {
       if (!(jsimd_can_h2v2_downsample() | 0)) {
        break label$11
       }
       HEAP32[$5 >> 2] = 69;
       break label$4;
      }
      HEAP32[$5 >> 2] = 70;
      break label$4;
     }
     label$12 : {
      if (($6 | 0) % ($5 | 0) | 0) {
       break label$12
      }
      if ((HEAP32[($0 + 236 | 0) >> 2] | 0 | 0) % (HEAP32[($2 + 12 | 0) >> 2] | 0 | 0) | 0) {
       break label$12
      }
      HEAP32[(($1 + ($3 << 2 | 0) | 0) + 12 | 0) >> 2] = 71;
      $4 = 0;
      break label$4;
     }
     $5 = HEAP32[$0 >> 2] | 0;
     HEAP32[($5 + 20 | 0) >> 2] = 38;
     FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
    }
    $2 = $2 + 84 | 0;
    $3 = $3 + 1 | 0;
    if (($3 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$3
    }
    break label$3;
   };
   if (!(HEAP32[($0 + 192 | 0) >> 2] | 0)) {
    break label$2
   }
   if ($4) {
    break label$2
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 20 | 0) >> 2] = 99;
   FUNCTION_TABLE[HEAP32[($2 + 4 | 0) >> 2] | 0 | 0]($0, 0);
  }
 }
 
 function sep_downsample($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $6 = 0, $7 = 0, $5 = 0, $8 = 0;
  label$1 : {
   if ((HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = HEAP32[($0 + 356 | 0) >> 2] | 0;
   $6 = HEAP32[($0 + 68 | 0) >> 2] | 0;
   $7 = 0;
   $8 = $2 << 2 | 0;
   label$2 : while (1) {
    $2 = $7 << 2 | 0;
    FUNCTION_TABLE[HEAP32[(($5 + $2 | 0) + 12 | 0) >> 2] | 0 | 0]($0, $6, (HEAP32[($1 + $2 | 0) >> 2] | 0) + $8 | 0, (HEAP32[($3 + $2 | 0) >> 2] | 0) + (Math_imul(HEAP32[($6 + 12 | 0) >> 2] | 0, $4) << 2 | 0) | 0);
    $6 = $6 + 84 | 0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) < (HEAP32[($0 + 60 | 0) >> 2] | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
 }
 
 function start_pass_downsample($0) {
  $0 = $0 | 0;
 }
 
 function fullsize_smooth_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $12 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0, $14 = 0, $4 = 0, $11 = 0, $10 = 0, $13 = 0, $15 = 0, $150 = 0;
  $4 = (HEAP32[($1 + 28 | 0) >> 2] | 0) << 3 | 0;
  label$1 : {
   $5 = HEAP32[($0 + 236 | 0) >> 2] | 0;
   if (($5 | 0) < (-1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = $4 - $6 | 0;
   if (($7 | 0) < (1 | 0)) {
    break label$1
   }
   $8 = $2 + -4 | 0;
   $9 = $5 + 2 | 0;
   $10 = $9 & 3 | 0;
   $11 = 0;
   $12 = 0;
   label$2 : {
    if (($5 + 1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $13 = $9 & -4 | 0;
    $12 = 0;
    $9 = 0;
    label$3 : while (1) {
     $5 = $12 << 2 | 0;
     $14 = (HEAP32[($8 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $14 = (HEAP32[($2 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $14 = (HEAP32[($8 + ($5 | 8 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $5 = (HEAP32[($8 + ($5 | 12 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = $12 + 4 | 0;
     $9 = $9 + 4 | 0;
     if (($9 | 0) != ($13 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$10) {
    break label$1
   }
   label$4 : while (1) {
    $5 = (HEAP32[($8 + ($12 << 2 | 0) | 0) >> 2] | 0) + $6 | 0;
    memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
    $12 = $12 + 1 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($10 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $12 = HEAP32[($0 + 192 | 0) >> 2] | 0;
   $13 = $12 << 6 | 0;
   $0 = 65536 - ($12 << 9 | 0) | 0;
   $15 = $4 + -2 | 0;
   $4 = 0;
   label$6 : while (1) {
    $12 = $4 << 2 | 0;
    $6 = HEAP32[($3 + $12 | 0) >> 2] | 0;
    $8 = $2 + $12 | 0;
    $12 = HEAP32[$8 >> 2] | 0;
    $5 = HEAPU8[$12 >> 0] | 0;
    $150 = Math_imul($0, $5);
    $4 = $4 + 1 | 0;
    $7 = HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] | 0;
    $8 = HEAP32[($8 + -4 | 0) >> 2] | 0;
    $9 = (HEAPU8[$7 >> 0] | 0) + (HEAPU8[$8 >> 0] | 0) | 0;
    $11 = $9 + $5 | 0;
    $5 = ((HEAPU8[($7 + 1 | 0) >> 0] | 0) + (HEAPU8[($8 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0;
    HEAP8[$6 >> 0] = (($150 + Math_imul(($11 + $9 | 0) + $5 | 0, $13) | 0) + 32768 | 0) >>> 16 | 0;
    $6 = $6 + 1 | 0;
    $12 = $12 + 1 | 0;
    $7 = $7 + 1 | 0;
    $8 = $8 + 1 | 0;
    $9 = $15;
    label$7 : while (1) {
     $10 = HEAPU8[$12 >> 0] | 0;
     $14 = $5;
     $5 = ((HEAPU8[($7 + 1 | 0) >> 0] | 0) + (HEAPU8[($8 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0;
     HEAP8[$6 >> 0] = ((Math_imul($0, $10) + Math_imul((($11 + $14 | 0) - $10 | 0) + $5 | 0, $13) | 0) + 32768 | 0) >>> 16 | 0;
     $6 = $6 + 1 | 0;
     $7 = $7 + 1 | 0;
     $8 = $8 + 1 | 0;
     $12 = $12 + 1 | 0;
     $11 = $14;
     $9 = $9 + -1 | 0;
     if ($9) {
      continue label$7
     }
     break label$7;
    };
    $12 = HEAPU8[$12 >> 0] | 0;
    HEAP8[$6 >> 0] = ((Math_imul($0, $12) + Math_imul((($5 << 1 | 0) + $14 | 0) - $12 | 0, $13) | 0) + 32768 | 0) >>> 16 | 0;
    if (($4 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
 }
 
 function fullsize_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $9 = 0, $6 = 0, $8 = 0, $5 = 0, $7 = 0;
  jcopy_sample_rows($2 | 0, 0 | 0, $3 | 0, 0 | 0, HEAP32[($0 + 236 | 0) >> 2] | 0 | 0, HEAP32[($0 + 28 | 0) >> 2] | 0 | 0);
  label$1 : {
   $4 = HEAP32[($0 + 236 | 0) >> 2] | 0;
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $2 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $1 = ((HEAP32[($1 + 28 | 0) >> 2] | 0) << 3 | 0) - $2 | 0;
   if (($1 | 0) < (1 | 0)) {
    break label$1
   }
   $5 = $4 & 3 | 0;
   $6 = 0;
   $0 = 0;
   label$2 : {
    if (($4 + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $7 = $4 & -4 | 0;
    $0 = 0;
    $8 = 0;
    label$3 : while (1) {
     $4 = $0 << 2 | 0;
     $9 = (HEAP32[($3 + $4 | 0) >> 2] | 0) + $2 | 0;
     memset($9 | 0, HEAPU8[($9 + -1 | 0) >> 0] | 0 | 0, $1 | 0) | 0;
     $9 = (HEAP32[($3 + ($4 | 4 | 0) | 0) >> 2] | 0) + $2 | 0;
     memset($9 | 0, HEAPU8[($9 + -1 | 0) >> 0] | 0 | 0, $1 | 0) | 0;
     $9 = (HEAP32[($3 + ($4 | 8 | 0) | 0) >> 2] | 0) + $2 | 0;
     memset($9 | 0, HEAPU8[($9 + -1 | 0) >> 0] | 0 | 0, $1 | 0) | 0;
     $4 = (HEAP32[($3 + ($4 | 12 | 0) | 0) >> 2] | 0) + $2 | 0;
     memset($4 | 0, HEAPU8[($4 + -1 | 0) >> 0] | 0 | 0, $1 | 0) | 0;
     $0 = $0 + 4 | 0;
     $8 = $8 + 4 | 0;
     if (($8 | 0) != ($7 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$5) {
    break label$1
   }
   label$4 : while (1) {
    $4 = (HEAP32[($3 + ($0 << 2 | 0) | 0) >> 2] | 0) + $2 | 0;
    memset($4 | 0, HEAPU8[($4 + -1 | 0) >> 0] | 0 | 0, $1 | 0) | 0;
    $0 = $0 + 1 | 0;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != ($5 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function h2v1_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $9 = 0, $12 = 0, $11 = 0, $4 = 0, $8 = 0, $10 = 0;
  $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($0 + 236 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = ($4 << 4 | 0) - $6 | 0;
   if (($7 | 0) < (1 | 0)) {
    break label$1
   }
   $8 = $5 & 3 | 0;
   $9 = 0;
   $0 = 0;
   label$2 : {
    if (($5 + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $10 = $5 & -4 | 0;
    $0 = 0;
    $11 = 0;
    label$3 : while (1) {
     $5 = $0 << 2 | 0;
     $12 = (HEAP32[($2 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = (HEAP32[($2 + ($5 | 4 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = (HEAP32[($2 + ($5 | 8 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $5 = (HEAP32[($2 + ($5 | 12 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $0 = $0 + 4 | 0;
     $11 = $11 + 4 | 0;
     if (($11 | 0) != ($10 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$8) {
    break label$1
   }
   label$4 : while (1) {
    $5 = (HEAP32[($2 + ($0 << 2 | 0) | 0) >> 2] | 0) + $6 | 0;
    memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
    $0 = $0 + 1 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($8 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $5 = $4 << 3 | 0;
   if (!$5) {
    break label$5
   }
   $9 = 0;
   label$6 : while (1) {
    $6 = $9 << 2 | 0;
    $0 = HEAP32[($2 + $6 | 0) >> 2] | 0;
    $6 = HEAP32[($3 + $6 | 0) >> 2] | 0;
    $7 = 0;
    label$7 : while (1) {
     HEAP8[$6 >> 0] = ((HEAPU8[$0 >> 0] | 0) + (HEAPU8[($0 + 1 | 0) >> 0] | 0) | 0) >>> 1 | 0;
     HEAP8[($6 + 1 | 0) >> 0] = (((HEAPU8[($0 + 2 | 0) >> 0] | 0) + (HEAPU8[($0 + 3 | 0) >> 0] | 0) | 0) + 1 | 0) >>> 1 | 0;
     $0 = $0 + 4 | 0;
     $6 = $6 + 2 | 0;
     $7 = $7 + 2 | 0;
     if (($7 | 0) != ($5 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $9 = $9 + 1 | 0;
    if (($9 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
 }
 
 function h2v2_smooth_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $12 = 0, $6 = 0, $5 = 0, $8 = 0, $7 = 0, $14 = 0, $9 = 0, $11 = 0, $4 = 0, $10 = 0, $13 = 0, $17 = 0, $15 = 0, $16 = 0;
  $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($0 + 236 | 0) >> 2] | 0;
   if (($5 | 0) < (-1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = ($4 << 4 | 0) - $6 | 0;
   if (($7 | 0) < (1 | 0)) {
    break label$1
   }
   $8 = $2 + -4 | 0;
   $9 = $5 + 2 | 0;
   $10 = $9 & 3 | 0;
   $11 = 0;
   $12 = 0;
   label$2 : {
    if (($5 + 1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $13 = $9 & -4 | 0;
    $12 = 0;
    $9 = 0;
    label$3 : while (1) {
     $5 = $12 << 2 | 0;
     $14 = (HEAP32[($8 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $14 = (HEAP32[($2 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $14 = (HEAP32[($8 + ($5 | 8 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($14 | 0, HEAPU8[($14 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $5 = (HEAP32[($8 + ($5 | 12 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = $12 + 4 | 0;
     $9 = $9 + 4 | 0;
     if (($9 | 0) != ($13 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$10) {
    break label$1
   }
   label$4 : while (1) {
    $5 = (HEAP32[($8 + ($12 << 2 | 0) | 0) >> 2] | 0) + $6 | 0;
    memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
    $12 = $12 + 1 | 0;
    $11 = $11 + 1 | 0;
    if (($11 | 0) != ($10 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $12 = HEAP32[($0 + 192 | 0) >> 2] | 0;
   $0 = $12 << 4 | 0;
   $15 = Math_imul($12, -80) + 16384 | 0;
   $16 = ($4 << 3 | 0) + -2 | 0;
   $4 = 0;
   $17 = 0;
   label$6 : while (1) {
    $5 = HEAP32[($3 + ($17 << 2 | 0) | 0) >> 2] | 0;
    $6 = $4 << 2 | 0;
    $12 = HEAP32[($2 + ($6 | 4 | 0) | 0) >> 2] | 0;
    $8 = $2 + $6 | 0;
    $6 = HEAP32[$8 >> 2] | 0;
    $11 = (HEAPU8[$12 >> 0] | 0) + (HEAPU8[$6 >> 0] | 0) | 0;
    $4 = $4 + 2 | 0;
    $7 = HEAP32[($2 + ($4 << 2 | 0) | 0) >> 2] | 0;
    $9 = HEAPU8[$7 >> 0] | 0;
    $8 = HEAP32[($8 + -4 | 0) >> 2] | 0;
    $14 = HEAPU8[$8 >> 0] | 0;
    HEAP8[$5 >> 0] = ((Math_imul(($11 + (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0, $15) + Math_imul(((($9 + $14 | 0) + (HEAPU8[($8 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($7 + 2 | 0) >> 0] | 0) | 0) + ((((((($11 + $14 | 0) + (HEAPU8[($8 + 1 | 0) >> 0] | 0) | 0) + $9 | 0) + (HEAPU8[($7 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0) << 1 | 0) | 0, $0) | 0) + 32768 | 0) >>> 16 | 0;
    $5 = $5 + 1 | 0;
    $11 = $6 + 2 | 0;
    $9 = $7 + 2 | 0;
    $14 = $8 + 2 | 0;
    $10 = $12 + 2 | 0;
    $13 = $16;
    label$7 : while (1) {
     $12 = $11;
     $6 = $10;
     $7 = $14;
     $8 = $9;
     HEAP8[$5 >> 0] = ((Math_imul((((HEAPU8[($12 + 1 | 0) >> 0] | 0) + (HEAPU8[$12 >> 0] | 0) | 0) + (HEAPU8[$6 >> 0] | 0) | 0) + (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0, $15) + Math_imul(((((HEAPU8[($7 + 2 | 0) >> 0] | 0) + (HEAPU8[($7 + -1 | 0) >> 0] | 0) | 0) + (((((((((HEAPU8[($7 + 1 | 0) >> 0] | 0) + (HEAPU8[$7 >> 0] | 0) | 0) + (HEAPU8[$8 >> 0] | 0) | 0) + (HEAPU8[($8 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + -1 | 0) >> 0] | 0) | 0) + (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + -1 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 2 | 0) >> 0] | 0) | 0) << 1 | 0) | 0) + (HEAPU8[($8 + -1 | 0) >> 0] | 0) | 0) + (HEAPU8[($8 + 2 | 0) >> 0] | 0) | 0, $0) | 0) + 32768 | 0) >>> 16 | 0;
     $5 = $5 + 1 | 0;
     $9 = $8 + 2 | 0;
     $14 = $7 + 2 | 0;
     $10 = $6 + 2 | 0;
     $11 = $12 + 2 | 0;
     $13 = $13 + -1 | 0;
     if ($13) {
      continue label$7
     }
     break label$7;
    };
    $11 = (HEAPU8[($6 + 3 | 0) >> 0] | 0) + (HEAPU8[($12 + 3 | 0) >> 0] | 0) | 0;
    $9 = HEAPU8[($8 + 3 | 0) >> 0] | 0;
    $14 = HEAPU8[($7 + 3 | 0) >> 0] | 0;
    HEAP8[$5 >> 0] = ((Math_imul(($11 + (HEAPU8[($12 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 2 | 0) >> 0] | 0) | 0, $15) + Math_imul(((($9 + $14 | 0) + (HEAPU8[($7 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($8 + 1 | 0) >> 0] | 0) | 0) + ((((((($11 + (HEAPU8[($7 + 2 | 0) >> 0] | 0) | 0) + $14 | 0) + (HEAPU8[($8 + 2 | 0) >> 0] | 0) | 0) + $9 | 0) + (HEAPU8[($12 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0) << 1 | 0) | 0, $0) | 0) + 32768 | 0) >>> 16 | 0;
    $17 = $17 + 1 | 0;
    if (($17 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
 }
 
 function h2v2_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $6 = 0, $12 = 0, $7 = 0, $11 = 0, $9 = 0, $4 = 0, $8 = 0, $10 = 0;
  $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($0 + 236 | 0) >> 2] | 0;
   if (($5 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = ($4 << 4 | 0) - $6 | 0;
   if (($7 | 0) < (1 | 0)) {
    break label$1
   }
   $8 = $5 & 3 | 0;
   $9 = 0;
   $0 = 0;
   label$2 : {
    if (($5 + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $10 = $5 & -4 | 0;
    $0 = 0;
    $11 = 0;
    label$3 : while (1) {
     $5 = $0 << 2 | 0;
     $12 = (HEAP32[($2 + $5 | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = (HEAP32[($2 + ($5 | 4 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $12 = (HEAP32[($2 + ($5 | 8 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($12 | 0, HEAPU8[($12 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $5 = (HEAP32[($2 + ($5 | 12 | 0) | 0) >> 2] | 0) + $6 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
     $0 = $0 + 4 | 0;
     $11 = $11 + 4 | 0;
     if (($11 | 0) != ($10 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if (!$8) {
    break label$1
   }
   label$4 : while (1) {
    $5 = (HEAP32[($2 + ($0 << 2 | 0) | 0) >> 2] | 0) + $6 | 0;
    memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $7 | 0) | 0;
    $0 = $0 + 1 | 0;
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($8 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  label$5 : {
   if ((HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$5
   }
   $9 = $4 << 3 | 0;
   if (!$9) {
    break label$5
   }
   $11 = 0;
   $12 = 0;
   label$6 : while (1) {
    $6 = $11 << 2 | 0;
    $0 = HEAP32[($2 + $6 | 0) >> 2] | 0;
    $7 = HEAP32[($3 + ($12 << 2 | 0) | 0) >> 2] | 0;
    $6 = HEAP32[($2 + ($6 | 4 | 0) | 0) >> 2] | 0;
    $5 = 0;
    label$7 : while (1) {
     HEAP8[$7 >> 0] = (((((HEAPU8[$0 >> 0] | 0) + (HEAPU8[($0 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[$6 >> 0] | 0) | 0) + (HEAPU8[($6 + 1 | 0) >> 0] | 0) | 0) + 1 | 0) >>> 2 | 0;
     HEAP8[($7 + 1 | 0) >> 0] = (((((HEAPU8[($0 + 2 | 0) >> 0] | 0) + (HEAPU8[($0 + 3 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($6 + 3 | 0) >> 0] | 0) | 0) + 2 | 0) >>> 2 | 0;
     $6 = $6 + 4 | 0;
     $0 = $0 + 4 | 0;
     $7 = $7 + 2 | 0;
     $5 = $5 + 2 | 0;
     if (($5 | 0) != ($9 | 0)) {
      continue label$7
     }
     break label$7;
    };
    $11 = $11 + 2 | 0;
    $12 = $12 + 1 | 0;
    if (($12 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
 }
 
 function int_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $11 = 0, $12 = 0, $16 = 0, $6 = 0, $15 = 0, $8 = 0, $13 = 0, $4 = 0, $7 = 0, $9 = 0, $17 = 0, $10 = 0, $14 = 0, $18 = 0, $19 = 0;
  $4 = (HEAP32[($1 + 28 | 0) >> 2] | 0) << 3 | 0;
  $5 = HEAP32[($0 + 236 | 0) >> 2] | 0;
  $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $7 = ($5 | 0) / ($6 | 0) | 0;
  $8 = (HEAP32[($0 + 232 | 0) >> 2] | 0 | 0) / (HEAP32[($1 + 8 | 0) >> 2] | 0 | 0) | 0;
  $9 = Math_imul($7, $8);
  $10 = ($9 | 0) / (2 | 0) | 0;
  label$1 : {
   if (($5 | 0) < (1 | 0)) {
    break label$1
   }
   $11 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $12 = Math_imul($8, $4) - $11 | 0;
   if (($12 | 0) < (1 | 0)) {
    break label$1
   }
   $13 = $5 & 3 | 0;
   $6 = 0;
   $0 = 0;
   label$2 : {
    if (($5 + -1 | 0) >>> 0 < 3 >>> 0) {
     break label$2
    }
    $14 = $5 & -4 | 0;
    $0 = 0;
    $15 = 0;
    label$3 : while (1) {
     $5 = $0 << 2 | 0;
     $16 = (HEAP32[($2 + $5 | 0) >> 2] | 0) + $11 | 0;
     memset($16 | 0, HEAPU8[($16 + -1 | 0) >> 0] | 0 | 0, $12 | 0) | 0;
     $16 = (HEAP32[($2 + ($5 | 4 | 0) | 0) >> 2] | 0) + $11 | 0;
     memset($16 | 0, HEAPU8[($16 + -1 | 0) >> 0] | 0 | 0, $12 | 0) | 0;
     $16 = (HEAP32[($2 + ($5 | 8 | 0) | 0) >> 2] | 0) + $11 | 0;
     memset($16 | 0, HEAPU8[($16 + -1 | 0) >> 0] | 0 | 0, $12 | 0) | 0;
     $5 = (HEAP32[($2 + ($5 | 12 | 0) | 0) >> 2] | 0) + $11 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $12 | 0) | 0;
     $0 = $0 + 4 | 0;
     $15 = $15 + 4 | 0;
     if (($15 | 0) != ($14 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    if (!$13) {
     break label$4
    }
    label$5 : while (1) {
     $5 = (HEAP32[($2 + ($0 << 2 | 0) | 0) >> 2] | 0) + $11 | 0;
     memset($5 | 0, HEAPU8[($5 + -1 | 0) >> 0] | 0 | 0, $12 | 0) | 0;
     $0 = $0 + 1 | 0;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($13 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  }
  label$6 : {
   if (($6 | 0) < (1 | 0)) {
    break label$6
   }
   if (!$4) {
    break label$6
   }
   label$7 : {
    if (($7 | 0) < (1 | 0)) {
     break label$7
    }
    label$8 : {
     if (($8 | 0) < (1 | 0)) {
      break label$8
     }
     $6 = $8 & -8 | 0;
     $5 = $8 & 7 | 0;
     $13 = 0;
     $14 = ($8 + -1 | 0) >>> 0 < 7 >>> 0;
     $17 = 0;
     label$9 : while (1) {
      $18 = HEAP32[($3 + ($17 << 2 | 0) | 0) >> 2] | 0;
      $16 = 0;
      $19 = 0;
      label$10 : while (1) {
       $11 = 0;
       $15 = 0;
       label$11 : while (1) {
        $0 = (HEAP32[($2 + (($15 + $13 | 0) << 2 | 0) | 0) >> 2] | 0) + $16 | 0;
        $12 = 0;
        label$12 : {
         if ($14) {
          break label$12
         }
         label$13 : while (1) {
          $11 = ((((((($11 + (HEAPU8[$0 >> 0] | 0) | 0) + (HEAPU8[($0 + 1 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 2 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 3 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 4 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 5 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 6 | 0) >> 0] | 0) | 0) + (HEAPU8[($0 + 7 | 0) >> 0] | 0) | 0;
          $0 = $0 + 8 | 0;
          $12 = $12 + 8 | 0;
          if (($12 | 0) != ($6 | 0)) {
           continue label$13
          }
          break label$13;
         };
        }
        $12 = 0;
        label$14 : {
         if (!$5) {
          break label$14
         }
         label$15 : while (1) {
          $11 = $11 + (HEAPU8[$0 >> 0] | 0) | 0;
          $0 = $0 + 1 | 0;
          $12 = $12 + 1 | 0;
          if (($12 | 0) != ($5 | 0)) {
           continue label$15
          }
          break label$15;
         };
        }
        $15 = $15 + 1 | 0;
        if (($15 | 0) != ($7 | 0)) {
         continue label$11
        }
        break label$11;
       };
       HEAP8[$18 >> 0] = ($11 + $10 | 0 | 0) / ($9 | 0) | 0;
       $16 = $16 + $8 | 0;
       $18 = $18 + 1 | 0;
       $19 = $19 + 1 | 0;
       if (($19 | 0) != ($4 | 0)) {
        continue label$10
       }
       break label$10;
      };
      $13 = $13 + $7 | 0;
      $17 = $17 + 1 | 0;
      if (($17 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
       continue label$9
      }
      break label$6;
     };
    }
    $11 = ($10 | 0) / ($9 | 0) | 0;
    $0 = 0;
    label$16 : while (1) {
     memset(HEAP32[($3 + ($0 << 2 | 0) | 0) >> 2] | 0 | 0, $11 | 0, $4 | 0) | 0;
     $0 = $0 + 1 | 0;
     if (($0 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
      continue label$16
     }
     break label$6;
    };
   }
   $11 = ($10 | 0) / ($9 | 0) | 0;
   $0 = 0;
   label$17 : while (1) {
    memset(HEAP32[($3 + ($0 << 2 | 0) | 0) >> 2] | 0 | 0, $11 | 0, $4 | 0) | 0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) < (HEAP32[($1 + 12 | 0) >> 2] | 0 | 0)) {
     continue label$17
    }
    break label$17;
   };
  }
 }
 
 function jpeg_mem_dest_internal($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    if ($2) {
     break label$1
    }
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 23;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
  }
  label$3 : {
   label$4 : {
    $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    if ($4) {
     break label$4
    }
    $4 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, $3, 40) | 0;
    HEAP32[($0 + 24 | 0) >> 2] = $4;
    break label$3;
   }
   if ((HEAP32[($4 + 8 | 0) >> 2] | 0 | 0) == (72 | 0)) {
    break label$3
   }
   $4 = HEAP32[$0 >> 2] | 0;
   HEAP32[($4 + 20 | 0) >> 2] = 23;
   FUNCTION_TABLE[HEAP32[$4 >> 2] | 0 | 0]($0);
   $4 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  }
  HEAP32[($4 + 28 | 0) >> 2] = 0;
  HEAP32[($4 + 24 | 0) >> 2] = $2;
  HEAP32[($4 + 20 | 0) >> 2] = $1;
  HEAP32[($4 + 16 | 0) >> 2] = 73;
  HEAP32[($4 + 12 | 0) >> 2] = 74;
  HEAP32[($4 + 8 | 0) >> 2] = 72;
  label$5 : {
   label$6 : {
    $3 = HEAP32[$1 >> 2] | 0;
    if (!$3) {
     break label$6
    }
    $5 = HEAP32[$2 >> 2] | 0;
    if ($5) {
     break label$5
    }
   }
   $5 = 4096;
   $3 = malloc(4096 | 0) | 0;
   HEAP32[$1 >> 2] = $3;
   HEAP32[($4 + 28 | 0) >> 2] = $3;
   label$7 : {
    if ($3) {
     break label$7
    }
    i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
    HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
    HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 10;
    FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   }
   HEAP32[$2 >> 2] = 4096;
   $3 = HEAP32[$1 >> 2] | 0;
  }
  HEAP32[($4 + 36 | 0) >> 2] = $5;
  HEAP32[$4 >> 2] = $3;
  HEAP32[($4 + 32 | 0) >> 2] = $3;
  HEAP32[($4 + 4 | 0) >> 2] = $5;
 }
 
 function init_mem_destination($0) {
  $0 = $0 | 0;
 }
 
 function term_mem_destination($0) {
  $0 = $0 | 0;
  $0 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($0 + 20 | 0) >> 2] | 0) >> 2] = HEAP32[($0 + 32 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($0 + 24 | 0) >> 2] | 0) >> 2] = (HEAP32[($0 + 36 | 0) >> 2] | 0) - (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
 }
 
 function empty_mem_output_buffer($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, i64toi32_i32$1 = 0;
  label$1 : {
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $2 = HEAP32[($1 + 36 | 0) >> 2] | 0;
   $3 = $2 << 1 | 0;
   $4 = malloc($3 | 0) | 0;
   if ($4) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 10;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   $2 = HEAP32[($1 + 36 | 0) >> 2] | 0;
  }
  $0 = __memcpy($4 | 0, HEAP32[($1 + 32 | 0) >> 2] | 0 | 0, $2 | 0) | 0;
  label$2 : {
   $2 = HEAP32[($1 + 28 | 0) >> 2] | 0;
   if (!$2) {
    break label$2
   }
   free($2 | 0);
  }
  HEAP32[($1 + 28 | 0) >> 2] = $0;
  HEAP32[($1 + 32 | 0) >> 2] = $0;
  $2 = HEAP32[($1 + 36 | 0) >> 2] | 0;
  HEAP32[($1 + 36 | 0) >> 2] = $3;
  HEAP32[($1 + 4 | 0) >> 2] = $2;
  HEAP32[$1 >> 2] = $0 + $2 | 0;
  return 1 | 0;
 }
 
 function jpeg_mem_dest($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  jpeg_mem_dest_internal($0 | 0, $1 | 0, $2 | 0, 0 | 0);
 }
 
 function jpeg_std_error($0) {
  $0 = $0 | 0;
  var i64toi32_i32$0 = 0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 104 | 0) >> 2] = 0;
  HEAP32[($0 + 108 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 16 | 0) >> 2] = 75;
  HEAP32[($0 + 12 | 0) >> 2] = 76;
  HEAP32[($0 + 8 | 0) >> 2] = 77;
  HEAP32[($0 + 4 | 0) >> 2] = 78;
  HEAP32[$0 >> 2] = 79;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 124 | 0) >> 2] = 0;
  HEAP32[($0 + 128 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[($0 + 116 | 0) >> 2] = 129;
  HEAP32[($0 + 120 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 112 | 0) >> 2] = 143488;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  return $0 | 0;
 }
 
 function reset_error_mgr($0) {
  $0 = $0 | 0;
  $0 = HEAP32[$0 >> 2] | 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  HEAP32[($0 + 108 | 0) >> 2] = 0;
 }
 
 function format_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $4 = 0, $5 = 0, $2 = 0, $6 = 0, $6$hi = 0, $7 = 0, $7$hi = 0, $8 = 0, $8$hi = 0, $86 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      $3 = HEAP32[$0 >> 2] | 0;
      $0 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (($0 | 0) < (1 | 0)) {
       break label$4
      }
      if (($0 | 0) > (HEAP32[($3 + 116 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      $4 = (HEAP32[($3 + 112 | 0) >> 2] | 0) + ($0 << 2 | 0) | 0;
      break label$3;
     }
     $4 = HEAP32[($3 + 120 | 0) >> 2] | 0;
     if (!$4) {
      break label$2
     }
     $5 = HEAP32[($3 + 124 | 0) >> 2] | 0;
     if (($0 | 0) < ($5 | 0)) {
      break label$2
     }
     if (($0 | 0) > (HEAP32[($3 + 128 | 0) >> 2] | 0 | 0)) {
      break label$2
     }
     $4 = $4 + (($0 - $5 | 0) << 2 | 0) | 0;
    }
    $5 = HEAP32[$4 >> 2] | 0;
    if ($5) {
     break label$1
    }
   }
   HEAP32[($3 + 24 | 0) >> 2] = $0;
   $5 = HEAP32[(HEAP32[($3 + 112 | 0) >> 2] | 0) >> 2] | 0;
  }
  $0 = $5;
  label$5 : {
   label$6 : {
    label$7 : while (1) {
     $4 = HEAPU8[$0 >> 0] | 0;
     if (!$4) {
      break label$6
     }
     $0 = $0 + 1 | 0;
     if (($4 | 0) != (37 | 0)) {
      continue label$7
     }
     break label$7;
    };
    if ((HEAPU8[$0 >> 0] | 0 | 0) != (115 | 0)) {
     break label$6
    }
    HEAP32[($2 + 32 | 0) >> 2] = $3 + 24 | 0;
    siprintf($1 | 0, $5 | 0, $2 + 32 | 0 | 0) | 0;
    break label$5;
   }
   i64toi32_i32$2 = $3 + 32 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $3 + 40 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $7 = i64toi32_i32$1;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = HEAP32[($3 + 24 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[($3 + 28 | 0) >> 2] | 0;
   $8 = i64toi32_i32$0;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $3 + 48 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $86 = i64toi32_i32$1;
   i64toi32_i32$1 = $2 + 24 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $86;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$1 = $2 + 16 | 0;
   HEAP32[i64toi32_i32$1 >> 2] = $7;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$1 = $2;
   HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $6;
   HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   HEAP32[i64toi32_i32$1 >> 2] = $8;
   HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
   siprintf($1 | 0, $5 | 0, i64toi32_i32$1 | 0) | 0;
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function output_message($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 224 | 0;
  __stack_pointer = $1;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 12 | 0) >> 2] | 0 | 0]($0, $1 + 16 | 0);
  HEAP32[$1 >> 2] = $1 + 16 | 0;
  fiprintf(HEAP32[(0 + 158296 | 0) >> 2] | 0 | 0, 138315 | 0, $1 | 0) | 0;
  __stack_pointer = $1 + 224 | 0;
 }
 
 function emit_message($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAP32[$0 >> 2] | 0;
  label$1 : {
   if (($1 | 0) > (-1 | 0)) {
    break label$1
   }
   label$2 : {
    label$3 : {
     $1 = HEAP32[($2 + 108 | 0) >> 2] | 0;
     if (!$1) {
      break label$3
     }
     if ((HEAP32[($2 + 104 | 0) >> 2] | 0 | 0) < (3 | 0)) {
      break label$2
     }
    }
    FUNCTION_TABLE[HEAP32[($2 + 8 | 0) >> 2] | 0 | 0]($0);
    $1 = HEAP32[($2 + 108 | 0) >> 2] | 0;
   }
   HEAP32[($2 + 108 | 0) >> 2] = $1 + 1 | 0;
   return;
  }
  label$4 : {
   if ((HEAP32[($2 + 104 | 0) >> 2] | 0 | 0) < ($1 | 0)) {
    break label$4
   }
   FUNCTION_TABLE[HEAP32[($2 + 8 | 0) >> 2] | 0 | 0]($0);
  }
 }
 
 function error_exit($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 8 | 0) >> 2] | 0 | 0]($0);
  jpeg_destroy($0 | 0);
  exit(1 | 0);
  abort();
 }
 
 function jpeg_fdct_float($0) {
  $0 = $0 | 0;
  var $6 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $3 = 0, $9 = Math_fround(0), $7 = Math_fround(0), $10 = Math_fround(0), $8 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $1 = 0, $2 = 0, $18 = 0, $103 = Math_fround(0), $223 = Math_fround(0);
  $1 = 7;
  $2 = 7;
  $3 = $0;
  label$1 : while (1) {
   $4 = Math_fround(HEAPF32[$3 >> 2]);
   $5 = Math_fround(HEAPF32[($3 + 28 | 0) >> 2]);
   $6 = Math_fround($4 + $5);
   $7 = Math_fround(HEAPF32[($3 + 12 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($3 + 16 | 0) >> 2]);
   $9 = Math_fround($7 + $8);
   $10 = Math_fround($6 + $9);
   $11 = Math_fround(HEAPF32[($3 + 4 | 0) >> 2]);
   $12 = Math_fround(HEAPF32[($3 + 24 | 0) >> 2]);
   $13 = Math_fround($11 + $12);
   $14 = Math_fround(HEAPF32[($3 + 8 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($3 + 20 | 0) >> 2]);
   $16 = Math_fround($14 + $15);
   $17 = Math_fround($13 + $16);
   HEAPF32[($3 + 16 | 0) >> 2] = Math_fround($10 - $17);
   HEAPF32[$3 >> 2] = Math_fround($17 + $10);
   $6 = Math_fround($6 - $9);
   $9 = Math_fround(Math_fround($6 + Math_fround($13 - $16)) * Math_fround(.7071067690849304));
   HEAPF32[($3 + 24 | 0) >> 2] = Math_fround($6 - $9);
   HEAPF32[($3 + 8 | 0) >> 2] = Math_fround($6 + $9);
   $6 = Math_fround($4 - $5);
   $4 = Math_fround($11 - $12);
   $5 = Math_fround($14 - $15);
   $9 = Math_fround(Math_fround($4 + $5) * Math_fround(.7071067690849304));
   $10 = Math_fround($6 - $9);
   $5 = Math_fround($5 + Math_fround($7 - $8));
   $103 = Math_fround($5 * Math_fround(.5411961078643799));
   $4 = Math_fround($6 + $4);
   $5 = Math_fround(Math_fround($5 - $4) * Math_fround(.3826834261417389));
   $7 = Math_fround($103 + $5);
   HEAPF32[($3 + 20 | 0) >> 2] = Math_fround($10 + $7);
   HEAPF32[($3 + 12 | 0) >> 2] = Math_fround($10 - $7);
   $6 = Math_fround($6 + $9);
   $4 = Math_fround(Math_fround($4 * Math_fround(1.3065630197525024)) + $5);
   HEAPF32[($3 + 28 | 0) >> 2] = Math_fround($6 - $4);
   HEAPF32[($3 + 4 | 0) >> 2] = Math_fround($6 + $4);
   $18 = $2;
   $2 = $18 + -1 | 0;
   $3 = $3 + 32 | 0;
   if ($18) {
    continue label$1
   }
   break label$1;
  };
  label$2 : while (1) {
   $4 = Math_fround(HEAPF32[$0 >> 2]);
   $5 = Math_fround(HEAPF32[($0 + 224 | 0) >> 2]);
   $6 = Math_fround($4 + $5);
   $7 = Math_fround(HEAPF32[($0 + 96 | 0) >> 2]);
   $8 = Math_fround(HEAPF32[($0 + 128 | 0) >> 2]);
   $9 = Math_fround($7 + $8);
   $10 = Math_fround($6 + $9);
   $11 = Math_fround(HEAPF32[($0 + 32 | 0) >> 2]);
   $12 = Math_fround(HEAPF32[($0 + 192 | 0) >> 2]);
   $13 = Math_fround($11 + $12);
   $14 = Math_fround(HEAPF32[($0 + 64 | 0) >> 2]);
   $15 = Math_fround(HEAPF32[($0 + 160 | 0) >> 2]);
   $16 = Math_fround($14 + $15);
   $17 = Math_fround($13 + $16);
   HEAPF32[($0 + 128 | 0) >> 2] = Math_fround($10 - $17);
   HEAPF32[$0 >> 2] = Math_fround($17 + $10);
   $6 = Math_fround($6 - $9);
   $9 = Math_fround(Math_fround($6 + Math_fround($13 - $16)) * Math_fround(.7071067690849304));
   HEAPF32[($0 + 192 | 0) >> 2] = Math_fround($6 - $9);
   HEAPF32[($0 + 64 | 0) >> 2] = Math_fround($6 + $9);
   $6 = Math_fround($4 - $5);
   $4 = Math_fround($11 - $12);
   $5 = Math_fround($14 - $15);
   $9 = Math_fround(Math_fround($4 + $5) * Math_fround(.7071067690849304));
   $10 = Math_fround($6 - $9);
   $5 = Math_fround($5 + Math_fround($7 - $8));
   $223 = Math_fround($5 * Math_fround(.5411961078643799));
   $4 = Math_fround($6 + $4);
   $5 = Math_fround(Math_fround($5 - $4) * Math_fround(.3826834261417389));
   $7 = Math_fround($223 + $5);
   HEAPF32[($0 + 160 | 0) >> 2] = Math_fround($10 + $7);
   HEAPF32[($0 + 96 | 0) >> 2] = Math_fround($10 - $7);
   $6 = Math_fround($6 + $9);
   $4 = Math_fround(Math_fround($4 * Math_fround(1.3065630197525024)) + $5);
   HEAPF32[($0 + 224 | 0) >> 2] = Math_fround($6 - $4);
   HEAPF32[($0 + 32 | 0) >> 2] = Math_fround($6 + $4);
   $3 = $1;
   $1 = $3 + -1 | 0;
   $0 = $0 + 4 | 0;
   if ($3) {
    continue label$2
   }
   break label$2;
  };
 }
 
 function jpeg_fdct_ifast($0) {
  $0 = $0 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $7 = 0, $5 = 0, $9 = 0, $2 = 0, $8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $1 = 0, $16 = 0, $17 = 0, $82 = 0, $207 = 0;
  $1 = 7;
  $2 = 7;
  $3 = $0;
  label$1 : while (1) {
   $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
   $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   $6 = $4 + $5 | 0;
   $7 = HEAP32[($3 + 28 | 0) >> 2] | 0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = $7 + $8 | 0;
   $10 = $6 + $9 | 0;
   $11 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   $12 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   $13 = $11 + $12 | 0;
   $14 = HEAP32[($3 + 24 | 0) >> 2] | 0;
   $15 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $16 = $14 + $15 | 0;
   $17 = $13 + $16 | 0;
   HEAP32[($3 + 16 | 0) >> 2] = $10 - $17 | 0;
   HEAP32[$3 >> 2] = $10 + $17 | 0;
   $6 = $9 - $6 | 0;
   $9 = Math_imul($6 + ($16 - $13 | 0) | 0, 181) >> 8 | 0;
   HEAP32[($3 + 24 | 0) >> 2] = $6 - $9 | 0;
   HEAP32[($3 + 8 | 0) >> 2] = $9 + $6 | 0;
   $82 = $5 - $4 | 0;
   $4 = $12 - $11 | 0;
   $5 = $82 + $4 | 0;
   $9 = $15 - $14 | 0;
   $6 = $8 - $7 | 0;
   $7 = $9 + $6 | 0;
   $8 = Math_imul($5 - $7 | 0, 98) >> 8 | 0;
   $5 = $8 + (Math_imul($5, 139) >> 8 | 0) | 0;
   $4 = Math_imul($4 + $9 | 0, 181) >> 8 | 0;
   $9 = $6 - $4 | 0;
   HEAP32[($3 + 20 | 0) >> 2] = $5 + $9 | 0;
   HEAP32[($3 + 12 | 0) >> 2] = $9 - $5 | 0;
   $6 = $4 + $6 | 0;
   $4 = $8 + (Math_imul($7, 334) >> 8 | 0) | 0;
   HEAP32[($3 + 28 | 0) >> 2] = $6 - $4 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $4 + $6 | 0;
   $6 = $2;
   $2 = $6 + -1 | 0;
   $3 = $3 + 32 | 0;
   if ($6) {
    continue label$1
   }
   break label$1;
  };
  label$2 : while (1) {
   $6 = HEAP32[($0 + 128 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   $3 = $6 + $2 | 0;
   $4 = HEAP32[($0 + 224 | 0) >> 2] | 0;
   $5 = HEAP32[$0 >> 2] | 0;
   $7 = $4 + $5 | 0;
   $8 = $3 + $7 | 0;
   $9 = HEAP32[($0 + 160 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + 64 | 0) >> 2] | 0;
   $11 = $9 + $10 | 0;
   $12 = HEAP32[($0 + 192 | 0) >> 2] | 0;
   $13 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   $14 = $12 + $13 | 0;
   $15 = $11 + $14 | 0;
   HEAP32[($0 + 128 | 0) >> 2] = $8 - $15 | 0;
   HEAP32[$0 >> 2] = $8 + $15 | 0;
   $3 = $7 - $3 | 0;
   $7 = Math_imul($3 + ($14 - $11 | 0) | 0, 181) >> 8 | 0;
   HEAP32[($0 + 192 | 0) >> 2] = $3 - $7 | 0;
   HEAP32[($0 + 64 | 0) >> 2] = $7 + $3 | 0;
   $207 = $2 - $6 | 0;
   $6 = $10 - $9 | 0;
   $2 = $207 + $6 | 0;
   $7 = $13 - $12 | 0;
   $3 = $5 - $4 | 0;
   $4 = $7 + $3 | 0;
   $5 = Math_imul($2 - $4 | 0, 98) >> 8 | 0;
   $2 = $5 + (Math_imul($2, 139) >> 8 | 0) | 0;
   $6 = Math_imul($6 + $7 | 0, 181) >> 8 | 0;
   $7 = $3 - $6 | 0;
   HEAP32[($0 + 160 | 0) >> 2] = $2 + $7 | 0;
   HEAP32[($0 + 96 | 0) >> 2] = $7 - $2 | 0;
   $3 = $6 + $3 | 0;
   $6 = $5 + (Math_imul($4, 334) >> 8 | 0) | 0;
   HEAP32[($0 + 224 | 0) >> 2] = $3 - $6 | 0;
   HEAP32[($0 + 32 | 0) >> 2] = $6 + $3 | 0;
   $3 = $1;
   $1 = $3 + -1 | 0;
   $0 = $0 + 4 | 0;
   if ($3) {
    continue label$2
   }
   break label$2;
  };
 }
 
 function jpeg_fdct_islow($0) {
  $0 = $0 | 0;
  var $3 = 0, $4 = 0, $7 = 0, $6 = 0, $8 = 0, $10 = 0, $5 = 0, $9 = 0, $11 = 0, $2 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $1 = 0, $16 = 0, $17 = 0, $78 = 0, $134 = 0, $225 = 0, $281 = 0;
  $1 = 7;
  $2 = 7;
  $3 = $0;
  label$1 : while (1) {
   $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
   $5 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   $6 = $4 + $5 | 0;
   $7 = HEAP32[($3 + 28 | 0) >> 2] | 0;
   $8 = HEAP32[$3 >> 2] | 0;
   $9 = $7 + $8 | 0;
   $10 = $6 + $9 | 0;
   $11 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   $12 = HEAP32[($3 + 8 | 0) >> 2] | 0;
   $13 = $11 + $12 | 0;
   $14 = HEAP32[($3 + 24 | 0) >> 2] | 0;
   $15 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $16 = $14 + $15 | 0;
   $17 = $13 + $16 | 0;
   HEAP32[($3 + 16 | 0) >> 2] = ($10 - $17 | 0) << 2 | 0;
   HEAP32[$3 >> 2] = ($10 + $17 | 0) << 2 | 0;
   $4 = $5 - $4 | 0;
   $5 = $8 - $7 | 0;
   $8 = Math_imul($4 + $5 | 0, -7373) + 1024 | 0;
   $78 = $8 + Math_imul($4, 2446) | 0;
   $7 = $15 - $14 | 0;
   $10 = $4 + $7 | 0;
   $4 = $12 - $11 | 0;
   $11 = $4 + $5 | 0;
   $12 = Math_imul($10 + $11 | 0, 9633);
   $10 = $12 + Math_imul($10, -16069) | 0;
   HEAP32[($3 + 28 | 0) >> 2] = ($78 + $10 | 0) >> 11 | 0;
   $6 = $9 - $6 | 0;
   $9 = $16 - $13 | 0;
   $13 = Math_imul($6 + $9 | 0, 4433) + 1024 | 0;
   HEAP32[($3 + 24 | 0) >> 2] = ($13 + Math_imul($9, -15137) | 0) >> 11 | 0;
   HEAP32[($3 + 8 | 0) >> 2] = ($13 + Math_imul($6, 6270) | 0) >> 11 | 0;
   $6 = Math_imul($4 + $7 | 0, -20995) + 1024 | 0;
   $134 = $6 + Math_imul($4, 16819) | 0;
   $4 = $12 + Math_imul($11, -3196) | 0;
   HEAP32[($3 + 20 | 0) >> 2] = ($134 + $4 | 0) >> 11 | 0;
   HEAP32[($3 + 12 | 0) >> 2] = (($6 + Math_imul($7, 25172) | 0) + $10 | 0) >> 11 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = (($8 + Math_imul($5, 12299) | 0) + $4 | 0) >> 11 | 0;
   $4 = $2;
   $2 = $4 + -1 | 0;
   $3 = $3 + 32 | 0;
   if ($4) {
    continue label$1
   }
   break label$1;
  };
  label$2 : while (1) {
   $3 = HEAP32[($0 + 128 | 0) >> 2] | 0;
   $4 = HEAP32[($0 + 96 | 0) >> 2] | 0;
   $7 = $3 + $4 | 0;
   $5 = HEAP32[($0 + 224 | 0) >> 2] | 0;
   $2 = HEAP32[$0 >> 2] | 0;
   $6 = $5 + $2 | 0;
   $8 = $7 + $6 | 0;
   $9 = HEAP32[($0 + 160 | 0) >> 2] | 0;
   $10 = HEAP32[($0 + 64 | 0) >> 2] | 0;
   $11 = $9 + $10 | 0;
   $12 = HEAP32[($0 + 192 | 0) >> 2] | 0;
   $13 = HEAP32[($0 + 32 | 0) >> 2] | 0;
   $14 = $12 + $13 | 0;
   $15 = $11 + $14 | 0;
   HEAP32[($0 + 128 | 0) >> 2] = (($8 - $15 | 0) + 2 | 0) >> 2 | 0;
   HEAP32[$0 >> 2] = (($15 + $8 | 0) + 2 | 0) >> 2 | 0;
   $3 = $4 - $3 | 0;
   $4 = $2 - $5 | 0;
   $2 = Math_imul($3 + $4 | 0, -7373) + 16384 | 0;
   $225 = $2 + Math_imul($3, 2446) | 0;
   $5 = $13 - $12 | 0;
   $8 = $3 + $5 | 0;
   $3 = $10 - $9 | 0;
   $9 = $3 + $4 | 0;
   $10 = Math_imul($8 + $9 | 0, 9633);
   $8 = $10 + Math_imul($8, -16069) | 0;
   HEAP32[($0 + 224 | 0) >> 2] = ($225 + $8 | 0) >> 15 | 0;
   $7 = $6 - $7 | 0;
   $6 = $14 - $11 | 0;
   $11 = Math_imul($7 + $6 | 0, 4433) + 16384 | 0;
   HEAP32[($0 + 192 | 0) >> 2] = ($11 + Math_imul($6, -15137) | 0) >> 15 | 0;
   HEAP32[($0 + 64 | 0) >> 2] = ($11 + Math_imul($7, 6270) | 0) >> 15 | 0;
   $7 = Math_imul($3 + $5 | 0, -20995) + 16384 | 0;
   $281 = $7 + Math_imul($3, 16819) | 0;
   $3 = $10 + Math_imul($9, -3196) | 0;
   HEAP32[($0 + 160 | 0) >> 2] = ($281 + $3 | 0) >> 15 | 0;
   HEAP32[($0 + 96 | 0) >> 2] = (($7 + Math_imul($5, 25172) | 0) + $8 | 0) >> 15 | 0;
   HEAP32[($0 + 32 | 0) >> 2] = (($2 + Math_imul($4, 12299) | 0) + $3 | 0) >> 15 | 0;
   $3 = $1;
   $1 = $3 + -1 | 0;
   $0 = $0 + 4 | 0;
   if ($3) {
    continue label$2
   }
   break label$2;
  };
 }
 
 function jdiv_round_up($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (($0 + $1 | 0) + -1 | 0 | 0) / ($1 | 0) | 0 | 0;
 }
 
 function jround_up($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = ($0 + $1 | 0) + -1 | 0;
  return $0 - (($0 | 0) % ($1 | 0) | 0) | 0 | 0;
 }
 
 function jcopy_sample_rows($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  label$1 : {
   if (($4 | 0) < (1 | 0)) {
    break label$1
   }
   $6 = $4 + -1 | 0;
   $0 = $0 + ($1 << 2 | 0) | 0;
   $1 = $2 + ($3 << 2 | 0) | 0;
   label$2 : {
    $3 = $4 & 3 | 0;
    if (!$3) {
     break label$2
    }
    $2 = 0;
    label$3 : while (1) {
     __memcpy(HEAP32[$1 >> 2] | 0 | 0, HEAP32[$0 >> 2] | 0 | 0, $5 | 0) | 0;
     $4 = $4 + -1 | 0;
     $1 = $1 + 4 | 0;
     $0 = $0 + 4 | 0;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($3 | 0)) {
      continue label$3
     }
     break label$3;
    };
   }
   if ($6 >>> 0 < 3 >>> 0) {
    break label$1
   }
   label$4 : while (1) {
    __memcpy(HEAP32[$1 >> 2] | 0 | 0, HEAP32[$0 >> 2] | 0 | 0, $5 | 0) | 0;
    __memcpy(HEAP32[($1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $5 | 0) | 0;
    __memcpy(HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($0 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0;
    __memcpy(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, $5 | 0) | 0;
    $1 = $1 + 16 | 0;
    $0 = $0 + 16 | 0;
    $2 = $4 + -5 | 0;
    $4 = $4 + -4 | 0;
    if ($2 >>> 0 < -2 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
 }
 
 function jzero_far($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  memset($0 | 0, 0 | 0, $1 | 0) | 0;
 }
 
 function jinit_memory_mgr($0) {
  $0 = $0 | 0;
  var $3 = 0, $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  $2 = jpeg_mem_init($0 | 0) | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $2;
  label$1 : {
   $3 = jpeg_get_small($0 | 0, 84 | 0) | 0;
   if ($3) {
    break label$1
   }
   jpeg_mem_term($0 | 0);
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  HEAP32[($3 + 48 | 0) >> 2] = 1e9;
  HEAP32[($3 + 40 | 0) >> 2] = 80;
  HEAP32[($3 + 36 | 0) >> 2] = 81;
  HEAP32[($3 + 32 | 0) >> 2] = 82;
  HEAP32[($3 + 28 | 0) >> 2] = 83;
  HEAP32[($3 + 24 | 0) >> 2] = 84;
  HEAP32[($3 + 20 | 0) >> 2] = 85;
  HEAP32[($3 + 16 | 0) >> 2] = 86;
  HEAP32[($3 + 12 | 0) >> 2] = 87;
  HEAP32[($3 + 8 | 0) >> 2] = 88;
  HEAP32[($3 + 4 | 0) >> 2] = 89;
  HEAP32[$3 >> 2] = 90;
  i64toi32_i32$1 = $3;
  i64toi32_i32$0 = 0;
  HEAP32[($3 + 52 | 0) >> 2] = 0;
  HEAP32[($3 + 56 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($3 + 44 | 0) >> 2] = $2;
  HEAP32[($3 + 76 | 0) >> 2] = 84;
  i64toi32_i32$1 = $3 + 60 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $3 + 68 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($0 + 4 | 0) >> 2] = $3;
  label$2 : {
   $0 = getenv(137298 | 0) | 0;
   if (!$0) {
    break label$2
   }
   HEAP8[($1 + 11 | 0) >> 0] = 120;
   HEAP32[$1 >> 2] = $1 + 12 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $1 + 11 | 0;
   if ((sscanf($0 | 0, 137209 | 0, $1 | 0) | 0 | 0) < (1 | 0)) {
    break label$2
   }
   $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   label$3 : {
    if (((HEAPU8[($1 + 11 | 0) >> 0] | 0) & 223 | 0 | 0) != (77 | 0)) {
     break label$3
    }
    $0 = Math_imul($0, 1e3);
    HEAP32[($1 + 12 | 0) >> 2] = $0;
   }
   HEAP32[($3 + 44 | 0) >> 2] = Math_imul($0, 1e3);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function self_destruct($0) {
  $0 = $0 | 0;
  free_pool($0 | 0, 1 | 0);
  free_pool($0 | 0, 0 | 0);
  jpeg_free_small($0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, 84 | 0);
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  jpeg_mem_term($0 | 0);
 }
 
 function free_pool($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $5 = 0, $4 = 0;
  $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($1 >>> 0 < 2 >>> 0) {
     break label$2
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 24 | 0) >> 2] = $1;
    HEAP32[($3 + 20 | 0) >> 2] = 14;
    FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
    break label$1;
   }
   if (($1 | 0) != (1 | 0)) {
    break label$1
   }
   label$3 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if (!$3) {
     break label$3
    }
    label$4 : while (1) {
     label$5 : {
      if (!(HEAP32[($3 + 40 | 0) >> 2] | 0)) {
       break label$5
      }
      HEAP32[($3 + 40 | 0) >> 2] = 0;
      FUNCTION_TABLE[HEAP32[($3 + 56 | 0) >> 2] | 0 | 0]($0, $3 + 48 | 0);
     }
     $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     if ($3) {
      continue label$4
     }
     break label$4;
    };
   }
   HEAP32[($2 + 68 | 0) >> 2] = 0;
   label$6 : {
    $3 = HEAP32[($2 + 72 | 0) >> 2] | 0;
    if (!$3) {
     break label$6
    }
    label$7 : while (1) {
     label$8 : {
      if (!(HEAP32[($3 + 40 | 0) >> 2] | 0)) {
       break label$8
      }
      HEAP32[($3 + 40 | 0) >> 2] = 0;
      FUNCTION_TABLE[HEAP32[($3 + 56 | 0) >> 2] | 0 | 0]($0, $3 + 48 | 0);
     }
     $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
     if ($3) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAP32[($2 + 72 | 0) >> 2] = 0;
  }
  $4 = $2 + ($1 << 2 | 0) | 0;
  $1 = $4 + 60 | 0;
  $3 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  label$9 : {
   if (!$3) {
    break label$9
   }
   label$10 : while (1) {
    $1 = HEAP32[$3 >> 2] | 0;
    $5 = ((HEAP32[($3 + 4 | 0) >> 2] | 0) + (HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) + 12 | 0;
    jpeg_free_large($0 | 0, $3 | 0, $5 | 0);
    HEAP32[($2 + 76 | 0) >> 2] = (HEAP32[($2 + 76 | 0) >> 2] | 0) - $5 | 0;
    $3 = $1;
    if ($3) {
     continue label$10
    }
    break label$10;
   };
  }
  $1 = $4 + 52 | 0;
  $3 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  label$11 : {
   if (!$3) {
    break label$11
   }
   label$12 : while (1) {
    $1 = HEAP32[$3 >> 2] | 0;
    $5 = ((HEAP32[($3 + 4 | 0) >> 2] | 0) + (HEAP32[($3 + 8 | 0) >> 2] | 0) | 0) + 12 | 0;
    jpeg_free_small($0 | 0, $3 | 0, $5 | 0);
    HEAP32[($2 + 76 | 0) >> 2] = (HEAP32[($2 + 76 | 0) >> 2] | 0) - $5 | 0;
    $3 = $1;
    if ($3) {
     continue label$12
    }
    break label$12;
   };
  }
 }
 
 function access_virt_barray($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $6 = 0, $10 = 0, $11 = 0, $5 = 0, $9 = 0, $8 = 0;
  label$1 : {
   label$2 : {
    $5 = $3 + $2 | 0;
    if ($5 >>> 0 > (HEAP32[($1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    if ((HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0 < $3 >>> 0) {
     break label$2
    }
    if (HEAP32[$1 >> 2] | 0) {
     break label$1
    }
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 22;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if ($3 >>> 0 > $2 >>> 0) {
     break label$4
    }
    if ($5 >>> 0 <= ((HEAP32[($1 + 16 | 0) >> 2] | 0) + $3 | 0) >>> 0) {
     break label$3
    }
   }
   label$5 : {
    if (HEAP32[($1 + 40 | 0) >> 2] | 0) {
     break label$5
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 69;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   label$6 : {
    if (!(HEAP32[($1 + 36 | 0) >> 2] | 0)) {
     break label$6
    }
    label$7 : {
     $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if (($3 | 0) < (1 | 0)) {
      break label$7
     }
     $6 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     $6 = ($6 | 0) < ($3 | 0) ? $6 : $3;
     $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     $7 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $3 | 0;
     $6 = ($6 | 0) < ($7 | 0) ? $6 : $7;
     $7 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $3 | 0;
     $7 = ($6 | 0) < ($7 | 0) ? $6 : $7;
     if (($7 | 0) < (1 | 0)) {
      break label$7
     }
     $8 = $1 + 48 | 0;
     $9 = (HEAP32[($1 + 8 | 0) >> 2] | 0) << 7 | 0;
     $6 = Math_imul($3, $9);
     $3 = 0;
     label$8 : while (1) {
      $10 = Math_imul($7, $9);
      FUNCTION_TABLE[HEAP32[($1 + 52 | 0) >> 2] | 0 | 0]($0, $8, HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0, $6, $10);
      $11 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      $3 = $7 + $3 | 0;
      if (($11 | 0) <= ($3 | 0)) {
       break label$7
      }
      $6 = $10 + $6 | 0;
      $10 = $11 - $3 | 0;
      $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
      $10 = $3 + (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0;
      $11 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $10 | 0;
      $7 = ($7 | 0) < ($11 | 0) ? $7 : $11;
      $10 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $10 | 0;
      $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
      if (($7 | 0) > (0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    HEAP32[($1 + 36 | 0) >> 2] = 0;
   }
   $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   $6 = $5 - $3 | 0;
   $6 = (HEAP32[($1 + 24 | 0) >> 2] | 0) >>> 0 < $2 >>> 0 ? $2 : ($6 | 0) > (0 | 0) ? $6 : 0;
   HEAP32[($1 + 24 | 0) >> 2] = $6;
   if (($3 | 0) < (1 | 0)) {
    break label$3
   }
   $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   $3 = ($7 | 0) < ($3 | 0) ? $7 : $3;
   $7 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $6 | 0;
   $3 = ($3 | 0) < ($7 | 0) ? $3 : $7;
   $7 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $6 | 0;
   $7 = ($3 | 0) < ($7 | 0) ? $3 : $7;
   if (($7 | 0) < (1 | 0)) {
    break label$3
   }
   $8 = $1 + 48 | 0;
   $9 = (HEAP32[($1 + 8 | 0) >> 2] | 0) << 7 | 0;
   $6 = Math_imul($9, $6);
   $3 = 0;
   label$9 : while (1) {
    $10 = Math_imul($7, $9);
    FUNCTION_TABLE[HEAP32[($1 + 48 | 0) >> 2] | 0 | 0]($0, $8, HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0, $6, $10);
    $11 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    $3 = $7 + $3 | 0;
    if (($11 | 0) <= ($3 | 0)) {
     break label$3
    }
    $6 = $10 + $6 | 0;
    $10 = $11 - $3 | 0;
    $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
    $10 = $3 + (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0;
    $11 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $10 | 0;
    $7 = ($7 | 0) < ($11 | 0) ? $7 : $11;
    $10 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $10 | 0;
    $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
    if (($7 | 0) > (0 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$10 : {
   label$11 : {
    label$12 : {
     $3 = HEAP32[($1 + 28 | 0) >> 2] | 0;
     if ($3 >>> 0 >= $5 >>> 0) {
      break label$12
     }
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         if ($3 >>> 0 >= $2 >>> 0) {
          break label$16
         }
         $3 = $2;
         if (!$4) {
          break label$15
         }
         $3 = HEAP32[$0 >> 2] | 0;
         HEAP32[($3 + 20 | 0) >> 2] = 22;
         FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
         $3 = $2;
         break label$14;
        }
        if ($4) {
         break label$14
        }
       }
       if (HEAP32[($1 + 32 | 0) >> 2] | 0) {
        break label$13
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 22;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
       break label$10;
      }
      HEAP32[($1 + 28 | 0) >> 2] = $5;
      if (!(HEAP32[($1 + 32 | 0) >> 2] | 0)) {
       break label$11
      }
     }
     $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     $3 = $3 - $6 | 0;
     $6 = $5 - $6 | 0;
     if ($3 >>> 0 >= $6 >>> 0) {
      break label$12
     }
     $7 = (HEAP32[($1 + 8 | 0) >> 2] | 0) << 7 | 0;
     label$17 : while (1) {
      jzero_far(HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $7 | 0);
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($6 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    if (!$4) {
     break label$10
    }
   }
   HEAP32[($1 + 36 | 0) >> 2] = 1;
  }
  return (HEAP32[$1 >> 2] | 0) + (($2 - (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0;
 }
 
 function access_virt_sarray($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $7 = 0, $6 = 0, $10 = 0, $11 = 0, $5 = 0, $9 = 0, $8 = 0;
  label$1 : {
   label$2 : {
    $5 = $3 + $2 | 0;
    if ($5 >>> 0 > (HEAP32[($1 + 4 | 0) >> 2] | 0) >>> 0) {
     break label$2
    }
    if ((HEAP32[($1 + 12 | 0) >> 2] | 0) >>> 0 < $3 >>> 0) {
     break label$2
    }
    if (HEAP32[$1 >> 2] | 0) {
     break label$1
    }
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 22;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  label$3 : {
   label$4 : {
    $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
    if ($3 >>> 0 > $2 >>> 0) {
     break label$4
    }
    if ($5 >>> 0 <= ((HEAP32[($1 + 16 | 0) >> 2] | 0) + $3 | 0) >>> 0) {
     break label$3
    }
   }
   label$5 : {
    if (HEAP32[($1 + 40 | 0) >> 2] | 0) {
     break label$5
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 69;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   label$6 : {
    if (!(HEAP32[($1 + 36 | 0) >> 2] | 0)) {
     break label$6
    }
    label$7 : {
     $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
     if (($3 | 0) < (1 | 0)) {
      break label$7
     }
     $6 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     $6 = ($6 | 0) < ($3 | 0) ? $6 : $3;
     $3 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     $7 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $3 | 0;
     $6 = ($6 | 0) < ($7 | 0) ? $6 : $7;
     $7 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $3 | 0;
     $7 = ($6 | 0) < ($7 | 0) ? $6 : $7;
     if (($7 | 0) < (1 | 0)) {
      break label$7
     }
     $8 = $1 + 48 | 0;
     $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     $6 = Math_imul($3, $9);
     $3 = 0;
     label$8 : while (1) {
      $10 = Math_imul($7, $9);
      FUNCTION_TABLE[HEAP32[($1 + 52 | 0) >> 2] | 0 | 0]($0, $8, HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0, $6, $10);
      $11 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
      $3 = $7 + $3 | 0;
      if (($11 | 0) <= ($3 | 0)) {
       break label$7
      }
      $6 = $10 + $6 | 0;
      $10 = $11 - $3 | 0;
      $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
      $10 = $3 + (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0;
      $11 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $10 | 0;
      $7 = ($7 | 0) < ($11 | 0) ? $7 : $11;
      $10 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $10 | 0;
      $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
      if (($7 | 0) > (0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    HEAP32[($1 + 36 | 0) >> 2] = 0;
   }
   $3 = HEAP32[($1 + 16 | 0) >> 2] | 0;
   $6 = $5 - $3 | 0;
   $6 = (HEAP32[($1 + 24 | 0) >> 2] | 0) >>> 0 < $2 >>> 0 ? $2 : ($6 | 0) > (0 | 0) ? $6 : 0;
   HEAP32[($1 + 24 | 0) >> 2] = $6;
   if (($3 | 0) < (1 | 0)) {
    break label$3
   }
   $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
   $3 = ($7 | 0) < ($3 | 0) ? $7 : $3;
   $7 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $6 | 0;
   $3 = ($3 | 0) < ($7 | 0) ? $3 : $7;
   $7 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $6 | 0;
   $7 = ($3 | 0) < ($7 | 0) ? $3 : $7;
   if (($7 | 0) < (1 | 0)) {
    break label$3
   }
   $8 = $1 + 48 | 0;
   $9 = HEAP32[($1 + 8 | 0) >> 2] | 0;
   $6 = Math_imul($9, $6);
   $3 = 0;
   label$9 : while (1) {
    $10 = Math_imul($7, $9);
    FUNCTION_TABLE[HEAP32[($1 + 48 | 0) >> 2] | 0 | 0]($0, $8, HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0, $6, $10);
    $11 = HEAP32[($1 + 16 | 0) >> 2] | 0;
    $7 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    $3 = $7 + $3 | 0;
    if (($11 | 0) <= ($3 | 0)) {
     break label$3
    }
    $6 = $10 + $6 | 0;
    $10 = $11 - $3 | 0;
    $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
    $10 = $3 + (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0;
    $11 = (HEAP32[($1 + 28 | 0) >> 2] | 0) - $10 | 0;
    $7 = ($7 | 0) < ($11 | 0) ? $7 : $11;
    $10 = (HEAP32[($1 + 4 | 0) >> 2] | 0) - $10 | 0;
    $7 = ($7 | 0) < ($10 | 0) ? $7 : $10;
    if (($7 | 0) > (0 | 0)) {
     continue label$9
    }
    break label$9;
   };
  }
  label$10 : {
   label$11 : {
    label$12 : {
     $3 = HEAP32[($1 + 28 | 0) >> 2] | 0;
     if ($3 >>> 0 >= $5 >>> 0) {
      break label$12
     }
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         if ($3 >>> 0 >= $2 >>> 0) {
          break label$16
         }
         $3 = $2;
         if (!$4) {
          break label$15
         }
         $3 = HEAP32[$0 >> 2] | 0;
         HEAP32[($3 + 20 | 0) >> 2] = 22;
         FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
         $3 = $2;
         break label$14;
        }
        if ($4) {
         break label$14
        }
       }
       if (HEAP32[($1 + 32 | 0) >> 2] | 0) {
        break label$13
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 22;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
       break label$10;
      }
      HEAP32[($1 + 28 | 0) >> 2] = $5;
      if (!(HEAP32[($1 + 32 | 0) >> 2] | 0)) {
       break label$11
      }
     }
     $6 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     $3 = $3 - $6 | 0;
     $6 = $5 - $6 | 0;
     if ($3 >>> 0 >= $6 >>> 0) {
      break label$12
     }
     $7 = HEAP32[($1 + 8 | 0) >> 2] | 0;
     label$17 : while (1) {
      jzero_far(HEAP32[((HEAP32[$1 >> 2] | 0) + ($3 << 2 | 0) | 0) >> 2] | 0 | 0, $7 | 0);
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($6 | 0)) {
       continue label$17
      }
      break label$17;
     };
    }
    if (!$4) {
     break label$10
    }
   }
   HEAP32[($1 + 36 | 0) >> 2] = 1;
  }
  return (HEAP32[$1 >> 2] | 0) + (($2 - (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0) << 2 | 0) | 0 | 0;
 }
 
 function realize_virt_arrays($0) {
  $0 = $0 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, i64toi32_i32$1 = 0, $1 = 0, $12 = 0, i64toi32_i32$0 = 0, $10 = 0, $13 = 0, $9 = 0, $2 = 0, $11 = 0, $7 = 0, $239 = 0, $444 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    break label$1;
   }
   $4 = 0;
   label$3 : while (1) {
    label$4 : {
     if (HEAP32[$3 >> 2] | 0) {
      break label$4
     }
     $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     $6 = Math_imul(HEAP32[($3 + 12 | 0) >> 2] | 0, $5);
     label$5 : {
      $5 = Math_imul($5, HEAP32[($3 + 4 | 0) >> 2] | 0);
      if ($5 >>> 0 <= ($4 ^ -1 | 0) >>> 0) {
       break label$5
      }
      i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$0 = 10;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
     }
     $1 = $6 + $1 | 0;
     $4 = $5 + $4 | 0;
    }
    $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$6 : {
   $3 = HEAP32[($2 + 72 | 0) >> 2] | 0;
   if (!$3) {
    break label$6
   }
   label$7 : while (1) {
    label$8 : {
     if (HEAP32[$3 >> 2] | 0) {
      break label$8
     }
     $5 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     $6 = Math_imul($5, HEAP32[($3 + 12 | 0) >> 2] | 0) << 7 | 0;
     label$9 : {
      $5 = Math_imul(HEAP32[($3 + 4 | 0) >> 2] | 0, $5) << 7 | 0;
      if ($5 >>> 0 <= ($4 ^ -1 | 0) >>> 0) {
       break label$9
      }
      i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$0 = 11;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
     }
     $1 = $6 + $1 | 0;
     $4 = $5 + $4 | 0;
    }
    $3 = HEAP32[($3 + 44 | 0) >> 2] | 0;
    if ($3) {
     continue label$7
    }
    break label$7;
   };
  }
  label$10 : {
   if (!$1) {
    break label$10
   }
   $7 = 1e9;
   label$11 : {
    $3 = jpeg_mem_available($0 | 0, $1 | 0, $4 | 0, HEAP32[($2 + 76 | 0) >> 2] | 0 | 0) | 0;
    if ($3 >>> 0 >= $4 >>> 0) {
     break label$11
    }
    $7 = (wasm2js_i32$0 = 1, wasm2js_i32$1 = ($3 >>> 0) / ($1 >>> 0) | 0, wasm2js_i32$2 = $1 >>> 0 > $3 >>> 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   }
   label$12 : {
    $8 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if (!$8) {
     break label$12
    }
    label$13 : while (1) {
     label$14 : {
      if (HEAP32[$8 >> 2] | 0) {
       break label$14
      }
      label$15 : {
       label$16 : {
        $9 = HEAP32[($8 + 4 | 0) >> 2] | 0;
        $3 = HEAP32[($8 + 12 | 0) >> 2] | 0;
        if ((((($9 + -1 | 0) >>> 0) / ($3 >>> 0) | 0) + 1 | 0) >>> 0 > $7 >>> 0) {
         break label$16
        }
        HEAP32[($8 + 16 | 0) >> 2] = $9;
        break label$15;
       }
       HEAP32[($8 + 16 | 0) >> 2] = Math_imul($3, $7);
       jpeg_open_backing_store($0 | 0, $8 + 48 | 0 | 0, Math_imul(HEAP32[($8 + 8 | 0) >> 2] | 0, $9) | 0);
       HEAP32[($8 + 40 | 0) >> 2] = 1;
       $9 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      }
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      label$17 : {
       $3 = HEAP32[($8 + 8 | 0) >> 2] | 0;
       if ($3 >>> 0 < 1000000001 >>> 0) {
        break label$17
       }
       i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
       i64toi32_i32$0 = 9;
       HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
       HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
       FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
      }
      $1 = ($3 + 15 | 0) & -16 | 0;
      $3 = (999999988 >>> 0) / ($1 >>> 0) | 0;
      label$18 : {
       if ($1 >>> 0 < 999999989 >>> 0) {
        break label$18
       }
       $5 = HEAP32[$0 >> 2] | 0;
       HEAP32[($5 + 20 | 0) >> 2] = 70;
       FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
      }
      $10 = ($3 | 0) < ($9 | 0) ? $3 : $9;
      HEAP32[($4 + 80 | 0) >> 2] = $10;
      $3 = 0;
      $11 = alloc_small($0 | 0, 1 | 0, $9 << 2 | 0 | 0) | 0;
      label$19 : {
       if (!$9) {
        break label$19
       }
       label$20 : while (1) {
        $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        label$21 : {
         $4 = $9 - $3 | 0;
         $10 = $10 >>> 0 < $4 >>> 0 ? $10 : $4;
         $6 = Math_imul($10, $1);
         if ($6 >>> 0 < 1000000001 >>> 0) {
          break label$21
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = 8;
         HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
         HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
         FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
        }
        label$22 : {
         $12 = $6 + 19 | 0;
         if ($12 >>> 0 < 1000000001 >>> 0) {
          break label$22
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = 3;
         HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
         HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
         FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
        }
        label$23 : {
         $4 = jpeg_get_large($0 | 0, $12 | 0) | 0;
         if ($4) {
          break label$23
         }
         i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
         i64toi32_i32$0 = 4;
         HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
         HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
         FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
        }
        HEAP32[($5 + 76 | 0) >> 2] = (HEAP32[($5 + 76 | 0) >> 2] | 0) + $12 | 0;
        $5 = $5 + 64 | 0;
        $12 = HEAP32[$5 >> 2] | 0;
        HEAP32[($4 + 8 | 0) >> 2] = 0;
        HEAP32[($4 + 4 | 0) >> 2] = $6;
        HEAP32[$4 >> 2] = $12;
        HEAP32[$5 >> 2] = $4;
        label$24 : {
         if (!$10) {
          break label$24
         }
         $6 = 0;
         $4 = $4 + 12 | 0;
         $239 = $4;
         $4 = $4 & 7 | 0;
         $4 = $239 + ($4 ? 8 - $4 | 0 : 0) | 0;
         $13 = $10 + -1 | 0;
         $5 = $10;
         label$25 : {
          $12 = $5 & 3 | 0;
          if (!$12) {
           break label$25
          }
          label$26 : while (1) {
           HEAP32[($11 + ($3 << 2 | 0) | 0) >> 2] = $4;
           $5 = $5 + -1 | 0;
           $4 = $4 + $1 | 0;
           $3 = $3 + 1 | 0;
           $6 = $6 + 1 | 0;
           if (($6 | 0) != ($12 | 0)) {
            continue label$26
           }
           break label$26;
          };
         }
         if ($13 >>> 0 < 3 >>> 0) {
          break label$24
         }
         label$27 : while (1) {
          $6 = $11 + ($3 << 2 | 0) | 0;
          HEAP32[$6 >> 2] = $4;
          $4 = $4 + $1 | 0;
          $12 = $4 + $1 | 0;
          $13 = $12 + $1 | 0;
          HEAP32[($6 + 12 | 0) >> 2] = $13;
          HEAP32[($6 + 8 | 0) >> 2] = $12;
          HEAP32[($6 + 4 | 0) >> 2] = $4;
          $3 = $3 + 4 | 0;
          $4 = $13 + $1 | 0;
          $5 = $5 + -4 | 0;
          if ($5) {
           continue label$27
          }
          break label$27;
         };
        }
        if ($3 >>> 0 < $9 >>> 0) {
         continue label$20
        }
        break label$20;
       };
      }
      HEAP32[$8 >> 2] = $11;
      $3 = HEAP32[($2 + 80 | 0) >> 2] | 0;
      HEAP32[($8 + 36 | 0) >> 2] = 0;
      i64toi32_i32$1 = $8;
      i64toi32_i32$0 = 0;
      HEAP32[($8 + 24 | 0) >> 2] = 0;
      HEAP32[($8 + 28 | 0) >> 2] = i64toi32_i32$0;
      HEAP32[($8 + 20 | 0) >> 2] = $3;
     }
     $8 = HEAP32[($8 + 44 | 0) >> 2] | 0;
     if ($8) {
      continue label$13
     }
     break label$13;
    };
   }
   $8 = HEAP32[($2 + 72 | 0) >> 2] | 0;
   if (!$8) {
    break label$10
   }
   label$28 : while (1) {
    label$29 : {
     if (HEAP32[$8 >> 2] | 0) {
      break label$29
     }
     label$30 : {
      label$31 : {
       $10 = HEAP32[($8 + 4 | 0) >> 2] | 0;
       $3 = HEAP32[($8 + 12 | 0) >> 2] | 0;
       if ((((($10 + -1 | 0) >>> 0) / ($3 >>> 0) | 0) + 1 | 0) >>> 0 > $7 >>> 0) {
        break label$31
       }
       HEAP32[($8 + 16 | 0) >> 2] = $10;
       break label$30;
      }
      HEAP32[($8 + 16 | 0) >> 2] = Math_imul($3, $7);
      jpeg_open_backing_store($0 | 0, $8 + 48 | 0 | 0, Math_imul($10, HEAP32[($8 + 8 | 0) >> 2] | 0) << 7 | 0 | 0);
      HEAP32[($8 + 40 | 0) >> 2] = 1;
      $10 = HEAP32[($8 + 16 | 0) >> 2] | 0;
     }
     $1 = (HEAP32[($8 + 8 | 0) >> 2] | 0) << 7 | 0;
     $3 = (999999988 >>> 0) / ($1 >>> 0) | 0;
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     label$32 : {
      if ($1 >>> 0 < 999999989 >>> 0) {
       break label$32
      }
      $5 = HEAP32[$0 >> 2] | 0;
      HEAP32[($5 + 20 | 0) >> 2] = 70;
      FUNCTION_TABLE[HEAP32[$5 >> 2] | 0 | 0]($0);
     }
     $13 = ($3 | 0) < ($10 | 0) ? $3 : $10;
     HEAP32[($4 + 80 | 0) >> 2] = $13;
     $3 = 0;
     $11 = alloc_small($0 | 0, 1 | 0, $10 << 2 | 0 | 0) | 0;
     label$33 : {
      if (!$10) {
       break label$33
      }
      label$34 : while (1) {
       $5 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       label$35 : {
        $4 = $10 - $3 | 0;
        $13 = $13 >>> 0 < $4 >>> 0 ? $13 : $4;
        $6 = Math_imul($13, $1);
        if ($6 >>> 0 < 1000000001 >>> 0) {
         break label$35
        }
        i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
        i64toi32_i32$0 = 8;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       }
       label$36 : {
        $12 = $6 | 19 | 0;
        if ($12 >>> 0 < 1000000001 >>> 0) {
         break label$36
        }
        i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
        i64toi32_i32$0 = 3;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       }
       label$37 : {
        $4 = jpeg_get_large($0 | 0, $12 | 0) | 0;
        if ($4) {
         break label$37
        }
        i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
        i64toi32_i32$0 = 4;
        HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
        HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
        FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       }
       HEAP32[($5 + 76 | 0) >> 2] = (HEAP32[($5 + 76 | 0) >> 2] | 0) + $12 | 0;
       $5 = $5 + 64 | 0;
       $12 = HEAP32[$5 >> 2] | 0;
       HEAP32[($4 + 8 | 0) >> 2] = 0;
       HEAP32[($4 + 4 | 0) >> 2] = $6;
       HEAP32[$4 >> 2] = $12;
       HEAP32[$5 >> 2] = $4;
       label$38 : {
        if (!$13) {
         break label$38
        }
        $6 = 0;
        $4 = $4 + 12 | 0;
        $444 = $4;
        $4 = $4 & 7 | 0;
        $4 = $444 + ($4 ? 8 - $4 | 0 : 0) | 0;
        $9 = $13 + -1 | 0;
        $5 = $13;
        label$39 : {
         $12 = $5 & 3 | 0;
         if (!$12) {
          break label$39
         }
         label$40 : while (1) {
          HEAP32[($11 + ($3 << 2 | 0) | 0) >> 2] = $4;
          $5 = $5 + -1 | 0;
          $3 = $3 + 1 | 0;
          $4 = $4 + $1 | 0;
          $6 = $6 + 1 | 0;
          if (($6 | 0) != ($12 | 0)) {
           continue label$40
          }
          break label$40;
         };
        }
        if ($9 >>> 0 < 3 >>> 0) {
         break label$38
        }
        label$41 : while (1) {
         $6 = $11 + ($3 << 2 | 0) | 0;
         HEAP32[$6 >> 2] = $4;
         $4 = $4 + $1 | 0;
         $12 = $4 + $1 | 0;
         HEAP32[($6 + 8 | 0) >> 2] = $12;
         HEAP32[($6 + 4 | 0) >> 2] = $4;
         $4 = $12 + $1 | 0;
         HEAP32[($6 + 12 | 0) >> 2] = $4;
         $4 = $4 + $1 | 0;
         $3 = $3 + 4 | 0;
         $5 = $5 + -4 | 0;
         if ($5) {
          continue label$41
         }
         break label$41;
        };
       }
       if ($3 >>> 0 < $10 >>> 0) {
        continue label$34
       }
       break label$34;
      };
     }
     HEAP32[$8 >> 2] = $11;
     $3 = HEAP32[($2 + 80 | 0) >> 2] | 0;
     HEAP32[($8 + 36 | 0) >> 2] = 0;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = 0;
     HEAP32[($8 + 24 | 0) >> 2] = 0;
     HEAP32[($8 + 28 | 0) >> 2] = i64toi32_i32$0;
     HEAP32[($8 + 20 | 0) >> 2] = $3;
    }
    $8 = HEAP32[($8 + 44 | 0) >> 2] | 0;
    if ($8) {
     continue label$28
    }
    break label$28;
   };
  }
 }
 
 function request_virt_barray($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = 1;
  $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (($1 | 0) == (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[$0 >> 2] | 0;
   HEAP32[($6 + 24 | 0) >> 2] = $1;
   HEAP32[($6 + 20 | 0) >> 2] = 14;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   $6 = $1;
  }
  $0 = alloc_small($0 | 0, $6 | 0, 128 | 0) | 0;
  HEAP32[($0 + 40 | 0) >> 2] = 0;
  HEAP32[($0 + 32 | 0) >> 2] = $2;
  HEAP32[($0 + 12 | 0) >> 2] = $5;
  HEAP32[($0 + 8 | 0) >> 2] = $3;
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 44 | 0) >> 2] = HEAP32[($7 + 72 | 0) >> 2] | 0;
  HEAP32[($7 + 72 | 0) >> 2] = $0;
  return $0 | 0;
 }
 
 function request_virt_sarray($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $6 = 1;
  $7 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if (($1 | 0) == (1 | 0)) {
    break label$1
   }
   $6 = HEAP32[$0 >> 2] | 0;
   HEAP32[($6 + 24 | 0) >> 2] = $1;
   HEAP32[($6 + 20 | 0) >> 2] = 14;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
   $6 = $1;
  }
  $0 = alloc_small($0 | 0, $6 | 0, 128 | 0) | 0;
  HEAP32[($0 + 40 | 0) >> 2] = 0;
  HEAP32[($0 + 32 | 0) >> 2] = $2;
  HEAP32[($0 + 12 | 0) >> 2] = $5;
  HEAP32[($0 + 8 | 0) >> 2] = $3;
  HEAP32[($0 + 4 | 0) >> 2] = $4;
  HEAP32[$0 >> 2] = 0;
  HEAP32[($0 + 44 | 0) >> 2] = HEAP32[($7 + 68 | 0) >> 2] | 0;
  HEAP32[($7 + 68 | 0) >> 2] = $0;
  return $0 | 0;
 }
 
 function alloc_barray($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $5 = 0, $8 = 0, $7 = 0, $11 = 0, $6 = 0, $12 = 0, $4 = 0, $9 = 0, $10 = 0;
  $4 = $2 << 7 | 0;
  $5 = (999999988 >>> 0) / ($4 >>> 0) | 0;
  $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ($4 >>> 0 < 999999989 >>> 0) {
    break label$1
   }
   $7 = HEAP32[$0 >> 2] | 0;
   HEAP32[($7 + 20 | 0) >> 2] = 70;
   FUNCTION_TABLE[HEAP32[$7 >> 2] | 0 | 0]($0);
  }
  $8 = ($5 | 0) < ($3 | 0) ? $5 : $3;
  HEAP32[($6 + 80 | 0) >> 2] = $8;
  $9 = alloc_small($0 | 0, $1 | 0, $3 << 2 | 0 | 0) | 0;
  label$2 : {
   if (!$3) {
    break label$2
   }
   $5 = 0;
   $6 = $2 << 7 | 0;
   label$3 : while (1) {
    $2 = $3 - $5 | 0;
    $8 = $8 >>> 0 < $2 >>> 0 ? $8 : $2;
    $2 = alloc_large($0 | 0, $1 | 0, Math_imul($4, $8) | 0) | 0;
    label$4 : {
     if (!$8) {
      break label$4
     }
     $10 = $8 + -1 | 0;
     $11 = 0;
     $7 = $8;
     label$5 : {
      $12 = $8 & 3 | 0;
      if (!$12) {
       break label$5
      }
      label$6 : while (1) {
       HEAP32[($9 + ($5 << 2 | 0) | 0) >> 2] = $2;
       $7 = $7 + -1 | 0;
       $5 = $5 + 1 | 0;
       $2 = $2 + $6 | 0;
       $11 = $11 + 1 | 0;
       if (($11 | 0) != ($12 | 0)) {
        continue label$6
       }
       break label$6;
      };
     }
     if ($10 >>> 0 < 3 >>> 0) {
      break label$4
     }
     label$7 : while (1) {
      $11 = $9 + ($5 << 2 | 0) | 0;
      HEAP32[$11 >> 2] = $2;
      $2 = $2 + $6 | 0;
      $12 = $2 + $6 | 0;
      HEAP32[($11 + 8 | 0) >> 2] = $12;
      HEAP32[($11 + 4 | 0) >> 2] = $2;
      $2 = $12 + $6 | 0;
      HEAP32[($11 + 12 | 0) >> 2] = $2;
      $2 = $2 + $6 | 0;
      $5 = $5 + 4 | 0;
      $7 = $7 + -4 | 0;
      if ($7) {
       continue label$7
      }
      break label$7;
     };
    }
    if ($5 >>> 0 < $3 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  return $9 | 0;
 }
 
 function alloc_sarray($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $7 = 0, $5 = 0, $6 = 0, $10 = 0, $11 = 0, $9 = 0, $8 = 0, i64toi32_i32$1 = 0;
  $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ($2 >>> 0 < 1000000001 >>> 0) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = 9;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  $5 = ($2 + 15 | 0) & -16 | 0;
  $2 = (999999988 >>> 0) / ($5 >>> 0) | 0;
  label$2 : {
   if ($5 >>> 0 < 999999989 >>> 0) {
    break label$2
   }
   $6 = HEAP32[$0 >> 2] | 0;
   HEAP32[($6 + 20 | 0) >> 2] = 70;
   FUNCTION_TABLE[HEAP32[$6 >> 2] | 0 | 0]($0);
  }
  $7 = ($2 | 0) < ($3 | 0) ? $2 : $3;
  HEAP32[($4 + 80 | 0) >> 2] = $7;
  $8 = alloc_small($0 | 0, $1 | 0, $3 << 2 | 0 | 0) | 0;
  label$3 : {
   if (!$3) {
    break label$3
   }
   $2 = 0;
   label$4 : while (1) {
    $4 = $3 - $2 | 0;
    $7 = $7 >>> 0 < $4 >>> 0 ? $7 : $4;
    $4 = alloc_large($0 | 0, $1 | 0, Math_imul($7, $5) | 0) | 0;
    label$5 : {
     if (!$7) {
      break label$5
     }
     $9 = $7 + -1 | 0;
     $10 = 0;
     $6 = $7;
     label$6 : {
      $11 = $7 & 3 | 0;
      if (!$11) {
       break label$6
      }
      label$7 : while (1) {
       HEAP32[($8 + ($2 << 2 | 0) | 0) >> 2] = $4;
       $6 = $6 + -1 | 0;
       $4 = $4 + $5 | 0;
       $2 = $2 + 1 | 0;
       $10 = $10 + 1 | 0;
       if (($10 | 0) != ($11 | 0)) {
        continue label$7
       }
       break label$7;
      };
     }
     if ($9 >>> 0 < 3 >>> 0) {
      break label$5
     }
     label$8 : while (1) {
      $10 = $8 + ($2 << 2 | 0) | 0;
      HEAP32[$10 >> 2] = $4;
      $4 = $4 + $5 | 0;
      $11 = $4 + $5 | 0;
      $9 = $11 + $5 | 0;
      HEAP32[($10 + 12 | 0) >> 2] = $9;
      HEAP32[($10 + 8 | 0) >> 2] = $11;
      HEAP32[($10 + 4 | 0) >> 2] = $4;
      $2 = $2 + 4 | 0;
      $4 = $9 + $5 | 0;
      $6 = $6 + -4 | 0;
      if ($6) {
       continue label$8
      }
      break label$8;
     };
    }
    if ($2 >>> 0 < $3 >>> 0) {
     continue label$4
    }
    break label$4;
   };
  }
  return $8 | 0;
 }
 
 function alloc_large($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, $3 = 0, i64toi32_i32$0 = 0, $5 = 0, $4 = 0, $71 = 0;
  $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ($2 >>> 0 < 1000000001 >>> 0) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 8;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   $4 = ($2 + 7 | 0) & -8 | 0;
   $5 = $4 + 19 | 0;
   if ($5 >>> 0 < 1000000001 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 3;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$3 : {
   if ($1 >>> 0 < 2 >>> 0) {
    break label$3
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 24 | 0) >> 2] = $1;
   HEAP32[($2 + 20 | 0) >> 2] = 14;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$4 : {
   $2 = jpeg_get_large($0 | 0, $5 | 0) | 0;
   if ($2) {
    break label$4
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 4;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  HEAP32[($3 + 76 | 0) >> 2] = (HEAP32[($3 + 76 | 0) >> 2] | 0) + $5 | 0;
  $0 = ($3 + ($1 << 2 | 0) | 0) + 60 | 0;
  $3 = HEAP32[$0 >> 2] | 0;
  HEAP32[($2 + 8 | 0) >> 2] = 0;
  HEAP32[($2 + 4 | 0) >> 2] = $4;
  HEAP32[$2 >> 2] = $3;
  HEAP32[$0 >> 2] = $2;
  $0 = $2 + 12 | 0;
  $71 = $0;
  $0 = $0 & 7 | 0;
  return $71 + ($0 ? 8 - $0 | 0 : 0) | 0 | 0;
 }
 
 function alloc_small($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $8 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $7 = 0, $4 = 0, $9 = 0, $3 = 0, $5 = 0, $6 = 0, $133 = 0;
  $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  label$1 : {
   if ($2 >>> 0 < 1000000001 >>> 0) {
    break label$1
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 7;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$2 : {
   $4 = ($2 + 7 | 0) & -8 | 0;
   $5 = $4 + 19 | 0;
   if ($5 >>> 0 < 1000000001 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
   i64toi32_i32$0 = 1;
   HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
   HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$3 : {
   if ($1 >>> 0 < 2 >>> 0) {
    break label$3
   }
   $2 = HEAP32[$0 >> 2] | 0;
   HEAP32[($2 + 24 | 0) >> 2] = $1;
   HEAP32[($2 + 20 | 0) >> 2] = 14;
   FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
  }
  label$4 : {
   label$5 : {
    label$6 : {
     $6 = ($3 + ($1 << 2 | 0) | 0) + 52 | 0;
     $2 = HEAP32[$6 >> 2] | 0;
     if ($2) {
      break label$6
     }
     $7 = 0;
     break label$5;
    }
    label$7 : {
     label$8 : while (1) {
      $7 = $2;
      $2 = HEAP32[($2 + 8 | 0) >> 2] | 0;
      if ($2 >>> 0 >= $4 >>> 0) {
       break label$7
      }
      $2 = HEAP32[$7 >> 2] | 0;
      if (!$2) {
       break label$5
      }
      continue label$8;
     };
    }
    $0 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    $8 = $7;
    break label$4;
   }
   label$9 : {
    label$10 : {
     $2 = HEAP32[(($7 ? 144344 : 144336) + ($1 << 2 | 0) | 0) >> 2] | 0;
     $1 = 999999981 - $4 | 0;
     $2 = $2 >>> 0 < $1 >>> 0 ? $2 : $1;
     $9 = $2 + $5 | 0;
     $8 = jpeg_get_small($0 | 0, $9 | 0) | 0;
     if (!$8) {
      break label$10
     }
     $1 = $2;
     break label$9;
    }
    label$11 : while (1) {
     $1 = $2 >>> 1 | 0;
     label$12 : {
      if ($2 >>> 0 > 99 >>> 0) {
       break label$12
      }
      i64toi32_i32$1 = HEAP32[$0 >> 2] | 0;
      i64toi32_i32$0 = 2;
      HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 54;
      HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
     }
     $2 = $1;
     $9 = $2 + $5 | 0;
     $8 = jpeg_get_small($0 | 0, $9 | 0) | 0;
     if (!$8) {
      continue label$11
     }
     break label$11;
    };
   }
   HEAP32[($3 + 76 | 0) >> 2] = (HEAP32[($3 + 76 | 0) >> 2] | 0) + $9 | 0;
   $2 = $1 + $4 | 0;
   HEAP32[($8 + 8 | 0) >> 2] = $2;
   i64toi32_i32$1 = $8;
   i64toi32_i32$0 = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[($8 + 4 | 0) >> 2] = i64toi32_i32$0;
   label$13 : {
    label$14 : {
     if ($7) {
      break label$14
     }
     HEAP32[$6 >> 2] = $8;
     break label$13;
    }
    HEAP32[$7 >> 2] = $8;
   }
   $0 = 0;
  }
  HEAP32[($8 + 8 | 0) >> 2] = $2 - $4 | 0;
  HEAP32[($8 + 4 | 0) >> 2] = $0 + $4 | 0;
  $2 = $8 + 12 | 0;
  $133 = $2;
  $2 = $2 & 7 | 0;
  return ($133 + ($2 ? 8 - $2 | 0 : 0) | 0) + $0 | 0 | 0;
 }
 
 function jpeg_get_small($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return malloc($1 | 0) | 0 | 0;
 }
 
 function jpeg_free_small($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  free($1 | 0);
 }
 
 function jpeg_get_large($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return malloc($1 | 0) | 0 | 0;
 }
 
 function jpeg_free_large($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  free($1 | 0);
 }
 
 function jpeg_mem_available($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = HEAP32[((HEAP32[($0 + 4 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
  $3 = $0 - $3 | 0;
  return ($0 ? ($3 >>> 0 > $0 >>> 0 ? 0 : $3) : $2) | 0;
 }
 
 function jpeg_open_backing_store($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = HEAP32[$0 >> 2] | 0;
  HEAP32[($3 + 20 | 0) >> 2] = 49;
  FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
 }
 
 function jpeg_mem_init($0) {
  $0 = $0 | 0;
  return 0 | 0;
 }
 
 function jpeg_mem_term($0) {
  $0 = $0 | 0;
 }
 
 function jinit_arith_encoder($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 208) | 0;
  HEAP32[($0 + 364 | 0) >> 2] = $1;
  HEAP32[($1 + 8 | 0) >> 2] = 91;
  HEAP32[$1 >> 2] = 92;
  memset($1 + 76 | 0 | 0, 0 | 0, 128 | 0) | 0;
  HEAP8[($1 + 204 | 0) >> 0] = 113;
 }
 
 function finish_pass($0) {
  $0 = $0 | 0;
  var $3 = 0, $2 = 0, $1 = 0, $4 = 0;
  $1 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  $3 = (((HEAP32[($1 + 16 | 0) >> 2] | 0) + $2 | 0) + -1 | 0) & -65536 | 0;
  $2 = (($3 | 0) < ($2 | 0) ? $3 | 32768 | 0 : $3) << (HEAP32[($1 + 28 | 0) >> 2] | 0) | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $2;
  $3 = HEAP32[($1 + 32 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 < 134217728 >>> 0) {
     break label$2
    }
    label$3 : {
     if (($3 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (!(HEAP32[($1 + 24 | 0) >> 2] | 0)) {
       break label$4
      }
      label$5 : {
       if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
        break label$5
       }
       $3 = 0;
       label$6 : while (1) {
        label$7 : {
         if ($3) {
          break label$7
         }
         $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $2 = HEAP32[$3 >> 2] | 0;
         HEAP32[$3 >> 2] = $2 + 1 | 0;
         HEAP8[$2 >> 0] = 0;
         $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($3 + 4 | 0) >> 2] = $2;
         if ($2) {
          break label$7
         }
         if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$7
         }
         $3 = HEAP32[$0 >> 2] | 0;
         HEAP32[($3 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
        }
        $3 = (HEAP32[($1 + 24 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($1 + 24 | 0) >> 2] = $3;
        if (!$3) {
         break label$4
        }
        $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
        continue label$6;
       };
      }
      HEAP32[($1 + 24 | 0) >> 2] = 0;
     }
     label$8 : {
      if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
       break label$8
      }
      $2 = HEAPU8[($1 + 32 | 0) >> 0] | 0;
      $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      $4 = HEAP32[$3 >> 2] | 0;
      HEAP32[$3 >> 2] = $4 + 1 | 0;
      HEAP8[$4 >> 0] = $2 + 1 | 0;
      $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($3 + 4 | 0) >> 2] = $2;
      if ($2) {
       break label$8
      }
      if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
       break label$8
      }
      $3 = HEAP32[$0 >> 2] | 0;
      HEAP32[($3 + 20 | 0) >> 2] = 24;
      FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
     }
     if ((HEAP32[($1 + 32 | 0) >> 2] | 0 | 0) != (254 | 0)) {
      break label$3
     }
     if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
      break label$3
     }
     $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $2 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $2 + 1 | 0;
     HEAP8[$2 >> 0] = 0;
     $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $2;
     if ($2) {
      break label$3
     }
     if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$3
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    HEAP32[($1 + 20 | 0) >> 2] = 0;
    HEAP32[($1 + 24 | 0) >> 2] = $3 + (HEAP32[($1 + 24 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   label$9 : {
    label$10 : {
     if ($3) {
      break label$10
     }
     HEAP32[($1 + 24 | 0) >> 2] = (HEAP32[($1 + 24 | 0) >> 2] | 0) + 1 | 0;
     break label$9;
    }
    if (($3 | 0) < (0 | 0)) {
     break label$9
    }
    label$11 : {
     if (!(HEAP32[($1 + 24 | 0) >> 2] | 0)) {
      break label$11
     }
     label$12 : {
      if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
       break label$12
      }
      $3 = 0;
      label$13 : while (1) {
       label$14 : {
        if ($3) {
         break label$14
        }
        $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $2 = HEAP32[$3 >> 2] | 0;
        HEAP32[$3 >> 2] = $2 + 1 | 0;
        HEAP8[$2 >> 0] = 0;
        $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($3 + 4 | 0) >> 2] = $2;
        if ($2) {
         break label$14
        }
        if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
         break label$14
        }
        $3 = HEAP32[$0 >> 2] | 0;
        HEAP32[($3 + 20 | 0) >> 2] = 24;
        FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
       }
       $3 = (HEAP32[($1 + 24 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($1 + 24 | 0) >> 2] = $3;
       if (!$3) {
        break label$11
       }
       $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
       continue label$13;
      };
     }
     HEAP32[($1 + 24 | 0) >> 2] = 0;
    }
    if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
     break label$9
    }
    $2 = HEAP32[($1 + 32 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $2;
    $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = $2;
    if ($2) {
     break label$9
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$9
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   if (!(HEAP32[($1 + 20 | 0) >> 2] | 0)) {
    break label$1
   }
   label$15 : {
    if (!(HEAP32[($1 + 24 | 0) >> 2] | 0)) {
     break label$15
    }
    label$16 : {
     if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
      break label$16
     }
     $3 = 0;
     label$17 : while (1) {
      label$18 : {
       if ($3) {
        break label$18
       }
       $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $2 = HEAP32[$3 >> 2] | 0;
       HEAP32[$3 >> 2] = $2 + 1 | 0;
       HEAP8[$2 >> 0] = 0;
       $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($3 + 4 | 0) >> 2] = $2;
       if ($2) {
        break label$18
       }
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$18
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
      }
      $3 = (HEAP32[($1 + 24 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($1 + 24 | 0) >> 2] = $3;
      if (!$3) {
       break label$15
      }
      $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      continue label$17;
     };
    }
    HEAP32[($1 + 24 | 0) >> 2] = 0;
   }
   label$19 : while (1) {
    label$20 : {
     if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
      break label$20
     }
     $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $2 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $2 + 1 | 0;
     HEAP8[$2 >> 0] = 255;
     $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $2;
     if ($2) {
      break label$20
     }
     if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$20
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    label$21 : {
     if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
      break label$21
     }
     $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
     $2 = HEAP32[$3 >> 2] | 0;
     HEAP32[$3 >> 2] = $2 + 1 | 0;
     HEAP8[$2 >> 0] = 0;
     $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
     HEAP32[($3 + 4 | 0) >> 2] = $2;
     if ($2) {
      break label$21
     }
     if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
      break label$21
     }
     $3 = HEAP32[$0 >> 2] | 0;
     HEAP32[($3 + 20 | 0) >> 2] = 24;
     FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
    }
    $3 = (HEAP32[($1 + 20 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($1 + 20 | 0) >> 2] = $3;
    if ($3) {
     continue label$19
    }
    break label$19;
   };
  }
  label$22 : {
   if (!((HEAP32[($1 + 12 | 0) >> 2] | 0) & 134215680 | 0)) {
    break label$22
   }
   label$23 : {
    if (!(HEAP32[($1 + 24 | 0) >> 2] | 0)) {
     break label$23
    }
    label$24 : {
     if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
      break label$24
     }
     $3 = 0;
     label$25 : while (1) {
      label$26 : {
       if ($3) {
        break label$26
       }
       $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $2 = HEAP32[$3 >> 2] | 0;
       HEAP32[$3 >> 2] = $2 + 1 | 0;
       HEAP8[$2 >> 0] = 0;
       $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($3 + 4 | 0) >> 2] = $2;
       if ($2) {
        break label$26
       }
       if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$26
       }
       $3 = HEAP32[$0 >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
      }
      $3 = (HEAP32[($1 + 24 | 0) >> 2] | 0) + -1 | 0;
      HEAP32[($1 + 24 | 0) >> 2] = $3;
      if (!$3) {
       break label$23
      }
      $3 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
      continue label$25;
     };
    }
    HEAP32[($1 + 24 | 0) >> 2] = 0;
   }
   label$27 : {
    if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
     break label$27
    }
    $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $4 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $2 >>> 19 | 0;
    $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = $2;
    if ($2) {
     break label$27
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$27
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   label$28 : {
    if (((HEAP32[($1 + 12 | 0) >> 2] | 0) & 133693440 | 0 | 0) != (133693440 | 0)) {
     break label$28
    }
    if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
     break label$28
    }
    $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $2 = HEAP32[$3 >> 2] | 0;
    HEAP32[$3 >> 2] = $2 + 1 | 0;
    HEAP8[$2 >> 0] = 0;
    $2 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($3 + 4 | 0) >> 2] = $2;
    if ($2) {
     break label$28
    }
    if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$28
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (!($3 & 522240 | 0)) {
    break label$22
   }
   label$29 : {
    if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
     break label$29
    }
    $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
    $4 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $3 >>> 11 | 0;
    $3 = (HEAP32[($2 + 4 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = $3;
    if ($3) {
     break label$29
    }
    if (FUNCTION_TABLE[HEAP32[($2 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
     break label$29
    }
    $3 = HEAP32[$0 >> 2] | 0;
    HEAP32[($3 + 20 | 0) >> 2] = 24;
    FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
   }
   if (((HEAP32[($1 + 12 | 0) >> 2] | 0) & 522240 | 0 | 0) != (522240 | 0)) {
    break label$22
   }
   if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
    break label$22
   }
   $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $3 = HEAP32[$1 >> 2] | 0;
   HEAP32[$1 >> 2] = $3 + 1 | 0;
   HEAP8[$3 >> 0] = 0;
   $3 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($1 + 4 | 0) >> 2] = $3;
   if ($3) {
    break label$22
   }
   if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$22
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
 }
 
 function start_pass($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $6 = 0, $3 = 0, $7 = 0, $4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = HEAP32[$0 >> 2] | 0;
   HEAP32[($1 + 20 | 0) >> 2] = 48;
   FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
  }
  label$2 : {
   label$3 : {
    if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
     break label$3
    }
    if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
     break label$3
    }
    $1 = HEAP32[($0 + 316 | 0) >> 2] | 0;
    label$4 : {
     if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
      break label$4
     }
     label$5 : {
      if ($1) {
       break label$5
      }
      HEAP32[($2 + 4 | 0) >> 2] = 93;
      $3 = 0;
      break label$2;
     }
     HEAP32[($2 + 4 | 0) >> 2] = 94;
     $3 = 0;
     break label$2;
    }
    label$6 : {
     if ($1) {
      break label$6
     }
     HEAP32[($2 + 4 | 0) >> 2] = 95;
     $3 = 0;
     break label$2;
    }
    HEAP32[($2 + 4 | 0) >> 2] = 96;
    $3 = 0;
    break label$2;
   }
   HEAP32[($2 + 4 | 0) >> 2] = 97;
   $3 = 1;
  }
  label$7 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$7
   }
   $4 = 0;
   label$8 : while (1) {
    $5 = $4 << 2 | 0;
    $6 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        if ($3) {
         break label$12
        }
        if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
         break label$11
        }
        if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
         break label$11
        }
       }
       label$13 : {
        $1 = HEAP32[($6 + 20 | 0) >> 2] | 0;
        if ($1 >>> 0 < 16 >>> 0) {
         break label$13
        }
        $7 = HEAP32[$0 >> 2] | 0;
        HEAP32[($7 + 24 | 0) >> 2] = $1;
        HEAP32[($7 + 20 | 0) >> 2] = 125;
        FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
       }
       label$14 : {
        $7 = ($2 + ($1 << 2 | 0) | 0) + 76 | 0;
        $1 = HEAP32[$7 >> 2] | 0;
        if ($1) {
         break label$14
        }
        $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 64) | 0;
        HEAP32[$7 >> 2] = $1;
       }
       i64toi32_i32$1 = $1;
       i64toi32_i32$0 = 0;
       $10 = 0;
       HEAP8[$1 >> 0] = $10;
       HEAP8[($1 + 1 | 0) >> 0] = $10 >>> 8 | 0;
       HEAP8[($1 + 2 | 0) >> 0] = $10 >>> 16 | 0;
       HEAP8[($1 + 3 | 0) >> 0] = $10 >>> 24 | 0;
       HEAP8[($1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[($1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[($1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[($1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 56 | 0;
       i64toi32_i32$0 = 0;
       $11 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $11;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $11 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $11 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $11 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 48 | 0;
       i64toi32_i32$0 = 0;
       $12 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $12;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $12 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $12 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $12 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 40 | 0;
       i64toi32_i32$0 = 0;
       $13 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $13;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $13 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $13 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $13 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 32 | 0;
       i64toi32_i32$0 = 0;
       $14 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $14;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $14 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $14 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $14 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 24 | 0;
       i64toi32_i32$0 = 0;
       $15 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $15;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $15 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $15 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $15 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 16 | 0;
       i64toi32_i32$0 = 0;
       $16 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $16;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $16 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $16 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $16 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $1 + 8 | 0;
       i64toi32_i32$0 = 0;
       $17 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $17;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $17 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $17 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $17 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       $1 = $2 + $5 | 0;
       HEAP32[($1 + 52 | 0) >> 2] = 0;
       HEAP32[($1 + 36 | 0) >> 2] = 0;
       if ($3) {
        break label$10
       }
      }
      if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
       break label$9
      }
     }
     label$15 : {
      $1 = HEAP32[($6 + 24 | 0) >> 2] | 0;
      if ($1 >>> 0 < 16 >>> 0) {
       break label$15
      }
      $6 = HEAP32[$0 >> 2] | 0;
      HEAP32[($6 + 24 | 0) >> 2] = $1;
      HEAP32[($6 + 20 | 0) >> 2] = 125;
      FUNCTION_TABLE[HEAP32[(HEAP32[$0 >> 2] | 0) >> 2] | 0 | 0]($0);
     }
     label$16 : {
      $6 = ($2 + ($1 << 2 | 0) | 0) + 140 | 0;
      $1 = HEAP32[$6 >> 2] | 0;
      if ($1) {
       break label$16
      }
      $1 = FUNCTION_TABLE[HEAP32[(HEAP32[($0 + 4 | 0) >> 2] | 0) >> 2] | 0 | 0]($0, 1, 256) | 0;
      HEAP32[$6 >> 2] = $1;
     }
     memset($1 | 0, 0 | 0, 256 | 0) | 0;
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$8
    }
    break label$8;
   };
  }
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 11;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 65536;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
  $0 = HEAP32[($0 + 200 | 0) >> 2] | 0;
  HEAP32[(i64toi32_i32$1 + 72 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] = $0;
 }
 
 function encode_mcu_DC_first_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $8 = 0, $10 = 0, $2 = 0, $11 = 0, $9 = 0, $4 = 0, $6 = 0, $7 = 0, $12 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    emit_restart_1($0 | 0, HEAP32[($2 + 72 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = ((HEAP32[($2 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
   }
   HEAP32[($2 + 68 | 0) >> 2] = $3 + -1 | 0;
  }
  label$3 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $4 = 0;
   label$4 : while (1) {
    $3 = $4 << 2 | 0;
    $5 = (HEAP32[(($0 + $3 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
    $6 = HEAP32[((HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
    $7 = ($2 + ($6 << 2 | 0) | 0) + 76 | 0;
    $8 = $2 + $5 | 0;
    $9 = $8 + 52 | 0;
    $5 = (HEAP32[$7 >> 2] | 0) + (HEAP32[$9 >> 2] | 0) | 0;
    label$5 : {
     label$6 : {
      $3 = (HEAP16[(HEAP32[($1 + $3 | 0) >> 2] | 0) >> 1] | 0) >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0;
      $10 = $8 + 36 | 0;
      $8 = $3 - (HEAP32[$10 >> 2] | 0) | 0;
      if ($8) {
       break label$6
      }
      arith_encode($0 | 0, $5 | 0, 0 | 0);
      HEAP32[$9 >> 2] = 0;
      break label$5;
     }
     HEAP32[$10 >> 2] = $3;
     arith_encode($0 | 0, $5 | 0, 1 | 0);
     $3 = 0;
     label$7 : {
      label$8 : {
       if (($8 | 0) <= (0 | 0)) {
        break label$8
       }
       $10 = 4;
       $11 = 2;
       $12 = 0;
       break label$7;
      }
      $8 = 0 - $8 | 0;
      $10 = 8;
      $11 = 3;
      $12 = 1;
     }
     arith_encode($0 | 0, $5 + 1 | 0 | 0, $12 | 0);
     HEAP32[$9 >> 2] = $10;
     $5 = $5 + $11 | 0;
     label$9 : {
      $11 = $8 + -1 | 0;
      if (!$11) {
       break label$9
      }
      $3 = 1;
      arith_encode($0 | 0, $5 | 0, 1 | 0);
      $5 = (HEAP32[$7 >> 2] | 0) + 20 | 0;
      $8 = $11;
      if (($8 | 0) == (1 | 0)) {
       break label$9
      }
      label$10 : while (1) {
       arith_encode($0 | 0, $5 | 0, 1 | 0);
       $5 = $5 + 1 | 0;
       $3 = $3 << 1 | 0;
       $10 = $8 >>> 0 > 3 >>> 0;
       $8 = $8 >> 1 | 0;
       if ($10) {
        continue label$10
       }
       break label$10;
      };
     }
     $8 = 0;
     arith_encode($0 | 0, $5 | 0, 0 | 0);
     label$11 : {
      label$12 : {
       $10 = $0 + $6 | 0;
       if (($3 | 0) < ((1 << (HEAPU8[($10 + 120 | 0) >> 0] | 0) | 0) >> 1 | 0 | 0)) {
        break label$12
       }
       if (($3 | 0) <= ((1 << (HEAPU8[($10 + 136 | 0) >> 0] | 0) | 0) >> 1 | 0 | 0)) {
        break label$11
       }
       $8 = (HEAP32[$9 >> 2] | 0) + 8 | 0;
      }
      HEAP32[$9 >> 2] = $8;
     }
     if ($3 >>> 0 < 2 >>> 0) {
      break label$5
     }
     $10 = $5 + 14 | 0;
     label$13 : while (1) {
      $5 = $3 >> 1 | 0;
      arith_encode($0 | 0, $10 | 0, ($5 & $11 | 0 | 0) != (0 | 0) | 0);
      $8 = $3 >>> 0 > 3 >>> 0;
      $3 = $5;
      if ($8) {
       continue label$13
      }
      break label$13;
     };
    }
    $4 = $4 + 1 | 0;
    if (($4 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  return 1 | 0;
 }
 
 function encode_mcu_AC_first_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $5 = 0, $11 = 0, $2 = 0, $6 = 0, $12 = 0, $13 = 0, $7 = 0, $4 = 0, $10 = 0, $8 = 0, $9 = 0, $14 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    emit_restart_1($0 | 0, HEAP32[($2 + 72 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = ((HEAP32[($2 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
   }
   HEAP32[($2 + 68 | 0) >> 2] = $3 + -1 | 0;
  }
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[($0 + 248 | 0) >> 2] | 0;
  $3 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  $6 = $3;
  label$3 : {
   if (($3 | 0) < (1 | 0)) {
    break label$3
   }
   $6 = $3;
   label$4 : while (1) {
    label$5 : {
     label$6 : {
      $1 = HEAP16[($4 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
      if (($1 | 0) < (0 | 0)) {
       break label$6
      }
      if (!($1 >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0)) {
       break label$5
      }
      break label$3;
     }
     if ((0 - $1 | 0) >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0) {
      break label$3
     }
    }
    $1 = ($6 | 0) > (1 | 0);
    $6 = $6 + -1 | 0;
    if ($1) {
     continue label$4
    }
    break label$4;
   };
   $6 = 0;
  }
  $7 = HEAP32[($5 + 24 | 0) >> 2] | 0;
  label$7 : {
   $5 = HEAP32[($0 + 316 | 0) >> 2] | 0;
   if (($5 | 0) > ($6 | 0)) {
    break label$7
   }
   $8 = $2 + 204 | 0;
   $9 = ($0 + $7 | 0) + 152 | 0;
   $10 = ($2 + ($7 << 2 | 0) | 0) + 140 | 0;
   label$8 : while (1) {
    $3 = (Math_imul($5, 3) + (HEAP32[$10 >> 2] | 0) | 0) + -3 | 0;
    arith_encode($0 | 0, $3 | 0, 0 | 0);
    $1 = $5;
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : while (1) {
         label$14 : {
          label$15 : {
           label$16 : {
            $5 = HEAP16[($4 + ((HEAP32[(144016 + ($1 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
            if (($5 | 0) < (0 | 0)) {
             break label$16
            }
            $5 = $5 >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0;
            if (!$5) {
             break label$14
            }
            $11 = 0;
            break label$15;
           }
           $5 = (0 - $5 | 0) >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0;
           if (!$5) {
            break label$14
           }
           $11 = 1;
          }
          arith_encode($0 | 0, $3 + 1 | 0 | 0, 1 | 0);
          arith_encode($0 | 0, $8 | 0, $11 | 0);
          $3 = $3 + 2 | 0;
          $12 = $5 + -1 | 0;
          if (!$12) {
           break label$11
          }
          arith_encode($0 | 0, $3 | 0, 1 | 0);
          if (($12 | 0) == (1 | 0)) {
           break label$11
          }
          arith_encode($0 | 0, $3 | 0, 1 | 0);
          $11 = (HEAP32[$10 >> 2] | 0) + (($1 | 0) > (HEAPU8[$9 >> 0] | 0 | 0) ? 217 : 189) | 0;
          $3 = 2;
          if ($12 >>> 0 <= 3 >>> 0) {
           break label$12
          }
          $5 = $12;
          label$17 : while (1) {
           $13 = $11;
           arith_encode($0 | 0, $11 | 0, 1 | 0);
           $11 = $11 + 1 | 0;
           $3 = $3 << 1 | 0;
           $14 = $5 >>> 0 < 8 >>> 0;
           $5 = $5 >> 1 | 0;
           if (!$14) {
            continue label$17
           }
           break label$17;
          };
          arith_encode($0 | 0, $11 | 0, 0 | 0);
          if (!$3) {
           break label$9
          }
          $13 = $13 + 15 | 0;
          break label$10;
         }
         arith_encode($0 | 0, $3 + 1 | 0 | 0, 0 | 0);
         $1 = $1 + 1 | 0;
         $3 = $3 + 3 | 0;
         continue label$13;
        };
       }
       arith_encode($0 | 0, $11 | 0, 0 | 0);
       $13 = $11 + 14 | 0;
       $3 = 2;
       break label$10;
      }
      arith_encode($0 | 0, $3 | 0, 0 | 0);
      break label$9;
     }
     label$18 : while (1) {
      $5 = $3 >> 1 | 0;
      arith_encode($0 | 0, $13 | 0, ($5 & $12 | 0 | 0) != (0 | 0) | 0);
      $11 = $3 >>> 0 > 3 >>> 0;
      $3 = $5;
      if ($11) {
       continue label$18
      }
      break label$18;
     };
    }
    $5 = $1 + 1 | 0;
    if (($1 | 0) < ($6 | 0)) {
     continue label$8
    }
    break label$8;
   };
   $3 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  }
  label$19 : {
   if (($5 | 0) > ($3 | 0)) {
    break label$19
   }
   arith_encode($0 | 0, (Math_imul($5, 3) + (HEAP32[(($2 + ($7 << 2 | 0) | 0) + 140 | 0) >> 2] | 0) | 0) + -3 | 0 | 0, 1 | 0);
  }
  return 1 | 0;
 }
 
 function encode_mcu_DC_refine_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    emit_restart_1($0 | 0, HEAP32[($2 + 72 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = ((HEAP32[($2 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
   }
   HEAP32[($2 + 68 | 0) >> 2] = $3 + -1 | 0;
  }
  label$3 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $3 = $2 + 204 | 0;
   $4 = HEAP32[($0 + 328 | 0) >> 2] | 0;
   $2 = 0;
   label$4 : while (1) {
    arith_encode($0 | 0, $3 | 0, ((HEAP16[(HEAP32[($1 + ($2 << 2 | 0) | 0) >> 2] | 0) >> 1] | 0) >>> $4 | 0) & 1 | 0 | 0);
    $2 = $2 + 1 | 0;
    if (($2 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  return 1 | 0;
 }
 
 function encode_mcu_AC_refine_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $3 = 0, $6 = 0, $2 = 0, $7 = 0, $4 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    emit_restart_1($0 | 0, HEAP32[($2 + 72 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = ((HEAP32[($2 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
   }
   HEAP32[($2 + 68 | 0) >> 2] = $3 + -1 | 0;
  }
  $4 = HEAP32[$1 >> 2] | 0;
  $5 = HEAP32[($0 + 248 | 0) >> 2] | 0;
  $3 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  $6 = $3;
  $7 = $3;
  label$3 : {
   if (($3 | 0) < (1 | 0)) {
    break label$3
   }
   $6 = $3;
   label$4 : {
    label$5 : {
     label$6 : while (1) {
      label$7 : {
       label$8 : {
        $1 = HEAP16[($4 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
        if (($1 | 0) < (0 | 0)) {
         break label$8
        }
        if (!($1 >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0)) {
         break label$7
        }
        break label$5;
       }
       if ((0 - $1 | 0) >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0) {
        break label$5
       }
      }
      $1 = ($6 | 0) > (1 | 0);
      $6 = $6 + -1 | 0;
      if ($1) {
       continue label$6
      }
      break label$6;
     };
     $6 = 0;
     break label$4;
    }
    $7 = $6;
    label$9 : while (1) {
     label$10 : {
      label$11 : {
       $1 = HEAP16[($4 + ((HEAP32[(144016 + ($7 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
       if (($1 | 0) < (0 | 0)) {
        break label$11
       }
       if (!($1 >> (HEAP32[($0 + 324 | 0) >> 2] | 0) | 0)) {
        break label$10
       }
       break label$3;
      }
      if ((0 - $1 | 0) >> (HEAP32[($0 + 324 | 0) >> 2] | 0) | 0) {
       break label$3
      }
     }
     $1 = ($7 | 0) > (1 | 0);
     $7 = $7 + -1 | 0;
     if ($1) {
      continue label$9
     }
     break label$9;
    };
   }
   $7 = 0;
  }
  $8 = HEAP32[($5 + 24 | 0) >> 2] | 0;
  label$12 : {
   $5 = HEAP32[($0 + 316 | 0) >> 2] | 0;
   if (($5 | 0) > ($6 | 0)) {
    break label$12
   }
   $9 = $2 + 204 | 0;
   $10 = ($2 + ($8 << 2 | 0) | 0) + 140 | 0;
   label$13 : while (1) {
    $3 = (Math_imul($5, 3) + (HEAP32[$10 >> 2] | 0) | 0) + -3 | 0;
    label$14 : {
     if (($5 | 0) <= ($7 | 0)) {
      break label$14
     }
     arith_encode($0 | 0, $3 | 0, 0 | 0);
    }
    $1 = $5;
    label$15 : {
     label$16 : {
      label$17 : while (1) {
       label$18 : {
        label$19 : {
         $5 = HEAP16[($4 + ((HEAP32[(144016 + ($1 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
         if (($5 | 0) < (0 | 0)) {
          break label$19
         }
         $5 = $5 >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0;
         if (!$5) {
          break label$18
         }
         if (($5 | 0) == (1 | 0)) {
          break label$16
         }
         arith_encode($0 | 0, $3 + 2 | 0 | 0, $5 & 1 | 0 | 0);
         break label$15;
        }
        $5 = (0 - $5 | 0) >> (HEAP32[($0 + 328 | 0) >> 2] | 0) | 0;
        if (!$5) {
         break label$18
        }
        label$20 : {
         if (($5 | 0) == (1 | 0)) {
          break label$20
         }
         arith_encode($0 | 0, $3 + 2 | 0 | 0, $5 & 1 | 0 | 0);
         break label$15;
        }
        arith_encode($0 | 0, $3 + 1 | 0 | 0, 1 | 0);
        arith_encode($0 | 0, $9 | 0, 1 | 0);
        break label$15;
       }
       arith_encode($0 | 0, $3 + 1 | 0 | 0, 0 | 0);
       $1 = $1 + 1 | 0;
       $3 = $3 + 3 | 0;
       continue label$17;
      };
     }
     arith_encode($0 | 0, $3 + 1 | 0 | 0, 1 | 0);
     arith_encode($0 | 0, $9 | 0, 0 | 0);
    }
    $5 = $1 + 1 | 0;
    if (($1 | 0) < ($6 | 0)) {
     continue label$13
    }
    break label$13;
   };
   $3 = HEAP32[($0 + 320 | 0) >> 2] | 0;
  }
  label$21 : {
   if (($5 | 0) > ($3 | 0)) {
    break label$21
   }
   arith_encode($0 | 0, (Math_imul($5, 3) + (HEAP32[(($2 + ($8 << 2 | 0) | 0) + 140 | 0) >> 2] | 0) | 0) + -3 | 0 | 0, 1 | 0);
  }
  return 1 | 0;
 }
 
 function encode_mcu($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $8 = 0, $7 = 0, $11 = 0, $12 = 0, $9 = 0, $5 = 0, $15 = 0, $16 = 0, $4 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  label$1 : {
   if (!(HEAP32[($0 + 200 | 0) >> 2] | 0)) {
    break label$1
   }
   label$2 : {
    $3 = HEAP32[($2 + 68 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    emit_restart_1($0 | 0, HEAP32[($2 + 72 | 0) >> 2] | 0 | 0);
    $3 = HEAP32[($0 + 200 | 0) >> 2] | 0;
    HEAP32[($2 + 72 | 0) >> 2] = ((HEAP32[($2 + 72 | 0) >> 2] | 0) + 1 | 0) & 7 | 0;
   }
   HEAP32[($2 + 68 | 0) >> 2] = $3 + -1 | 0;
  }
  label$3 : {
   if ((HEAP32[($0 + 272 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $4 = $2 + 204 | 0;
   $5 = 0;
   label$4 : while (1) {
    $3 = $5 << 2 | 0;
    $6 = (HEAP32[(($0 + $3 | 0) + 276 | 0) >> 2] | 0) << 2 | 0;
    $7 = HEAP32[(($0 + $6 | 0) + 248 | 0) >> 2] | 0;
    $8 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    $9 = ($2 + ($8 << 2 | 0) | 0) + 76 | 0;
    $10 = $2 + $6 | 0;
    $11 = $10 + 52 | 0;
    $6 = (HEAP32[$9 >> 2] | 0) + (HEAP32[$11 >> 2] | 0) | 0;
    label$5 : {
     label$6 : {
      $12 = HEAP32[($1 + $3 | 0) >> 2] | 0;
      $3 = HEAP16[$12 >> 1] | 0;
      $13 = $10 + 36 | 0;
      $10 = $3 - (HEAP32[$13 >> 2] | 0) | 0;
      if ($10) {
       break label$6
      }
      arith_encode($0 | 0, $6 | 0, 0 | 0);
      HEAP32[$11 >> 2] = 0;
      break label$5;
     }
     HEAP32[$13 >> 2] = $3;
     arith_encode($0 | 0, $6 | 0, 1 | 0);
     $3 = 0;
     label$7 : {
      label$8 : {
       if (($10 | 0) <= (0 | 0)) {
        break label$8
       }
       $13 = 4;
       $14 = 2;
       $15 = 0;
       break label$7;
      }
      $10 = 0 - $10 | 0;
      $13 = 8;
      $14 = 3;
      $15 = 1;
     }
     arith_encode($0 | 0, $6 + 1 | 0 | 0, $15 | 0);
     HEAP32[$11 >> 2] = $13;
     $6 = $6 + $14 | 0;
     label$9 : {
      $14 = $10 + -1 | 0;
      if (!$14) {
       break label$9
      }
      $3 = 1;
      arith_encode($0 | 0, $6 | 0, 1 | 0);
      $6 = (HEAP32[$9 >> 2] | 0) + 20 | 0;
      $10 = $14;
      if (($10 | 0) == (1 | 0)) {
       break label$9
      }
      label$10 : while (1) {
       arith_encode($0 | 0, $6 | 0, 1 | 0);
       $6 = $6 + 1 | 0;
       $3 = $3 << 1 | 0;
       $13 = $10 >>> 0 > 3 >>> 0;
       $10 = $10 >> 1 | 0;
       if ($13) {
        continue label$10
       }
       break label$10;
      };
     }
     $10 = 0;
     arith_encode($0 | 0, $6 | 0, 0 | 0);
     label$11 : {
      label$12 : {
       $13 = $0 + $8 | 0;
       if (($3 | 0) < ((1 << (HEAPU8[($13 + 120 | 0) >> 0] | 0) | 0) >> 1 | 0 | 0)) {
        break label$12
       }
       if (($3 | 0) <= ((1 << (HEAPU8[($13 + 136 | 0) >> 0] | 0) | 0) >> 1 | 0 | 0)) {
        break label$11
       }
       $10 = (HEAP32[$11 >> 2] | 0) + 8 | 0;
      }
      HEAP32[$11 >> 2] = $10;
     }
     if ($3 >>> 0 < 2 >>> 0) {
      break label$5
     }
     $13 = $6 + 14 | 0;
     label$13 : while (1) {
      $6 = $3 >> 1 | 0;
      arith_encode($0 | 0, $13 | 0, ($6 & $14 | 0 | 0) != (0 | 0) | 0);
      $10 = $3 >>> 0 > 3 >>> 0;
      $3 = $6;
      if ($10) {
       continue label$13
      }
      break label$13;
     };
    }
    $16 = HEAP32[($7 + 24 | 0) >> 2] | 0;
    $3 = 63;
    label$14 : {
     label$15 : {
      label$16 : {
       label$17 : while (1) {
        label$18 : {
         if (!(HEAPU16[($12 + ((HEAP32[(144016 + ($3 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0)) {
          break label$18
         }
         $8 = $3;
         break label$16;
        }
        $8 = $3 + -1 | 0;
        if (HEAPU16[($12 + ((HEAP32[(144016 + ($8 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) {
         break label$16
        }
        $8 = $3 + -2 | 0;
        if (HEAPU16[($12 + ((HEAP32[(144016 + ($8 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0) {
         break label$16
        }
        $3 = $3 + -3 | 0;
        $6 = 1;
        if ($8 >>> 0 > 1 >>> 0) {
         continue label$17
        }
        break label$15;
       };
      }
      $6 = 1;
      if (($8 | 0) < (1 | 0)) {
       break label$15
      }
      $15 = ($0 + $16 | 0) + 152 | 0;
      $9 = ($2 + ($16 << 2 | 0) | 0) + 140 | 0;
      $6 = 1;
      label$19 : while (1) {
       $3 = (Math_imul($6, 3) + (HEAP32[$9 >> 2] | 0) | 0) + -3 | 0;
       arith_encode($0 | 0, $3 | 0, 0 | 0);
       label$20 : {
        $10 = HEAPU16[($12 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
        if ($10) {
         break label$20
        }
        label$21 : while (1) {
         arith_encode($0 | 0, $3 + 1 | 0 | 0, 0 | 0);
         $3 = $3 + 3 | 0;
         $6 = $6 + 1 | 0;
         $10 = HEAPU16[($12 + ((HEAP32[(144016 + ($6 << 2 | 0) | 0) >> 2] | 0) << 1 | 0) | 0) >> 1] | 0;
         if (!$10) {
          continue label$21
         }
         break label$21;
        };
       }
       $7 = $6;
       arith_encode($0 | 0, $3 + 1 | 0 | 0, 1 | 0);
       $6 = $10 << 16 | 0;
       arith_encode($0 | 0, $4 | 0, ($6 >> 16 | 0 | 0) < (1 | 0) | 0);
       $3 = $3 + 2 | 0;
       label$22 : {
        label$23 : {
         label$24 : {
          $6 = $6 >> 31 | 0;
          $13 = ((($10 ^ $6 | 0) - $6 | 0) & 65535 | 0) + -1 | 0;
          if (!$13) {
           break label$24
          }
          arith_encode($0 | 0, $3 | 0, 1 | 0);
          if (($13 | 0) == (1 | 0)) {
           break label$24
          }
          arith_encode($0 | 0, $3 | 0, 1 | 0);
          $10 = (HEAP32[$9 >> 2] | 0) + (($7 | 0) > (HEAPU8[$15 >> 0] | 0 | 0) ? 217 : 189) | 0;
          $3 = 2;
          label$25 : {
           if ($13 >>> 0 <= 3 >>> 0) {
            break label$25
           }
           $6 = $13;
           label$26 : while (1) {
            $14 = $10;
            arith_encode($0 | 0, $10 | 0, 1 | 0);
            $10 = $10 + 1 | 0;
            $3 = $3 << 1 | 0;
            $11 = $6 >>> 0 < 8 >>> 0;
            $6 = $6 >> 1 | 0;
            if (!$11) {
             continue label$26
            }
            break label$26;
           };
           arith_encode($0 | 0, $10 | 0, 0 | 0);
           if (!$3) {
            break label$22
           }
           $14 = $14 + 15 | 0;
           break label$23;
          }
          arith_encode($0 | 0, $10 | 0, 0 | 0);
          $14 = $10 + 14 | 0;
          $3 = 2;
          break label$23;
         }
         arith_encode($0 | 0, $3 | 0, 0 | 0);
         break label$22;
        }
        label$27 : while (1) {
         $6 = $3 >> 1 | 0;
         arith_encode($0 | 0, $14 | 0, ($6 & $13 | 0 | 0) != (0 | 0) | 0);
         $10 = $3 >>> 0 > 3 >>> 0;
         $3 = $6;
         if ($10) {
          continue label$27
         }
         break label$27;
        };
       }
       $6 = $7 + 1 | 0;
       if (($7 | 0) < ($8 | 0)) {
        continue label$19
       }
       break label$19;
      };
      if (($7 | 0) > (62 | 0)) {
       break label$14
      }
     }
     arith_encode($0 | 0, (Math_imul($6, 3) + (HEAP32[(($2 + ($16 << 2 | 0) | 0) + 140 | 0) >> 2] | 0) | 0) + -3 | 0 | 0, 1 | 0);
    }
    $5 = $5 + 1 | 0;
    if (($5 | 0) < (HEAP32[($0 + 272 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  return 1 | 0;
 }
 
 function jget_arith_rates($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $7 = Math_fround(0), $5 = 0, $6 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0);
  $4 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $5 = $0 + $1 | 0;
  HEAP32[($3 + 2560 | 0) >> 2] = HEAPU8[($5 + 120 | 0) >> 0] | 0;
  HEAP32[($3 + 2564 | 0) >> 2] = HEAPU8[($5 + 136 | 0) >> 0] | 0;
  HEAP32[($3 + 2568 | 0) >> 2] = HEAPU8[(($0 + $2 | 0) + 152 | 0) >> 0] | 0;
  $6 = HEAP32[(($4 + ($1 << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
  $0 = 0;
  label$1 : while (1) {
   $1 = $3 + ($0 << 3 | 0) | 0;
   $5 = HEAP8[($6 + $0 | 0) >> 0] | 0;
   $7 = Math_fround(+(HEAP16[((144352 + (($5 & 127 | 0) << 2 | 0) | 0) + 2 | 0) >> 1] | 0 | 0) / 46340.95);
   $7 = ($5 | 0) < (0 | 0) ? $7 : Math_fround(Math_fround(1.0) - $7);
   (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+log(+(+$7)) / -.6931471805599453)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $1, wasm2js_f32$0 = Math_fround(+log(+(+Math_fround(Math_fround(1.0) - $7))) / -.6931471805599453)), HEAPF32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_f32$0;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (64 | 0)) {
    continue label$1
   }
   break label$1;
  };
  $6 = HEAP32[(($4 + ($2 << 2 | 0) | 0) + 140 | 0) >> 2] | 0;
  $0 = 0;
  label$2 : while (1) {
   $1 = $3 + ($0 << 3 | 0) | 0;
   $5 = HEAP8[($6 + $0 | 0) >> 0] | 0;
   $7 = Math_fround(+(HEAP16[((144352 + (($5 & 127 | 0) << 2 | 0) | 0) + 2 | 0) >> 1] | 0 | 0) / 46340.95);
   $7 = ($5 | 0) < (0 | 0) ? $7 : Math_fround(Math_fround(1.0) - $7);
   (wasm2js_i32$0 = $1 + 512 | 0, wasm2js_f32$0 = Math_fround(+log(+(+$7)) / -.6931471805599453)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   (wasm2js_i32$0 = $1 + 516 | 0, wasm2js_f32$0 = Math_fround(+log(+(+Math_fround(Math_fround(1.0) - $7))) / -.6931471805599453)), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
   $0 = $0 + 1 | 0;
   if (($0 | 0) != (256 | 0)) {
    continue label$2
   }
   break label$2;
  };
 }
 
 function emit_restart_1($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $3 = 0, $4 = 0, $2 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $5 = 0;
  $2 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  finish_pass($0 | 0);
  label$1 : {
   if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
    break label$1
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = 255;
   $4 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $4;
   if ($4) {
    break label$1
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$1
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  label$2 : {
   if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
    break label$2
   }
   $3 = HEAP32[($0 + 24 | 0) >> 2] | 0;
   $4 = HEAP32[$3 >> 2] | 0;
   HEAP32[$3 >> 2] = $4 + 1 | 0;
   HEAP8[$4 >> 0] = $1 + -48 | 0;
   $1 = (HEAP32[($3 + 4 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   if ($1) {
    break label$2
   }
   if (FUNCTION_TABLE[HEAP32[($3 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
    break label$2
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[($3 + 20 | 0) >> 2] = 24;
   FUNCTION_TABLE[HEAP32[$3 >> 2] | 0 | 0]($0);
  }
  label$3 : {
   if ((HEAP32[($0 + 244 | 0) >> 2] | 0 | 0) < (1 | 0)) {
    break label$3
   }
   $1 = 0;
   label$4 : while (1) {
    $5 = $1 << 2 | 0;
    $4 = HEAP32[(($0 + $5 | 0) + 248 | 0) >> 2] | 0;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
         break label$8
        }
        if (HEAP32[($0 + 316 | 0) >> 2] | 0) {
         break label$7
        }
        if (HEAP32[($0 + 324 | 0) >> 2] | 0) {
         break label$7
        }
       }
       $3 = HEAP32[(($2 + ((HEAP32[($4 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) + 76 | 0) >> 2] | 0;
       i64toi32_i32$1 = $3;
       i64toi32_i32$0 = 0;
       $8 = 0;
       HEAP8[$3 >> 0] = $8;
       HEAP8[($3 + 1 | 0) >> 0] = $8 >>> 8 | 0;
       HEAP8[($3 + 2 | 0) >> 0] = $8 >>> 16 | 0;
       HEAP8[($3 + 3 | 0) >> 0] = $8 >>> 24 | 0;
       HEAP8[($3 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[($3 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[($3 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[($3 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 56 | 0;
       i64toi32_i32$0 = 0;
       $9 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $9;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $9 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $9 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $9 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 48 | 0;
       i64toi32_i32$0 = 0;
       $10 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $10;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $10 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $10 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $10 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 40 | 0;
       i64toi32_i32$0 = 0;
       $11 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $11;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $11 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $11 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $11 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 32 | 0;
       i64toi32_i32$0 = 0;
       $12 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $12;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $12 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $12 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $12 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 24 | 0;
       i64toi32_i32$0 = 0;
       $13 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $13;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $13 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $13 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $13 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 16 | 0;
       i64toi32_i32$0 = 0;
       $14 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $14;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $14 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $14 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $14 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       i64toi32_i32$1 = $3 + 8 | 0;
       i64toi32_i32$0 = 0;
       $15 = 0;
       HEAP8[i64toi32_i32$1 >> 0] = $15;
       HEAP8[(i64toi32_i32$1 + 1 | 0) >> 0] = $15 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 2 | 0) >> 0] = $15 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 3 | 0) >> 0] = $15 >>> 24 | 0;
       HEAP8[(i64toi32_i32$1 + 4 | 0) >> 0] = i64toi32_i32$0;
       HEAP8[(i64toi32_i32$1 + 5 | 0) >> 0] = i64toi32_i32$0 >>> 8 | 0;
       HEAP8[(i64toi32_i32$1 + 6 | 0) >> 0] = i64toi32_i32$0 >>> 16 | 0;
       HEAP8[(i64toi32_i32$1 + 7 | 0) >> 0] = i64toi32_i32$0 >>> 24 | 0;
       $3 = $2 + $5 | 0;
       HEAP32[($3 + 52 | 0) >> 2] = 0;
       HEAP32[($3 + 36 | 0) >> 2] = 0;
       if (!(HEAP32[($0 + 228 | 0) >> 2] | 0)) {
        break label$6
       }
      }
      if (!(HEAP32[($0 + 320 | 0) >> 2] | 0)) {
       break label$5
      }
     }
     memset(HEAP32[(($2 + ((HEAP32[($4 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) + 140 | 0) >> 2] | 0 | 0, 0 | 0, 256 | 0) | 0;
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) < (HEAP32[($0 + 244 | 0) >> 2] | 0 | 0)) {
     continue label$4
    }
    break label$4;
   };
  }
  i64toi32_i32$1 = $2;
  i64toi32_i32$0 = -1;
  HEAP32[(i64toi32_i32$1 + 28 | 0) >> 2] = 11;
  HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 24 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 65536;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] = i64toi32_i32$0;
 }
 
 function arith_encode($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $7 = 0, $6 = 0, $5 = 0;
  $3 = HEAP32[($0 + 364 | 0) >> 2] | 0;
  $4 = HEAPU8[$1 >> 0] | 0;
  $5 = HEAP32[(144352 + (($4 & 127 | 0) << 2 | 0) | 0) >> 2] | 0;
  $6 = $5 >> 16 | 0;
  $7 = (HEAP32[($3 + 16 | 0) >> 2] | 0) - $6 | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $7;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($4 >>> 7 | 0 | 0) == ($2 | 0)) {
      break label$3
     }
     label$4 : {
      if (($7 | 0) < ($6 | 0)) {
       break label$4
      }
      HEAP32[($3 + 16 | 0) >> 2] = $6;
      HEAP32[($3 + 12 | 0) >> 2] = (HEAP32[($3 + 12 | 0) >> 2] | 0) + $7 | 0;
     }
     $4 = ($4 & 128 | 0) ^ ($5 & 255 | 0) | 0;
     break label$2;
    }
    if (($7 | 0) > (32767 | 0)) {
     break label$1
    }
    $2 = $5 >>> 8 | 0;
    label$5 : {
     if (($7 | 0) >= ($6 | 0)) {
      break label$5
     }
     HEAP32[($3 + 16 | 0) >> 2] = $6;
     HEAP32[($3 + 12 | 0) >> 2] = (HEAP32[($3 + 12 | 0) >> 2] | 0) + $7 | 0;
    }
    $4 = ($4 & 128 | 0) ^ $2 | 0;
   }
   HEAP8[$1 >> 0] = $4;
   $1 = HEAP32[($3 + 28 | 0) >> 2] | 0;
   $7 = HEAP32[($3 + 12 | 0) >> 2] | 0;
   $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
   label$6 : while (1) {
    $1 = $1 + -1 | 0;
    HEAP32[($3 + 28 | 0) >> 2] = $1;
    $7 = $7 << 1 | 0;
    HEAP32[($3 + 12 | 0) >> 2] = $7;
    $4 = $4 << 1 | 0;
    HEAP32[($3 + 16 | 0) >> 2] = $4;
    label$7 : {
     if ($1) {
      break label$7
     }
     $6 = $7 >> 19 | 0;
     label$8 : {
      label$9 : {
       if (($7 | 0) < (134217728 | 0)) {
        break label$9
       }
       label$10 : {
        if ((HEAP32[($3 + 32 | 0) >> 2] | 0 | 0) < (0 | 0)) {
         break label$10
        }
        label$11 : {
         if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
          break label$11
         }
         label$12 : while (1) {
          label$13 : {
           if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
            break label$13
           }
           $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
           $4 = HEAP32[$1 >> 2] | 0;
           HEAP32[$1 >> 2] = $4 + 1 | 0;
           HEAP8[$4 >> 0] = 0;
           $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($1 + 4 | 0) >> 2] = $4;
           if ($4) {
            break label$13
           }
           if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
            break label$13
           }
           $1 = HEAP32[$0 >> 2] | 0;
           HEAP32[($1 + 20 | 0) >> 2] = 24;
           FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
          }
          $1 = (HEAP32[($3 + 24 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($3 + 24 | 0) >> 2] = $1;
          if ($1) {
           continue label$12
          }
          break label$12;
         };
        }
        label$14 : {
         if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
          break label$14
         }
         $4 = HEAPU8[($3 + 32 | 0) >> 0] | 0;
         $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $7 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $7 + 1 | 0;
         HEAP8[$7 >> 0] = $4 + 1 | 0;
         $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($1 + 4 | 0) >> 2] = $4;
         if ($4) {
          break label$14
         }
         if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$14
         }
         $1 = HEAP32[$0 >> 2] | 0;
         HEAP32[($1 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
        }
        if ((HEAP32[($3 + 32 | 0) >> 2] | 0 | 0) != (254 | 0)) {
         break label$10
        }
        if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
         break label$10
        }
        $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
        $4 = HEAP32[$1 >> 2] | 0;
        HEAP32[$1 >> 2] = $4 + 1 | 0;
        HEAP8[$4 >> 0] = 0;
        $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($1 + 4 | 0) >> 2] = $4;
        if ($4) {
         break label$10
        }
        if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
         break label$10
        }
        $1 = HEAP32[$0 >> 2] | 0;
        HEAP32[($1 + 20 | 0) >> 2] = 24;
        FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
       }
       HEAP32[($3 + 32 | 0) >> 2] = $6 & 255 | 0;
       $1 = HEAP32[($3 + 20 | 0) >> 2] | 0;
       HEAP32[($3 + 20 | 0) >> 2] = 0;
       HEAP32[($3 + 24 | 0) >> 2] = $1 + (HEAP32[($3 + 24 | 0) >> 2] | 0) | 0;
       break label$8;
      }
      label$15 : {
       if (($6 | 0) != (255 | 0)) {
        break label$15
       }
       HEAP32[($3 + 20 | 0) >> 2] = (HEAP32[($3 + 20 | 0) >> 2] | 0) + 1 | 0;
       break label$8;
      }
      label$16 : {
       label$17 : {
        $1 = HEAP32[($3 + 32 | 0) >> 2] | 0;
        if ($1) {
         break label$17
        }
        HEAP32[($3 + 24 | 0) >> 2] = (HEAP32[($3 + 24 | 0) >> 2] | 0) + 1 | 0;
        break label$16;
       }
       if (($1 | 0) < (0 | 0)) {
        break label$16
       }
       label$18 : {
        if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
         break label$18
        }
        label$19 : {
         if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
          break label$19
         }
         $1 = 0;
         label$20 : while (1) {
          label$21 : {
           if ($1) {
            break label$21
           }
           $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
           $4 = HEAP32[$1 >> 2] | 0;
           HEAP32[$1 >> 2] = $4 + 1 | 0;
           HEAP8[$4 >> 0] = 0;
           $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
           HEAP32[($1 + 4 | 0) >> 2] = $4;
           if ($4) {
            break label$21
           }
           if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
            break label$21
           }
           $1 = HEAP32[$0 >> 2] | 0;
           HEAP32[($1 + 20 | 0) >> 2] = 24;
           FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
          }
          $1 = (HEAP32[($3 + 24 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($3 + 24 | 0) >> 2] = $1;
          if (!$1) {
           break label$18
          }
          $1 = HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0;
          continue label$20;
         };
        }
        HEAP32[($3 + 24 | 0) >> 2] = 0;
       }
       if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
        break label$16
       }
       $4 = HEAP32[($3 + 32 | 0) >> 2] | 0;
       $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
       $7 = HEAP32[$1 >> 2] | 0;
       HEAP32[$1 >> 2] = $7 + 1 | 0;
       HEAP8[$7 >> 0] = $4;
       $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
       HEAP32[($1 + 4 | 0) >> 2] = $4;
       if ($4) {
        break label$16
       }
       if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
        break label$16
       }
       $1 = HEAP32[$0 >> 2] | 0;
       HEAP32[($1 + 20 | 0) >> 2] = 24;
       FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
      }
      label$22 : {
       if (!(HEAP32[($3 + 20 | 0) >> 2] | 0)) {
        break label$22
       }
       label$23 : {
        if (!(HEAP32[($3 + 24 | 0) >> 2] | 0)) {
         break label$23
        }
        label$24 : while (1) {
         label$25 : {
          if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
           break label$25
          }
          $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
          $4 = HEAP32[$1 >> 2] | 0;
          HEAP32[$1 >> 2] = $4 + 1 | 0;
          HEAP8[$4 >> 0] = 0;
          $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
          HEAP32[($1 + 4 | 0) >> 2] = $4;
          if ($4) {
           break label$25
          }
          if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
           break label$25
          }
          $1 = HEAP32[$0 >> 2] | 0;
          HEAP32[($1 + 20 | 0) >> 2] = 24;
          FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
         }
         $1 = (HEAP32[($3 + 24 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($3 + 24 | 0) >> 2] = $1;
         if ($1) {
          continue label$24
         }
         break label$24;
        };
       }
       label$26 : while (1) {
        label$27 : {
         if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
          break label$27
         }
         $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $4 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $4 + 1 | 0;
         HEAP8[$4 >> 0] = 255;
         $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($1 + 4 | 0) >> 2] = $4;
         if ($4) {
          break label$27
         }
         if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$27
         }
         $1 = HEAP32[$0 >> 2] | 0;
         HEAP32[($1 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
        }
        label$28 : {
         if (HEAP32[((HEAP32[($0 + 332 | 0) >> 2] | 0) + 44 | 0) >> 2] | 0) {
          break label$28
         }
         $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
         $4 = HEAP32[$1 >> 2] | 0;
         HEAP32[$1 >> 2] = $4 + 1 | 0;
         HEAP8[$4 >> 0] = 0;
         $4 = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
         HEAP32[($1 + 4 | 0) >> 2] = $4;
         if ($4) {
          break label$28
         }
         if (FUNCTION_TABLE[HEAP32[($1 + 12 | 0) >> 2] | 0 | 0]($0) | 0) {
          break label$28
         }
         $1 = HEAP32[$0 >> 2] | 0;
         HEAP32[($1 + 20 | 0) >> 2] = 24;
         FUNCTION_TABLE[HEAP32[$1 >> 2] | 0 | 0]($0);
        }
        $1 = (HEAP32[($3 + 20 | 0) >> 2] | 0) + -1 | 0;
        HEAP32[($3 + 20 | 0) >> 2] = $1;
        if ($1) {
         continue label$26
        }
        break label$26;
       };
      }
      HEAP32[($3 + 32 | 0) >> 2] = $6 & 255 | 0;
     }
     $7 = (HEAP32[($3 + 12 | 0) >> 2] | 0) & 524287 | 0;
     HEAP32[($3 + 12 | 0) >> 2] = $7;
     $1 = (HEAP32[($3 + 28 | 0) >> 2] | 0) + 8 | 0;
     HEAP32[($3 + 28 | 0) >> 2] = $1;
     $4 = HEAP32[($3 + 16 | 0) >> 2] | 0;
    }
    if (($4 | 0) < (32768 | 0)) {
     continue label$6
    }
    break label$6;
   };
  }
 }
 
 function jsimd_can_rgb_ycc() {
  return 0 | 0;
 }
 
 function jsimd_can_rgb_gray() {
  return 0 | 0;
 }
 
 function jsimd_rgb_ycc_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
 }
 
 function jsimd_rgb_gray_convert($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
 }
 
 function jsimd_can_h2v2_downsample() {
  return 0 | 0;
 }
 
 function jsimd_can_h2v1_downsample() {
  return 0 | 0;
 }
 
 function jsimd_h2v2_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
 }
 
 function jsimd_h2v1_downsample($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
 }
 
 function jsimd_can_convsamp() {
  return 0 | 0;
 }
 
 function jsimd_can_convsamp_float() {
  return 0 | 0;
 }
 
 function jsimd_convsamp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function jsimd_convsamp_float($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function jsimd_can_fdct_islow() {
  return 0 | 0;
 }
 
 function jsimd_can_fdct_ifast() {
  return 0 | 0;
 }
 
 function jsimd_can_fdct_float() {
  return 0 | 0;
 }
 
 function jsimd_fdct_islow($0) {
  $0 = $0 | 0;
 }
 
 function jsimd_fdct_ifast($0) {
  $0 = $0 | 0;
 }
 
 function jsimd_fdct_float($0) {
  $0 = $0 | 0;
 }
 
 function jsimd_can_quantize() {
  return 0 | 0;
 }
 
 function jsimd_can_quantize_float() {
  return 0 | 0;
 }
 
 function jsimd_quantize($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function jsimd_quantize_float($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function jsimd_can_huff_encode_one_block() {
  return 0 | 0;
 }
 
 function jsimd_huff_encode_one_block($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  return 0 | 0;
 }
 
 function __memcpy($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2 >>> 0 < 512 >>> 0) {
    break label$1
   }
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
   return $0 | 0;
  }
  $3 = $0 + $2 | 0;
  label$2 : {
   label$3 : {
    if (($1 ^ $0 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0 & 3 | 0) {
       break label$5
      }
      $2 = $0;
      break label$4;
     }
     label$6 : {
      if ($2) {
       break label$6
      }
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     label$7 : while (1) {
      HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3 | 0)) {
       break label$4
      }
      if ($2 >>> 0 < $3 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4 = $3 & -4 | 0;
     if ($4 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5 = $4 + -64 | 0;
     if ($2 >>> 0 > $5 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
      HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0;
      HEAP32[($2 + 8 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
      HEAP32[($2 + 12 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
      HEAP32[($2 + 16 | 0) >> 2] = HEAP32[($1 + 16 | 0) >> 2] | 0;
      HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($1 + 20 | 0) >> 2] | 0;
      HEAP32[($2 + 24 | 0) >> 2] = HEAP32[($1 + 24 | 0) >> 2] | 0;
      HEAP32[($2 + 28 | 0) >> 2] = HEAP32[($1 + 28 | 0) >> 2] | 0;
      HEAP32[($2 + 32 | 0) >> 2] = HEAP32[($1 + 32 | 0) >> 2] | 0;
      HEAP32[($2 + 36 | 0) >> 2] = HEAP32[($1 + 36 | 0) >> 2] | 0;
      HEAP32[($2 + 40 | 0) >> 2] = HEAP32[($1 + 40 | 0) >> 2] | 0;
      HEAP32[($2 + 44 | 0) >> 2] = HEAP32[($1 + 44 | 0) >> 2] | 0;
      HEAP32[($2 + 48 | 0) >> 2] = HEAP32[($1 + 48 | 0) >> 2] | 0;
      HEAP32[($2 + 52 | 0) >> 2] = HEAP32[($1 + 52 | 0) >> 2] | 0;
      HEAP32[($2 + 56 | 0) >> 2] = HEAP32[($1 + 56 | 0) >> 2] | 0;
      HEAP32[($2 + 60 | 0) >> 2] = HEAP32[($1 + 60 | 0) >> 2] | 0;
      $1 = $1 + 64 | 0;
      $2 = $2 + 64 | 0;
      if ($2 >>> 0 <= $5 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2 >>> 0 >= $4 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($2 >>> 0 < $4 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2 = $0;
    break label$2;
   }
   label$12 : {
    $4 = $3 + -4 | 0;
    if ($4 >>> 0 >= $0 >>> 0) {
     break label$12
    }
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   label$13 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    HEAP8[($2 + 1 | 0) >> 0] = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    HEAP8[($2 + 2 | 0) >> 0] = HEAPU8[($1 + 2 | 0) >> 0] | 0;
    HEAP8[($2 + 3 | 0) >> 0] = HEAPU8[($1 + 3 | 0) >> 0] | 0;
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($2 >>> 0 <= $4 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2 >>> 0 >= $3 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2 >> 0] = HEAPU8[$1 >> 0] | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function memset($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, i64toi32_i32$0 = 0, $4 = 0, i64toi32_i32$1 = 0, $6 = 0, $5 = 0, $6$hi = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   HEAP8[$0 >> 0] = $1;
   $3 = $2 + $0 | 0;
   HEAP8[($3 + -1 | 0) >> 0] = $1;
   if ($2 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 2 | 0) >> 0] = $1;
   HEAP8[($0 + 1 | 0) >> 0] = $1;
   HEAP8[($3 + -3 | 0) >> 0] = $1;
   HEAP8[($3 + -2 | 0) >> 0] = $1;
   if ($2 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($0 + 3 | 0) >> 0] = $1;
   HEAP8[($3 + -4 | 0) >> 0] = $1;
   if ($2 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4 = (0 - $0 | 0) & 3 | 0;
   $3 = $0 + $4 | 0;
   $1 = Math_imul($1 & 255 | 0, 16843009);
   HEAP32[$3 >> 2] = $1;
   $4 = ($2 - $4 | 0) & -4 | 0;
   $2 = $3 + $4 | 0;
   HEAP32[($2 + -4 | 0) >> 2] = $1;
   if ($4 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   HEAP32[($3 + 4 | 0) >> 2] = $1;
   HEAP32[($2 + -8 | 0) >> 2] = $1;
   HEAP32[($2 + -12 | 0) >> 2] = $1;
   if ($4 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3 + 24 | 0) >> 2] = $1;
   HEAP32[($3 + 20 | 0) >> 2] = $1;
   HEAP32[($3 + 16 | 0) >> 2] = $1;
   HEAP32[($3 + 12 | 0) >> 2] = $1;
   HEAP32[($2 + -16 | 0) >> 2] = $1;
   HEAP32[($2 + -20 | 0) >> 2] = $1;
   HEAP32[($2 + -24 | 0) >> 2] = $1;
   HEAP32[($2 + -28 | 0) >> 2] = $1;
   $5 = $3 & 4 | 0 | 24 | 0;
   $2 = $4 - $5 | 0;
   if ($2 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1 = $3 + $5 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 24 | 0) >> 2] = $6;
    HEAP32[($1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 16 | 0) >> 2] = $6;
    HEAP32[($1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[($1 + 8 | 0) >> 2] = $6;
    HEAP32[($1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1;
    HEAP32[$1 >> 2] = $6;
    HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1 = $1 + 32 | 0;
    $2 = $2 + -32 | 0;
    if ($2 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0 | 0;
 }
 
 function __math_oflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(3105036184601417870297958.0e207)));
 }
 
 function __math_uflow($0) {
  $0 = $0 | 0;
  return +(+__math_xflow($0 | 0, +(1.2882297539194267e-231)));
 }
 
 function exp2($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3 = 0.0, $1 = 0, $1$hi = 0, $2 = 0, i64toi32_i32$5 = 0, $6$hi = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0.0, $5 = 0, $27 = 0, $6 = 0, $34 = 0, $59 = 0.0, $66 = 0.0, $69 = 0.0, $83$hi = 0, $86 = 0, $86$hi = 0;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2 = $22 & 2047 | 0;
    if (($2 + -969 | 0) >>> 0 < 63 >>> 0) {
     break label$2
    }
    label$3 : {
     if ($2 >>> 0 > 968 >>> 0) {
      break label$3
     }
     return +($0 + 1.0);
    }
    label$4 : {
     if ($2 >>> 0 < 1033 >>> 0) {
      break label$4
     }
     $3 = 0.0;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = -1048576;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0) {
      break label$1
     }
     label$5 : {
      if (($2 | 0) != (2047 | 0)) {
       break label$5
      }
      return +($0 + 1.0);
     }
     label$6 : {
      i64toi32_i32$0 = $1$hi;
      i64toi32_i32$3 = $1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 0;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
       $23 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
         $24 = 0
        } else {
         $24 = 1
        }
        $25 = $24;
       } else {
        $25 = 0
       }
       $23 = $25;
      }
      if ($23) {
       break label$6
      }
      return +(+__math_oflow(0 | 0));
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$0 = -1064252416;
     i64toi32_i32$1 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$4
     }
     return +(+__math_uflow(0 | 0));
    }
    $34 = $2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $26 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$2 = $26;
    i64toi32_i32$1 = -2129002496;
    i64toi32_i32$0 = 0;
    $2 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0 ? 0 : $34;
   }
   $3 = +HEAPF64[(0 + 144872 | 0) >> 3];
   $4 = $3 + $0;
   $0 = $0 - ($4 - $3);
   $3 = $0 * $0;
   $59 = $3 * $3 * ($0 * +HEAPF64[(0 + 144912 | 0) >> 3] + +HEAPF64[(0 + 144904 | 0) >> 3]);
   $66 = $3 * ($0 * +HEAPF64[(0 + 144896 | 0) >> 3] + +HEAPF64[(0 + 144888 | 0) >> 3]);
   $69 = $0 * +HEAPF64[(0 + 144880 | 0) >> 3];
   wasm2js_scratch_store_f64(+$4);
   i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$2;
   $5 = ($1 << 4 | 0) & 2032 | 0;
   $0 = $59 + ($66 + ($69 + +HEAPF64[($5 + 144920 | 0) >> 3]));
   i64toi32_i32$0 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 45;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $27 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $27 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $83$hi = i64toi32_i32$3;
   i64toi32_i32$2 = $5 + 144928 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $86 = i64toi32_i32$3;
   $86$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $83$hi;
   i64toi32_i32$2 = $27;
   i64toi32_i32$3 = $86$hi;
   i64toi32_i32$1 = $86;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $6 = i64toi32_i32$4;
   $6$hi = i64toi32_i32$5;
   label$7 : {
    if ($2) {
     break label$7
    }
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$2 = $1$hi;
    return +(+specialcase(+$0, $6 | 0, i64toi32_i32$5 | 0, $1 | 0, i64toi32_i32$2 | 0));
   }
   i64toi32_i32$2 = $6$hi;
   wasm2js_scratch_store_i32(0 | 0, $6 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $3 = +wasm2js_scratch_load_f64();
   $3 = $3 * $0 + $3;
  }
  return +$3;
 }
 
 function specialcase($0, $1, $1$hi, $2, $2$hi) {
  $0 = +$0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $4 = 0.0, i64toi32_i32$5 = 0, $5 = 0.0, $6 = 0.0, $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  label$1 : {
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = -1048576;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$4 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$5 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $0 = $4 * $0 + $4;
   return +($0 + $0);
  }
  label$2 : {
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$3 = 1071644672;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$4 | 0);
   $4 = +wasm2js_scratch_load_f64();
   $5 = $4 * $0;
   $0 = $5 + $4;
   if (!($0 < 1.0)) {
    break label$2
   }
   i64toi32_i32$0 = $3;
   i64toi32_i32$4 = 1048576;
   HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = 0;
   HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$4;
   HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] = +HEAPF64[(i64toi32_i32$0 + 8 | 0) >> 3] * 2.2250738585072014e-308;
   $6 = $0 + 1.0;
   $0 = $6 + ($5 + ($4 - $0) + ($0 + (1.0 - $6))) + -1.0;
   $0 = $0 == 0.0 ? 0.0 : $0;
  }
  return +($0 * 2.2250738585072014e-308);
 }
 
 function __lockfile($0) {
  $0 = $0 | 0;
  return 1 | 0;
 }
 
 function __unlockfile($0) {
  $0 = $0 | 0;
 }
 
 function __towrite($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = 0;
  HEAP32[($0 + 8 | 0) >> 2] = 0;
  $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $1;
  HEAP32[($0 + 20 | 0) >> 2] = $1;
  HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function __overflow($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP8[($2 + 15 | 0) >> 0] = $1;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $3 = -1;
    if (__towrite($0 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $4 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    if (($4 | 0) == ($3 | 0)) {
     break label$3
    }
    $3 = $1 & 255 | 0;
    if ((HEAP32[($0 + 80 | 0) >> 2] | 0 | 0) == ($3 | 0)) {
     break label$3
    }
    HEAP32[($0 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $1;
    break label$1;
   }
   $3 = -1;
   if ((FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, $2 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $3 = HEAPU8[($2 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function fputc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    $2 = HEAP32[($1 + 76 | 0) >> 2] | 0;
    if (($2 | 0) < (0 | 0)) {
     break label$2
    }
    if (!$2) {
     break label$1
    }
    if (($2 & -1073741825 | 0 | 0) != (HEAP32[((__get_tp() | 0) + 16 | 0) >> 2] | 0 | 0)) {
     break label$1
    }
   }
   label$3 : {
    $2 = $0 & 255 | 0;
    if (($2 | 0) == (HEAP32[($1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $3 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (($3 | 0) == (HEAP32[($1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $3 + 1 | 0;
    HEAP8[$3 >> 0] = $0;
    return $2 | 0;
   }
   return __overflow($1 | 0, $2 | 0) | 0 | 0;
  }
  return locking_putc($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function locking_putc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = HEAP32[($1 + 76 | 0) >> 2] | 0;
  HEAP32[($1 + 76 | 0) >> 2] = $2 ? $2 : 1073741823;
  label$1 : {
   if (!$2) {
    break label$1
   }
   __lockfile($1 | 0) | 0;
  }
  $2 = $1 + 76 | 0;
  label$2 : {
   label$3 : {
    $3 = $0 & 255 | 0;
    if (($3 | 0) == (HEAP32[($1 + 80 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    $4 = HEAP32[($1 + 20 | 0) >> 2] | 0;
    if (($4 | 0) == (HEAP32[($1 + 16 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    HEAP32[($1 + 20 | 0) >> 2] = $4 + 1 | 0;
    HEAP8[$4 >> 0] = $0;
    break label$2;
   }
   $3 = __overflow($1 | 0, $3 | 0) | 0;
  }
  $1 = HEAP32[$2 >> 2] | 0;
  HEAP32[$2 >> 2] = 0;
  label$4 : {
   if (!($1 & 1073741824 | 0)) {
    break label$4
   }
   emscripten_futex_wake($2 | 0, 1 | 0) | 0;
  }
  return $3 | 0;
 }
 
 function __fwritex($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
    if ($3) {
     break label$2
    }
    $4 = 0;
    if (__towrite($2 | 0) | 0) {
     break label$1
    }
    $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
    if (($3 - $5 | 0) >>> 0 >= $1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP32[($2 + 80 | 0) >> 2] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    label$6 : while (1) {
     label$7 : {
      $3 = $4;
      if ($3) {
       break label$7
      }
      $3 = 0;
      break label$4;
     }
     $4 = $3 + -1 | 0;
     if ((HEAPU8[($0 + $4 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4 = FUNCTION_TABLE[HEAP32[($2 + 36 | 0) >> 2] | 0 | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = HEAP32[($2 + 20 | 0) >> 2] | 0;
   }
   __memcpy($5 | 0, $0 | 0, $1 | 0) | 0;
   HEAP32[($2 + 20 | 0) >> 2] = (HEAP32[($2 + 20 | 0) >> 2] | 0) + $1 | 0;
   $4 = $3 + $1 | 0;
  }
  return $4 | 0;
 }
 
 function fwrite($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = Math_imul($2, $1);
  label$1 : {
   label$2 : {
    if ((HEAP32[($3 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
     break label$2
    }
    $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
    break label$1;
   }
   $5 = __lockfile($3 | 0) | 0;
   $0 = __fwritex($0 | 0, $4 | 0, $3 | 0) | 0;
   if (!$5) {
    break label$1
   }
   __unlockfile($3 | 0);
  }
  label$3 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$3
   }
   return ($1 ? $2 : 0) | 0;
  }
  return ($0 >>> 0) / ($1 >>> 0) | 0 | 0;
 }
 
 function __math_divzero($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0 ? -1.0 : 1.0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3] / 0.0);
 }
 
 function __math_invalid($0) {
  $0 = +$0;
  $0 = $0 - $0;
  return +($0 / $0);
 }
 
 function log($0) {
  $0 = +$0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $2 = 0.0, $1 = 0, $1$hi = 0, $8 = 0, $6 = 0.0, $7 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $22 = 0, $9 = 0, $9$hi = 0, $23 = 0, $24 = 0, $129 = 0.0, $142 = 0.0, $145 = 0, $145$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1;
   i64toi32_i32$1 = -1072562176;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$2 = 198911;
   i64toi32_i32$3 = -1;
   if (i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$5 = 1072693248;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$2
    }
    return +(0.0);
   }
   $0 = $0 + -1.0;
   $2 = $0 * 134217728.0;
   $2 = $0 + $2 - $2;
   $3 = +HEAPF64[(0 + 147024 | 0) >> 3];
   $4 = $2 * $2 * $3;
   $5 = $0 + $4;
   $6 = $0 * $0;
   $7 = $0 * $6;
   return +($5 + ($7 * ($7 * ($7 * ($7 * +HEAPF64[(0 + 147104 | 0) >> 3] + ($6 * +HEAPF64[(0 + 147096 | 0) >> 3] + ($0 * +HEAPF64[(0 + 147088 | 0) >> 3] + +HEAPF64[(0 + 147080 | 0) >> 3]))) + ($6 * +HEAPF64[(0 + 147072 | 0) >> 3] + ($0 * +HEAPF64[(0 + 147064 | 0) >> 3] + +HEAPF64[(0 + 147056 | 0) >> 3]))) + ($6 * +HEAPF64[(0 + 147048 | 0) >> 3] + ($0 * +HEAPF64[(0 + 147040 | 0) >> 3] + +HEAPF64[(0 + 147032 | 0) >> 3]))) + (($0 - $2) * $3 * ($0 + $2) + ($4 + ($0 - $5)))));
  }
  label$3 : {
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 48;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $22 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
     $22 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$1 | 0) | 0;
    }
    $8 = $22;
    if (($8 + -32752 | 0) >>> 0 > -32737 >>> 0) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$5 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$5
     }
     return +(+__math_divzero(1 | 0));
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0) {
     break label$3
    }
    label$6 : {
     label$7 : {
      if ($8 & 32768 | 0) {
       break label$7
      }
      if (($8 & 32752 | 0 | 0) != (32752 | 0)) {
       break label$6
      }
     }
     return +(+__math_invalid(+$0));
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    i64toi32_i32$5 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -54525952;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$3 = -1072037888;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 52;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$1 >> 31 | 0;
    $23 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$1 >> i64toi32_i32$3 | 0;
    $23 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $6 = +($23 | 0);
   $129 = $6 * +HEAPF64[(0 + 146968 | 0) >> 3];
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$1 = $9;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 45;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $24 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $24 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
   }
   $8 = ($24 & 127 | 0) << 4 | 0;
   $7 = $129 + +HEAPF64[($8 + 147120 | 0) >> 3];
   $142 = +HEAPF64[($8 + 147112 | 0) >> 3];
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$5 = $9;
   i64toi32_i32$1 = -1048576;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $145 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   $145$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$5 = $145$hi;
   i64toi32_i32$2 = $145;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   i64toi32_i32$0 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = $142 * (+wasm2js_scratch_load_f64() - +HEAPF64[($8 + 149160 | 0) >> 3] - +HEAPF64[($8 + 149168 | 0) >> 3]);
   $3 = $7 + $0;
   $2 = $0 * $0;
   $0 = $3 + ($0 * $2 * ($2 * ($0 * +HEAPF64[(0 + 147016 | 0) >> 3] + +HEAPF64[(0 + 147008 | 0) >> 3]) + ($0 * +HEAPF64[(0 + 147e3 | 0) >> 3] + +HEAPF64[(0 + 146992 | 0) >> 3])) + ($2 * +HEAPF64[(0 + 146984 | 0) >> 3] + ($6 * +HEAPF64[(0 + 146976 | 0) >> 3] + ($0 + ($7 - $3)))));
  }
  return +$0;
 }
 
 function strlen($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   label$2 : {
    if (!($1 & 3 | 0)) {
     break label$2
    }
    $1 = $0;
    label$3 : while (1) {
     if (!(HEAPU8[$1 >> 0] | 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = HEAP32[$2 >> 2] | 0;
    if (!((($3 ^ -1 | 0) & ($3 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3 & 255 | 0) {
     break label$5
    }
    return $2 - $0 | 0 | 0;
   }
   label$6 : while (1) {
    $3 = HEAPU8[($2 + 1 | 0) >> 0] | 0;
    $1 = $2 + 1 | 0;
    $2 = $1;
    if ($3) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1 - $0 | 0 | 0;
 }
 
 function scalbn($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $32 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    label$3 : {
     if ($1 >>> 0 >= 2047 >>> 0) {
      break label$3
     }
     $1 = $1 + -1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) < (3069 | 0) ? $1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   label$4 : {
    if ($1 >>> 0 <= -1992 >>> 0) {
     break label$4
    }
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) > (-2960 | 0) ? $1 : -2960) + 1938 | 0;
  }
  $32 = $0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32 * +wasm2js_scratch_load_f64());
 }
 
 function __fpclassifyl($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2$hi = 0, $2 = 0, $13 = 0, $3 = 0, $4 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $2 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $2$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $13 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $13 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3 = $13 & 32767 | 0;
    if (($3 | 0) == (32767 | 0)) {
     break label$2
    }
    $4 = 4;
    if ($3) {
     break label$1
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    return (!(i64toi32_i32$1 | i64toi32_i32$3 | 0 | i64toi32_i32$0 | 0) ? 2 : 3) | 0;
   }
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = !(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0);
  }
  return $4 | 0;
 }
 
 function fmodl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10 = 0, $9$hi = 0, $8 = 0, $9 = 0, $6 = 0, i64toi32_i32$6 = 0, $11$hi = 0, $64 = 0, $7 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $70 = 0, $11 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $52 = 0, $52$hi = 0, $55$hi = 0, $57 = 0, $57$hi = 0, $59 = 0, $59$hi = 0, $60 = 0, $60$hi = 0, $67$hi = 0, $69 = 0, $69$hi = 0, $131$hi = 0, $134 = 0, $135$hi = 0, $156 = 0, $156$hi = 0, $158$hi = 0, $161 = 0, $161$hi = 0, $163$hi = 0, $175$hi = 0, $178 = 0, $179$hi = 0, $208 = 0, $208$hi = 0, $210$hi = 0, $219 = 0, $220 = 0, $220$hi = 0, $222 = 0, $222$hi = 0, $228$hi = 0, $229 = 0, $229$hi = 0, $236 = 0, $236$hi = 0, $241$hi = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 0;
     if (!(__letf2($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0) | 0)) {
      break label$3
     }
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     $6 = __fpclassifyl($3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 48;
     i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $64 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $64 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7 = $64;
     $8 = $7 & 32767 | 0;
     if (($8 | 0) == (32767 | 0)) {
      break label$3
     }
     if ($6) {
      break label$2
     }
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    __multf3($5 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$1 = (i64toi32_i32$1 + 16 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $3 = i64toi32_i32$2;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$2;
    __divtf3($5 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = $5 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $1$hi;
    $52 = $1;
    $52$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $8;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $65 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $65 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $55$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    $57 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $57$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $55$hi;
    i64toi32_i32$1 = $65;
    i64toi32_i32$3 = $57$hi;
    i64toi32_i32$0 = $57;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $9 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $9$hi = i64toi32_i32$3;
    $59 = $9;
    $59$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    $60 = $3;
    $60$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $66 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $66 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $66 & 32767 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = $6;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $67 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $67 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    $67$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $69 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    $69$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $67$hi;
    i64toi32_i32$2 = $67;
    i64toi32_i32$1 = $69$hi;
    i64toi32_i32$0 = $69;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $10 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $10$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $52$hi;
    i64toi32_i32$2 = $59$hi;
    i64toi32_i32$3 = $60$hi;
    i64toi32_i32$0 = $10$hi;
    if ((__letf2($52 | 0, i64toi32_i32$1 | 0, $59 | 0, i64toi32_i32$2 | 0, $60 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$0 | 0) | 0 | 0) > (0 | 0)) {
     break label$4
    }
    label$5 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $9$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $10$hi;
     if (!(__letf2($1 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$2 | 0, $10 | 0, i64toi32_i32$1 | 0) | 0)) {
      break label$5
     }
     i64toi32_i32$1 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$1;
     break label$1;
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    __multf3($5 + 112 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$2 = $5 + 120 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   label$6 : {
    label$7 : {
     if (!$8) {
      break label$7
     }
     i64toi32_i32$0 = $1$hi;
     $4 = $1;
     $4$hi = i64toi32_i32$0;
     break label$6;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1081540608;
    __multf3($5 + 96 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$1;
    $9$hi = i64toi32_i32$2;
    i64toi32_i32$3 = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 48;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $68 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $68 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $8 = $68 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 96 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 100 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
   }
   label$8 : {
    if ($6) {
     break label$8
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1081540608;
    __multf3($5 + 80 | 0 | 0, $3 | 0, i64toi32_i32$3 | 0, $10 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5 + 88 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $10 = i64toi32_i32$0;
    $10$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 48;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $70 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $70 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6 = $70 + -120 | 0;
    i64toi32_i32$2 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $11 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $9$hi;
   i64toi32_i32$0 = $9;
   i64toi32_i32$1 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $9 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $9$hi = i64toi32_i32$0;
   label$9 : {
    if (($8 | 0) <= ($6 | 0)) {
     break label$9
    }
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$0 = $11$hi;
       i64toi32_i32$0 = $9$hi;
       i64toi32_i32$1 = $9;
       i64toi32_i32$2 = $11$hi;
       i64toi32_i32$3 = $11;
       i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
       i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
       i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
       $131$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$5 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$3 = $3;
       $134 = $4$hi >>> 0 < i64toi32_i32$1 >>> 0 | (($4$hi | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
       i64toi32_i32$0 = 0;
       $135$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $131$hi;
       i64toi32_i32$3 = i64toi32_i32$4;
       i64toi32_i32$5 = $135$hi;
       i64toi32_i32$1 = $134;
       i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
       i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0;
       i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
       i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$4 | 0;
       $10 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       i64toi32_i32$0 = i64toi32_i32$2;
       i64toi32_i32$3 = 0;
       i64toi32_i32$1 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$3 | 0)) {
        $71 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$1 >>> 0) {
          $72 = 0
         } else {
          $72 = 1
         }
         $73 = $72;
        } else {
         $73 = 0
        }
        $71 = $73;
       }
       if ($71) {
        break label$12
       }
       label$13 : {
        i64toi32_i32$0 = $10$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$0 = $3$hi;
        i64toi32_i32$0 = $4$hi;
        i64toi32_i32$1 = $4;
        i64toi32_i32$4 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
        i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
        i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
        $4 = i64toi32_i32$5;
        $4$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $10$hi;
        i64toi32_i32$0 = $10;
        i64toi32_i32$1 = $4$hi;
        i64toi32_i32$3 = $4;
        i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
        i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
         break label$13
        }
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$2 = $2$hi;
        i64toi32_i32$2 = $1$hi;
        i64toi32_i32$1 = $2$hi;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 0;
        __multf3($5 + 32 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$0 | 0);
        i64toi32_i32$1 = $5 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
        $2 = i64toi32_i32$0;
        $2$hi = i64toi32_i32$3;
        i64toi32_i32$1 = $5;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$3;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$1 = $10;
       i64toi32_i32$3 = 0;
       i64toi32_i32$2 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
        $74 = 0;
       } else {
        i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
        $74 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       }
       $156 = $74;
       $156$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $4$hi;
       i64toi32_i32$0 = $4;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 63;
       i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
       if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
        i64toi32_i32$1 = 0;
        $75 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       } else {
        i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
        $75 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
       }
       $158$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $156$hi;
       i64toi32_i32$3 = $156;
       i64toi32_i32$0 = $158$hi;
       i64toi32_i32$2 = $75;
       i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
       $9 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
       $9$hi = i64toi32_i32$0;
       break label$11;
      }
      i64toi32_i32$0 = $9$hi;
      i64toi32_i32$1 = $9;
      i64toi32_i32$3 = 0;
      i64toi32_i32$2 = 1;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
       $76 = 0;
      } else {
       i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
       $76 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      }
      $161 = $76;
      $161$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $4$hi;
      i64toi32_i32$0 = $4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$2 = 63;
      i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $77 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
       $77 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
      }
      $163$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $161$hi;
      i64toi32_i32$3 = $161;
      i64toi32_i32$0 = $163$hi;
      i64toi32_i32$2 = $77;
      i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
      $9 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $9$hi = i64toi32_i32$0;
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $78 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
      $78 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $4 = $78;
     $4$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     if (($8 | 0) > ($6 | 0)) {
      continue label$10
     }
     break label$10;
    };
    $8 = $6;
   }
   label$14 : {
    label$15 : {
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$0 = $9;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$4 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
     $175$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$2 = $3;
     $178 = $4$hi >>> 0 < i64toi32_i32$0 >>> 0 | (($4$hi | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $179$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $175$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $179$hi;
     i64toi32_i32$0 = $178;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$2 | 0)) {
      $79 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        $80 = 0
       } else {
        $80 = 1
       }
       $81 = $80;
      } else {
       $81 = 0
      }
      $79 = $81;
     }
     if ($79) {
      break label$15
     }
     i64toi32_i32$3 = $9$hi;
     $10 = $9;
     $10$hi = i64toi32_i32$3;
     break label$14;
    }
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$5;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $10$hi;
    i64toi32_i32$3 = $10;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$14
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    __multf3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5 + 56 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$16 : {
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$0 = $10;
    i64toi32_i32$2 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$16
    }
    label$17 : while (1) {
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 63;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $82 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $82 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $3 = $82;
     $3$hi = i64toi32_i32$3;
     $8 = $8 + -1 | 0;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$0 = $4;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $83 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
      $83 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $4 = $83;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $208 = $3;
     $208$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $10;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 1;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
      $84 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $84 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     }
     $210$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $208$hi;
     i64toi32_i32$1 = $208;
     i64toi32_i32$3 = $210$hi;
     i64toi32_i32$2 = $84;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $10 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     $10$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $10;
     i64toi32_i32$1 = 65536;
     i64toi32_i32$2 = 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
      continue label$17
     }
     break label$17;
    };
   }
   $6 = $7 & 32768 | 0;
   label$18 : {
    if (($8 | 0) > (0 | 0)) {
     break label$18
    }
    $219 = $5 + 64 | 0;
    i64toi32_i32$0 = $4$hi;
    $220 = $4;
    $220$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    $222 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $222$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = $8 + 120 | 0 | $6 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $85 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $85 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $228$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $222$hi;
    i64toi32_i32$3 = $222;
    i64toi32_i32$0 = $228$hi;
    i64toi32_i32$1 = $85;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $229 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $229$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $220$hi;
    i64toi32_i32$3 = $229$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = 1065811968;
    __multf3($219 | 0, $220 | 0, i64toi32_i32$0 | 0, $229 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$3 = $5 + 72 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$1;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$3 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$3 = $10;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $236 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $236$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = $8 | $6 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $86 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $86 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $241$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $236$hi;
   i64toi32_i32$2 = $236;
   i64toi32_i32$1 = $241$hi;
   i64toi32_i32$0 = $86;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $2$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 128 | 0;
 }
 
 function __letf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4 = 0, $5 = 0, $6 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = 1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    $4 = -1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   $4 = -1;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __getf2($0, $0$hi, $1, $1$hi, $2, $2$hi, $3, $3$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $5 = 0, $6 = 0, $4 = 0, $5$hi = 0, $6$hi = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $8 = 0, $12 = 0, $17 = 0, $21 = 0, $27 = 0, $27$hi = 0, $30 = 0, $30$hi = 0, $40 = 0, $50 = 0, $50$hi = 0, $53 = 0, $53$hi = 0, $58 = 0, $68 = 0, $68$hi = 0, $71 = 0, $71$hi = 0;
  $4 = -1;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 0;
   $8 = (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 2147483647;
   i64toi32_i32$1 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   $5 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $8 : $12) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 0;
   $17 = (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 2147483647;
   i64toi32_i32$2 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $6 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
   $6$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $6;
   i64toi32_i32$0 = 2147418112;
   i64toi32_i32$2 = 0;
   $21 = i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 2147418112;
   i64toi32_i32$0 = 0;
   if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) | 0 ? $17 : $21) {
    break label$1
   }
   label$2 : {
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    $27 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $27$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = $6$hi;
    i64toi32_i32$2 = $6;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $30 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
    $30$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $27$hi;
    i64toi32_i32$3 = $27;
    i64toi32_i32$2 = $30$hi;
    i64toi32_i32$1 = $30;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    if (!!(i64toi32_i32$3 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
     break label$2
    }
    return 0 | 0;
   }
   label$3 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$3
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$0 = $2;
    $40 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $38 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $39 = 0
      } else {
       $39 = 1
      }
      $41 = $39;
     } else {
      $41 = 0
     }
     $38 = $41;
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$2 = $3;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $40 : $38) {
     break label$1
    }
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
    $50 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
    $50$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $3$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
    $53 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
    $53$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $50$hi;
    i64toi32_i32$0 = $50;
    i64toi32_i32$3 = $53$hi;
    i64toi32_i32$1 = $53;
    i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 0;
    return (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0 | 0;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$1 = $0;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   $58 = i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3;
   if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
    $42 = 1
   } else {
    if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $43 = 0
     } else {
      $43 = 1
     }
     $44 = $43;
    } else {
     $44 = 0
    }
    $42 = $44;
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $3;
   if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $58 : $42) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$2 = $0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = i64toi32_i32$3 ^ i64toi32_i32$0 | 0;
   $68 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
   $68$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $71 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $71$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $68$hi;
   i64toi32_i32$0 = $68;
   i64toi32_i32$3 = $71$hi;
   i64toi32_i32$1 = $71;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 0;
   $4 = (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0;
  }
  return $4 | 0;
 }
 
 function __ashlti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2 = $18;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1 = $22;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __divtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5 = 0, i64toi32_i32$6 = 0, $12$hi = 0, $6$hi = 0, $7$hi = 0, $12 = 0, $6 = 0, $16$hi = 0, $7 = 0, $8$hi = 0, $17$hi = 0, $8 = 0, $9 = 0, $16 = 0, $22$hi = 0, $15$hi = 0, $14$hi = 0, $11 = 0, $17 = 0, $18$hi = 0, $22 = 0, $14 = 0, $15 = 0, $18 = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $23$hi = 0, $13 = 0, $317 = 0, $318 = 0, $10 = 0, $319 = 0, $321 = 0, $322 = 0, $323 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $338 = 0, $339 = 0, $19 = 0, $340 = 0, $341 = 0, $343 = 0, $344 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $352 = 0, $353 = 0, $354 = 0, $23 = 0, $355 = 0, $357 = 0, $358 = 0, $359 = 0, $360 = 0, $361 = 0, $362 = 0, $364 = 0, $365 = 0, $366 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $50 = 0, $54 = 0, $61 = 0, $65 = 0, $74 = 0, $74$hi = 0, $79 = 0, $79$hi = 0, $87 = 0, $87$hi = 0, $109 = 0, $110 = 0, $110$hi = 0, $111 = 0, $111$hi = 0, $118$hi = 0, $121$hi = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $163 = 0, $165 = 0, $165$hi = 0, $169$hi = 0, $180 = 0, $180$hi = 0, $181$hi = 0, $184 = 0, $187 = 0, $187$hi = 0, $192$hi = 0, $202 = 0, $202$hi = 0, $203$hi = 0, $205 = 0, $208 = 0, $208$hi = 0, $213$hi = 0, $223 = 0, $223$hi = 0, $224$hi = 0, $226 = 0, $229 = 0, $229$hi = 0, $234$hi = 0, $244 = 0, $244$hi = 0, $245$hi = 0, $247 = 0, $248 = 0, $248$hi = 0, $251 = 0, $251$hi = 0, $256$hi = 0, $261 = 0, $263$hi = 0, $266 = 0, $267 = 0, $267$hi = 0, $271 = 0, $271$hi = 0, $278 = 0, $278$hi = 0, $282 = 0, $283$hi = 0, $284$hi = 0, $286 = 0, $287$hi = 0, $288$hi = 0, $289$hi = 0, $293$hi = 0, $304 = 0, $304$hi = 0, $307 = 0, $307$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $320 = 0, $320$hi = 0, $19$hi = 0, $324 = 0, $324$hi = 0, $326$hi = 0, $332 = 0, $332$hi = 0, $337 = 0, $337$hi = 0, $342 = 0, $342$hi = 0, $344$hi = 0, $345 = 0, $345$hi = 0, $347$hi = 0, $348$hi = 0, $351 = 0, $352$hi = 0, $353$hi = 0, $356 = 0, $357$hi = 0, $363 = 0, $363$hi = 0, $367 = 0, $368 = 0, $368$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382$hi = 0, $385 = 0, $385$hi = 0, $386 = 0, $386$hi = 0, $393 = 0, $393$hi = 0, $399 = 0, $399$hi = 0, $401$hi = 0, $402 = 0, $402$hi = 0, $403 = 0, $403$hi = 0, $404 = 0, $404$hi = 0, $406$hi = 0, $410 = 0, $411$hi = 0, $412 = 0, $412$hi = 0, $413 = 0, $413$hi = 0, $422 = 0, $422$hi = 0, $426 = 0, $427 = 0, $427$hi = 0, $433 = 0, $433$hi = 0, $437 = 0, $438$hi = 0, $439$hi = 0, $443 = 0, $444$hi = 0, $445 = 0, $445$hi = 0, $446 = 0, $446$hi = 0, $453 = 0, $453$hi = 0, $458 = 0, $458$hi = 0, $463 = 0, $463$hi = 0, $466 = 0, $466$hi = 0, $469 = 0, $470$hi = 0, $473 = 0, $474$hi = 0, $475$hi = 0, $478 = 0, $479$hi = 0, $481$hi = 0, $482 = 0, $482$hi = 0, $486 = 0, $487$hi = 0, $488 = 0, $488$hi = 0, $489 = 0, $489$hi = 0, $490 = 0, $490$hi = 0, $497 = 0, $497$hi = 0, $500 = 0, $500$hi = 0, $503 = 0, $505$hi = 0, $506 = 0, $506$hi = 0, $511 = 0, $511$hi = 0, $512 = 0, $512$hi = 0, $514$hi = 0, $515$hi = 0, $517 = 0, $518$hi = 0, $519$hi = 0, $523 = 0, $524$hi = 0, $535$hi = 0, $539 = 0, $539$hi = 0, $540$hi = 0, $544 = 0, $545$hi = 0, $552 = 0, $554 = 0, $554$hi = 0, $556$hi = 0, $558 = 0, $558$hi = 0, $565$hi = 0, $569 = 0, $569$hi = 0, $570$hi = 0, $574 = 0, $575$hi = 0, $590 = 0, $590$hi = 0, $592$hi = 0, $596$hi = 0, $598 = 0, $598$hi = 0, $631 = 0, $631$hi = 0, $636 = 0, $636$hi = 0, $640$hi = 0, $641 = 0, $641$hi = 0, $642 = 0, $642$hi = 0, $645 = 0, $645$hi = 0, $649 = 0, $650$hi = 0, $662 = 0, $662$hi = 0, $663 = 0, $663$hi = 0, $671 = 0, $675 = 0, $676$hi = 0, $680 = 0, $684 = 0, $685$hi = 0, $689 = 0, $690$hi = 0, $692 = 0, $692$hi = 0, $695 = 0, $698 = 0, $698$hi = 0, $699 = 0, $706 = 0, $711 = 0, $712$hi = 0, $716 = 0, $717$hi = 0, $719 = 0, $719$hi = 0, $722 = 0, $725 = 0, $725$hi = 0, $726 = 0, $732 = 0, $737 = 0, $738$hi = 0, $742 = 0, $743$hi = 0, $744$hi = 0;
  $5 = __stack_pointer - 336 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $7 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$2 = i64toi32_i32$1;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $317 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $317 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $317 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $318 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $318 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $10 = $318 & 32767 | 0;
     if (($10 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $11 = 0;
     if (($9 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$0 = $1$hi;
     $50 = !($1 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
     $12 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     $12$hi = i64toi32_i32$1;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     $54 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = $12;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) | 0 ? $50 : $54) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $8$hi = i64toi32_i32$0;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$0 = $3$hi;
     $61 = !($3 | i64toi32_i32$0 | 0);
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     $65 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $2;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) | 0 ? $61 : $65) {
      break label$5
     }
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $74 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
     $74$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = $74$hi;
     i64toi32_i32$2 = $74;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$2 = $2;
      i64toi32_i32$1 = 2147418112;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
      $79 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
      $79$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$2 = $79$hi;
      i64toi32_i32$0 = $79;
      i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 2147450880;
      $8 = 0;
      $8$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $8 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$3;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
     $87 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $87$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $87$hi;
     i64toi32_i32$0 = $87;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$9 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$3 = $12;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$9
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = !(i64toi32_i32$3 | i64toi32_i32$0 | 0 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = 2147450880;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $8;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$2 = $8;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $8 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     $8$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    $11 = 0;
    label$11 : {
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$2 = 65535;
     i64toi32_i32$4 = -1;
     if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
      break label$11
     }
     $109 = $5 + 320 | 0;
     i64toi32_i32$1 = $1$hi;
     $110 = $1;
     $110$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     $111 = $7;
     $111$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $7$hi;
     $11 = !($7 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $11;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = i64toi32_i32$3 ? $1 : $7;
     i64toi32_i32$4 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$0;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$4);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $319 = Math_clz32(i64toi32_i32$2) + 32 | 0
     } else {
      $319 = i64toi32_i32$1
     }
     $118$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $121$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $118$hi;
     i64toi32_i32$2 = $319;
     i64toi32_i32$4 = $121$hi;
     i64toi32_i32$1 = $11 << 6 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $11 = i64toi32_i32$0;
     i64toi32_i32$5 = $110$hi;
     i64toi32_i32$2 = $111$hi;
     __ashlti3($109 | 0, $110 | 0, i64toi32_i32$5 | 0, $111 | 0, i64toi32_i32$2 | 0, i64toi32_i32$0 + -15 | 0 | 0);
     $11 = 16 - i64toi32_i32$0 | 0;
     i64toi32_i32$3 = $5 + 328 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $7 = i64toi32_i32$2;
     $7$hi = i64toi32_i32$5;
     i64toi32_i32$3 = $5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
     $1 = i64toi32_i32$5;
     $1$hi = i64toi32_i32$2;
    }
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$5 = 65535;
    i64toi32_i32$1 = -1;
    if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
     break label$2
    }
    $136 = $5 + 304 | 0;
    i64toi32_i32$3 = $3$hi;
    $137 = $3;
    $137$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $6$hi;
    $138 = $6;
    $138$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$3 = $6$hi;
    $13 = !($6 | i64toi32_i32$3 | 0);
    i64toi32_i32$4 = $13;
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $6;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$2;
    i64toi32_i32$3 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$4 = 0;
    if ((i64toi32_i32$3 | 0) == (32 | 0)) {
     $321 = Math_clz32(i64toi32_i32$5) + 32 | 0
    } else {
     $321 = i64toi32_i32$3
    }
    $145$hi = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    $148$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $145$hi;
    i64toi32_i32$5 = $321;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$3 = $13 << 6 | 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $13 = i64toi32_i32$2;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$5 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$5 | 0, i64toi32_i32$2 + -15 | 0 | 0);
    $11 = (i64toi32_i32$2 + $11 | 0) + -16 | 0;
    i64toi32_i32$4 = $5 + 312 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$5;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $3 = i64toi32_i32$0;
    $3$hi = i64toi32_i32$5;
   }
   $163 = $5 + 288 | 0;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 49;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $322 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
    $322 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
   }
   $165 = $322;
   $165$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$5 = $6;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $14 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $14$hi = i64toi32_i32$4;
   i64toi32_i32$0 = $14;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 15;
   i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    $323 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $323 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
   }
   $169$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $165$hi;
   i64toi32_i32$4 = $165;
   i64toi32_i32$0 = $169$hi;
   i64toi32_i32$3 = $323;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1963258675;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$4;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($163 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$5 = ($5 + 288 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $180 = i64toi32_i32$3;
   $180$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $180$hi;
   i64toi32_i32$2 = $180;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 - i64toi32_i32$1 | 0;
   $181$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $181$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 272 | 0 | 0, i64toi32_i32$4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $184 = $5 + 256 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 272 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 276 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $325 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $325 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $187 = $325;
   $187$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5 + 272 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $326 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $326 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $192$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $187$hi;
   i64toi32_i32$5 = $187;
   i64toi32_i32$0 = $192$hi;
   i64toi32_i32$1 = $326;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   __multi3($184 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5 + 256 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $202 = i64toi32_i32$1;
   $202$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $202$hi;
   i64toi32_i32$0 = $202;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
   $203$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $203$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 240 | 0 | 0, $4 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $205 = $5 + 224 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 240 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 244 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 63;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $327 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
    $327 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
   }
   $208 = $327;
   $208$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5 + 240 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $328 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$1 | 0) | 0;
    $328 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $213$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $208$hi;
   i64toi32_i32$5 = $208;
   i64toi32_i32$2 = $213$hi;
   i64toi32_i32$4 = $328;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$4 = 0;
   __multi3($205 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$5 = ($5 + 224 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $223 = i64toi32_i32$4;
   $223$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = $223$hi;
   i64toi32_i32$2 = $223;
   i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = $224$hi;
   i64toi32_i32$2 = 0;
   __multi3($5 + 208 | 0 | 0, $4 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0);
   $226 = $5 + 192 | 0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 208 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 212 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 63;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $329 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $329 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$4 | 0) | 0;
   }
   $229 = $329;
   $229$hi = i64toi32_i32$2;
   i64toi32_i32$0 = ($5 + 208 | 0) + 8 | 0;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $330 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$4 | 0) | 0;
    $330 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $234$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $229$hi;
   i64toi32_i32$5 = $229;
   i64toi32_i32$0 = $234$hi;
   i64toi32_i32$3 = $330;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = 0;
   __multi3($226 | 0, $4 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$5 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$5 = ($5 + 192 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $244 = i64toi32_i32$3;
   $244$hi = i64toi32_i32$2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = $244$hi;
   i64toi32_i32$0 = $244;
   i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0;
   i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $245$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $245$hi;
   i64toi32_i32$0 = 0;
   __multi3($5 + 176 | 0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $247 = $5 + 160 | 0;
   i64toi32_i32$0 = $2$hi;
   $248 = $2;
   $248$hi = i64toi32_i32$0;
   i64toi32_i32$5 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 176 | 0) >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 180 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 63;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $331 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $331 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $251 = $331;
   $251$hi = i64toi32_i32$0;
   i64toi32_i32$2 = ($5 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $333 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
    $333 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $256$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $251$hi;
   i64toi32_i32$5 = $251;
   i64toi32_i32$2 = $256$hi;
   i64toi32_i32$1 = $333;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $248$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = 0;
   __multi3($247 | 0, $248 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0);
   $261 = $5 + 144 | 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $334 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$5 | 0) | 0;
    $334 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $263$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $263$hi;
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = 0;
   __multi3($261 | 0, $334 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0);
   $266 = $5 + 112 | 0;
   i64toi32_i32$4 = i64toi32_i32$1;
   $267 = $4;
   $267$hi = i64toi32_i32$1;
   i64toi32_i32$0 = ($5 + 160 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $271 = i64toi32_i32$4;
   $271$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 160 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 164 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$0 = (i64toi32_i32$0 + 144 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $278 = i64toi32_i32$4;
   $278$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$4 = $278$hi;
   i64toi32_i32$2 = $278;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$5;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$2 = $6;
   $282 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $283$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $271$hi;
   i64toi32_i32$2 = $271;
   i64toi32_i32$3 = $283$hi;
   i64toi32_i32$0 = $282;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $284$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = 1;
   $286 = i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $287$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $284$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = $287$hi;
   i64toi32_i32$2 = $286;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $288$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = $288$hi;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
   i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   $289$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $267$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = $289$hi;
   i64toi32_i32$2 = 0;
   __multi3($266 | 0, $267 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$5 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$3 = $2;
   i64toi32_i32$0 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
   i64toi32_i32$6 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0;
   i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
   $293$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = $293$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = 0;
   __multi3($5 + 128 | 0 | 0, i64toi32_i32$0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   $9 = $11 + ($10 - $9 | 0) | 0;
   label$12 : {
    label$13 : {
     i64toi32_i32$1 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $335 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $335 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $16 = $335;
     $16$hi = i64toi32_i32$3;
     $304 = $16;
     $304$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 128 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 132 | 0) >> 2] | 0;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $336 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $336 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $307 = $336;
     $307$hi = i64toi32_i32$3;
     i64toi32_i32$1 = ($5 + 128 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $17 = i64toi32_i32$3;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
      $338 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $338 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     }
     $313$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $307$hi;
     i64toi32_i32$2 = $307;
     i64toi32_i32$1 = $313$hi;
     i64toi32_i32$5 = $338;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $314 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
     $314$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $304$hi;
     i64toi32_i32$3 = $304;
     i64toi32_i32$2 = $314$hi;
     i64toi32_i32$5 = $314;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$3 = -1;
     i64toi32_i32$5 = -13927;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $18 = i64toi32_i32$2;
     $18$hi = i64toi32_i32$4;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $339 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $339 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $2 = $339;
     $2$hi = i64toi32_i32$1;
     $320 = $2;
     $320$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$4 = $7;
     i64toi32_i32$0 = 65536;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $19 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $19;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $340 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $340 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $324 = $340;
     $324$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $341 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $341 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
     }
     $326$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $324$hi;
     i64toi32_i32$4 = $324;
     i64toi32_i32$0 = $326$hi;
     i64toi32_i32$5 = $341;
     i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $20 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
     $20$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $20;
     i64toi32_i32$4 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $343 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $343 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $4 = $343;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $320$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($320 | 0, i64toi32_i32$4 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $7 = i64toi32_i32$1;
     $7$hi = i64toi32_i32$4;
     $332 = i64toi32_i32$1;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $344 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $344 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $21 = $344;
     $21$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $21;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $346 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
      $346 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $6 = $346;
     $6$hi = i64toi32_i32$0;
     $337 = $6;
     $337$hi = i64toi32_i32$0;
     i64toi32_i32$1 = ($5 + 112 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 1;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
      $347 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $347 = i64toi32_i32$1 << i64toi32_i32$3 | 0;
     }
     $342 = $347;
     $342$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$4 = $15;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $348 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
      $348 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
     }
     $344$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $342$hi;
     i64toi32_i32$0 = $342;
     i64toi32_i32$4 = $344$hi;
     i64toi32_i32$5 = $348;
     i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
     $345 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
     $345$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$1 = $17;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 63;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $349 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
      $349 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$3 | 0) | 0;
     }
     $347$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $345$hi;
     i64toi32_i32$4 = $345;
     i64toi32_i32$1 = $347$hi;
     i64toi32_i32$5 = $349;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$0 = $12;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$5 = $16;
     $351 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $352$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$2 = $352$hi;
     i64toi32_i32$4 = $351;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $353$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$0 = $18;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$4 = $12;
     $356 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $357$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $353$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$3 = $357$hi;
     i64toi32_i32$5 = $356;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = -1;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $15 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 32;
     i64toi32_i32$4 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $350 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $350 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12 = $350;
     $12$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $337$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($337 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $363 = i64toi32_i32$1;
     $363$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $332$hi;
     i64toi32_i32$2 = $332;
     i64toi32_i32$1 = $363$hi;
     i64toi32_i32$5 = $363;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $16 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$0 = i64toi32_i32$4;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$5 = $7;
     $367 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $368 = $367;
     $368$hi = i64toi32_i32$0;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$5 = $15;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $7 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$0 = $20;
     i64toi32_i32$5 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
     $15 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
     $15$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $7$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = __wasm_i64_mul($7 | 0, i64toi32_i32$5 | 0, $15 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $376 = i64toi32_i32$0;
     $376$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$2 = $376;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $17 = i64toi32_i32$1;
     $17$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$2 = $16;
     $380 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $381$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $368$hi;
     i64toi32_i32$2 = $368;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$3 = $380;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $382$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = __wasm_i64_mul($12 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $385 = i64toi32_i32$2;
     $385$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $382$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $385$hi;
     i64toi32_i32$3 = $385;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $386 = i64toi32_i32$4;
     $386$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $22 = i64toi32_i32$5;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = $15$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = __wasm_i64_mul($15 | 0, i64toi32_i32$0 | 0, $12 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $393 = i64toi32_i32$5;
     $393$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$1 = $22;
     i64toi32_i32$5 = $393$hi;
     i64toi32_i32$3 = $393;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $16 = i64toi32_i32$2;
     $16$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$3 = $22;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $352 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $352 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $399 = $352;
     $399$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$0 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $353 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$5 | 0;
      $353 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
     }
     $401$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $399$hi;
     i64toi32_i32$4 = $399;
     i64toi32_i32$0 = $401$hi;
     i64toi32_i32$1 = $353;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $402 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $402$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $386$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$4 = $402$hi;
     i64toi32_i32$1 = $402;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $403 = i64toi32_i32$5;
     $403$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $17$hi;
     $404 = $17;
     $404$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$0 = $16;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
      $354 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
      $354 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     }
     $406$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $404$hi;
     i64toi32_i32$2 = $404;
     i64toi32_i32$0 = $406$hi;
     i64toi32_i32$1 = $354;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $16 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$1 = $17;
     $410 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $411$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $403$hi;
     i64toi32_i32$1 = $403;
     i64toi32_i32$5 = $411$hi;
     i64toi32_i32$2 = $410;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $412 = i64toi32_i32$0;
     $412$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $16$hi;
     $413 = $16;
     $413$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $18$hi;
     i64toi32_i32$3 = $18;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
     $18 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($18 | 0, i64toi32_i32$1 | 0, $15 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $22 = i64toi32_i32$3;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $6 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $422 = i64toi32_i32$3;
     $422$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $22$hi;
     i64toi32_i32$4 = $22;
     i64toi32_i32$3 = $422$hi;
     i64toi32_i32$2 = $422;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$2 = $22;
     $426 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $427 = $426;
     $427$hi = i64toi32_i32$1;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = $7$hi;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = -2;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $22 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
     $22$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $7$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$2 = __wasm_i64_mul($7 | 0, i64toi32_i32$0 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
     $433 = i64toi32_i32$2;
     $433$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $433$hi;
     i64toi32_i32$4 = $433;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $23 = i64toi32_i32$3;
     $23$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $23$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$4 = $17;
     $437 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $438$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $427$hi;
     i64toi32_i32$4 = $427;
     i64toi32_i32$5 = $438$hi;
     i64toi32_i32$1 = $437;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $439$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $413$hi;
     i64toi32_i32$0 = $413;
     i64toi32_i32$4 = $439$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $17 = i64toi32_i32$5;
     $17$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $17$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$1 = $16;
     $443 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $444$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $412$hi;
     i64toi32_i32$1 = $412;
     i64toi32_i32$2 = $444$hi;
     i64toi32_i32$0 = $443;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $445 = i64toi32_i32$4;
     $445$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     $446 = $17;
     $446$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $18$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = __wasm_i64_mul($18 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $16 = i64toi32_i32$1;
     $16$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($22 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $453 = i64toi32_i32$1;
     $453$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$3 = $16;
     i64toi32_i32$1 = $453$hi;
     i64toi32_i32$0 = $453;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $4 = i64toi32_i32$2;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
     $458 = i64toi32_i32$3;
     $458$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$3 = $458$hi;
     i64toi32_i32$0 = $458;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $12 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$5 = __wasm_i64_mul($7 | 0, i64toi32_i32$2 | 0, $6 | 0, i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $463 = i64toi32_i32$5;
     $463$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $463$hi;
     i64toi32_i32$0 = $463;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $7 = i64toi32_i32$3;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $355 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
      $355 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
     }
     $466 = $355;
     $466$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $16$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$0 = $16;
     $469 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $470$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$0 = $12;
     i64toi32_i32$2 = $4;
     $473 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $474$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $470$hi;
     i64toi32_i32$2 = $469;
     i64toi32_i32$1 = $474$hi;
     i64toi32_i32$4 = $473;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $475$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$4 = $12;
     $478 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $479$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $475$hi;
     i64toi32_i32$4 = i64toi32_i32$5;
     i64toi32_i32$3 = $479$hi;
     i64toi32_i32$2 = $478;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
      $357 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
      $357 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
     }
     $481$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $466$hi;
     i64toi32_i32$5 = $466;
     i64toi32_i32$0 = $481$hi;
     i64toi32_i32$2 = $357;
     i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $482 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
     $482$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $446$hi;
     i64toi32_i32$4 = $446;
     i64toi32_i32$5 = $482$hi;
     i64toi32_i32$2 = $482;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $17$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$2 = $17;
     $486 = i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $487$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $445$hi;
     i64toi32_i32$2 = $445;
     i64toi32_i32$1 = $487$hi;
     i64toi32_i32$4 = $486;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $488 = i64toi32_i32$5;
     $488$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $489 = $4;
     $489$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $23$hi;
     $490 = $23;
     $490$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$2 = __wasm_i64_mul($18 | 0, i64toi32_i32$3 | 0, $6 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $497 = i64toi32_i32$2;
     $497$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = $497$hi;
     i64toi32_i32$4 = $497;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $6 = i64toi32_i32$1;
     $6$hi = i64toi32_i32$5;
     i64toi32_i32$3 = i64toi32_i32$1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $358 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $358 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $500 = $358;
     $500$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$4 = $2;
     $503 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = $503;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
      $359 = 0;
     } else {
      i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
      $359 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
     }
     $505$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $500$hi;
     i64toi32_i32$5 = $500;
     i64toi32_i32$4 = $505$hi;
     i64toi32_i32$3 = $359;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $506 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     $506$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $490$hi;
     i64toi32_i32$0 = $490;
     i64toi32_i32$5 = $506$hi;
     i64toi32_i32$3 = $506;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$0 = $23$hi;
     i64toi32_i32$3 = $23;
     i64toi32_i32$4 = 0;
     $511 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     $511$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$1;
     $512 = i64toi32_i32$2;
     $512$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $360 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
      $360 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $514$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $512$hi;
     i64toi32_i32$4 = $512;
     i64toi32_i32$3 = $514$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $515$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $515$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = $2;
     $517 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $518$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $511$hi;
     i64toi32_i32$0 = $511;
     i64toi32_i32$2 = $518$hi;
     i64toi32_i32$4 = $517;
     i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $519$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $489$hi;
     i64toi32_i32$1 = $489;
     i64toi32_i32$0 = $519$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = i64toi32_i32$2;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$4 = $4;
     $523 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $524$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $488$hi;
     i64toi32_i32$4 = $488;
     i64toi32_i32$3 = $524$hi;
     i64toi32_i32$1 = $523;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = 131071;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$13
     }
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $14$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$4 = $14$hi;
     __multi3($5 + 80 | 0 | 0, $2 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$5 = 49;
     i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $361 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
      $361 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $535$hi = i64toi32_i32$1;
     i64toi32_i32$4 = ($5 + 80 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $539 = i64toi32_i32$1;
     $539$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $535$hi;
     i64toi32_i32$4 = $361;
     i64toi32_i32$1 = $539$hi;
     i64toi32_i32$5 = $539;
     i64toi32_i32$3 = i64toi32_i32$4 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     $540$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $5;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$5 = 0;
     $544 = (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $545$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $540$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$4 = $545$hi;
     i64toi32_i32$0 = $544;
     i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
     $12 = i64toi32_i32$1;
     $12$hi = i64toi32_i32$3;
     $9 = $9 + 16382 | 0;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $1;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
     $6 = i64toi32_i32$4;
     $6$hi = i64toi32_i32$1;
     break label$12;
    }
    $552 = $5 + 96 | 0;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $362 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $362 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $554 = $362;
    $554$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 63;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     $364 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $364 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
    }
    $556$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $554$hi;
    i64toi32_i32$2 = $554;
    i64toi32_i32$1 = $556$hi;
    i64toi32_i32$0 = $364;
    i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
    $2 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $2$hi = i64toi32_i32$1;
    $558 = $2;
    $558$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $365 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
     $365 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
    }
    $4 = $365;
    $4$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $14$hi;
    i64toi32_i32$2 = $558$hi;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$0 = $14$hi;
    __multi3($552 | 0, $558 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $366 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $366 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $565$hi = i64toi32_i32$1;
    i64toi32_i32$0 = ($5 + 96 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $569 = i64toi32_i32$1;
    $569$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $565$hi;
    i64toi32_i32$0 = $366;
    i64toi32_i32$1 = $569$hi;
    i64toi32_i32$2 = $569;
    i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$2 | 0;
    i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0;
    i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    $570$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $6 = i64toi32_i32$4;
    $6$hi = i64toi32_i32$0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = 0;
    $574 = (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$3 = 0;
    $575$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $570$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $575$hi;
    i64toi32_i32$4 = $574;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$5 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
    $12 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$5;
    $9 = $9 + 16383 | 0;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$4 = $6;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$1 | 0;
    $6 = i64toi32_i32$0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $1$hi;
    $21 = $1;
    $21$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $19$hi;
    $20 = $19;
    $20$hi = i64toi32_i32$1;
   }
   label$14 : {
    if (($9 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$5 = $8;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    $8 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $8$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   label$15 : {
    label$16 : {
     if (($9 | 0) < (1 | 0)) {
      break label$16
     }
     i64toi32_i32$3 = $12$hi;
     i64toi32_i32$1 = $12;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $369 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $369 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $590 = $369;
     $590$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $6$hi;
     i64toi32_i32$3 = $6;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 63;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $370 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
      $370 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$2 | 0) | 0;
     }
     $592$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $590$hi;
     i64toi32_i32$5 = $590;
     i64toi32_i32$3 = $592$hi;
     i64toi32_i32$4 = $370;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $12 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $9;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 48;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $371 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $371 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $596$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 65535;
     i64toi32_i32$4 = -1;
     i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $598 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
     $598$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $596$hi;
     i64toi32_i32$5 = $371;
     i64toi32_i32$3 = $598$hi;
     i64toi32_i32$4 = $598;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $7 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $7$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
      $372 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
      $372 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     }
     $4 = $372;
     $4$hi = i64toi32_i32$5;
     break label$15;
    }
    label$17 : {
     if (($9 | 0) > (-113 | 0)) {
      break label$17
     }
     i64toi32_i32$5 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$1 = $4$hi;
    __lshrti3($5 + 64 | 0 | 0, $2 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$1 | 0, 1 - $9 | 0 | 0);
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $21$hi;
    i64toi32_i32$5 = $20$hi;
    __ashlti3($5 + 48 | 0 | 0, $21 | 0, i64toi32_i32$1 | 0, $20 | 0, i64toi32_i32$5 | 0, $9 + 112 | 0 | 0);
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $14$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 64 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 68 | 0) >> 2] | 0;
    $2 = i64toi32_i32$5;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 64 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $7 = i64toi32_i32$1;
    $7$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$4 = $7$hi;
    __multi3($5 + 32 | 0 | 0, $3 | 0, i64toi32_i32$5 | 0, $14 | 0, i64toi32_i32$1 | 0, $2 | 0, i64toi32_i32$3 | 0, $7 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $631 = i64toi32_i32$4;
    $631$hi = i64toi32_i32$3;
    i64toi32_i32$1 = ($5 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $373 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $373 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $636 = $373;
    $636$hi = i64toi32_i32$3;
    i64toi32_i32$4 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$3;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $374 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $374 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $640$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $636$hi;
    i64toi32_i32$1 = $636;
    i64toi32_i32$4 = $640$hi;
    i64toi32_i32$5 = $374;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $641 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $641$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $631$hi;
    i64toi32_i32$3 = $631;
    i64toi32_i32$1 = $641$hi;
    i64toi32_i32$5 = $641;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$5 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0;
    i64toi32_i32$0 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$0 | 0;
    $642 = i64toi32_i32$2;
    $642$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$3;
    $645 = i64toi32_i32$0;
    $645$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
     $375 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $375 = i64toi32_i32$4 << i64toi32_i32$1 | 0;
    }
    $1 = $375;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $645$hi;
    i64toi32_i32$3 = $645;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    $649 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$3 = 0;
    $650$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $642$hi;
    i64toi32_i32$5 = $642;
    i64toi32_i32$0 = $650$hi;
    i64toi32_i32$4 = $649;
    i64toi32_i32$1 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
    i64toi32_i32$2 = i64toi32_i32$3 - i64toi32_i32$2 | 0;
    $12 = i64toi32_i32$1;
    $12$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$0 = i64toi32_i32$3 - i64toi32_i32$4 | 0;
    i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0;
    i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $14$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 0;
   __multi3($5 + 16 | 0 | 0, $3 | 0, i64toi32_i32$1 | 0, $14 | 0, i64toi32_i32$3 | 0, 3 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 0;
   __multi3($5 | 0, $3 | 0, i64toi32_i32$4 | 0, $14 | 0, i64toi32_i32$2 | 0, 5 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = $7$hi;
   $662 = $7;
   $662$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   $663 = $2;
   $663$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $4 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   $671 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1;
   $675 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$4 = 0;
   $676$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$1 = $12;
   i64toi32_i32$3 = $676$hi;
   i64toi32_i32$0 = $675;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$4 = i64toi32_i32$2;
   i64toi32_i32$1 = $14$hi;
   i64toi32_i32$0 = $14;
   $680 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $14;
   $684 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) | 0 ? $671 : $680;
   i64toi32_i32$0 = 0;
   $685$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $663$hi;
   i64toi32_i32$1 = $663;
   i64toi32_i32$4 = $685$hi;
   i64toi32_i32$5 = $684;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3 = i64toi32_i32$3;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$5 = $2;
   $689 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $690$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $662$hi;
   i64toi32_i32$5 = $662;
   i64toi32_i32$2 = $690$hi;
   i64toi32_i32$1 = $689;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $2 = i64toi32_i32$4;
   $2$hi = i64toi32_i32$3;
   $692 = i64toi32_i32$4;
   $692$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$5 = 2147418112;
   i64toi32_i32$1 = 0;
   $695 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 20 | 0) >> 2] | 0;
   $698 = i64toi32_i32$0;
   $698$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = $698$hi;
   i64toi32_i32$5 = $698;
   $699 = i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$5 = ($5 + 16 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$1;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = $1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   $706 = i64toi32_i32$3 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$5 = i64toi32_i32$3;
   i64toi32_i32$0 = $1;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $2;
   $711 = $695 & ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) | 0 ? $699 : $706) | 0;
   i64toi32_i32$0 = 0;
   $712$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$5 = $712$hi;
   i64toi32_i32$3 = $711;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $2 = i64toi32_i32$2;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   $716 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $717$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $692$hi;
   i64toi32_i32$3 = $692;
   i64toi32_i32$4 = $717$hi;
   i64toi32_i32$1 = $716;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$2;
   $719 = i64toi32_i32$5;
   $719$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$3 = 2147418112;
   i64toi32_i32$1 = 0;
   $722 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$1 = $5;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $725 = i64toi32_i32$0;
   $725$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$1 = $4;
   i64toi32_i32$0 = $725$hi;
   i64toi32_i32$3 = $725;
   $726 = i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $5 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
   $4 = i64toi32_i32$1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$0 = $4;
   $732 = i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = $1;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $4;
   $737 = $722 & ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) | 0 ? $726 : $732) | 0;
   i64toi32_i32$0 = 0;
   $738$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$1 = $2;
   i64toi32_i32$3 = $738$hi;
   i64toi32_i32$2 = $737;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$4;
   $1$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$0 = i64toi32_i32$4;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = $2;
   $742 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   $743$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $719$hi;
   i64toi32_i32$2 = $719;
   i64toi32_i32$5 = $743$hi;
   i64toi32_i32$1 = $742;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $744$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = $744$hi;
   i64toi32_i32$0 = i64toi32_i32$3;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$1 = $8;
   i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $8 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
   $8$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $8$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $8;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
  __stack_pointer = $5 + 336 | 0;
 }
 
 function __lshrti3($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $11$hi = 0, $18$hi = 0, $19 = 0, $19$hi = 0, $4 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1 = $18;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19 = $20;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4 = $3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2 = $22;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function __multf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $13$hi = 0, $5 = 0, $7$hi = 0, $7 = 0, $13 = 0, $8$hi = 0, $10 = 0, $18$hi = 0, $8 = 0, $16$hi = 0, $6$hi = 0, $12 = 0, $6 = 0, $18 = 0, $16 = 0, $20$hi = 0, $11 = 0, $17$hi = 0, $9 = 0, $9$hi = 0, $15$hi = 0, $17 = 0, $20 = 0, $15 = 0, $14 = 0, $19$hi = 0, $21$hi = 0, $22$hi = 0, $23$hi = 0, $24$hi = 0, $220 = 0, $221 = 0, $223 = 0, $224 = 0, $226 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $19 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $21 = 0, $239 = 0, $22 = 0, $240 = 0, $24 = 0, $241 = 0, $242 = 0, $243 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $53 = 0, $57 = 0, $64 = 0, $68 = 0, $77 = 0, $77$hi = 0, $89 = 0, $89$hi = 0, $111 = 0, $112 = 0, $112$hi = 0, $113 = 0, $113$hi = 0, $120$hi = 0, $123$hi = 0, $140 = 0, $141 = 0, $141$hi = 0, $142 = 0, $142$hi = 0, $149$hi = 0, $152$hi = 0, $170 = 0, $170$hi = 0, $175 = 0, $175$hi = 0, $182 = 0, $182$hi = 0, $189 = 0, $189$hi = 0, $194 = 0, $194$hi = 0, $203 = 0, $203$hi = 0, $205 = 0, $205$hi = 0, $207 = 0, $207$hi = 0, $209$hi = 0, $215 = 0, $215$hi = 0, $217 = 0, $217$hi = 0, $219 = 0, $219$hi = 0, $222 = 0, $224$hi = 0, $225 = 0, $225$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $238 = 0, $238$hi = 0, $244 = 0, $244$hi = 0, $249 = 0, $249$hi = 0, $252$hi = 0, $23 = 0, $268 = 0, $268$hi = 0, $272 = 0, $273 = 0, $273$hi = 0, $277 = 0, $277$hi = 0, $281 = 0, $282$hi = 0, $283$hi = 0, $286 = 0, $286$hi = 0, $287 = 0, $287$hi = 0, $288 = 0, $288$hi = 0, $291 = 0, $292$hi = 0, $295 = 0, $296$hi = 0, $297$hi = 0, $301 = 0, $302$hi = 0, $303 = 0, $303$hi = 0, $310 = 0, $310$hi = 0, $314 = 0, $316 = 0, $316$hi = 0, $318$hi = 0, $319 = 0, $319$hi = 0, $320 = 0, $320$hi = 0, $321 = 0, $321$hi = 0, $323$hi = 0, $327 = 0, $328$hi = 0, $329 = 0, $329$hi = 0, $330 = 0, $330$hi = 0, $332 = 0, $332$hi = 0, $335 = 0, $336$hi = 0, $339 = 0, $340$hi = 0, $341$hi = 0, $344 = 0, $345$hi = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $352 = 0, $353$hi = 0, $354 = 0, $354$hi = 0, $355 = 0, $355$hi = 0, $358 = 0, $359$hi = 0, $362 = 0, $363$hi = 0, $364$hi = 0, $368 = 0, $369$hi = 0, $379 = 0, $379$hi = 0, $381$hi = 0, $384 = 0, $384$hi = 0, $386$hi = 0, $390 = 0, $390$hi = 0, $392$hi = 0, $426 = 0, $426$hi = 0, $428 = 0, $428$hi = 0, $429 = 0, $429$hi = 0, $431 = 0, $431$hi = 0, $435 = 0, $435$hi = 0, $437 = 0, $438$hi = 0, $443 = 0, $443$hi = 0, $447 = 0, $447$hi = 0, $456$hi = 0, $458 = 0, $458$hi = 0, $464 = 0, $470 = 0, $470$hi = 0, $475 = 0, $476$hi = 0, $480 = 0, $480$hi = 0, $484 = 0, $484$hi = 0, $487 = 0, $487$hi = 0, $491 = 0, $492$hi = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = i64toi32_i32$0;
  i64toi32_i32$0 = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $7 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $7$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $8 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $8$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $8;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $220 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $220 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $9 = $220;
  $9$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $4$hi;
  i64toi32_i32$1 = $4;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $221 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $221 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $10 = $221 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $223 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $223 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
     }
     $11 = $223 & 32767 | 0;
     if (($11 + -32767 | 0) >>> 0 < -32766 >>> 0) {
      break label$3
     }
     $12 = 0;
     if (($10 + -32767 | 0) >>> 0 > -32767 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$1 = $1$hi;
     $53 = !($1 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $13 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $13$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $13;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     $57 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = $13;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) | 0 ? $53 : $57) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $64 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$2 = -1;
     i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
     $2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$1 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     $68 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$2 = $2;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0 ? $64 : $68) {
      break label$5
     }
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $1 = $3;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $77 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
     $77$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $77$hi;
     i64toi32_i32$0 = $77;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$0 = $3;
      i64toi32_i32$2 = $2$hi;
      i64toi32_i32$1 = $2;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      if (!!(i64toi32_i32$0 | i64toi32_i32$1 | 0 | i64toi32_i32$2 | 0)) {
       break label$7
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $7$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$0;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
     $89 = i64toi32_i32$2 ^ i64toi32_i32$1 | 0;
     $89$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$2 = $89$hi;
     i64toi32_i32$1 = $89;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = $1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$2;
     label$9 : {
      i64toi32_i32$2 = $2$hi;
      if (!!($2 | i64toi32_i32$2 | 0)) {
       break label$9
      }
      i64toi32_i32$2 = 2147450880;
      $7 = 0;
      $7$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $7$hi;
     i64toi32_i32$3 = $7;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $7 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $7$hi = i64toi32_i32$1;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$2 = $1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$0 = $13;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$0 = $3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $2;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$1 = 0;
     $1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    $12 = 0;
    label$12 : {
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$2 = $13;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$0 = -1;
     if (i64toi32_i32$1 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
      break label$12
     }
     $111 = $5 + 80 | 0;
     i64toi32_i32$2 = $1$hi;
     $112 = $1;
     $112$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $8$hi;
     $113 = $8;
     $113$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $8$hi;
     $12 = !($8 | i64toi32_i32$2 | 0);
     i64toi32_i32$4 = $12;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1 : $8;
     i64toi32_i32$0 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$1;
     i64toi32_i32$2 = Math_clz32(i64toi32_i32$0);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$2 | 0) == (32 | 0)) {
      $224 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $224 = i64toi32_i32$2
     }
     $120$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $123$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $120$hi;
     i64toi32_i32$3 = $224;
     i64toi32_i32$0 = $123$hi;
     i64toi32_i32$2 = $12 << 6 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $12 = i64toi32_i32$1;
     i64toi32_i32$5 = $112$hi;
     i64toi32_i32$3 = $113$hi;
     __ashlti3($111 | 0, $112 | 0, i64toi32_i32$5 | 0, $113 | 0, i64toi32_i32$3 | 0, i64toi32_i32$1 + -15 | 0 | 0);
     $12 = 16 - i64toi32_i32$1 | 0;
     i64toi32_i32$4 = $5 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $8 = i64toi32_i32$3;
     $8$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $226 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $226 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $9 = $226;
     $9$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 80 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 84 | 0) >> 2] | 0;
     $1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$2 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    $140 = $5 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $141 = $3;
    $141$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $6$hi;
    $142 = $6;
    $142$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    $14 = !($6 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $14;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $6$hi;
    i64toi32_i32$3 = i64toi32_i32$0 ? $3 : $6;
    i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$2);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $228 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $228 = i64toi32_i32$5
    }
    $149$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $152$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $149$hi;
    i64toi32_i32$3 = $228;
    i64toi32_i32$2 = $152$hi;
    i64toi32_i32$5 = $14 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $14 = i64toi32_i32$4;
    i64toi32_i32$1 = $141$hi;
    i64toi32_i32$3 = $142$hi;
    __ashlti3($140 | 0, $141 | 0, i64toi32_i32$1 | 0, $142 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $12 = ($12 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$0 = $5 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $6 = i64toi32_i32$3;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $3 = i64toi32_i32$1;
    $3$hi = i64toi32_i32$3;
   }
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $229 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$2 | 0) | 0;
    $229 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $13 = $229;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$3 = $13;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $2 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$0;
   $170 = $2;
   $170$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $230 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $230 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $4 = $230;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $170$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($170 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $15 = i64toi32_i32$1;
   $15$hi = i64toi32_i32$3;
   $175 = i64toi32_i32$1;
   $175$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$0 = $13;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $231 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$2 | 0;
    $231 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
   }
   $13 = $231;
   $13$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $1 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $13$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$3 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $182 = i64toi32_i32$3;
   $182$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $175$hi;
   i64toi32_i32$1 = $175;
   i64toi32_i32$3 = $182$hi;
   i64toi32_i32$5 = $182;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $16 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $232 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $232 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $17 = $232;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $189 = i64toi32_i32$0;
   $189$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $17$hi;
   i64toi32_i32$4 = $17;
   i64toi32_i32$0 = $189$hi;
   i64toi32_i32$5 = $189;
   i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $18 = i64toi32_i32$3;
   $18$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$4 = $17$hi;
   i64toi32_i32$5 = $17;
   i64toi32_i32$1 = 0;
   $194 = i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $194$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $8 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $8$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, $8 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19 = i64toi32_i32$5;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = $13$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($13 | 0, i64toi32_i32$2 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $203 = i64toi32_i32$5;
   $203$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$5 = $203$hi;
   i64toi32_i32$4 = $203;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $17 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$3;
   $205 = i64toi32_i32$0;
   $205$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $6$hi;
   i64toi32_i32$2 = $6;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 15;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
    $233 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$5 | 0) | 0;
    $233 = i64toi32_i32$2 << i64toi32_i32$5 | 0;
   }
   $207 = $233;
   $207$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = 49;
   i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $234 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$5 | 0;
    $234 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$5 | 0) | 0;
   }
   $209$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$1 = $207;
   i64toi32_i32$3 = $209$hi;
   i64toi32_i32$4 = $234;
   i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $20 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$2 = $20;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$2;
   $215$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $205$hi;
   i64toi32_i32$3 = $205;
   i64toi32_i32$2 = $215$hi;
   i64toi32_i32$4 = $215;
   i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $6 = i64toi32_i32$5;
   $6$hi = i64toi32_i32$0;
   $217 = i64toi32_i32$5;
   $217$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = $16;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $235 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $235 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $219 = $235;
   $219$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$3 = $16$hi;
   i64toi32_i32$0 = $16;
   i64toi32_i32$1 = $15$hi;
   i64toi32_i32$4 = $15;
   $222 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = $222;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$2 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
    $237 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $237 = i64toi32_i32$4 << i64toi32_i32$2 | 0;
   }
   $224$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $219$hi;
   i64toi32_i32$0 = $219;
   i64toi32_i32$4 = $224$hi;
   i64toi32_i32$1 = $237;
   i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
   $225 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $225$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $217$hi;
   i64toi32_i32$3 = $217;
   i64toi32_i32$0 = $225$hi;
   i64toi32_i32$1 = $225;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $15 = i64toi32_i32$2;
   $15$hi = i64toi32_i32$5;
   $227 = i64toi32_i32$2;
   $227$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $9$hi;
   i64toi32_i32$4 = $9;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $16 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $16$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$4 = $16$hi;
   i64toi32_i32$4 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $21 = i64toi32_i32$4;
   $21$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$3 = $8$hi;
   i64toi32_i32$3 = $13$hi;
   i64toi32_i32$4 = $8$hi;
   i64toi32_i32$4 = __wasm_i64_mul($13 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$4;
   $236$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $21$hi;
   i64toi32_i32$5 = $21;
   i64toi32_i32$4 = $236$hi;
   i64toi32_i32$1 = $236;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $9 = i64toi32_i32$0;
   $9$hi = i64toi32_i32$2;
   $238 = i64toi32_i32$0;
   $238$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $20$hi;
   i64toi32_i32$3 = $20;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $239 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $239 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
   }
   i64toi32_i32$2 = $239;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = -2147483648;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $2 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $244 = i64toi32_i32$2;
   $244$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $238$hi;
   i64toi32_i32$5 = $238;
   i64toi32_i32$2 = $244$hi;
   i64toi32_i32$1 = $244;
   i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $20 = i64toi32_i32$4;
   $20$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $249 = i64toi32_i32$5;
   $249$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$5 = $249$hi;
   i64toi32_i32$1 = $249;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $22 = i64toi32_i32$2;
   $22$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$2;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 32;
   i64toi32_i32$5 = i64toi32_i32$1 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    $240 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
    $240 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
   }
   $252$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $227$hi;
   i64toi32_i32$4 = $227;
   i64toi32_i32$0 = $252$hi;
   i64toi32_i32$1 = $240;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $23 = i64toi32_i32$5;
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $194$hi;
   i64toi32_i32$3 = $194;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $1 = i64toi32_i32$0;
   $1$hi = i64toi32_i32$5;
   $10 = (($11 + $10 | 0) + $12 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = __wasm_i64_mul($2 | 0, i64toi32_i32$5 | 0, $4 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $16$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = __wasm_i64_mul($13 | 0, i64toi32_i32$5 | 0, $16 | 0, i64toi32_i32$3 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $268 = i64toi32_i32$3;
     $268$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$2 = $24;
     i64toi32_i32$3 = $268$hi;
     i64toi32_i32$1 = $268;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$1 = $24;
     $272 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $273 = $272;
     $273$hi = i64toi32_i32$5;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$5 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $277 = i64toi32_i32$0;
     $277$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$0 = $277$hi;
     i64toi32_i32$2 = $277;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $13 = i64toi32_i32$3;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$4 = $13$hi;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$2 = $4;
     $281 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $282$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $273$hi;
     i64toi32_i32$2 = $273;
     i64toi32_i32$4 = $282$hi;
     i64toi32_i32$1 = $281;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $286 = i64toi32_i32$2;
     $286$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $283$hi;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$2 = $286$hi;
     i64toi32_i32$1 = $286;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $287 = i64toi32_i32$4;
     $287$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $13$hi;
     $288 = $13;
     $288$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$0 = $19$hi;
     i64toi32_i32$0 = $17$hi;
     i64toi32_i32$3 = $17;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19;
     $291 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $292$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = $17;
     $295 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $296$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $292$hi;
     i64toi32_i32$5 = $291;
     i64toi32_i32$3 = $296$hi;
     i64toi32_i32$0 = $295;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $297$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $288$hi;
     i64toi32_i32$1 = $288;
     i64toi32_i32$5 = $297$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $13$hi;
     i64toi32_i32$0 = $13;
     $301 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $302$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $287$hi;
     i64toi32_i32$0 = $287;
     i64toi32_i32$2 = $302$hi;
     i64toi32_i32$1 = $301;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $303 = i64toi32_i32$5;
     $303$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $16$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$0 = $16$hi;
     i64toi32_i32$0 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $3 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $8$hi;
     i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$3 | 0, $8 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
     $310 = i64toi32_i32$0;
     $310$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $310$hi;
     i64toi32_i32$1 = $310;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = $3;
     $314 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = $314;
     i64toi32_i32$5 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$0 | 0) | 0;
      $241 = i64toi32_i32$1 << i64toi32_i32$0 | 0;
     }
     $316 = $241;
     $316$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $242 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $318$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $316$hi;
     i64toi32_i32$5 = $316;
     i64toi32_i32$3 = $318$hi;
     i64toi32_i32$4 = $242;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
     $319 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $319$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $303$hi;
     i64toi32_i32$1 = $303;
     i64toi32_i32$5 = $319$hi;
     i64toi32_i32$4 = $319;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $320 = i64toi32_i32$0;
     $320$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     $321 = $4;
     $321$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 32;
     i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
      $243 = 0;
     } else {
      i64toi32_i32$1 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
      $243 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     }
     $323$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $321$hi;
     i64toi32_i32$2 = $321;
     i64toi32_i32$3 = $323$hi;
     i64toi32_i32$4 = $243;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$4 = $4;
     $327 = i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $328$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $320$hi;
     i64toi32_i32$4 = $320;
     i64toi32_i32$0 = $328$hi;
     i64toi32_i32$2 = $327;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $329 = i64toi32_i32$3;
     $329$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     $330 = $2;
     $330$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$1 = $22;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $245 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
      $245 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
     }
     $332 = $245;
     $332$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$4 = $21$hi;
     i64toi32_i32$4 = $9$hi;
     i64toi32_i32$5 = $9;
     i64toi32_i32$1 = $21$hi;
     i64toi32_i32$2 = $21;
     $335 = i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $336$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$2 = $20;
     i64toi32_i32$1 = $9;
     $339 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $340$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $336$hi;
     i64toi32_i32$1 = $335;
     i64toi32_i32$5 = $340$hi;
     i64toi32_i32$4 = $339;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $341$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$3 = $20$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$4 = $20;
     $344 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $345$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $341$hi;
     i64toi32_i32$4 = i64toi32_i32$0;
     i64toi32_i32$3 = $345$hi;
     i64toi32_i32$1 = $344;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$5;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
      $246 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
      $246 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     }
     $347$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $332$hi;
     i64toi32_i32$0 = $332;
     i64toi32_i32$2 = $347$hi;
     i64toi32_i32$1 = $246;
     i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $348 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $348$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $330$hi;
     i64toi32_i32$4 = $330;
     i64toi32_i32$0 = $348$hi;
     i64toi32_i32$1 = $348;
     i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $4 = i64toi32_i32$3;
     $4$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$1 = $2;
     $352 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $353$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $329$hi;
     i64toi32_i32$1 = $329;
     i64toi32_i32$5 = $353$hi;
     i64toi32_i32$4 = $352;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $354 = i64toi32_i32$0;
     $354$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $4$hi;
     $355 = $4;
     $355$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $15;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$4 = $6;
     $358 = i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $359$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$2 = i64toi32_i32$3;
     i64toi32_i32$2 = $23$hi;
     i64toi32_i32$4 = $23;
     i64toi32_i32$1 = $15;
     $362 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $363$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $359$hi;
     i64toi32_i32$1 = $358;
     i64toi32_i32$2 = $363$hi;
     i64toi32_i32$3 = $362;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $364$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $355$hi;
     i64toi32_i32$4 = $355;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $2 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$3 = $4;
     $368 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $369$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $354$hi;
     i64toi32_i32$3 = $354;
     i64toi32_i32$5 = $369$hi;
     i64toi32_i32$4 = $368;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$1;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$3 = 65536;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$4 | 0 | i64toi32_i32$3 | 0)) {
      break label$14
     }
     $10 = $10 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$2 = $18;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $247 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$3 >>> i64toi32_i32$5 | 0;
     $247 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
    }
    $3 = $247;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $248 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $379 = $248;
    $379$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $250 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $250 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $381$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $379$hi;
    i64toi32_i32$2 = $379;
    i64toi32_i32$0 = $381$hi;
    i64toi32_i32$4 = $250;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $251 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $384 = $251;
    $384$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 63;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $252 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$5 | 0;
     $252 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$5 | 0) | 0;
    }
    $386$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $384$hi;
    i64toi32_i32$2 = $384;
    i64toi32_i32$0 = $386$hi;
    i64toi32_i32$4 = $252;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $2 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $18$hi;
    i64toi32_i32$3 = $18;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
     $253 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
     $253 = i64toi32_i32$3 << i64toi32_i32$5 | 0;
    }
    $18 = $253;
    $18$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    $390 = $3;
    $390$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$0 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 1;
    i64toi32_i32$5 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $254 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$5 | 0) | 0;
     $254 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $392$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $390$hi;
    i64toi32_i32$2 = $390;
    i64toi32_i32$0 = $392$hi;
    i64toi32_i32$4 = $254;
    i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    $1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $1$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($10 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $7$hi;
    i64toi32_i32$3 = $7;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $7 = i64toi32_i32$3 | i64toi32_i32$4 | 0;
    $7$hi = i64toi32_i32$2;
    i64toi32_i32$2 = 0;
    $1 = 0;
    $1$hi = i64toi32_i32$2;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($10 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $11 = 1 - $10 | 0;
      if ($11 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$2 = 0;
      $1 = 0;
      $1$hi = i64toi32_i32$2;
      break label$1;
     }
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     $10 = $10 + 127 | 0;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     __ashlti3($5 + 48 | 0 | 0, $18 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$3 | 0, $10 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     __ashlti3($5 + 32 | 0 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0, $10 | 0);
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     __lshrti3($5 + 16 | 0 | 0, $18 | 0, i64toi32_i32$2 | 0, $1 | 0, i64toi32_i32$3 | 0, $11 | 0);
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $4$hi;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     __lshrti3($5 | 0, $2 | 0, i64toi32_i32$3 | 0, $4 | 0, i64toi32_i32$2 | 0, $11 | 0);
     i64toi32_i32$0 = $5;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $426 = i64toi32_i32$2;
     $426$hi = i64toi32_i32$3;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $428 = i64toi32_i32$3;
     $428$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $426$hi;
     i64toi32_i32$0 = $426;
     i64toi32_i32$3 = $428$hi;
     i64toi32_i32$4 = $428;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     $429 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $429$hi = i64toi32_i32$3;
     i64toi32_i32$2 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
     $431 = i64toi32_i32$3;
     $431$hi = i64toi32_i32$0;
     i64toi32_i32$2 = (i64toi32_i32$2 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $435 = i64toi32_i32$0;
     $435$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $431$hi;
     i64toi32_i32$2 = $431;
     i64toi32_i32$0 = $435$hi;
     i64toi32_i32$4 = $435;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     $437 = (i64toi32_i32$3 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
     i64toi32_i32$3 = 0;
     $438$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $429$hi;
     i64toi32_i32$4 = $429;
     i64toi32_i32$0 = $438$hi;
     i64toi32_i32$2 = $437;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $18 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$3 = ($5 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $443 = i64toi32_i32$0;
     $443$hi = i64toi32_i32$4;
     i64toi32_i32$3 = ($5 + 16 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $447 = i64toi32_i32$4;
     $447$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $443$hi;
     i64toi32_i32$3 = $443;
     i64toi32_i32$4 = $447$hi;
     i64toi32_i32$2 = $447;
     i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
     $1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$0 = $5 + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2 = i64toi32_i32$3;
     $2$hi = i64toi32_i32$4;
     break label$16;
    }
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = $10;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$5 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
     $255 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$5 | 0) | 0;
     $255 = i64toi32_i32$0 << i64toi32_i32$5 | 0;
    }
    $456$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$2 = -1;
    i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    $458 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
    $458$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $456$hi;
    i64toi32_i32$3 = $255;
    i64toi32_i32$4 = $458$hi;
    i64toi32_i32$2 = $458;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    $4 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$4;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $7$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$3 = $7$hi;
   i64toi32_i32$2 = $7;
   i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $7 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $7$hi = i64toi32_i32$3;
   label$19 : {
    i64toi32_i32$3 = $18$hi;
    $464 = !($18 | i64toi32_i32$3 | 0);
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$4 = $1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$0 | 0)) {
     $256 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $257 = 0
      } else {
       $257 = 1
      }
      $258 = $257;
     } else {
      $258 = 0
     }
     $256 = $258;
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $464 : $256) {
     break label$19
    }
    i64toi32_i32$2 = $7$hi;
    $470 = $7;
    $470$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$0 = $2;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $1 = i64toi32_i32$5;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$3 = $2;
    $475 = i64toi32_i32$1 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = 0;
    $476$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $470$hi;
    i64toi32_i32$3 = $470;
    i64toi32_i32$1 = $476$hi;
    i64toi32_i32$0 = $475;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $7 = i64toi32_i32$4;
    $7$hi = i64toi32_i32$5;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$5 = $18$hi;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$3 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $480 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
    $480$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $18$hi;
    i64toi32_i32$5 = $18;
    i64toi32_i32$2 = $480$hi;
    i64toi32_i32$0 = $480;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$3 = $2$hi;
    $1 = $2;
    $1$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = $7$hi;
   $484 = $7;
   $484$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $487 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $487$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$3;
   i64toi32_i32$3 = i64toi32_i32$0;
   i64toi32_i32$0 = $487$hi;
   i64toi32_i32$5 = $487;
   i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $2$hi;
   i64toi32_i32$4 = $1$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$5 = $2;
   $491 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   $492$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $484$hi;
   i64toi32_i32$5 = $484;
   i64toi32_i32$4 = $492$hi;
   i64toi32_i32$3 = $491;
   i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $7 = i64toi32_i32$0;
   $7$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $7;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 96 | 0;
 }
 
 function __multi3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $53 = 0, $54 = 0, $6 = 0, $9 = 0, $9$hi = 0, $12 = 0, $12$hi = 0, $13 = 0, $13$hi = 0, $16 = 0, $16$hi = 0, $20 = 0, $20$hi = 0, $21 = 0, $21$hi = 0, $5 = 0, $5$hi = 0, $30$hi = 0, $33 = 0, $33$hi = 0, $36$hi = 0, $37 = 0, $37$hi = 0, $39 = 0, $39$hi = 0, $42 = 0, $42$hi = 0, $45$hi = 0, $47 = 0, $49$hi = 0, $51 = 0, $51$hi = 0, $52 = 0;
  $6 = $0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = __wasm_i64_mul($4 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $9 = i64toi32_i32$1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = __wasm_i64_mul($2 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $12 = i64toi32_i32$1;
  $12$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $9$hi;
  i64toi32_i32$2 = $9;
  i64toi32_i32$1 = $12$hi;
  i64toi32_i32$3 = $12;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $13 = i64toi32_i32$4;
  $13$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $46 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
   $46 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
  }
  $4 = $46;
  $4$hi = i64toi32_i32$2;
  $16 = $4;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $48 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$1 | 0;
   $48 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
  }
  $2 = $48;
  $2$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $16$hi;
  i64toi32_i32$5 = $2$hi;
  i64toi32_i32$5 = __wasm_i64_mul($16 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$5 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $20 = i64toi32_i32$5;
  $20$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $13$hi;
  i64toi32_i32$2 = $13;
  i64toi32_i32$5 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  $21 = i64toi32_i32$1;
  $21$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
  $3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$4 = $1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$4 = $1$hi;
  i64toi32_i32$4 = __wasm_i64_mul($3 | 0, i64toi32_i32$0 | 0, $1 | 0, i64toi32_i32$4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$4;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$4;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $49 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$0 >>> i64toi32_i32$5 | 0;
   $49 = (((1 << i64toi32_i32$5 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$5 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$5 | 0) | 0;
  }
  $30$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$4 = $2$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$2 = __wasm_i64_mul($3 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$2 | 0) | 0;
  i64toi32_i32$4 = i64toi32_i32$HIGH_BITS;
  $33 = i64toi32_i32$2;
  $33$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $30$hi;
  i64toi32_i32$0 = $49;
  i64toi32_i32$2 = $33$hi;
  i64toi32_i32$3 = $33;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
  i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
  }
  $3 = i64toi32_i32$5;
  $3$hi = i64toi32_i32$1;
  i64toi32_i32$4 = i64toi32_i32$5;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $50 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
   $50 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
  }
  $36$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $21$hi;
  i64toi32_i32$1 = $21;
  i64toi32_i32$4 = $36$hi;
  i64toi32_i32$3 = $50;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $37 = i64toi32_i32$2;
  $37$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
  $39 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __wasm_i64_mul($4 | 0, i64toi32_i32$1 | 0, $1 | 0, i64toi32_i32$0 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  $42 = i64toi32_i32$0;
  $42$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $39$hi;
  i64toi32_i32$5 = $39;
  i64toi32_i32$0 = $42$hi;
  i64toi32_i32$3 = $42;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$2;
  i64toi32_i32$1 = i64toi32_i32$4;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$5 = 0;
   $53 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   $53 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
  }
  $45$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $37$hi;
  i64toi32_i32$2 = $37;
  i64toi32_i32$1 = $45$hi;
  i64toi32_i32$3 = $53;
  i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
  if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
  }
  i64toi32_i32$2 = $6;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$4;
  $47 = $0;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$1 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
   $54 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
   $54 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
  }
  $49$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$3 = -1;
  i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
  $51 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $51$hi = i64toi32_i32$5;
  i64toi32_i32$5 = $49$hi;
  i64toi32_i32$2 = $54;
  i64toi32_i32$4 = $51$hi;
  i64toi32_i32$3 = $51;
  i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
  $52 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$2 = $47;
  HEAP32[i64toi32_i32$2 >> 2] = $52;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$4;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = (__stack_pointer - $0 | 0) & -16 | 0;
  __stack_pointer = $1;
  return $1 | 0;
 }
 
 function emscripten_stack_init() {
  __stack_base = 5402704;
  __stack_end = (159820 + 15 | 0) & -16 | 0;
 }
 
 function emscripten_stack_get_free() {
  return __stack_pointer - __stack_end | 0 | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function emscripten_stack_get_end() {
  return __stack_end | 0;
 }
 
 function __fe_getround() {
  return 0 | 0;
 }
 
 function __fe_raise_inexact() {
  return 0 | 0;
 }
 
 function __addtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, $8$hi = 0, $8 = 0, $7 = 0, $10 = 0, $5 = 0, $9$hi = 0, $6$hi = 0, $6 = 0, $9 = 0, $11$hi = 0, $11 = 0, i64toi32_i32$6 = 0, $12 = 0, $135 = 0, $139 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $20 = 0, $25 = 0, $30 = 0, $34 = 0, $40 = 0, $48 = 0, $50 = 0, $58 = 0, $58$hi = 0, $64 = 0, $64$hi = 0, $68 = 0, $68$hi = 0, $78 = 0, $78$hi = 0, $106 = 0, $109 = 0, $136 = 0, $137 = 0, $137$hi = 0, $138 = 0, $138$hi = 0, $145$hi = 0, $148$hi = 0, $168 = 0, $169 = 0, $169$hi = 0, $170 = 0, $170$hi = 0, $177$hi = 0, $180$hi = 0, $193 = 0, $193$hi = 0, $195$hi = 0, $199 = 0, $199$hi = 0, $201$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $234 = 0, $234$hi = 0, $236 = 0, $237$hi = 0, $251 = 0, $251$hi = 0, $254 = 0, $254$hi = 0, $262$hi = 0, $265 = 0, $266$hi = 0, $271 = 0, $272 = 0, $272$hi = 0, $273 = 0, $273$hi = 0, $280$hi = 0, $283$hi = 0, $298 = 0, $298$hi = 0, $304 = 0, $305$hi = 0, $311 = 0, $311$hi = 0, $313$hi = 0, $314 = 0, $314$hi = 0, $316 = 0, $316$hi = 0, $343 = 0, $343$hi = 0, $345 = 0, $345$hi = 0, $349 = 0, $349$hi = 0, $351 = 0, $352$hi = 0, $358 = 0, $358$hi = 0, $360$hi = 0, $364 = 0, $364$hi = 0, $367 = 0, $367$hi = 0, $368$hi = 0, $375 = 0, $375$hi = 0, $379$hi = 0, $383 = 0, $384$hi = 0, $389 = 0, $389$hi = 0, $397 = 0, $398$hi = 0, $400 = 0, $400$hi = 0, $406 = 0, $407$hi = 0, $411 = 0, $412$hi = 0, $415 = 0, $415$hi = 0, $421 = 0, $422$hi = 0, $426 = 0, $427$hi = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $6 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $6$hi = i64toi32_i32$1;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $1$hi;
     $7 = !($1 | i64toi32_i32$1 | 0);
     $20 = $7;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2;
     i64toi32_i32$2 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $8 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $8;
     i64toi32_i32$0 = -2147418112;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$3 = 0;
     $25 = i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = $8$hi;
     if (!($8 | i64toi32_i32$2 | 0) ? $20 : $25) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 0;
     $30 = (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0;
     i64toi32_i32$3 = $6$hi;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = -2147418112;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $9 = i64toi32_i32$0;
     $9$hi = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$0;
     i64toi32_i32$1 = -2147418112;
     i64toi32_i32$5 = 0;
     $34 = i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$0;
     i64toi32_i32$4 = -2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $30 : $34) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$1 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$4 = 0;
     $40 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$4 = $8;
     i64toi32_i32$5 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $7 : $40) {
      break label$4
     }
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$1 = 32768;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     $3 = $1;
     $3$hi = i64toi32_i32$1;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$1 = $3$hi;
     $48 = !($3 | i64toi32_i32$1 | 0);
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$4 = $6;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$5 = 0;
     $50 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$5 = $6;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) | 0 ? $48 : $50) {
      break label$5
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$4 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$4;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $8$hi;
     i64toi32_i32$5 = $8;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 ^ i64toi32_i32$3 | 0;
     $58 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     $58$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = $58$hi;
     i64toi32_i32$1 = $58;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$4 | 0) | 0) {
      break label$6
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$4 = $1;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
     $64 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
     $64$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = $2;
     i64toi32_i32$1 = i64toi32_i32$5 ^ i64toi32_i32$1 | 0;
     i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $68 = i64toi32_i32$5 ^ i64toi32_i32$4 | 0;
     $68$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $64$hi;
     i64toi32_i32$1 = $64;
     i64toi32_i32$5 = $68$hi;
     i64toi32_i32$4 = $68;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $7 = !(i64toi32_i32$1 | i64toi32_i32$4 | 0 | i64toi32_i32$5 | 0);
     i64toi32_i32$2 = $7;
     i64toi32_i32$5 = 2147450880;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$4 = i64toi32_i32$2 ? 0 : $2;
     i64toi32_i32$3 = i64toi32_i32$2 ? i64toi32_i32$5 : i64toi32_i32$1;
     $4 = i64toi32_i32$4;
     $4$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$1 = i64toi32_i32$2;
     i64toi32_i32$3 = 0;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$2 ? 0 : $1;
     i64toi32_i32$2 = i64toi32_i32$2 ? i64toi32_i32$3 : i64toi32_i32$4;
     $3 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$2 = $6$hi;
    i64toi32_i32$1 = $6;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
    $78 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
    $78$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $78$hi;
    i64toi32_i32$3 = $78;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$1
    }
    label$7 : {
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$2 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$5 | 0) | 0) {
      break label$7
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $6$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$3 = $3;
     i64toi32_i32$2 = $6$hi;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 0;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$1
     }
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$5 = $3;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$1 = $4;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$3 = $2;
     i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
     $4 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $4$hi = i64toi32_i32$5;
     break label$1;
    }
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $6$hi;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$3 = $6;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    if (!!(i64toi32_i32$2 | i64toi32_i32$3 | 0 | i64toi32_i32$1 | 0)) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    $3 = $1;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    $4 = $2;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$3 = $1;
   $106 = i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$5 = $6$hi;
   i64toi32_i32$3 = $6;
   i64toi32_i32$1 = $8$hi;
   i64toi32_i32$2 = $8;
   $109 = i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = i64toi32_i32$5;
   i64toi32_i32$2 = $6;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = $8;
   $10 = (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0 ? $106 : $109;
   i64toi32_i32$4 = $10;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$5 = i64toi32_i32$4 ? $3 : $1;
   i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$3;
   $8 = i64toi32_i32$5;
   $8$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$3 = i64toi32_i32$4;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$2 = i64toi32_i32$4 ? $4 : $2;
   i64toi32_i32$4 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$5;
   $6 = i64toi32_i32$2;
   $6$hi = i64toi32_i32$4;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$2 = 65535;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = i64toi32_i32$4 & i64toi32_i32$2 | 0;
   $9 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
   $9$hi = i64toi32_i32$2;
   i64toi32_i32$2 = i64toi32_i32$5;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$5 = $10;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$1 = i64toi32_i32$5 ? $2 : $4;
   i64toi32_i32$4 = i64toi32_i32$5 ? i64toi32_i32$2 : i64toi32_i32$3;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$4;
   i64toi32_i32$5 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $135 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $135 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
   }
   $12 = $135 & 32767 | 0;
   label$8 : {
    i64toi32_i32$1 = $6$hi;
    i64toi32_i32$4 = $6;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 48;
    i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $139 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
     $139 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
    }
    $7 = $139 & 32767 | 0;
    if ($7) {
     break label$8
    }
    $136 = $5 + 96 | 0;
    i64toi32_i32$5 = $8$hi;
    $137 = $8;
    $137$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    $138 = $9;
    $138$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$5 = $9$hi;
    $7 = !($9 | i64toi32_i32$5 | 0);
    i64toi32_i32$3 = $7;
    i64toi32_i32$5 = $8$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$2 = i64toi32_i32$3 ? $8 : $9;
    i64toi32_i32$1 = i64toi32_i32$3 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$1);
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $140 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $140 = i64toi32_i32$5
    }
    $145$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $148$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $145$hi;
    i64toi32_i32$2 = $140;
    i64toi32_i32$1 = $148$hi;
    i64toi32_i32$5 = $7 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $7 = i64toi32_i32$4;
    i64toi32_i32$0 = $137$hi;
    i64toi32_i32$2 = $138$hi;
    __ashlti3($136 | 0, $137 | 0, i64toi32_i32$0 | 0, $138 | 0, i64toi32_i32$2 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $7 = 16 - i64toi32_i32$4 | 0;
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$2;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$1 = $10;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$5 = i64toi32_i32$1 ? $1 : $3;
   i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$2 : i64toi32_i32$0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $11$hi;
   i64toi32_i32$1 = $11;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
   $4 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   label$9 : {
    if ($12) {
     break label$9
    }
    $168 = $5 + 80 | 0;
    i64toi32_i32$5 = $3$hi;
    $169 = $3;
    $169$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    $170 = $4;
    $170$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $4$hi;
    $10 = !($4 | i64toi32_i32$5 | 0);
    i64toi32_i32$0 = $10;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$2 = i64toi32_i32$0 ? $3 : $4;
    i64toi32_i32$3 = i64toi32_i32$0 ? i64toi32_i32$5 : i64toi32_i32$1;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$3);
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $141 = Math_clz32(i64toi32_i32$2) + 32 | 0
    } else {
     $141 = i64toi32_i32$5
    }
    $177$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $180$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $177$hi;
    i64toi32_i32$2 = $141;
    i64toi32_i32$3 = $180$hi;
    i64toi32_i32$5 = $10 << 6 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $10 = i64toi32_i32$1;
    i64toi32_i32$4 = $169$hi;
    i64toi32_i32$2 = $170$hi;
    __ashlti3($168 | 0, $169 | 0, i64toi32_i32$4 | 0, $170 | 0, i64toi32_i32$2 | 0, i64toi32_i32$1 + -15 | 0 | 0);
    $12 = 16 - i64toi32_i32$1 | 0;
    i64toi32_i32$0 = $5 + 88 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $5;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 80 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 84 | 0) >> 2] | 0;
    $3 = i64toi32_i32$4;
    $3$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $142 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $142 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $193 = $142;
   $193$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $143 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$3 | 0;
    $143 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
   }
   $195$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $193$hi;
   i64toi32_i32$4 = $193;
   i64toi32_i32$2 = $195$hi;
   i64toi32_i32$5 = $143;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   i64toi32_i32$4 = 524288;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $2 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $9$hi;
   i64toi32_i32$2 = $9;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $144 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $144 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $199 = $144;
   $199$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $8$hi;
   i64toi32_i32$4 = $8;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 61;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $145 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $145 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $201$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $199$hi;
   i64toi32_i32$0 = $199;
   i64toi32_i32$4 = $201$hi;
   i64toi32_i32$5 = $145;
   i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
   $4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $3;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 3;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $146 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $146 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $1 = $146;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$0 = $6$hi;
   i64toi32_i32$4 = $6;
   i64toi32_i32$2 = $11$hi;
   i64toi32_i32$5 = $11;
   i64toi32_i32$2 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
   $3 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   label$10 : {
    if (($7 | 0) == ($12 | 0)) {
     break label$10
    }
    label$11 : {
     $10 = $7 - $12 | 0;
     if ($10 >>> 0 <= 127 >>> 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $2 = 0;
     $2$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $1 = 1;
     $1$hi = i64toi32_i32$2;
     break label$10;
    }
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$4 = $2$hi;
    __ashlti3($5 + 64 | 0 | 0, $1 | 0, i64toi32_i32$2 | 0, $2 | 0, i64toi32_i32$4 | 0, 128 - $10 | 0 | 0);
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$4 = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    __lshrti3($5 + 48 | 0 | 0, $1 | 0, i64toi32_i32$4 | 0, $2 | 0, i64toi32_i32$2 | 0, $10 | 0);
    i64toi32_i32$0 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
    $228 = i64toi32_i32$2;
    $228$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
    $230 = i64toi32_i32$4;
    $230$hi = i64toi32_i32$2;
    i64toi32_i32$0 = (i64toi32_i32$0 + 64 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $234 = i64toi32_i32$2;
    $234$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $230$hi;
    i64toi32_i32$0 = $230;
    i64toi32_i32$2 = $234$hi;
    i64toi32_i32$5 = $234;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$5 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 0;
    $236 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $237$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $228$hi;
    i64toi32_i32$5 = $228;
    i64toi32_i32$2 = $237$hi;
    i64toi32_i32$0 = $236;
    i64toi32_i32$2 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
    $1 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1$hi = i64toi32_i32$2;
    i64toi32_i32$4 = ($5 + 48 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$2;
    $2$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4;
   i64toi32_i32$2 = 524288;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
   $11 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $11$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $8$hi;
   i64toi32_i32$5 = $8;
   i64toi32_i32$4 = 0;
   i64toi32_i32$0 = 3;
   i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    $147 = 0;
   } else {
    i64toi32_i32$4 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$3 | 0) | 0;
    $147 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
   }
   $9 = $147;
   $9$hi = i64toi32_i32$4;
   label$12 : {
    label$13 : {
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3;
     i64toi32_i32$5 = -1;
     i64toi32_i32$0 = -1;
     if ((i64toi32_i32$4 | 0) > (i64toi32_i32$5 | 0)) {
      $148 = 1
     } else {
      if ((i64toi32_i32$4 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$0 >>> 0) {
        $149 = 0
       } else {
        $149 = 1
       }
       $150 = $149;
      } else {
       $150 = 0
      }
      $148 = $150;
     }
     if ($148) {
      break label$13
     }
     i64toi32_i32$2 = 0;
     $3 = 0;
     $3$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$4 = i64toi32_i32$2 ^ i64toi32_i32$4 | 0;
     $251 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
     $251$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2;
     i64toi32_i32$0 = i64toi32_i32$4 ^ i64toi32_i32$0 | 0;
     $254 = i64toi32_i32$2 ^ i64toi32_i32$5 | 0;
     $254$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $251$hi;
     i64toi32_i32$4 = $251;
     i64toi32_i32$2 = $254$hi;
     i64toi32_i32$5 = $254;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     if (!(i64toi32_i32$4 | i64toi32_i32$5 | 0 | i64toi32_i32$2 | 0)) {
      break label$1
     }
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $9$hi;
     i64toi32_i32$0 = $9;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$1 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
     $8 = i64toi32_i32$3;
     $8$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$2 = $11;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$5 = $2;
     i64toi32_i32$4 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
     i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0;
     i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
     $262$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$1 = $9;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$5 = $1;
     $265 = i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $266$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $262$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$3 = $266$hi;
     i64toi32_i32$2 = $265;
     i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$2 | 0;
     i64toi32_i32$6 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0;
     i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$0;
     i64toi32_i32$5 = 524287;
     i64toi32_i32$2 = -1;
     if (i64toi32_i32$4 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
      break label$12
     }
     $271 = $5 + 32 | 0;
     i64toi32_i32$1 = $8$hi;
     $272 = $8;
     $272$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $4$hi;
     $273 = $4;
     $273$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$1 = $4$hi;
     $10 = !($4 | i64toi32_i32$1 | 0);
     i64toi32_i32$3 = $10;
     i64toi32_i32$1 = $8$hi;
     i64toi32_i32$4 = $4$hi;
     i64toi32_i32$5 = i64toi32_i32$3 ? $8 : $4;
     i64toi32_i32$2 = i64toi32_i32$3 ? i64toi32_i32$1 : i64toi32_i32$4;
     i64toi32_i32$1 = Math_clz32(i64toi32_i32$2);
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$1 | 0) == (32 | 0)) {
      $151 = Math_clz32(i64toi32_i32$5) + 32 | 0
     } else {
      $151 = i64toi32_i32$1
     }
     $280$hi = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     $283$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $280$hi;
     i64toi32_i32$5 = $151;
     i64toi32_i32$2 = $283$hi;
     i64toi32_i32$1 = $10 << 6 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $10 = i64toi32_i32$4 + -12 | 0;
     i64toi32_i32$0 = $272$hi;
     i64toi32_i32$5 = $273$hi;
     __ashlti3($271 | 0, $272 | 0, i64toi32_i32$0 | 0, $273 | 0, i64toi32_i32$5 | 0, $10 | 0);
     $7 = $7 - $10 | 0;
     i64toi32_i32$3 = $5 + 40 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 36 | 0) >> 2] | 0;
     $8 = i64toi32_i32$0;
     $8$hi = i64toi32_i32$5;
     break label$12;
    }
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $2$hi;
    i64toi32_i32$3 = $2;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $11;
    i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $298 = i64toi32_i32$2;
    $298$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = $9$hi;
    i64toi32_i32$1 = $9;
    i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
    i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $1$hi;
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$1 = $1;
    $304 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $305$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $298$hi;
    i64toi32_i32$1 = $298;
    i64toi32_i32$2 = $305$hi;
    i64toi32_i32$5 = $304;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$1 = 1048576;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    if (!(i64toi32_i32$4 & i64toi32_i32$5 | 0 | i64toi32_i32$1 | 0)) {
     break label$12
    }
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$0 = $8;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $152 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$2 | 0;
     $152 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$2 | 0) | 0;
    }
    $311 = $152;
    $311$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 63;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $153 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
     $153 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    $313$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $311$hi;
    i64toi32_i32$4 = $311;
    i64toi32_i32$1 = $313$hi;
    i64toi32_i32$5 = $153;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $314 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $314$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$0 = $8;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
    $316 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $316$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $314$hi;
    i64toi32_i32$1 = $314;
    i64toi32_i32$0 = $316$hi;
    i64toi32_i32$5 = $316;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $8 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $8$hi = i64toi32_i32$0;
    $7 = $7 + 1 | 0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$4 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$2 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $154 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
     $154 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$2 | 0) | 0;
    }
    $4 = $154;
    $4$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $6$hi;
   i64toi32_i32$0 = $6;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$4 = i64toi32_i32$1 & i64toi32_i32$4 | 0;
   $1 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$4;
   label$14 : {
    if (($7 | 0) < (32767 | 0)) {
     break label$14
    }
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$1 = $1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $4 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   $10 = 0;
   label$15 : {
    label$16 : {
     if (($7 | 0) <= (0 | 0)) {
      break label$16
     }
     $10 = $7;
     break label$15;
    }
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$1 = $4$hi;
    __ashlti3($5 + 16 | 0 | 0, $8 | 0, i64toi32_i32$0 | 0, $4 | 0, i64toi32_i32$1 | 0, $7 + 127 | 0 | 0);
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$1 = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    __lshrti3($5 | 0, $8 | 0, i64toi32_i32$1 | 0, $4 | 0, i64toi32_i32$0 | 0, 1 - $7 | 0 | 0);
    i64toi32_i32$4 = $5;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $343 = i64toi32_i32$0;
    $343$hi = i64toi32_i32$1;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 20 | 0) >> 2] | 0;
    $345 = i64toi32_i32$1;
    $345$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $349 = i64toi32_i32$0;
    $349$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $345$hi;
    i64toi32_i32$4 = $345;
    i64toi32_i32$0 = $349$hi;
    i64toi32_i32$5 = $349;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 0;
    $351 = (i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0;
    i64toi32_i32$1 = 0;
    $352$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $343$hi;
    i64toi32_i32$5 = $343;
    i64toi32_i32$0 = $352$hi;
    i64toi32_i32$4 = $351;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    $8 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $8$hi = i64toi32_i32$0;
    i64toi32_i32$1 = $5 + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$0;
    $4$hi = i64toi32_i32$5;
   }
   i64toi32_i32$5 = $8$hi;
   i64toi32_i32$1 = $8;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $155 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    $155 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
   }
   $358 = $155;
   $358$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 61;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
    $156 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$2 | 0) | 0;
    $156 = i64toi32_i32$5 << i64toi32_i32$2 | 0;
   }
   $360$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $358$hi;
   i64toi32_i32$0 = $358;
   i64toi32_i32$5 = $360$hi;
   i64toi32_i32$4 = $156;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
   $3 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
   $3$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = $10;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 48;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $157 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $157 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $364 = $157;
   $364$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 3;
   i64toi32_i32$2 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $158 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$2 | 0;
    $158 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$2 | 0) | 0;
   }
   i64toi32_i32$0 = $158;
   i64toi32_i32$5 = 65535;
   i64toi32_i32$4 = -1;
   i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $367 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $367$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $364$hi;
   i64toi32_i32$1 = $364;
   i64toi32_i32$0 = $367$hi;
   i64toi32_i32$4 = $367;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $368$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $368$hi;
   i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $8$hi;
   $7 = $8 & 7 | 0;
   label$17 : {
    label$18 : {
     label$19 : {
      switch (__fe_getround() | 0 | 0) {
      case 0:
       i64toi32_i32$1 = $4$hi;
       $375 = $4;
       $375$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = 0;
       $379$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$0 = $3;
       i64toi32_i32$5 = $379$hi;
       i64toi32_i32$4 = $7 >>> 0 > 4 >>> 0;
       i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
       i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $8 = i64toi32_i32$2;
       $8$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $8$hi;
       i64toi32_i32$1 = i64toi32_i32$2;
       i64toi32_i32$0 = $3$hi;
       i64toi32_i32$4 = $3;
       $383 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
       i64toi32_i32$1 = 0;
       $384$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $375$hi;
       i64toi32_i32$4 = $375;
       i64toi32_i32$3 = $384$hi;
       i64toi32_i32$0 = $383;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
       i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
       }
       $4 = i64toi32_i32$5;
       $4$hi = i64toi32_i32$2;
       label$22 : {
        if (($7 | 0) == (4 | 0)) {
         break label$22
        }
        i64toi32_i32$2 = $8$hi;
        $3 = $8;
        $3$hi = i64toi32_i32$2;
        break label$18;
       }
       i64toi32_i32$2 = $4$hi;
       $389 = $4;
       $389$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8;
       i64toi32_i32$4 = 0;
       i64toi32_i32$0 = 1;
       i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
       $1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
       $1$hi = i64toi32_i32$4;
       i64toi32_i32$4 = i64toi32_i32$2;
       i64toi32_i32$4 = $1$hi;
       i64toi32_i32$2 = $1;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$0 = $8;
       i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $3 = i64toi32_i32$3;
       $3$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $1$hi;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$4 = i64toi32_i32$3;
       i64toi32_i32$2 = $1$hi;
       i64toi32_i32$0 = $1;
       $397 = i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $398$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $389$hi;
       i64toi32_i32$0 = $389;
       i64toi32_i32$5 = $398$hi;
       i64toi32_i32$2 = $397;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
       }
       $4 = i64toi32_i32$1;
       $4$hi = i64toi32_i32$3;
       break label$17;
      case 1:
       i64toi32_i32$3 = $4$hi;
       $400 = $4;
       $400$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $1$hi;
       i64toi32_i32$4 = $1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$2 = 0;
       $406 = ((i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) & ($7 | 0) != (0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $407$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$2 = $3;
       i64toi32_i32$3 = $407$hi;
       i64toi32_i32$0 = $406;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
       i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
       }
       $8 = i64toi32_i32$5;
       $8$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $3$hi;
       i64toi32_i32$1 = $8$hi;
       i64toi32_i32$4 = i64toi32_i32$5;
       i64toi32_i32$2 = $3$hi;
       i64toi32_i32$0 = $3;
       $411 = i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
       i64toi32_i32$4 = 0;
       $412$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $400$hi;
       i64toi32_i32$0 = $400;
       i64toi32_i32$1 = $412$hi;
       i64toi32_i32$2 = $411;
       i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
       i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $4 = i64toi32_i32$3;
       $4$hi = i64toi32_i32$5;
       i64toi32_i32$5 = $8$hi;
       $3 = $8;
       $3$hi = i64toi32_i32$5;
       break label$18;
      case 2:
       break label$19;
      default:
       break label$18;
      };
     }
     i64toi32_i32$5 = $4$hi;
     $415 = $4;
     $415$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $1$hi;
     $421 = !($1 | i64toi32_i32$5 | 0) & ($7 | 0) != (0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $422$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$4 = $3;
     i64toi32_i32$0 = $422$hi;
     i64toi32_i32$2 = $421;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
     }
     $8 = i64toi32_i32$1;
     $8$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$3 = $8$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = $3;
     $426 = i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$5 = 0;
     $427$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $415$hi;
     i64toi32_i32$2 = $415;
     i64toi32_i32$3 = $427$hi;
     i64toi32_i32$4 = $426;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $8$hi;
     $3 = $8;
     $3$hi = i64toi32_i32$1;
    }
    if (!$7) {
     break label$1
    }
   }
   __fe_raise_inexact() | 0;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $5 + 112 | 0;
 }
 
 function __subtf3($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$1 = 0, $14 = 0, $14$hi = 0, $20 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
  $14 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$3 = $14$hi;
  __addtf3($5 | 0, $1 | 0, $1$hi | 0, $2 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, $14 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $5;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $1 = i64toi32_i32$3;
  $1$hi = i64toi32_i32$0;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $20 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $20;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $1$hi;
  HEAP32[i64toi32_i32$0 >> 2] = $1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $5 + 16 | 0;
 }
 
 function __trunctfdf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $3 = 0, $3$hi = 0, $4$hi = 0, $4 = 0, $2 = 0, $5 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $17 = 0, $17$hi = 0, $19$hi = 0, $33 = 0, $33$hi = 0, $36 = 0, $38 = 0, $43 = 0, $43$hi = 0, $45$hi = 0, $73 = 0, $73$hi = 0, $77$hi = 0, $80 = 0, $80$hi = 0, $82 = 0, $82$hi = 0, $86 = 0, $86$hi = 0, $88 = 0, $89$hi = 0, $98$hi = 0, $105 = 0, $105$hi = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $44 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $44 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17 = $44;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $3$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $4 = i64toi32_i32$0;
     $4$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $4 = i64toi32_i32$4;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$5 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
    $33 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
    $33$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$3 = $33$hi;
    i64toi32_i32$5 = $33;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $36 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = 2147418112;
    i64toi32_i32$5 = 0;
    $38 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$0 = i64toi32_i32$4;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & (i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) | 0 ? $36 : $38) {
     break label$4
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $46 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
     $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$3 | 0) | 0;
    }
    $43 = $46;
    $43$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
     $47 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$3 | 0) | 0;
     $47 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
    }
    $45$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $43$hi;
    i64toi32_i32$0 = $43;
    i64toi32_i32$5 = $45$hi;
    i64toi32_i32$4 = $47;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    i64toi32_i32$2 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $4 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    $4$hi = i64toi32_i32$2;
    break label$1;
   }
   i64toi32_i32$2 = 2146435072;
   $4 = 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$5 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$2 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   $4 = 0;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $48 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $48 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $5 = $48;
   if ($5 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
   i64toi32_i32$0 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $3 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$2 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$0 | 0, $3 | 0, i64toi32_i32$2 | 0, $5 + -15233 | 0 | 0);
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$0 | 0, 15361 - $5 | 0 | 0);
   i64toi32_i32$4 = $2;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 60;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $49 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    $49 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $73 = $49;
   $73$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 4;
   i64toi32_i32$3 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    $50 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
   }
   $77$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $73$hi;
   i64toi32_i32$4 = $73;
   i64toi32_i32$2 = $77$hi;
   i64toi32_i32$5 = $50;
   i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   label$5 : {
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$5 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
    $80 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $80$hi = i64toi32_i32$4;
    i64toi32_i32$2 = $2;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $82 = i64toi32_i32$4;
    $82$hi = i64toi32_i32$0;
    i64toi32_i32$2 = (i64toi32_i32$2 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $86 = i64toi32_i32$0;
    $86$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $82$hi;
    i64toi32_i32$2 = $82;
    i64toi32_i32$0 = $86$hi;
    i64toi32_i32$5 = $86;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 0;
    $88 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0;
    i64toi32_i32$4 = 0;
    $89$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $80$hi;
    i64toi32_i32$5 = $80;
    i64toi32_i32$0 = $89$hi;
    i64toi32_i32$2 = $88;
    i64toi32_i32$0 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    $3 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$2 = 1;
    if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$2 = $4;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $4 = i64toi32_i32$3;
    $4$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$2 = 134217728;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = 0;
   i64toi32_i32$2 = 1;
   i64toi32_i32$1 = i64toi32_i32$4 & i64toi32_i32$1 | 0;
   $98$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$1 = $98$hi;
   i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$2 = $4;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$3;
  }
  __stack_pointer = $2 + 32 | 0;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$1 = $1;
  i64toi32_i32$4 = -2147483648;
  i64toi32_i32$2 = 0;
  i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
  $105 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $105$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$3 = $4;
  i64toi32_i32$1 = $105$hi;
  i64toi32_i32$2 = $105;
  i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function __extendsftf2($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $2 = 0, $5 = 0, $5$hi = 0, $6 = 0, $6$hi = 0, $3 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $38 = 0, $38$hi = 0, $42$hi = 0, $48 = 0, $49 = 0, $49$hi = 0, $53$hi = 0, $54 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    $3 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
    $4 = $3 & 2147483647 | 0;
    if (($4 + -8388608 | 0) >>> 0 > 2130706431 >>> 0) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $24 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $24 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    i64toi32_i32$0 = $24;
    i64toi32_i32$2 = 1065353216;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $5 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$5;
    break label$1;
   }
   label$3 : {
    if ($4 >>> 0 < 2139095040 >>> 0) {
     break label$3
    }
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 25;
    i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
     $25 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
     $25 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    }
    i64toi32_i32$5 = $25;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    break label$1;
   }
   label$4 : {
    if ($4) {
     break label$4
    }
    i64toi32_i32$1 = 0;
    $6 = 0;
    $6$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = 0;
   $30 = $4;
   $4 = Math_clz32($4);
   i64toi32_i32$5 = 0;
   __ashlti3($2 | 0, $30 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$5 | 0, $4 + 81 | 0 | 0);
   i64toi32_i32$0 = $2 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = i64toi32_i32$1 ^ i64toi32_i32$5 | 0;
   $38 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
   $38$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = 16265 - $4 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
    $26 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
    $26 = i64toi32_i32$1 << i64toi32_i32$2 | 0;
   }
   $42$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $38$hi;
   i64toi32_i32$5 = $38;
   i64toi32_i32$1 = $42$hi;
   i64toi32_i32$3 = $26;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $5 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$0 = $2;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   $6 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $6$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $6;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$5;
  $48 = i64toi32_i32$1;
  i64toi32_i32$5 = $5$hi;
  $49 = $5;
  $49$hi = i64toi32_i32$5;
  i64toi32_i32$5 = 0;
  i64toi32_i32$0 = $3 & -2147483648 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   $27 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$2 | 0) | 0;
   $27 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
  }
  $53$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $49$hi;
  i64toi32_i32$5 = $49;
  i64toi32_i32$0 = $53$hi;
  i64toi32_i32$3 = $27;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  $54 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
  i64toi32_i32$5 = $48;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $54;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, $5 = 0, i64toi32_i32$4 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $21 = 0, $22 = 0, $19 = 0, $27 = 0, $27$hi = 0, $31$hi = 0, $32 = 0, $32$hi = 0, $36$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   $5 = $1 >> 31 | 0;
   $5 = ($1 ^ $5 | 0) - $5 | 0;
   i64toi32_i32$0 = 0;
   $19 = $5;
   $5 = Math_clz32($5);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $19 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $5 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $27 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $27$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $5 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $21 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $21 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $31$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $27$hi;
   i64toi32_i32$1 = $27;
   i64toi32_i32$0 = $31$hi;
   i64toi32_i32$3 = $21;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $32 = i64toi32_i32$4;
   $32$hi = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = $1 & -2147483648 | 0;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    $22 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
    $22 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
   }
   $36$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $32$hi;
   i64toi32_i32$5 = $32;
   i64toi32_i32$2 = $36$hi;
   i64toi32_i32$3 = $22;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $2;
   i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$2;
   $3$hi = i64toi32_i32$5;
  }
  i64toi32_i32$5 = $3$hi;
  i64toi32_i32$2 = $0;
  HEAP32[i64toi32_i32$2 >> 2] = $3;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$5;
  i64toi32_i32$5 = $4$hi;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __extenddftf2($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $4 = 0, $4$hi = 0, $2 = 0, $3 = 0, $3$hi = 0, $5 = 0, $5$hi = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $6 = 0, $31 = 0, $32 = 0, $33 = 0, $33$hi = 0, $37 = 0, $50 = 0, $50$hi = 0, $54$hi = 0, $63 = 0, $63$hi = 0, $64 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $3;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $5 = $26;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $4 = i64toi32_i32$2;
    $4$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $3$hi;
    i64toi32_i32$0 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $5 = $28;
    $5$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $4 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $4$hi;
    if (!!($4 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $5 = 0;
    $5$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   $32 = $2;
   i64toi32_i32$3 = $4$hi;
   $33 = $4;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $3$hi;
   $37 = Math_clz32($3) + 32 | 0;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$0 = $4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$3 = $4;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $6 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37 : Math_clz32($30);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   __ashlti3($32 | 0, $33 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $6 + 49 | 0 | 0);
   i64toi32_i32$5 = $2 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $6 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $4 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $4$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $5 = i64toi32_i32$3;
   $5$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$3 = $0;
  HEAP32[i64toi32_i32$3 >> 2] = $5;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$5 = $3;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$4 = $4;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __floatunsitf($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2 = 0, $3 = 0, $3$hi = 0, $4 = 0, $4$hi = 0, $17 = 0, $11 = 0, $19 = 0, $19$hi = 0, $23$hi = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if ($1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11 = $1;
   $1 = Math_clz32($1);
   i64toi32_i32$1 = 0;
   __ashlti3($2 | 0, $11 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0;
  HEAP32[i64toi32_i32$5 >> 2] = $3;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __trunctfsf2($0, $0$hi, $1, $1$hi) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $3 = 0, $3$hi = 0, $5 = 0, $4 = 0, $2 = 0, i64toi32_i32$2 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $12 = 0, $12$hi = 0, $14$hi = 0, $20 = 0, $24 = 0, $34 = 0, $34$hi = 0, $42 = 0, $44 = 0, $81 = 0, $81$hi = 0, $83 = 0, $83$hi = 0, $87 = 0, $87$hi = 0, $89 = 0, $90$hi = 0, $93 = 0, $97 = 0, $105 = 0, $105$hi = 0, $114 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $3 = $1 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$1 = $3;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4 = $37;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20 = !($0 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $3 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $3$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $3;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20 : $24) {
      break label$3
     }
     $5 = $4 + 1073741825 | 0;
     break label$1;
    }
    $5 = $4 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$5 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $5 = $5 + ($4 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42 = !($0 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $3$hi;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42 : $44) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $5 = $38 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $5 = 2139095040;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$1 = $3;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $5 = 0;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4 = $39;
   if ($4 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   __ashlti3($2 + 16 | 0 | 0, $0 | 0, i64toi32_i32$1 | 0, $3 | 0, i64toi32_i32$3 | 0, $4 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   __lshrti3($2 | 0, $0 | 0, i64toi32_i32$3 | 0, $3 | 0, i64toi32_i32$1 | 0, 16257 - $4 | 0 | 0);
   i64toi32_i32$4 = $2 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $3 = i64toi32_i32$1;
   $3$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $5 = $40;
   label$5 : {
    i64toi32_i32$3 = $2;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93 = !($0 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $3$hi;
    i64toi32_i32$4 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $3$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $3;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $3;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93 : $97) {
     break label$5
    }
    $5 = $5 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$4 = $3;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $5 = ($5 & 1 | 0) + $5 | 0;
  }
  __stack_pointer = $2 + 32 | 0;
  $114 = $5;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114 | ($41 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function memmove($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   label$2 : {
    $3 = $0 + $2 | 0;
    if (($1 - $3 | 0) >>> 0 > (0 - ($2 << 1 | 0) | 0) >>> 0) {
     break label$2
    }
    return __memcpy($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
   }
   $4 = ($1 ^ $0 | 0) & 3 | 0;
   label$3 : {
    label$4 : {
     label$5 : {
      if ($0 >>> 0 >= $1 >>> 0) {
       break label$5
      }
      label$6 : {
       if (!$4) {
        break label$6
       }
       $3 = $0;
       break label$3;
      }
      label$7 : {
       if ($0 & 3 | 0) {
        break label$7
       }
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      label$8 : while (1) {
       if (!$2) {
        break label$1
       }
       HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
       $1 = $1 + 1 | 0;
       $2 = $2 + -1 | 0;
       $3 = $3 + 1 | 0;
       if (!($3 & 3 | 0)) {
        break label$4
       }
       continue label$8;
      };
     }
     label$9 : {
      if ($4) {
       break label$9
      }
      label$10 : {
       if (!($3 & 3 | 0)) {
        break label$10
       }
       label$11 : while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 + -1 | 0;
        $3 = $0 + $2 | 0;
        HEAP8[$3 >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
        if ($3 & 3 | 0) {
         continue label$11
        }
        break label$11;
       };
      }
      if ($2 >>> 0 <= 3 >>> 0) {
       break label$9
      }
      label$12 : while (1) {
       $2 = $2 + -4 | 0;
       HEAP32[($0 + $2 | 0) >> 2] = HEAP32[($1 + $2 | 0) >> 2] | 0;
       if ($2 >>> 0 > 3 >>> 0) {
        continue label$12
       }
       break label$12;
      };
     }
     if (!$2) {
      break label$1
     }
     label$13 : while (1) {
      $2 = $2 + -1 | 0;
      HEAP8[($0 + $2 | 0) >> 0] = HEAPU8[($1 + $2 | 0) >> 0] | 0;
      if ($2) {
       continue label$13
      }
      break label$1;
     };
    }
    if ($2 >>> 0 <= 3 >>> 0) {
     break label$3
    }
    label$14 : while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1 >> 2] | 0;
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 + -4 | 0;
     if ($2 >>> 0 > 3 >>> 0) {
      continue label$14
     }
     break label$14;
    };
   }
   if (!$2) {
    break label$1
   }
   label$15 : while (1) {
    HEAP8[$3 >> 0] = HEAPU8[$1 >> 0] | 0;
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 + -1 | 0;
    if ($2) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0 | 0;
 }
 
 function __embind_init_mozjpeg_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = emscripten__value_object_MozJPEGOptions___value_object_28char_20const__29($0 + 8 | 0 | 0) | 0;
  emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29(emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29($1 | 0, 132377 | 0, 0 | 0) | 0 | 0, 135185 | 0, 4 | 0) | 0 | 0, 137193 | 0, 5 | 0) | 0 | 0, 135123 | 0, 6 | 0) | 0 | 0, 135104 | 0, 7 | 0) | 0 | 0, 135094 | 0, 8 | 0) | 0 | 0, 135771 | 0, 12 | 0) | 0 | 0, 135425 | 0, 16 | 0) | 0 | 0, 133862 | 0, 20 | 0) | 0 | 0, 134685 | 0, 21 | 0) | 0 | 0, 135409 | 0, 22 | 0) | 0 | 0, 134196 | 0, 24 | 0) | 0 | 0, 135240 | 0, 28 | 0) | 0 | 0, 135254 | 0, 32 | 0) | 0 | 0, 132399 | 0, 36 | 0) | 0 | 0, 132385 | 0, 40 | 0) | 0;
  emscripten__value_object_MozJPEGOptions____value_object_28_29($1 | 0) | 0;
  void_20emscripten__function_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__28char_20const__2c_20int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29_29();
  void_20emscripten__function_emscripten__val_2c_20int__28char_20const__2c_20emscripten__val_20_28__29_28int_29_29();
  void_20emscripten__function_void_2c_20int__28char_20const__2c_20void_20_28__29_28int_29_29();
  __stack_pointer = $0 + 16 | 0;
 }
 
 function emscripten__value_object_MozJPEGOptions___value_object_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 20 | 0) >> 2] = $0;
  HEAP32[($1 + 16 | 0) >> 2] = 134266;
  $0 = emscripten__internal__noncopyable__noncopyable_28_29(HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($1 + 12 | 0) >> 2] = 98;
  HEAP32[($1 + 8 | 0) >> 2] = 99;
  emscripten__internal__TypeID_MozJPEGOptions_2c_20void___get_28_29();
  $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
  HEAP32[($1 + 24 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_int__28_29();
  $3 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  HEAP32[($1 + 28 | 0) >> 2] = HEAP32[($1 + 8 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29();
  _embind_register_value_object(151228 | 0, $2 | 0, 151236 | 0, $3 | 0, 151238 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $1 + 32 | 0;
  return $0 | 0;
 }
 
 function emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20int__28char_20const__2c_20int_20MozJPEGOptions____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 20 | 0) >> 2] = $0;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 100;
  HEAP32[($3 + 4 | 0) >> 2] = 101;
  emscripten__internal__TypeID_MozJPEGOptions_2c_20void___get_28_29();
  $1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  emscripten__internal__TypeID_int_2c_20void___get_28_29();
  HEAP32[($3 + 24 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
  $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $4 = int_20MozJPEGOptions_____20emscripten__internal__getContext_int_20MozJPEGOptions_____28int_20MozJPEGOptions____20const__29($3 + 12 | 0 | 0) | 0;
  emscripten__internal__TypeID_int_2c_20void___get_28_29();
  HEAP32[($3 + 28 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29();
  _embind_register_value_object_field(151228 | 0, $1 | 0, 158608 | 0, 151241 | 0, $0 | 0, $4 | 0, 158608 | 0, 151245 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, int_20MozJPEGOptions_____20emscripten__internal__getContext_int_20MozJPEGOptions_____28int_20MozJPEGOptions____20const__29($3 + 12 | 0 | 0) | 0 | 0);
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function emscripten__value_object_MozJPEGOptions___20emscripten__value_object_MozJPEGOptions___field_MozJPEGOptions_2c_20bool__28char_20const__2c_20bool_20MozJPEGOptions____29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 20 | 0) >> 2] = $0;
  HEAP32[($3 + 16 | 0) >> 2] = $1;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 8 | 0) >> 2] = 102;
  HEAP32[($3 + 4 | 0) >> 2] = 103;
  emscripten__internal__TypeID_MozJPEGOptions_2c_20void___get_28_29();
  $1 = HEAP32[($3 + 16 | 0) >> 2] | 0;
  emscripten__internal__TypeID_bool_2c_20void___get_28_29();
  HEAP32[($3 + 24 | 0) >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
  $0 = HEAP32[($3 + 8 | 0) >> 2] | 0;
  $4 = bool_20MozJPEGOptions_____20emscripten__internal__getContext_bool_20MozJPEGOptions_____28bool_20MozJPEGOptions____20const__29($3 + 12 | 0 | 0) | 0;
  emscripten__internal__TypeID_bool_2c_20void___get_28_29();
  HEAP32[($3 + 28 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29();
  _embind_register_value_object_field(151228 | 0, $1 | 0, 158536 | 0, 151241 | 0, $0 | 0, $4 | 0, 158536 | 0, 151245 | 0, HEAP32[($3 + 4 | 0) >> 2] | 0 | 0, bool_20MozJPEGOptions_____20emscripten__internal__getContext_bool_20MozJPEGOptions_____28bool_20MozJPEGOptions____20const__29($3 + 12 | 0 | 0) | 0 | 0);
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function emscripten__value_object_MozJPEGOptions____value_object_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  emscripten__internal__TypeID_MozJPEGOptions_2c_20void___get_28_29();
  _embind_finalize_value_object(151228 | 0);
  $0 = emscripten__internal__noncopyable___noncopyable_28_29($0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function void_20emscripten__function_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__28char_20const__2c_20int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[($0 + 24 | 0) >> 2] = 135644;
  HEAP32[($0 + 20 | 0) >> 2] = 104;
  HEAP32[($0 + 12 | 0) >> 2] = 105;
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  emscripten__internal__WithPolicies____ArgTypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___getCount_28_29_20const($0 + 16 | 0 | 0);
  emscripten__internal__WithPolicies____ArgTypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___getTypes_28_29_20const($0 + 16 | 0 | 0);
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 12 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29();
  _embind_register_function($1 | 0, 6 | 0, 151264 | 0, 151288 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0);
  __stack_pointer = $0 + 32 | 0;
 }
 
 function void_20emscripten__function_emscripten__val_2c_20int__28char_20const__2c_20emscripten__val_20_28__29_28int_29_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[($0 + 24 | 0) >> 2] = 135571;
  HEAP32[($0 + 20 | 0) >> 2] = 106;
  HEAP32[($0 + 12 | 0) >> 2] = 107;
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20int___getCount_28_29_20const($0 + 16 | 0 | 0);
  emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20int___getTypes_28_29_20const($0 + 16 | 0 | 0);
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 12 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29();
  _embind_register_function($1 | 0, 2 | 0, 151296 | 0, 151241 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0);
  __stack_pointer = $0 + 32 | 0;
 }
 
 function void_20emscripten__function_void_2c_20int__28char_20const__2c_20void_20_28__29_28int_29_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  HEAP32[($0 + 24 | 0) >> 2] = 135580;
  HEAP32[($0 + 20 | 0) >> 2] = 108;
  HEAP32[($0 + 12 | 0) >> 2] = 109;
  $1 = HEAP32[($0 + 24 | 0) >> 2] | 0;
  emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int___getCount_28_29_20const($0 + 16 | 0 | 0);
  emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int___getTypes_28_29_20const($0 + 16 | 0 | 0);
  HEAP32[($0 + 28 | 0) >> 2] = HEAP32[($0 + 12 | 0) >> 2] | 0;
  char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29();
  _embind_register_function($1 | 0, 2 | 0, 151304 | 0, 151312 | 0, HEAP32[($0 + 12 | 0) >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0);
  __stack_pointer = $0 + 32 | 0;
 }
 
 function emscripten__internal__noncopyable__noncopyable_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function MozJPEGOptions__20emscripten__internal__raw_constructor_MozJPEGOptions__28_29() {
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $0 = 0;
  $0 = operator_20new_28unsigned_20long_29(44 | 0) | 0;
  i64toi32_i32$1 = $0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[(i64toi32_i32$1 + 40 | 0) >> 2] = 0;
  i64toi32_i32$1 = i64toi32_i32$1 + 32 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $0 + 8 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  return $0 | 0;
 }
 
 function void_20emscripten__internal__raw_destructor_MozJPEGOptions__28MozJPEGOptions__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  label$1 : {
   $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
   if (($0 | 0) == (0 | 0) & 1 | 0) {
    break label$1
   }
   operator_20delete_28void__29($0 | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__TypeID_MozJPEGOptions_2c_20void___get_28_29() {
  emscripten__internal__LightTypeID_MozJPEGOptions___get_28_29();
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_int__28_29() {
  
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int__28_29() {
  
 }
 
 function int_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20int___getWire_MozJPEGOptions__28int_20MozJPEGOptions____20const__2c_20MozJPEGOptions_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29((HEAP32[($2 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($2 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function void_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20int___setWire_MozJPEGOptions__28int_20MozJPEGOptions____20const__2c_20MozJPEGOptions__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  $2 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($3 + 4 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($3 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 2] = $2;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__TypeID_int_2c_20void___get_28_29() {
  emscripten__internal__LightTypeID_int___get_28_29();
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int__28_29() {
  
 }
 
 function int_20MozJPEGOptions_____20emscripten__internal__getContext_int_20MozJPEGOptions_____28int_20MozJPEGOptions____20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = operator_20new_28unsigned_20long_29(4 | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $0;
  $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int_2c_20int__28_29() {
  
 }
 
 function bool_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20bool___getWire_MozJPEGOptions__28bool_20MozJPEGOptions____20const__2c_20MozJPEGOptions_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29((HEAPU8[((HEAP32[($2 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($2 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 & 1 | 0 | 0;
 }
 
 function void_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20bool___setWire_MozJPEGOptions__28bool_20MozJPEGOptions____20const__2c_20MozJPEGOptions__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  HEAP8[($3 + 7 | 0) >> 0] = $2;
  $2 = emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29((HEAPU8[($3 + 7 | 0) >> 0] | 0) & 1 | 0 | 0) | 0;
  HEAP8[((HEAP32[($3 + 8 | 0) >> 2] | 0) + (HEAP32[(HEAP32[($3 + 12 | 0) >> 2] | 0) >> 2] | 0) | 0) >> 0] = $2 & 1 | 0;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__TypeID_bool_2c_20void___get_28_29() {
  emscripten__internal__LightTypeID_bool___get_28_29();
 }
 
 function bool_20MozJPEGOptions_____20emscripten__internal__getContext_bool_20MozJPEGOptions_____28bool_20MozJPEGOptions____20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = operator_20new_28unsigned_20long_29(4 | 0) | 0;
  HEAP32[$0 >> 2] = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($1 + 8 | 0) >> 2] = $0;
  $0 = HEAP32[($1 + 8 | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__noncopyable___noncopyable_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function encode_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 592 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 588 | 0) >> 2] = $1;
  HEAP32[($5 + 584 | 0) >> 2] = $2;
  HEAP32[($5 + 580 | 0) >> 2] = $3;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 576 | 0) >> 2] = wasm2js_i32$1;
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = jpeg_std_error($5 + 440 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 64 | 0) >> 2] = wasm2js_i32$1;
  jpeg_CreateCompress($5 + 64 | 0 | 0, 62 | 0, 376 | 0);
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = FUNCTION_TABLE[110 | 0](8) | 0), HEAP32[(wasm2js_i32$0 + 60 | 0) >> 2] = wasm2js_i32$1;
  jpeg_mem_dest($5 + 64 | 0 | 0, (HEAP32[($5 + 60 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[($5 + 60 | 0) >> 2] | 0 | 0);
  HEAP32[($5 + 92 | 0) >> 2] = HEAP32[($5 + 588 | 0) >> 2] | 0;
  HEAP32[($5 + 96 | 0) >> 2] = HEAP32[($5 + 584 | 0) >> 2] | 0;
  HEAP32[($5 + 100 | 0) >> 2] = HEAP32[($5 + 580 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5 + 580 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5 + 104 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((HEAP32[($5 + 580 | 0) >> 2] | 0 | 0) == (4 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5 + 104 | 0) >> 2] = 12;
     break label$3;
    }
    HEAP32[($5 + 104 | 0) >> 2] = 2;
   }
  }
  jpeg_set_defaults($5 + 64 | 0 | 0);
  jpeg_set_colorspace($5 + 64 | 0 | 0, HEAP32[($4 + 12 | 0) >> 2] | 0 | 0);
  label$5 : {
   if (!((HEAP32[($4 + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
    break label$5
   }
   jpeg_c_set_int_param($5 + 64 | 0 | 0, 1145645745 | 0, HEAP32[($4 + 16 | 0) >> 2] | 0 | 0);
  }
  HEAP32[($5 + 248 | 0) >> 2] = (HEAPU8[($4 + 7 | 0) >> 0] | 0) & 1 | 0;
  label$6 : {
   if (!((HEAPU8[($4 + 5 | 0) >> 0] | 0) & 1 | 0)) {
    break label$6
   }
   HEAP32[($5 + 244 | 0) >> 2] = 1;
   HEAP32[($5 + 248 | 0) >> 2] = 0;
  }
  HEAP32[($5 + 256 | 0) >> 2] = HEAP32[($4 + 8 | 0) >> 2] | 0;
  jpeg_c_set_bool_param($5 + 64 | 0 | 0, -41675723 | 0, (HEAPU8[($4 + 20 | 0) >> 0] | 0) & 1 | 0 | 0);
  jpeg_c_set_bool_param($5 + 64 | 0 | 0, -671664256 | 0, (HEAPU8[($4 + 21 | 0) >> 0] | 0) & 1 | 0 | 0);
  jpeg_c_set_bool_param($5 + 64 | 0 | 0, -517283223 | 0, (HEAPU8[($4 + 22 | 0) >> 0] | 0) & 1 | 0 | 0);
  jpeg_c_set_int_param($5 + 64 | 0 | 0, -1237401799 | 0, HEAP32[($4 + 24 | 0) >> 2] | 0 | 0);
  std____2__to_string_28int_29($5 + 48 | 0 | 0, HEAP32[$4 >> 2] | 0 | 0);
  label$7 : {
   if (!((HEAPU8[($4 + 36 | 0) >> 0] | 0) & 1 | 0)) {
    break label$7
   }
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
    break label$7
   }
   std____2__to_string_28int_29($5 + 16 | 0 | 0, HEAP32[($4 + 40 | 0) >> 2] | 0 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28char_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($5 + 32 | 0 | 0, $5 + 16 | 0 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($5 + 48 | 0 | 0, $5 + 32 | 0 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 32 | 0 | 0) | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 16 | 0 | 0) | 0;
  }
  (wasm2js_i32$0 = $5, wasm2js_i32$1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($5 + 48 | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 12 | 0) >> 2] = wasm2js_i32$1;
  set_quality_ratings_28jpeg_compress_struct__2c_20char__2c_20int_29($5 + 64 | 0 | 0, HEAP32[($5 + 12 | 0) >> 2] | 0 | 0, (HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0 | 0);
  label$8 : {
   if ((HEAPU8[($4 + 28 | 0) >> 0] | 0) & 1 | 0) {
    break label$8
   }
   if (!((HEAP32[($4 + 12 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
    break label$8
   }
   HEAP32[((HEAP32[($5 + 132 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5 + 132 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($4 + 32 | 0) >> 2] | 0;
  }
  label$9 : {
   label$10 : {
    if ((HEAPU8[($4 + 4 | 0) >> 0] | 0) & 1 | 0) {
     break label$10
    }
    if (!((HEAPU8[($4 + 6 | 0) >> 0] | 0) & 1 | 0)) {
     break label$10
    }
    jpeg_simple_progression($5 + 64 | 0 | 0);
    break label$9;
   }
   HEAP32[($5 + 232 | 0) >> 2] = 0;
   HEAP32[($5 + 236 | 0) >> 2] = 0;
  }
  jpeg_start_compress($5 + 64 | 0 | 0, 1 | 0);
  HEAP32[($5 + 8 | 0) >> 2] = Math_imul(HEAP32[($5 + 588 | 0) >> 2] | 0, HEAP32[($5 + 580 | 0) >> 2] | 0);
  label$11 : {
   label$12 : while (1) {
    if (!((HEAP32[($5 + 288 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5 + 96 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$11
    }
    HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 576 | 0) >> 2] | 0) + Math_imul(HEAP32[($5 + 288 | 0) >> 2] | 0, HEAP32[($5 + 8 | 0) >> 2] | 0) | 0;
    jpeg_write_scanlines($5 + 64 | 0 | 0, $5 + 4 | 0 | 0, 1 | 0) | 0;
    continue label$12;
   };
  }
  jpeg_finish_compress($5 + 64 | 0 | 0);
  jpeg_destroy_compress($5 + 64 | 0 | 0);
  $4 = HEAP32[($5 + 60 | 0) >> 2] | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($5 + 48 | 0 | 0) | 0;
  __stack_pointer = $5 + 592 | 0;
  return $4 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___c_str_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__to_string_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0 | 0, $1 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2__operator__char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__28char_20const__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = 138194;
  HEAP32[($2 + 4 | 0) >> 2] = $1;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__29(HEAP32[($2 + 4 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___operator___28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0 | 0) | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0 | 0) | 0;
   std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($1 | 0);
  }
  return $0 | 0;
 }
 
 function set_quality_ratings_28jpeg_compress_struct__2c_20char__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0);
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 40 | 0) >> 2] = $0;
  HEAP32[($3 + 36 | 0) >> 2] = $1;
  HEAP32[($3 + 32 | 0) >> 2] = $2;
  HEAPF32[($3 + 28 | 0) >> 2] = Math_fround(75.0);
  HEAP32[($3 + 24 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($3 + 24 | 0) >> 2] | 0 | 0) < (4 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!(((HEAPU8[(HEAP32[($3 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP8[($3 + 23 | 0) >> 0] = 44;
       $2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
       HEAP32[($3 + 4 | 0) >> 2] = $3 + 23 | 0;
       HEAP32[$3 >> 2] = $3 + 28 | 0;
       label$6 : {
        if (!((sscanf($2 | 0, 137204 | 0, $3 | 0) | 0 | 0) < (1 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($3 + 44 | 0) >> 2] = 0;
        break label$1;
       }
       label$7 : {
        if (!((((HEAPU8[($3 + 23 | 0) >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (44 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($3 + 44 | 0) >> 2] = 0;
        break label$1;
       }
       label$8 : {
        label$9 : {
         $4 = Math_fround(jpeg_float_quality_scaling(Math_fround(Math_fround(HEAPF32[($3 + 28 | 0) >> 2]))));
         if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
          break label$9
         }
         $2 = ~~$4;
         break label$8;
        }
        $2 = -2147483648;
       }
       HEAP32[(158960 + ((HEAP32[($3 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $2;
       label$10 : while (1) {
        $2 = 0;
        label$11 : {
         if (!(((HEAPU8[(HEAP32[($3 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$11
         }
         $2 = HEAP32[($3 + 36 | 0) >> 2] | 0;
         HEAP32[($3 + 36 | 0) >> 2] = $2 + 1 | 0;
         $2 = (((HEAPU8[$2 >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (44 | 0);
        }
        label$12 : {
         if (!($2 & 1 | 0)) {
          break label$12
         }
         continue label$10;
        }
        break label$10;
       };
       break label$4;
      }
      label$13 : {
       label$14 : {
        $4 = Math_fround(jpeg_float_quality_scaling(Math_fround(Math_fround(HEAPF32[($3 + 28 | 0) >> 2]))));
        if (!(Math_fround(Math_abs($4)) < Math_fround(2147483648.0))) {
         break label$14
        }
        $2 = ~~$4;
        break label$13;
       }
       $2 = -2147483648;
      }
      HEAP32[(158960 + ((HEAP32[($3 + 24 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $2;
     }
     HEAP32[($3 + 24 | 0) >> 2] = (HEAP32[($3 + 24 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   jpeg_default_qtables_28jpeg_compress_struct__2c_20int_29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0, HEAP32[($3 + 32 | 0) >> 2] | 0 | 0);
   label$15 : {
    label$16 : {
     if (!(Math_fround(HEAPF32[($3 + 28 | 0) >> 2]) >= Math_fround(90.0) & 1 | 0)) {
      break label$16
     }
     set_sample_factors_28jpeg_compress_struct__2c_20char__29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0, 138188 | 0);
     break label$15;
    }
    label$17 : {
     if (!(Math_fround(HEAPF32[($3 + 28 | 0) >> 2]) >= Math_fround(80.0) & 1 | 0)) {
      break label$17
     }
     set_sample_factors_28jpeg_compress_struct__2c_20char__29(HEAP32[($3 + 40 | 0) >> 2] | 0 | 0, 138184 | 0);
    }
   }
   HEAP32[($3 + 44 | 0) >> 2] = 1;
  }
  __stack_pointer = $3 + 48 | 0;
 }
 
 function emscripten__internal__Invoker_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $51 = 0, $57 = 0, $63 = 0, $69 = 0, $72 = 0, $88 = 0, $95 = 0, $102 = 0, $109 = 0, $112 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 144 | 0;
  __stack_pointer = $6;
  HEAP32[($6 + 140 | 0) >> 2] = $0;
  HEAP32[($6 + 136 | 0) >> 2] = $1;
  HEAP32[($6 + 132 | 0) >> 2] = $2;
  HEAP32[($6 + 128 | 0) >> 2] = $3;
  HEAP32[($6 + 124 | 0) >> 2] = $4;
  HEAP32[($6 + 120 | 0) >> 2] = $5;
  $4 = HEAP32[($6 + 140 | 0) >> 2] | 0;
  emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($6 + 104 | 0 | 0, HEAP32[($6 + 136 | 0) >> 2] | 0 | 0);
  $3 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($6 + 132 | 0) >> 2] | 0 | 0) | 0;
  $2 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($6 + 128 | 0) >> 2] | 0 | 0) | 0;
  $1 = emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($6 + 124 | 0) >> 2] | 0 | 0) | 0;
  $5 = emscripten__internal__GenericBindingType_MozJPEGOptions___fromWireType_28MozJPEGOptions__29(HEAP32[($6 + 120 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[(($6 + 56 | 0) + 40 | 0) >> 2] = HEAP32[($5 + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 + 32 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $51 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6 + 56 | 0) + 32 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $51;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5 + 24 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $57 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6 + 56 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $57;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5 + 16 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $63 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6 + 56 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $63;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $5 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $69 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6 + 56 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $69;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $5;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $72 = i64toi32_i32$0;
  i64toi32_i32$0 = $6;
  HEAP32[($6 + 56 | 0) >> 2] = $72;
  HEAP32[($6 + 60 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(($6 + 8 | 0) + 40 | 0) >> 2] = HEAP32[(($6 + 56 | 0) + 40 | 0) >> 2] | 0;
  i64toi32_i32$2 = ($6 + 56 | 0) + 32 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $88 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6 + 8 | 0) + 32 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $88;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($6 + 56 | 0) + 24 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $95 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6 + 8 | 0) + 24 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $95;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = ($6 + 56 | 0) + 16 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $102 = i64toi32_i32$1;
  i64toi32_i32$1 = ($6 + 8 | 0) + 16 | 0;
  HEAP32[i64toi32_i32$1 >> 2] = $102;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = ($6 + 56 | 0) + 8 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $109 = i64toi32_i32$0;
  i64toi32_i32$0 = ($6 + 8 | 0) + 8 | 0;
  HEAP32[i64toi32_i32$0 >> 2] = $109;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$2 = $6;
  i64toi32_i32$1 = HEAP32[($6 + 56 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($6 + 60 | 0) >> 2] | 0;
  $112 = i64toi32_i32$1;
  i64toi32_i32$1 = $6;
  HEAP32[($6 + 8 | 0) >> 2] = $112;
  HEAP32[($6 + 12 | 0) >> 2] = i64toi32_i32$0;
  (wasm2js_i32$0 = $6, wasm2js_i32$1 = FUNCTION_TABLE[$4 | 0]($6 + 104 | 0, $3, $2, $1, $6 + 8 | 0) | 0), HEAP32[(wasm2js_i32$0 + 116 | 0) >> 2] = wasm2js_i32$1;
  $5 = emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($6 + 116 | 0 | 0) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____basic_string_28_29($6 + 104 | 0 | 0) | 0;
  __stack_pointer = $6 + 144 | 0;
  return $5 | 0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___getCount_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___getTypes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__20___get_28_29();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int_2c_20int__28_29() {
  
 }
 
 function get_image_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 28 | 0) >> 2] = $0;
  HEAP32[($2 + 24 | 0) >> 2] = $1;
  HEAP32[($2 + 20 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
  emscripten__memory_view_unsigned_20char__20emscripten__typed_memory_view_unsigned_20char__28unsigned_20long_2c_20unsigned_20char_20const__29($2 + 8 | 0 | 0, HEAP32[(HEAP32[($2 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($2 + 20 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
  emscripten__val__val_emscripten__memory_view_unsigned_20char__20__28emscripten__memory_view_unsigned_20char____29($0 | 0, $2 + 8 | 0 | 0) | 0;
  __stack_pointer = $2 + 32 | 0;
 }
 
 function emscripten__memory_view_unsigned_20char__20emscripten__typed_memory_view_unsigned_20char__28unsigned_20long_2c_20unsigned_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $1;
  HEAP32[($3 + 8 | 0) >> 2] = $2;
  emscripten__memory_view_unsigned_20char___memory_view_28unsigned_20long_2c_20unsigned_20char_20const__29($0 | 0, HEAP32[($3 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__val__val_emscripten__memory_view_unsigned_20char__20__28emscripten__memory_view_unsigned_20char____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $0 = emscripten__internal__WireTypePack_emscripten__memory_view_unsigned_20char__20___WireTypePack_28emscripten__memory_view_unsigned_20char____29($2 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0;
  emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29();
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = _emval_take_value(156572 | 0, emscripten__internal__WireTypePack_emscripten__memory_view_unsigned_20char__20___operator_20void_20const__28_29_20const($0 | 0) | 0 | 0) | 0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[$1 | 0]($2, emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0);
  $1 = emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($2 | 0) | 0;
  emscripten__val___val_28_29($2 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20int___getCount_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_emscripten__val_2c_20int___getTypes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20int__20___get_28_29();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function free_image_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  HEAP32[($1 + 8 | 0) >> 2] = HEAP32[($1 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[111 | 0](HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0);
  FUNCTION_TABLE[111 | 0](HEAP32[($1 + 8 | 0) >> 2] | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  FUNCTION_TABLE[$1 | 0](emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int___getCount_28_29_20const($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
 }
 
 function emscripten__internal__WithPolicies____ArgTypeList_void_2c_20int___getTypes_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20int__20___get_28_29();
  __stack_pointer = $1 + 16 | 0;
 }
 
 function char_20const__20emscripten__internal__getGenericSignature_void_2c_20int_2c_20int__28_29() {
  
 }
 
 function emscripten__internal__BindingType_int_2c_20void___fromWireType_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_void_2c_20int__20___get_28_29() {
  
 }
 
 function emscripten__internal__BindingType_emscripten__val_2c_20void___toWireType_28emscripten__val_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  _emval_incref(HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  $0 = HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__val___val_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
  _emval_decref(HEAP32[$0 >> 2] | 0 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_emscripten__val_2c_20int__20___get_28_29() {
  
 }
 
 function emscripten__memory_view_unsigned_20char___memory_view_28unsigned_20long_2c_20unsigned_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  HEAP32[($3 + 12 | 0) >> 2] = $0;
  HEAP32[($3 + 8 | 0) >> 2] = $1;
  HEAP32[($3 + 4 | 0) >> 2] = $2;
  $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
  HEAP32[$2 >> 2] = HEAP32[($3 + 8 | 0) >> 2] | 0;
  HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($3 + 4 | 0) >> 2] | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__WireTypePack_emscripten__memory_view_unsigned_20char__20___WireTypePack_28emscripten__memory_view_unsigned_20char____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  (wasm2js_i32$0 = $2, wasm2js_i32$1 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_28_29($1 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  HEAP32[($2 + 28 | 0) >> 2] = $2 + 4 | 0;
  HEAP32[($2 + 24 | 0) >> 2] = $0;
  $0 = HEAP32[($2 + 28 | 0) >> 2] | 0;
  emscripten__internal__BindingType_emscripten__memory_view_unsigned_20char__2c_20void___toWireType_28emscripten__memory_view_unsigned_20char__20const__29($2 + 16 | 0 | 0, HEAP32[($2 + 24 | 0) >> 2] | 0 | 0);
  void_20emscripten__internal__writeGenericWireType_unsigned_20char__28emscripten__internal__GenericWireType___2c_20emscripten__memory_view_unsigned_20char__20const__29($0 | 0, $2 + 16 | 0 | 0);
  emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29(HEAP32[($2 + 28 | 0) >> 2] | 0 | 0);
  __stack_pointer = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__TypeID_emscripten__memory_view_unsigned_20char__2c_20void___get_28_29() {
  emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29();
 }
 
 function emscripten__internal__WireTypePack_emscripten__memory_view_unsigned_20char__20___operator_20void_20const__28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__BindingType_emscripten__memory_view_unsigned_20char__2c_20void___toWireType_28emscripten__memory_view_unsigned_20char__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, $2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $10 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $1;
  i64toi32_i32$2 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $10 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $10;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function void_20emscripten__internal__writeGenericWireType_unsigned_20char__28emscripten__internal__GenericWireType___2c_20emscripten__memory_view_unsigned_20char__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  HEAP32[(HEAP32[(HEAP32[($2 + 12 | 0) >> 2] | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[($2 + 8 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[((HEAP32[(HEAP32[($2 + 12 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($2 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  $2 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 8 | 0;
 }
 
 function emscripten__internal__writeGenericWireTypes_28emscripten__internal__GenericWireType___29($0) {
  $0 = $0 | 0;
  HEAP32[((__stack_pointer - 16 | 0) + 12 | 0) >> 2] = $0;
 }
 
 function emscripten__internal__LightTypeID_emscripten__memory_view_unsigned_20char__20___get_28_29() {
  
 }
 
 function std____2__array_emscripten__internal__GenericWireType_2c_201ul___data_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void___fromWireType_28emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__2c_20unsigned_20long_29($0 | 0, (HEAP32[($2 + 8 | 0) >> 2] | 0) + 4 | 0 | 0, HEAP32[(HEAP32[($2 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__GenericBindingType_MozJPEGOptions___fromWireType_28MozJPEGOptions__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__BindingType_int_2c_20void___toWireType_28int_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[(HEAP32[($1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__ArgArrayGetter_emscripten__internal__TypeList_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__20___get_28_29() {
  
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  HEAP32[($3 + 20 | 0) >> 2] = $2;
  $2 = HEAP32[($3 + 28 | 0) >> 2] | 0;
  std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($2 | 0, $3 + 16 | 0 | 0, $3 + 8 | 0 | 0) | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($2 | 0, HEAP32[($3 + 24 | 0) >> 2] | 0 | 0, HEAP32[($3 + 20 | 0) >> 2] | 0 | 0);
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  HEAP32[($3 + 20 | 0) >> 2] = $2;
  $2 = std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29(std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29(HEAP32[($3 + 28 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   if ($2 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($2 >>> 0 > 10 >>> 0) {
      break label$3
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0 | 0, $2 | 0);
     $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0 | 0) | 0;
     break label$2;
    }
    $4 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($2 | 0) | 0) + 1 | 0;
    $3 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($4 | 0) | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0 | 0, $3 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0 | 0, $4 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0 | 0, $2 | 0);
   }
   std____2__char_traits_char___assign_28char__2c_20char_20const__29((std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 | 0, $1 | 0, $2 | 0) | 0) + $2 | 0 | 0, 0 | 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 4 | 0) >> 2] = $0;
  return HEAP32[($1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__allocator_char__2c_201_2c_20true_____compressed_pair_elem_28std____2____default_init_tag_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 4 | 0) >> 2] = $0;
  $0 = std____2__allocator_char___allocator_28_29(HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__allocator_char___allocator_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2____non_trivial_if_true_2c_20std____2__allocator_char__20_____non_trivial_if_28_29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2____non_trivial_if_true_2c_20std____2__allocator_char__20_____non_trivial_if_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = char_20const__20std____2____to_address_char_20const__28char_20const__29(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__2c_20unsigned_20long_29($0 | 0, $1 | 0, std____2__char_traits_char___length_28char_20const__29($1 | 0) | 0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20____29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, i64toi32_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  $1 = HEAP32[($2 + 12 | 0) >> 2] | 0;
  $0 = HEAP32[($2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$0 >> 2] | 0;
  HEAP32[($1 + 4 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[($1 + 8 | 0) >> 2] = HEAP32[($0 + 8 | 0) >> 2] | 0;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___data_28_29_20const(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0 | 0, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const(HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (!((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0 | 0) | 0;
    break label$1;
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0 | 0) | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___append_28char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0 | 0) | 0;
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 | 0) | 0;
    if (($3 - $4 | 0) >>> 0 < $2 >>> 0) {
     break label$2
    }
    if (!$2) {
     break label$1
    }
    $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0 | 0) | 0;
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($3 + $4 | 0 | 0, $1 | 0, $2 | 0) | 0;
    $2 = $4 + $2 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0 | 0, $2 | 0);
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $2 | 0 | 0, 0 | 0);
    return $0 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0 | 0, $3 | 0, ($4 + $2 | 0) - $3 | 0 | 0, $4 | 0, $4 | 0, $2 | 0, $1 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  label$1 : {
   label$2 : {
    $0 = HEAP32[($1 + 12 | 0) >> 2] | 0;
    if (!((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0) & 1 | 0)) {
     break label$2
    }
    $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0 | 0) | 0;
    break label$1;
   }
   $0 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0 | 0) | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function char_20const__20std____2____to_address_char_20const__28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAPU8[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0;
  __stack_pointer = $1 + 16 | 0;
  return (($0 & 255 | 0) & 128 | 0 | 0) != (0 | 0) & 1 | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0) + 4 | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_size_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAPU8[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0) + 11 | 0) >> 0] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 & 255 | 0 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = HEAP32[(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0) >> 2] | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2__pointer_traits_char_20const____pointer_to_28char_20const__29(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__pointer_traits_char_20const____pointer_to_28char_20const__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____zero_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  (wasm2js_i32$0 = $1, wasm2js_i32$1 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
  HEAP32[($1 + 4 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($1 + 4 | 0) >> 2] | 0) >>> 0 < 3 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[((HEAP32[($1 + 8 | 0) >> 2] | 0) + ((HEAP32[($1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  $0 = std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29(HEAP32[($1 + 12 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2____compressed_pair_elem_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_200_2c_20false_____get_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  return HEAP32[($1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function emscripten__internal__LightTypeID_MozJPEGOptions___get_28_29() {
  
 }
 
 function emscripten__internal__BindingType_bool_2c_20void___toWireType_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[($1 + 15 | 0) >> 0] = $0;
  return (HEAPU8[($1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function emscripten__internal__BindingType_bool_2c_20void___fromWireType_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAP8[($1 + 15 | 0) >> 0] = $0;
  return (HEAPU8[($1 + 15 | 0) >> 0] | 0) & 1 | 0 | 0;
 }
 
 function emscripten__internal__LightTypeID_bool___get_28_29() {
  
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = $0 ? $0 : 1;
  label$1 : {
   label$2 : while (1) {
    $0 = malloc($1 | 0) | 0;
    if ($0) {
     break label$1
    }
    label$3 : {
     $0 = std__get_new_handler_28_29() | 0;
     if (!$0) {
      break label$3
     }
     FUNCTION_TABLE[$0 | 0]();
     continue label$2;
    }
    break label$2;
   };
   abort();
   abort();
  }
  return $0 | 0;
 }
 
 function emscripten__internal__LightTypeID_int___get_28_29() {
  
 }
 
 function operator_20delete_28void__29($0) {
  $0 = $0 | 0;
  free($0 | 0);
 }
 
 function sscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsscanf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function jpeg_default_qtables_28jpeg_compress_struct__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  HEAP32[($2 + 8 | 0) >> 2] = $1;
  HEAP32[($2 + 4 | 0) >> 2] = 0;
  label$1 : {
   if (!(jpeg_c_int_param_supported(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, 1145645745 | 0) | 0)) {
    break label$1
   }
   (wasm2js_i32$0 = $2, wasm2js_i32$1 = jpeg_c_get_int_param(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, 1145645745 | 0) | 0), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
  }
  jpeg_add_quant_table(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 151328 + ((HEAP32[($2 + 4 | 0) >> 2] | 0) << 8 | 0) | 0 | 0, HEAP32[(0 + 158960 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
  jpeg_add_quant_table(HEAP32[($2 + 12 | 0) >> 2] | 0 | 0, 1 | 0, 153632 + ((HEAP32[($2 + 4 | 0) >> 2] | 0) << 8 | 0) | 0 | 0, HEAP32[(0 + 158964 | 0) >> 2] | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function set_sample_factors_28jpeg_compress_struct__2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  HEAP32[($2 + 40 | 0) >> 2] = $0;
  HEAP32[($2 + 36 | 0) >> 2] = $1;
  HEAP32[($2 + 32 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!((HEAP32[($2 + 32 | 0) >> 2] | 0 | 0) < (10 | 0) & 1 | 0)) {
      break label$2
     }
     label$4 : {
      label$5 : {
       if (!(((HEAPU8[(HEAP32[($2 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$5
       }
       HEAP8[($2 + 22 | 0) >> 0] = 44;
       $1 = HEAP32[($2 + 36 | 0) >> 2] | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $2 + 22 | 0;
       HEAP32[($2 + 8 | 0) >> 2] = $2 + 24 | 0;
       HEAP32[($2 + 4 | 0) >> 2] = $2 + 23 | 0;
       HEAP32[$2 >> 2] = $2 + 28 | 0;
       label$6 : {
        if (!((sscanf($1 | 0, 137215 | 0, $2 | 0) | 0 | 0) < (3 | 0) & 1 | 0)) {
         break label$6
        }
        HEAP32[($2 + 44 | 0) >> 2] = 0;
        break label$1;
       }
       label$7 : {
        label$8 : {
         label$9 : {
          if (!((((HEAPU8[($2 + 23 | 0) >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (120 | 0) & 1 | 0)) {
           break label$9
          }
          if ((((HEAPU8[($2 + 23 | 0) >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (88 | 0) & 1 | 0) {
           break label$8
          }
         }
         if (!((((HEAPU8[($2 + 22 | 0) >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (44 | 0) & 1 | 0)) {
          break label$7
         }
        }
        HEAP32[($2 + 44 | 0) >> 2] = 0;
        break label$1;
       }
       label$10 : {
        label$11 : {
         if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
          break label$11
         }
         if ((HEAP32[($2 + 28 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0) {
          break label$11
         }
         if ((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) <= (0 | 0) & 1 | 0) {
          break label$11
         }
         if (!((HEAP32[($2 + 24 | 0) >> 2] | 0 | 0) > (4 | 0) & 1 | 0)) {
          break label$10
         }
        }
        fprintf($2 | 0, $2 | 0, 0 | 0);
        HEAP32[($2 + 44 | 0) >> 2] = 0;
        break label$1;
       }
       HEAP32[(((HEAP32[((HEAP32[($2 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 32 | 0) >> 2] | 0, 84) | 0) + 8 | 0) >> 2] = HEAP32[($2 + 28 | 0) >> 2] | 0;
       HEAP32[(((HEAP32[((HEAP32[($2 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 32 | 0) >> 2] | 0, 84) | 0) + 12 | 0) >> 2] = HEAP32[($2 + 24 | 0) >> 2] | 0;
       label$12 : while (1) {
        $1 = 0;
        label$13 : {
         if (!(((HEAPU8[(HEAP32[($2 + 36 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$13
         }
         $1 = HEAP32[($2 + 36 | 0) >> 2] | 0;
         HEAP32[($2 + 36 | 0) >> 2] = $1 + 1 | 0;
         $1 = (((HEAPU8[$1 >> 0] | 0) << 24 | 0) >> 24 | 0 | 0) != (44 | 0);
        }
        label$14 : {
         if (!($1 & 1 | 0)) {
          break label$14
         }
         continue label$12;
        }
        break label$12;
       };
       break label$4;
      }
      HEAP32[(((HEAP32[((HEAP32[($2 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 32 | 0) >> 2] | 0, 84) | 0) + 8 | 0) >> 2] = 1;
      HEAP32[(((HEAP32[((HEAP32[($2 + 40 | 0) >> 2] | 0) + 68 | 0) >> 2] | 0) + Math_imul(HEAP32[($2 + 32 | 0) >> 2] | 0, 84) | 0) + 12 | 0) >> 2] = 1;
     }
     HEAP32[($2 + 32 | 0) >> 2] = (HEAP32[($2 + 32 | 0) >> 2] | 0) + 1 | 0;
     continue label$3;
    };
   }
   HEAP32[($2 + 44 | 0) >> 2] = 1;
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function fprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  vfprintf($2 | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function __embind_register_native_and_builtin_types() {
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  _embind_register_void(158524 | 0, 135782 | 0);
  _embind_register_bool(158536 | 0, 134941 | 0, 1 | 0, 1 | 0, 0 | 0);
  _embind_register_integer(158548 | 0, 134593 | 0, 1 | 0, -128 | 0, 127 | 0);
  _embind_register_integer(158572 | 0, 134586 | 0, 1 | 0, -128 | 0, 127 | 0);
  _embind_register_integer(158560 | 0, 134584 | 0, 1 | 0, 0 | 0, 255 | 0);
  _embind_register_integer(158584 | 0, 133580 | 0, 2 | 0, -32768 | 0, 32767 | 0);
  _embind_register_integer(158596 | 0, 133571 | 0, 2 | 0, 0 | 0, 65535 | 0);
  _embind_register_integer(158608 | 0, 133595 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  _embind_register_integer(158620 | 0, 133586 | 0, 4 | 0, 0 | 0, -1 | 0);
  _embind_register_integer(158632 | 0, 135034 | 0, 4 | 0, -2147483648 | 0, 2147483647 | 0);
  _embind_register_integer(158644 | 0, 135025 | 0, 4 | 0, 0 | 0, -1 | 0);
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$1 = 2147483647;
  legalfunc$_embind_register_bigint(158656 | 0, 133752 | 0, 8 | 0, 0 | 0, i64toi32_i32$0 | 0, -1 | 0, i64toi32_i32$1 | 0);
  i64toi32_i32$1 = 0;
  i64toi32_i32$0 = -1;
  legalfunc$_embind_register_bigint(158668 | 0, 133751 | 0, 8 | 0, 0 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$0 | 0);
  _embind_register_float(158680 | 0, 133745 | 0, 4 | 0);
  _embind_register_float(158692 | 0, 135402 | 0, 8 | 0);
  _embind_register_std_string(156048 | 0, 135052 | 0);
  _embind_register_std_string(156136 | 0, 137997 | 0);
  _embind_register_std_wstring(156224 | 0, 4 | 0, 135039 | 0);
  _embind_register_std_wstring(156316 | 0, 2 | 0, 135064 | 0);
  _embind_register_std_wstring(156408 | 0, 4 | 0, 135079 | 0);
  _embind_register_emval(156452 | 0, 134989 | 0);
  _embind_register_memory_view(156492 | 0, 0 | 0, 137928 | 0);
  _embind_register_memory_view(156532 | 0, 0 | 0, 138030 | 0);
  _embind_register_memory_view(156572 | 0, 1 | 0, 137958 | 0);
  _embind_register_memory_view(156612 | 0, 2 | 0, 137560 | 0);
  _embind_register_memory_view(156652 | 0, 3 | 0, 137591 | 0);
  _embind_register_memory_view(156692 | 0, 4 | 0, 137631 | 0);
  _embind_register_memory_view(156732 | 0, 5 | 0, 137660 | 0);
  _embind_register_memory_view(156772 | 0, 4 | 0, 138067 | 0);
  _embind_register_memory_view(156812 | 0, 5 | 0, 138097 | 0);
  _embind_register_memory_view(156532 | 0, 0 | 0, 137762 | 0);
  _embind_register_memory_view(156572 | 0, 1 | 0, 137729 | 0);
  _embind_register_memory_view(156612 | 0, 2 | 0, 137828 | 0);
  _embind_register_memory_view(156652 | 0, 3 | 0, 137794 | 0);
  _embind_register_memory_view(156692 | 0, 4 | 0, 137895 | 0);
  _embind_register_memory_view(156732 | 0, 5 | 0, 137861 | 0);
  _embind_register_memory_view(156852 | 0, 6 | 0, 137698 | 0);
  _embind_register_memory_view(156892 | 0, 7 | 0, 138136 | 0);
 }
 
 function __getTypeName($0) {
  $0 = $0 | 0;
  return strdup(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function strdup($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   $1 = (strlen($0 | 0) | 0) + 1 | 0;
   $2 = malloc($1 | 0) | 0;
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  return __memcpy($2 | 0, $0 | 0, $1 | 0) | 0 | 0;
 }
 
 function __math_xflow($0, $1) {
  $0 = $0 | 0;
  $1 = +$1;
  return +(+fp_barrier(+($0 ? -$1 : $1)) * $1);
 }
 
 function fp_barrier($0) {
  $0 = +$0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  HEAPF64[($1 + 8 | 0) >> 3] = $0;
  return +(+HEAPF64[($1 + 8 | 0) >> 3]);
 }
 
 function __errno_location() {
  return 159132 | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0, $8 = 0, $6 = 0, $7 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
  HEAP32[($3 + 16 | 0) >> 2] = $4;
  $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $2;
  HEAP32[($3 + 24 | 0) >> 2] = $1;
  $1 = $5 - $4 | 0;
  HEAP32[($3 + 20 | 0) >> 2] = $1;
  $6 = $1 + $2 | 0;
  $7 = 2;
  $1 = $3 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       label$6 : {
        if (__wasi_syscall_ret(__wasi_fd_write(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, $7 | 0, $3 + 12 | 0 | 0) | 0 | 0) | 0) {
         break label$6
        }
        $4 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($4 | 0)) {
         break label$5
        }
        if (($4 | 0) > (-1 | 0)) {
         break label$4
        }
        break label$2;
       }
       if (($6 | 0) != (-1 | 0)) {
        break label$2
       }
      }
      $1 = HEAP32[($0 + 44 | 0) >> 2] | 0;
      HEAP32[($0 + 28 | 0) >> 2] = $1;
      HEAP32[($0 + 20 | 0) >> 2] = $1;
      HEAP32[($0 + 16 | 0) >> 2] = $1 + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
      $4 = $2;
      break label$1;
     }
     $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     $5 = $4 >>> 0 > $8 >>> 0;
     $9 = $1 + ($5 << 3 | 0) | 0;
     $8 = $4 - ($5 ? $8 : 0) | 0;
     HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $8 | 0;
     $1 = $1 + ($5 ? 12 : 4) | 0;
     HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) - $8 | 0;
     $6 = $6 - $4 | 0;
     $7 = $7 - $5 | 0;
     $1 = $9;
     continue label$3;
    };
   }
   $4 = 0;
   HEAP32[($0 + 28 | 0) >> 2] = 0;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 0 | 32 | 0;
   if (($7 | 0) == (2 | 0)) {
    break label$1
   }
   $4 = $2 - (HEAP32[($1 + 4 | 0) >> 2] | 0) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $4 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $0), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
  return -1 | 0;
 }
 
 function __stdio_seek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = __lseek(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function __lseek($0, $1, $1$hi, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = $1$hi;
  $0 = __wasi_syscall_ret(legalfunc$__wasi_fd_seek($0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 & 255 | 0 | 0, $3 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  __stack_pointer = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0 ? -1 : $1;
  i64toi32_i32$2 = $0 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(HEAP32[($0 + 60 | 0) >> 2] | 0 | 0) | 0 | 0;
 }
 
 function vfprintf($0) {
  $0 = $0 | 0;
  __vfprintf_internal(158976 | 0, 138319 | 0, $0 | 0, 112 | 0, 113 | 0) | 0;
 }
 
 function fiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vfiprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function vfiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return __vfprintf_internal($0 | 0, $1 | 0, $2 | 0, 0 | 0, 0 | 0) | 0 | 0;
 }
 
 function __stdio_exit() {
  close_file(HEAP32[(0 + 159136 | 0) >> 2] | 0 | 0);
  close_file(HEAP32[(0 + 159128 | 0) >> 2] | 0 | 0);
  close_file(HEAP32[(0 + 159120 | 0) >> 2] | 0 | 0);
 }
 
 function close_file($0) {
  $0 = $0 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1 = 0, $2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$2
    }
    __lockfile($0 | 0) | 0;
   }
   label$3 : {
    if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
   }
   $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
   $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   if (($1 | 0) == ($2 | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $1 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0 + 40 | 0) >> 2] | 0 | 0]($0, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
 }
 
 function __toread($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[($0 + 72 | 0) >> 2] | 0;
  HEAP32[($0 + 72 | 0) >> 2] = $1 + -1 | 0 | $1 | 0;
  label$1 : {
   if ((HEAP32[($0 + 20 | 0) >> 2] | 0 | 0) == (HEAP32[($0 + 28 | 0) >> 2] | 0 | 0)) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
  }
  HEAP32[($0 + 28 | 0) >> 2] = 0;
  HEAP32[($0 + 16 | 0) >> 2] = 0;
  HEAP32[($0 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1 = HEAP32[$0 >> 2] | 0;
   if (!($1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0 >> 2] = $1 | 32 | 0;
   return -1 | 0;
  }
  $2 = (HEAP32[($0 + 44 | 0) >> 2] | 0) + (HEAP32[($0 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0 + 8 | 0) >> 2] = $2;
  HEAP32[($0 + 4 | 0) >> 2] = $2;
  return ($1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function __uflow($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = -1;
  label$1 : {
   if (__toread($0 | 0) | 0) {
    break label$1
   }
   if ((FUNCTION_TABLE[HEAP32[($0 + 32 | 0) >> 2] | 0 | 0]($0, $1 + 15 | 0, 1) | 0 | 0) != (1 | 0)) {
    break label$1
   }
   $2 = HEAPU8[($1 + 15 | 0) >> 0] | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function __emscripten_environ_constructor() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  label$1 : {
   if (__wasi_environ_sizes_get($0 + 12 | 0 | 0, $0 + 8 | 0 | 0) | 0) {
    break label$1
   }
   $1 = malloc(((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) + 4 | 0 | 0) | 0;
   HEAP32[(0 + 159140 | 0) >> 2] = $1;
   if (!$1) {
    break label$1
   }
   label$2 : {
    $1 = malloc(HEAP32[($0 + 8 | 0) >> 2] | 0 | 0) | 0;
    if (!$1) {
     break label$2
    }
    $2 = HEAP32[(0 + 159140 | 0) >> 2] | 0;
    HEAP32[($2 + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    if (!(__wasi_environ_get($2 | 0, $1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 159140 | 0) >> 2] = 0;
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function malloc($0) {
  $0 = $0 | 0;
  var $4 = 0, $5 = 0, $7 = 0, $8 = 0, $3 = 0, $2 = 0, $11 = 0, $6 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9 = 0, i64toi32_i32$2 = 0, $10 = 0, $1 = 0, $79 = 0, $92 = 0, $103 = 0, $111 = 0, $119 = 0, $210 = 0, $221 = 0, $229 = 0, $237 = 0, $272 = 0, $339 = 0, $346 = 0, $353 = 0, $444 = 0, $455 = 0, $463 = 0, $471 = 0, $1167 = 0, $1174 = 0, $1181 = 0, $1330 = 0, $1332 = 0, $1393 = 0, $1400 = 0, $1407 = 0, $1625 = 0, $1632 = 0, $1639 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
               $3 = $0 >>> 0 < 11 >>> 0 ? 16 : ($0 + 11 | 0) & -8 | 0;
               $4 = $3 >>> 3 | 0;
               $0 = $2 >>> $4 | 0;
               if (!($0 & 3 | 0)) {
                break label$13
               }
               label$14 : {
                label$15 : {
                 $5 = (($0 ^ -1 | 0) & 1 | 0) + $4 | 0;
                 $4 = $5 << 3 | 0;
                 $0 = $4 + 159364 | 0;
                 $4 = HEAP32[($4 + 159372 | 0) >> 2] | 0;
                 $3 = HEAP32[($4 + 8 | 0) >> 2] | 0;
                 if (($0 | 0) != ($3 | 0)) {
                  break label$15
                 }
                 (wasm2js_i32$0 = 0, wasm2js_i32$1 = $2 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
                 break label$14;
                }
                HEAP32[($3 + 12 | 0) >> 2] = $0;
                HEAP32[($0 + 8 | 0) >> 2] = $3;
               }
               $0 = $4 + 8 | 0;
               $5 = $5 << 3 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = $5 | 3 | 0;
               $4 = $4 + $5 | 0;
               HEAP32[($4 + 4 | 0) >> 2] = HEAP32[($4 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $6 = HEAP32[(0 + 159332 | 0) >> 2] | 0;
              if ($3 >>> 0 <= $6 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79 = $0 << $4 | 0;
                 $0 = 2 << $4 | 0;
                 $0 = $79 & ($0 | (0 - $0 | 0) | 0) | 0;
                 $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                 $92 = $0;
                 $0 = ($0 >>> 12 | 0) & 16 | 0;
                 $4 = $92 >>> $0 | 0;
                 $5 = ($4 >>> 5 | 0) & 8 | 0;
                 $103 = $5 | $0 | 0;
                 $0 = $4 >>> $5 | 0;
                 $4 = ($0 >>> 2 | 0) & 4 | 0;
                 $111 = $103 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 2 | 0;
                 $119 = $111 | $4 | 0;
                 $0 = $0 >>> $4 | 0;
                 $4 = ($0 >>> 1 | 0) & 1 | 0;
                 $4 = ($119 | $4 | 0) + ($0 >>> $4 | 0) | 0;
                 $0 = $4 << 3 | 0;
                 $5 = $0 + 159364 | 0;
                 $0 = HEAP32[($0 + 159372 | 0) >> 2] | 0;
                 $7 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                 if (($5 | 0) != ($7 | 0)) {
                  break label$18
                 }
                 $2 = $2 & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0;
                 HEAP32[(0 + 159324 | 0) >> 2] = $2;
                 break label$17;
                }
                HEAP32[($7 + 12 | 0) >> 2] = $5;
                HEAP32[($5 + 8 | 0) >> 2] = $7;
               }
               HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
               $7 = $0 + $3 | 0;
               $4 = $4 << 3 | 0;
               $5 = $4 - $3 | 0;
               HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
               HEAP32[($0 + $4 | 0) >> 2] = $5;
               label$19 : {
                if (!$6) {
                 break label$19
                }
                $8 = $6 >>> 3 | 0;
                $3 = ($8 << 3 | 0) + 159364 | 0;
                $4 = HEAP32[(0 + 159344 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8 = 1 << $8 | 0;
                  if ($2 & $8 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 159324 | 0) >> 2] = $2 | $8 | 0;
                  $8 = $3;
                  break label$20;
                 }
                 $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3 + 8 | 0) >> 2] = $4;
                HEAP32[($8 + 12 | 0) >> 2] = $4;
                HEAP32[($4 + 12 | 0) >> 2] = $3;
                HEAP32[($4 + 8 | 0) >> 2] = $8;
               }
               $0 = $0 + 8 | 0;
               HEAP32[(0 + 159344 | 0) >> 2] = $7;
               HEAP32[(0 + 159332 | 0) >> 2] = $5;
               break label$1;
              }
              $9 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
              if (!$9) {
               break label$11
              }
              $0 = ($9 & (0 - $9 | 0) | 0) + -1 | 0;
              $210 = $0;
              $0 = ($0 >>> 12 | 0) & 16 | 0;
              $4 = $210 >>> $0 | 0;
              $5 = ($4 >>> 5 | 0) & 8 | 0;
              $221 = $5 | $0 | 0;
              $0 = $4 >>> $5 | 0;
              $4 = ($0 >>> 2 | 0) & 4 | 0;
              $229 = $221 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 2 | 0;
              $237 = $229 | $4 | 0;
              $0 = $0 >>> $4 | 0;
              $4 = ($0 >>> 1 | 0) & 1 | 0;
              $7 = HEAP32[(((($237 | $4 | 0) + ($0 >>> $4 | 0) | 0) << 2 | 0) + 159628 | 0) >> 2] | 0;
              $4 = ((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
              $5 = $7;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0 = HEAP32[($5 + 16 | 0) >> 2] | 0;
                 if ($0) {
                  break label$24
                 }
                 $0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                 if (!$0) {
                  break label$22
                 }
                }
                $5 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                $272 = $5;
                $5 = $5 >>> 0 < $4 >>> 0;
                $4 = $5 ? $272 : $4;
                $7 = $5 ? $0 : $7;
                $5 = $0;
                continue label$23;
               };
              }
              $10 = HEAP32[($7 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8 = HEAP32[($7 + 12 | 0) >> 2] | 0;
               if (($8 | 0) == ($7 | 0)) {
                break label$25
               }
               $0 = HEAP32[($7 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 159340 | 0) >> 2] | 0;
               HEAP32[($0 + 12 | 0) >> 2] = $8;
               HEAP32[($8 + 8 | 0) >> 2] = $0;
               break label$2;
              }
              label$26 : {
               $5 = $7 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                break label$26
               }
               $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
               if (!$0) {
                break label$10
               }
               $5 = $7 + 16 | 0;
              }
              label$27 : while (1) {
               $11 = $5;
               $8 = $0;
               $5 = $0 + 20 | 0;
               $0 = HEAP32[$5 >> 2] | 0;
               if ($0) {
                continue label$27
               }
               $5 = $8 + 16 | 0;
               $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
               if ($0) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11 >> 2] = 0;
              break label$2;
             }
             $3 = -1;
             if ($0 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0 = $0 + 11 | 0;
             $3 = $0 & -8 | 0;
             $6 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
             if (!$6) {
              break label$11
             }
             $11 = 0;
             label$28 : {
              if ($3 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11 = 31;
              if ($3 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0 = $0 >>> 8 | 0;
              $339 = $0;
              $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4 = $339 << $0 | 0;
              $346 = $4;
              $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5 = $346 << $4 | 0;
              $353 = $5;
              $5 = (($5 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0 = (($353 << $5 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $5 | 0) | 0;
              $11 = ($0 << 1 | 0 | (($3 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4 = 0 - $3 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5 = HEAP32[(($11 << 2 | 0) + 159628 | 0) >> 2] | 0;
                 if ($5) {
                  break label$32
                 }
                 $0 = 0;
                 $8 = 0;
                 break label$31;
                }
                $0 = 0;
                $7 = $3 << (($11 | 0) == (31 | 0) ? 0 : 25 - ($11 >>> 1 | 0) | 0) | 0;
                $8 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2 = ((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
                  if ($2 >>> 0 >= $4 >>> 0) {
                   break label$34
                  }
                  $4 = $2;
                  $8 = $5;
                  if ($4) {
                   break label$34
                  }
                  $4 = 0;
                  $8 = $5;
                  $0 = $5;
                  break label$30;
                 }
                 $2 = HEAP32[($5 + 20 | 0) >> 2] | 0;
                 $5 = HEAP32[(($5 + (($7 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0 = $2 ? (($2 | 0) == ($5 | 0) ? $0 : $2) : $0;
                 $7 = $7 << 1 | 0;
                 if ($5) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0 | $8 | 0) {
                 break label$35
                }
                $8 = 0;
                $0 = 2 << $11 | 0;
                $0 = ($0 | (0 - $0 | 0) | 0) & $6 | 0;
                if (!$0) {
                 break label$11
                }
                $0 = ($0 & (0 - $0 | 0) | 0) + -1 | 0;
                $444 = $0;
                $0 = ($0 >>> 12 | 0) & 16 | 0;
                $5 = $444 >>> $0 | 0;
                $7 = ($5 >>> 5 | 0) & 8 | 0;
                $455 = $7 | $0 | 0;
                $0 = $5 >>> $7 | 0;
                $5 = ($0 >>> 2 | 0) & 4 | 0;
                $463 = $455 | $5 | 0;
                $0 = $0 >>> $5 | 0;
                $5 = ($0 >>> 1 | 0) & 2 | 0;
                $471 = $463 | $5 | 0;
                $0 = $0 >>> $5 | 0;
                $5 = ($0 >>> 1 | 0) & 1 | 0;
                $0 = HEAP32[(((($471 | $5 | 0) + ($0 >>> $5 | 0) | 0) << 2 | 0) + 159628 | 0) >> 2] | 0;
               }
               if (!$0) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2 = ((HEAP32[($0 + 4 | 0) >> 2] | 0) & -8 | 0) - $3 | 0;
               $7 = $2 >>> 0 < $4 >>> 0;
               label$37 : {
                $5 = HEAP32[($0 + 16 | 0) >> 2] | 0;
                if ($5) {
                 break label$37
                }
                $5 = HEAP32[($0 + 20 | 0) >> 2] | 0;
               }
               $4 = $7 ? $2 : $4;
               $8 = $7 ? $0 : $8;
               $0 = $5;
               if ($0) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8) {
              break label$11
             }
             if ($4 >>> 0 >= ((HEAP32[(0 + 159332 | 0) >> 2] | 0) - $3 | 0) >>> 0) {
              break label$11
             }
             $11 = HEAP32[($8 + 24 | 0) >> 2] | 0;
             label$38 : {
              $7 = HEAP32[($8 + 12 | 0) >> 2] | 0;
              if (($7 | 0) == ($8 | 0)) {
               break label$38
              }
              $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 159340 | 0) >> 2] | 0;
              HEAP32[($0 + 12 | 0) >> 2] = $7;
              HEAP32[($7 + 8 | 0) >> 2] = $0;
              break label$3;
             }
             label$39 : {
              $5 = $8 + 20 | 0;
              $0 = HEAP32[$5 >> 2] | 0;
              if ($0) {
               break label$39
              }
              $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
              if (!$0) {
               break label$9
              }
              $5 = $8 + 16 | 0;
             }
             label$40 : while (1) {
              $2 = $5;
              $7 = $0;
              $5 = $0 + 20 | 0;
              $0 = HEAP32[$5 >> 2] | 0;
              if ($0) {
               continue label$40
              }
              $5 = $7 + 16 | 0;
              $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
              if ($0) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0 = HEAP32[(0 + 159332 | 0) >> 2] | 0;
             if ($0 >>> 0 < $3 >>> 0) {
              break label$41
             }
             $4 = HEAP32[(0 + 159344 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5 = $0 - $3 | 0;
               if ($5 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 159332 | 0) >> 2] = $5;
               $7 = $4 + $3 | 0;
               HEAP32[(0 + 159344 | 0) >> 2] = $7;
               HEAP32[($7 + 4 | 0) >> 2] = $5 | 1 | 0;
               HEAP32[($4 + $0 | 0) >> 2] = $5;
               HEAP32[($4 + 4 | 0) >> 2] = $3 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 159344 | 0) >> 2] = 0;
              HEAP32[(0 + 159332 | 0) >> 2] = 0;
              HEAP32[($4 + 4 | 0) >> 2] = $0 | 3 | 0;
              $0 = $4 + $0 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0 = $4 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $7 = HEAP32[(0 + 159336 | 0) >> 2] | 0;
             if ($7 >>> 0 <= $3 >>> 0) {
              break label$44
             }
             $4 = $7 - $3 | 0;
             HEAP32[(0 + 159336 | 0) >> 2] = $4;
             $0 = HEAP32[(0 + 159348 | 0) >> 2] | 0;
             $5 = $0 + $3 | 0;
             HEAP32[(0 + 159348 | 0) >> 2] = $5;
             HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
             HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
             $0 = $0 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 159796 | 0) >> 2] | 0)) {
               break label$46
              }
              $4 = HEAP32[(0 + 159804 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 159808 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 159812 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 159800 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 159804 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 159796 | 0) >> 2] = (($1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 159816 | 0) >> 2] = 0;
             HEAP32[(0 + 159768 | 0) >> 2] = 0;
             $4 = 4096;
            }
            $0 = 0;
            $6 = $3 + 47 | 0;
            $2 = $4 + $6 | 0;
            $11 = 0 - $4 | 0;
            $8 = $2 & $11 | 0;
            if ($8 >>> 0 <= $3 >>> 0) {
             break label$1
            }
            $0 = 0;
            label$47 : {
             $4 = HEAP32[(0 + 159764 | 0) >> 2] | 0;
             if (!$4) {
              break label$47
             }
             $5 = HEAP32[(0 + 159756 | 0) >> 2] | 0;
             $9 = $5 + $8 | 0;
             if ($9 >>> 0 <= $5 >>> 0) {
              break label$1
             }
             if ($9 >>> 0 > $4 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 159768 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4 = HEAP32[(0 + 159348 | 0) >> 2] | 0;
               if (!$4) {
                break label$50
               }
               $0 = 159772;
               label$51 : while (1) {
                label$52 : {
                 $5 = HEAP32[$0 >> 2] | 0;
                 if ($5 >>> 0 > $4 >>> 0) {
                  break label$52
                 }
                 if (($5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4 >>> 0) {
                  break label$49
                 }
                }
                $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
                if ($0) {
                 continue label$51
                }
                break label$51;
               };
              }
              $7 = sbrk(0 | 0) | 0;
              if (($7 | 0) == (-1 | 0)) {
               break label$7
              }
              $2 = $8;
              label$53 : {
               $0 = HEAP32[(0 + 159800 | 0) >> 2] | 0;
               $4 = $0 + -1 | 0;
               if (!($4 & $7 | 0)) {
                break label$53
               }
               $2 = ($8 - $7 | 0) + (($4 + $7 | 0) & (0 - $0 | 0) | 0) | 0;
              }
              if ($2 >>> 0 <= $3 >>> 0) {
               break label$7
              }
              if ($2 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0 = HEAP32[(0 + 159764 | 0) >> 2] | 0;
               if (!$0) {
                break label$54
               }
               $4 = HEAP32[(0 + 159756 | 0) >> 2] | 0;
               $5 = $4 + $2 | 0;
               if ($5 >>> 0 <= $4 >>> 0) {
                break label$7
               }
               if ($5 >>> 0 > $0 >>> 0) {
                break label$7
               }
              }
              $0 = sbrk($2 | 0) | 0;
              if (($0 | 0) != ($7 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2 = ($2 - $7 | 0) & $11 | 0;
             if ($2 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $7 = sbrk($2 | 0) | 0;
             if (($7 | 0) == ((HEAP32[$0 >> 2] | 0) + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0 = $7;
            }
            label$55 : {
             if (($0 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3 + 48 | 0) >>> 0 <= $2 >>> 0) {
              break label$55
             }
             label$56 : {
              $4 = HEAP32[(0 + 159804 | 0) >> 2] | 0;
              $4 = (($6 - $2 | 0) + $4 | 0) & (0 - $4 | 0) | 0;
              if ($4 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $7 = $0;
              break label$5;
             }
             label$57 : {
              if ((sbrk($4 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2 = $4 + $2 | 0;
              $7 = $0;
              break label$5;
             }
             sbrk(0 - $2 | 0 | 0) | 0;
             break label$7;
            }
            $7 = $0;
            if (($0 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8 = 0;
           break label$2;
          }
          $7 = 0;
          break label$3;
         }
         if (($7 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 159768 | 0) >> 2] = HEAP32[(0 + 159768 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $7 = HEAP32[(0 + 159124 | 0) >> 2] | 0;
       $4 = ($8 + 3 | 0) & -4 | 0;
       $0 = $7 + $4 | 0;
       label$58 : {
        label$59 : {
         label$60 : {
          label$61 : {
           if (!$4) {
            break label$61
           }
           if ($0 >>> 0 > $7 >>> 0) {
            break label$61
           }
           $0 = $7;
           break label$60;
          }
          if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
           break label$59
          }
          if (emscripten_resize_heap($0 | 0) | 0) {
           break label$59
          }
          $0 = HEAP32[(0 + 159124 | 0) >> 2] | 0;
         }
         HEAP32[(0 + 159132 | 0) >> 2] = 48;
         $7 = -1;
         break label$58;
        }
        HEAP32[(0 + 159124 | 0) >> 2] = $0;
       }
       label$62 : {
        if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
         break label$62
        }
        if (!(emscripten_resize_heap($0 | 0) | 0)) {
         break label$4
        }
       }
       HEAP32[(0 + 159124 | 0) >> 2] = $0;
       if (($7 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($7 >>> 0 >= $0 >>> 0) {
        break label$4
       }
       $2 = $0 - $7 | 0;
       if ($2 >>> 0 <= ($3 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0 = (HEAP32[(0 + 159756 | 0) >> 2] | 0) + $2 | 0;
      HEAP32[(0 + 159756 | 0) >> 2] = $0;
      label$63 : {
       if ($0 >>> 0 <= (HEAP32[(0 + 159760 | 0) >> 2] | 0) >>> 0) {
        break label$63
       }
       HEAP32[(0 + 159760 | 0) >> 2] = $0;
      }
      label$64 : {
       label$65 : {
        label$66 : {
         label$67 : {
          $4 = HEAP32[(0 + 159348 | 0) >> 2] | 0;
          if (!$4) {
           break label$67
          }
          $0 = 159772;
          label$68 : while (1) {
           $5 = HEAP32[$0 >> 2] | 0;
           $8 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($7 | 0) == ($5 + $8 | 0 | 0)) {
            break label$66
           }
           $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
           if ($0) {
            continue label$68
           }
           break label$65;
          };
         }
         label$69 : {
          label$70 : {
           $0 = HEAP32[(0 + 159340 | 0) >> 2] | 0;
           if (!$0) {
            break label$70
           }
           if ($7 >>> 0 >= $0 >>> 0) {
            break label$69
           }
          }
          HEAP32[(0 + 159340 | 0) >> 2] = $7;
         }
         $0 = 0;
         HEAP32[(0 + 159776 | 0) >> 2] = $2;
         HEAP32[(0 + 159772 | 0) >> 2] = $7;
         HEAP32[(0 + 159356 | 0) >> 2] = -1;
         HEAP32[(0 + 159360 | 0) >> 2] = HEAP32[(0 + 159796 | 0) >> 2] | 0;
         HEAP32[(0 + 159784 | 0) >> 2] = 0;
         label$71 : while (1) {
          $4 = $0 << 3 | 0;
          $5 = $4 + 159364 | 0;
          HEAP32[($4 + 159372 | 0) >> 2] = $5;
          HEAP32[($4 + 159376 | 0) >> 2] = $5;
          $0 = $0 + 1 | 0;
          if (($0 | 0) != (32 | 0)) {
           continue label$71
          }
          break label$71;
         };
         $0 = $2 + -40 | 0;
         $4 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
         $5 = $0 - $4 | 0;
         HEAP32[(0 + 159336 | 0) >> 2] = $5;
         $4 = $7 + $4 | 0;
         HEAP32[(0 + 159348 | 0) >> 2] = $4;
         HEAP32[($4 + 4 | 0) >> 2] = $5 | 1 | 0;
         HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 159352 | 0) >> 2] = HEAP32[(0 + 159812 | 0) >> 2] | 0;
         break label$64;
        }
        if ((HEAPU8[($0 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$65
        }
        if ($4 >>> 0 < $5 >>> 0) {
         break label$65
        }
        if ($4 >>> 0 >= $7 >>> 0) {
         break label$65
        }
        HEAP32[($0 + 4 | 0) >> 2] = $8 + $2 | 0;
        $0 = ($4 + 8 | 0) & 7 | 0 ? (-8 - $4 | 0) & 7 | 0 : 0;
        $5 = $4 + $0 | 0;
        HEAP32[(0 + 159348 | 0) >> 2] = $5;
        $7 = (HEAP32[(0 + 159336 | 0) >> 2] | 0) + $2 | 0;
        $0 = $7 - $0 | 0;
        HEAP32[(0 + 159336 | 0) >> 2] = $0;
        HEAP32[($5 + 4 | 0) >> 2] = $0 | 1 | 0;
        HEAP32[(($4 + $7 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 159352 | 0) >> 2] = HEAP32[(0 + 159812 | 0) >> 2] | 0;
        break label$64;
       }
       label$72 : {
        $11 = HEAP32[(0 + 159340 | 0) >> 2] | 0;
        if ($7 >>> 0 >= $11 >>> 0) {
         break label$72
        }
        HEAP32[(0 + 159340 | 0) >> 2] = $7;
        $11 = $7;
       }
       $8 = $7 + $2 | 0;
       $5 = 159772;
       label$73 : {
        label$74 : {
         label$75 : while (1) {
          if ((HEAP32[$5 >> 2] | 0 | 0) == ($8 | 0)) {
           break label$74
          }
          $0 = 159772;
          $5 = HEAP32[($5 + 8 | 0) >> 2] | 0;
          if ($5) {
           continue label$75
          }
          break label$73;
         };
        }
        $0 = 159772;
        if ((HEAPU8[($5 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$73
        }
        HEAP32[$5 >> 2] = $7;
        HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) + $2 | 0;
        $2 = $7 + (($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0) | 0;
        HEAP32[($2 + 4 | 0) >> 2] = $3 | 3 | 0;
        $8 = $8 + (($8 + 8 | 0) & 7 | 0 ? (-8 - $8 | 0) & 7 | 0 : 0) | 0;
        $3 = $2 + $3 | 0;
        $5 = $8 - $3 | 0;
        label$76 : {
         label$77 : {
          if (($8 | 0) != ($4 | 0)) {
           break label$77
          }
          HEAP32[(0 + 159348 | 0) >> 2] = $3;
          $0 = (HEAP32[(0 + 159336 | 0) >> 2] | 0) + $5 | 0;
          HEAP32[(0 + 159336 | 0) >> 2] = $0;
          HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
          break label$76;
         }
         label$78 : {
          if (($8 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
           break label$78
          }
          HEAP32[(0 + 159344 | 0) >> 2] = $3;
          $0 = (HEAP32[(0 + 159332 | 0) >> 2] | 0) + $5 | 0;
          HEAP32[(0 + 159332 | 0) >> 2] = $0;
          HEAP32[($3 + 4 | 0) >> 2] = $0 | 1 | 0;
          HEAP32[($3 + $0 | 0) >> 2] = $0;
          break label$76;
         }
         label$79 : {
          $0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
          if (($0 & 3 | 0 | 0) != (1 | 0)) {
           break label$79
          }
          $6 = $0 & -8 | 0;
          label$80 : {
           label$81 : {
            if ($0 >>> 0 > 255 >>> 0) {
             break label$81
            }
            $4 = HEAP32[($8 + 8 | 0) >> 2] | 0;
            $11 = $0 >>> 3 | 0;
            $7 = ($11 << 3 | 0) + 159364 | 0;
            label$82 : {
             $0 = HEAP32[($8 + 12 | 0) >> 2] | 0;
             if (($0 | 0) != ($4 | 0)) {
              break label$82
             }
             (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $11 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
             break label$80;
            }
            HEAP32[($4 + 12 | 0) >> 2] = $0;
            HEAP32[($0 + 8 | 0) >> 2] = $4;
            break label$80;
           }
           $9 = HEAP32[($8 + 24 | 0) >> 2] | 0;
           label$83 : {
            label$84 : {
             $7 = HEAP32[($8 + 12 | 0) >> 2] | 0;
             if (($7 | 0) == ($8 | 0)) {
              break label$84
             }
             $0 = HEAP32[($8 + 8 | 0) >> 2] | 0;
             HEAP32[($0 + 12 | 0) >> 2] = $7;
             HEAP32[($7 + 8 | 0) >> 2] = $0;
             break label$83;
            }
            label$85 : {
             $0 = $8 + 20 | 0;
             $4 = HEAP32[$0 >> 2] | 0;
             if ($4) {
              break label$85
             }
             $0 = $8 + 16 | 0;
             $4 = HEAP32[$0 >> 2] | 0;
             if ($4) {
              break label$85
             }
             $7 = 0;
             break label$83;
            }
            label$86 : while (1) {
             $11 = $0;
             $7 = $4;
             $0 = $4 + 20 | 0;
             $4 = HEAP32[$0 >> 2] | 0;
             if ($4) {
              continue label$86
             }
             $0 = $7 + 16 | 0;
             $4 = HEAP32[($7 + 16 | 0) >> 2] | 0;
             if ($4) {
              continue label$86
             }
             break label$86;
            };
            HEAP32[$11 >> 2] = 0;
           }
           if (!$9) {
            break label$80
           }
           label$87 : {
            label$88 : {
             $4 = HEAP32[($8 + 28 | 0) >> 2] | 0;
             $0 = ($4 << 2 | 0) + 159628 | 0;
             if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
              break label$88
             }
             HEAP32[$0 >> 2] = $7;
             if ($7) {
              break label$87
             }
             (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
             break label$80;
            }
            HEAP32[($9 + ((HEAP32[($9 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $7;
            if (!$7) {
             break label$80
            }
           }
           HEAP32[($7 + 24 | 0) >> 2] = $9;
           label$89 : {
            $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
            if (!$0) {
             break label$89
            }
            HEAP32[($7 + 16 | 0) >> 2] = $0;
            HEAP32[($0 + 24 | 0) >> 2] = $7;
           }
           $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
           if (!$0) {
            break label$80
           }
           HEAP32[($7 + 20 | 0) >> 2] = $0;
           HEAP32[($0 + 24 | 0) >> 2] = $7;
          }
          $5 = $6 + $5 | 0;
          $8 = $8 + $6 | 0;
          $0 = HEAP32[($8 + 4 | 0) >> 2] | 0;
         }
         HEAP32[($8 + 4 | 0) >> 2] = $0 & -2 | 0;
         HEAP32[($3 + 4 | 0) >> 2] = $5 | 1 | 0;
         HEAP32[($3 + $5 | 0) >> 2] = $5;
         label$90 : {
          if ($5 >>> 0 > 255 >>> 0) {
           break label$90
          }
          $4 = $5 >>> 3 | 0;
          $0 = ($4 << 3 | 0) + 159364 | 0;
          label$91 : {
           label$92 : {
            $5 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
            $4 = 1 << $4 | 0;
            if ($5 & $4 | 0) {
             break label$92
            }
            HEAP32[(0 + 159324 | 0) >> 2] = $5 | $4 | 0;
            $4 = $0;
            break label$91;
           }
           $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
          }
          HEAP32[($0 + 8 | 0) >> 2] = $3;
          HEAP32[($4 + 12 | 0) >> 2] = $3;
          HEAP32[($3 + 12 | 0) >> 2] = $0;
          HEAP32[($3 + 8 | 0) >> 2] = $4;
          break label$76;
         }
         $0 = 31;
         label$93 : {
          if ($5 >>> 0 > 16777215 >>> 0) {
           break label$93
          }
          $0 = $5 >>> 8 | 0;
          $1167 = $0;
          $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
          $4 = $1167 << $0 | 0;
          $1174 = $4;
          $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
          $7 = $1174 << $4 | 0;
          $1181 = $7;
          $7 = (($7 + 245760 | 0) >>> 16 | 0) & 2 | 0;
          $0 = (($1181 << $7 | 0) >>> 15 | 0) - ($0 | $4 | 0 | $7 | 0) | 0;
          $0 = ($0 << 1 | 0 | (($5 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
         }
         HEAP32[($3 + 28 | 0) >> 2] = $0;
         i64toi32_i32$1 = $3;
         i64toi32_i32$0 = 0;
         HEAP32[($3 + 16 | 0) >> 2] = 0;
         HEAP32[($3 + 20 | 0) >> 2] = i64toi32_i32$0;
         $4 = ($0 << 2 | 0) + 159628 | 0;
         label$94 : {
          label$95 : {
           label$96 : {
            $7 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
            $8 = 1 << $0 | 0;
            if ($7 & $8 | 0) {
             break label$96
            }
            HEAP32[(0 + 159328 | 0) >> 2] = $7 | $8 | 0;
            HEAP32[$4 >> 2] = $3;
            HEAP32[($3 + 24 | 0) >> 2] = $4;
            break label$95;
           }
           $0 = $5 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
           $7 = HEAP32[$4 >> 2] | 0;
           label$97 : while (1) {
            $4 = $7;
            if (((HEAP32[($4 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5 | 0)) {
             break label$94
            }
            $7 = $0 >>> 29 | 0;
            $0 = $0 << 1 | 0;
            $8 = ($4 + ($7 & 4 | 0) | 0) + 16 | 0;
            $7 = HEAP32[$8 >> 2] | 0;
            if ($7) {
             continue label$97
            }
            break label$97;
           };
           HEAP32[$8 >> 2] = $3;
           HEAP32[($3 + 24 | 0) >> 2] = $4;
          }
          HEAP32[($3 + 12 | 0) >> 2] = $3;
          HEAP32[($3 + 8 | 0) >> 2] = $3;
          break label$76;
         }
         $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
         HEAP32[($0 + 12 | 0) >> 2] = $3;
         HEAP32[($4 + 8 | 0) >> 2] = $3;
         HEAP32[($3 + 24 | 0) >> 2] = 0;
         HEAP32[($3 + 12 | 0) >> 2] = $4;
         HEAP32[($3 + 8 | 0) >> 2] = $0;
        }
        $0 = $2 + 8 | 0;
        break label$1;
       }
       label$98 : {
        label$99 : while (1) {
         label$100 : {
          $5 = HEAP32[$0 >> 2] | 0;
          if ($5 >>> 0 > $4 >>> 0) {
           break label$100
          }
          $5 = $5 + (HEAP32[($0 + 4 | 0) >> 2] | 0) | 0;
          if ($5 >>> 0 > $4 >>> 0) {
           break label$98
          }
         }
         $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
         continue label$99;
        };
       }
       $0 = $2 + -40 | 0;
       $8 = ($7 + 8 | 0) & 7 | 0 ? (-8 - $7 | 0) & 7 | 0 : 0;
       $11 = $0 - $8 | 0;
       HEAP32[(0 + 159336 | 0) >> 2] = $11;
       $8 = $7 + $8 | 0;
       HEAP32[(0 + 159348 | 0) >> 2] = $8;
       HEAP32[($8 + 4 | 0) >> 2] = $11 | 1 | 0;
       HEAP32[(($7 + $0 | 0) + 4 | 0) >> 2] = 40;
       HEAP32[(0 + 159352 | 0) >> 2] = HEAP32[(0 + 159812 | 0) >> 2] | 0;
       $0 = ($5 + (($5 + -39 | 0) & 7 | 0 ? (39 - $5 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
       $8 = $0 >>> 0 < ($4 + 16 | 0) >>> 0 ? $4 : $0;
       HEAP32[($8 + 4 | 0) >> 2] = 27;
       i64toi32_i32$2 = 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 159780 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 159784 | 0) >> 2] | 0;
       $1330 = i64toi32_i32$0;
       i64toi32_i32$0 = $8 + 16 | 0;
       HEAP32[i64toi32_i32$0 >> 2] = $1330;
       HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
       i64toi32_i32$2 = 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 159772 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 159776 | 0) >> 2] | 0;
       $1332 = i64toi32_i32$1;
       i64toi32_i32$1 = $8;
       HEAP32[($8 + 8 | 0) >> 2] = $1332;
       HEAP32[($8 + 12 | 0) >> 2] = i64toi32_i32$0;
       HEAP32[(0 + 159780 | 0) >> 2] = $8 + 8 | 0;
       HEAP32[(0 + 159776 | 0) >> 2] = $2;
       HEAP32[(0 + 159772 | 0) >> 2] = $7;
       HEAP32[(0 + 159784 | 0) >> 2] = 0;
       $0 = $8 + 24 | 0;
       label$101 : while (1) {
        HEAP32[($0 + 4 | 0) >> 2] = 7;
        $7 = $0 + 8 | 0;
        $0 = $0 + 4 | 0;
        if ($7 >>> 0 < $5 >>> 0) {
         continue label$101
        }
        break label$101;
       };
       if (($8 | 0) == ($4 | 0)) {
        break label$64
       }
       HEAP32[($8 + 4 | 0) >> 2] = (HEAP32[($8 + 4 | 0) >> 2] | 0) & -2 | 0;
       $2 = $8 - $4 | 0;
       HEAP32[($4 + 4 | 0) >> 2] = $2 | 1 | 0;
       HEAP32[$8 >> 2] = $2;
       label$102 : {
        if ($2 >>> 0 > 255 >>> 0) {
         break label$102
        }
        $5 = $2 >>> 3 | 0;
        $0 = ($5 << 3 | 0) + 159364 | 0;
        label$103 : {
         label$104 : {
          $7 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
          $5 = 1 << $5 | 0;
          if ($7 & $5 | 0) {
           break label$104
          }
          HEAP32[(0 + 159324 | 0) >> 2] = $7 | $5 | 0;
          $5 = $0;
          break label$103;
         }
         $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        }
        HEAP32[($0 + 8 | 0) >> 2] = $4;
        HEAP32[($5 + 12 | 0) >> 2] = $4;
        HEAP32[($4 + 12 | 0) >> 2] = $0;
        HEAP32[($4 + 8 | 0) >> 2] = $5;
        break label$64;
       }
       $0 = 31;
       label$105 : {
        if ($2 >>> 0 > 16777215 >>> 0) {
         break label$105
        }
        $0 = $2 >>> 8 | 0;
        $1393 = $0;
        $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
        $5 = $1393 << $0 | 0;
        $1400 = $5;
        $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
        $7 = $1400 << $5 | 0;
        $1407 = $7;
        $7 = (($7 + 245760 | 0) >>> 16 | 0) & 2 | 0;
        $0 = (($1407 << $7 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $7 | 0) | 0;
        $0 = ($0 << 1 | 0 | (($2 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
       }
       HEAP32[($4 + 28 | 0) >> 2] = $0;
       i64toi32_i32$1 = $4;
       i64toi32_i32$0 = 0;
       HEAP32[($4 + 16 | 0) >> 2] = 0;
       HEAP32[($4 + 20 | 0) >> 2] = i64toi32_i32$0;
       $5 = ($0 << 2 | 0) + 159628 | 0;
       label$106 : {
        label$107 : {
         label$108 : {
          $7 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
          $8 = 1 << $0 | 0;
          if ($7 & $8 | 0) {
           break label$108
          }
          HEAP32[(0 + 159328 | 0) >> 2] = $7 | $8 | 0;
          HEAP32[$5 >> 2] = $4;
          HEAP32[($4 + 24 | 0) >> 2] = $5;
          break label$107;
         }
         $0 = $2 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
         $7 = HEAP32[$5 >> 2] | 0;
         label$109 : while (1) {
          $5 = $7;
          if (((HEAP32[($7 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2 | 0)) {
           break label$106
          }
          $7 = $0 >>> 29 | 0;
          $0 = $0 << 1 | 0;
          $8 = ($5 + ($7 & 4 | 0) | 0) + 16 | 0;
          $7 = HEAP32[$8 >> 2] | 0;
          if ($7) {
           continue label$109
          }
          break label$109;
         };
         HEAP32[$8 >> 2] = $4;
         HEAP32[($4 + 24 | 0) >> 2] = $5;
        }
        HEAP32[($4 + 12 | 0) >> 2] = $4;
        HEAP32[($4 + 8 | 0) >> 2] = $4;
        break label$64;
       }
       $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
       HEAP32[($0 + 12 | 0) >> 2] = $4;
       HEAP32[($5 + 8 | 0) >> 2] = $4;
       HEAP32[($4 + 24 | 0) >> 2] = 0;
       HEAP32[($4 + 12 | 0) >> 2] = $5;
       HEAP32[($4 + 8 | 0) >> 2] = $0;
      }
      $0 = HEAP32[(0 + 159336 | 0) >> 2] | 0;
      if ($0 >>> 0 <= $3 >>> 0) {
       break label$4
      }
      $4 = $0 - $3 | 0;
      HEAP32[(0 + 159336 | 0) >> 2] = $4;
      $0 = HEAP32[(0 + 159348 | 0) >> 2] | 0;
      $5 = $0 + $3 | 0;
      HEAP32[(0 + 159348 | 0) >> 2] = $5;
      HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = $3 | 3 | 0;
      $0 = $0 + 8 | 0;
      break label$1;
     }
     $0 = 0;
     HEAP32[(0 + 159132 | 0) >> 2] = 48;
     break label$1;
    }
    label$110 : {
     if (!$11) {
      break label$110
     }
     label$111 : {
      label$112 : {
       $5 = HEAP32[($8 + 28 | 0) >> 2] | 0;
       $0 = ($5 << 2 | 0) + 159628 | 0;
       if (($8 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
        break label$112
       }
       HEAP32[$0 >> 2] = $7;
       if ($7) {
        break label$111
       }
       $6 = $6 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0;
       HEAP32[(0 + 159328 | 0) >> 2] = $6;
       break label$110;
      }
      HEAP32[($11 + ((HEAP32[($11 + 16 | 0) >> 2] | 0 | 0) == ($8 | 0) ? 16 : 20) | 0) >> 2] = $7;
      if (!$7) {
       break label$110
      }
     }
     HEAP32[($7 + 24 | 0) >> 2] = $11;
     label$113 : {
      $0 = HEAP32[($8 + 16 | 0) >> 2] | 0;
      if (!$0) {
       break label$113
      }
      HEAP32[($7 + 16 | 0) >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $7;
     }
     $0 = HEAP32[($8 + 20 | 0) >> 2] | 0;
     if (!$0) {
      break label$110
     }
     HEAP32[($7 + 20 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $7;
    }
    label$114 : {
     label$115 : {
      if ($4 >>> 0 > 15 >>> 0) {
       break label$115
      }
      $0 = $4 + $3 | 0;
      HEAP32[($8 + 4 | 0) >> 2] = $0 | 3 | 0;
      $0 = $8 + $0 | 0;
      HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$114;
     }
     HEAP32[($8 + 4 | 0) >> 2] = $3 | 3 | 0;
     $7 = $8 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $4 | 1 | 0;
     HEAP32[($7 + $4 | 0) >> 2] = $4;
     label$116 : {
      if ($4 >>> 0 > 255 >>> 0) {
       break label$116
      }
      $4 = $4 >>> 3 | 0;
      $0 = ($4 << 3 | 0) + 159364 | 0;
      label$117 : {
       label$118 : {
        $5 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
        $4 = 1 << $4 | 0;
        if ($5 & $4 | 0) {
         break label$118
        }
        HEAP32[(0 + 159324 | 0) >> 2] = $5 | $4 | 0;
        $4 = $0;
        break label$117;
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0 + 8 | 0) >> 2] = $7;
      HEAP32[($4 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 12 | 0) >> 2] = $0;
      HEAP32[($7 + 8 | 0) >> 2] = $4;
      break label$114;
     }
     $0 = 31;
     label$119 : {
      if ($4 >>> 0 > 16777215 >>> 0) {
       break label$119
      }
      $0 = $4 >>> 8 | 0;
      $1625 = $0;
      $0 = (($0 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5 = $1625 << $0 | 0;
      $1632 = $5;
      $5 = (($5 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3 = $1632 << $5 | 0;
      $1639 = $3;
      $3 = (($3 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0 = (($1639 << $3 | 0) >>> 15 | 0) - ($0 | $5 | 0 | $3 | 0) | 0;
      $0 = ($0 << 1 | 0 | (($4 >>> ($0 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($7 + 28 | 0) >> 2] = $0;
     i64toi32_i32$1 = $7;
     i64toi32_i32$0 = 0;
     HEAP32[($7 + 16 | 0) >> 2] = 0;
     HEAP32[($7 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5 = ($0 << 2 | 0) + 159628 | 0;
     label$120 : {
      label$121 : {
       label$122 : {
        $3 = 1 << $0 | 0;
        if ($6 & $3 | 0) {
         break label$122
        }
        HEAP32[(0 + 159328 | 0) >> 2] = $6 | $3 | 0;
        HEAP32[$5 >> 2] = $7;
        HEAP32[($7 + 24 | 0) >> 2] = $5;
        break label$121;
       }
       $0 = $4 << (($0 | 0) == (31 | 0) ? 0 : 25 - ($0 >>> 1 | 0) | 0) | 0;
       $3 = HEAP32[$5 >> 2] | 0;
       label$123 : while (1) {
        $5 = $3;
        if (((HEAP32[($5 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4 | 0)) {
         break label$120
        }
        $3 = $0 >>> 29 | 0;
        $0 = $0 << 1 | 0;
        $2 = ($5 + ($3 & 4 | 0) | 0) + 16 | 0;
        $3 = HEAP32[$2 >> 2] | 0;
        if ($3) {
         continue label$123
        }
        break label$123;
       };
       HEAP32[$2 >> 2] = $7;
       HEAP32[($7 + 24 | 0) >> 2] = $5;
      }
      HEAP32[($7 + 12 | 0) >> 2] = $7;
      HEAP32[($7 + 8 | 0) >> 2] = $7;
      break label$114;
     }
     $0 = HEAP32[($5 + 8 | 0) >> 2] | 0;
     HEAP32[($0 + 12 | 0) >> 2] = $7;
     HEAP32[($5 + 8 | 0) >> 2] = $7;
     HEAP32[($7 + 24 | 0) >> 2] = 0;
     HEAP32[($7 + 12 | 0) >> 2] = $5;
     HEAP32[($7 + 8 | 0) >> 2] = $0;
    }
    $0 = $8 + 8 | 0;
    break label$1;
   }
   label$124 : {
    if (!$10) {
     break label$124
    }
    label$125 : {
     label$126 : {
      $5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
      $0 = ($5 << 2 | 0) + 159628 | 0;
      if (($7 | 0) != (HEAP32[$0 >> 2] | 0 | 0)) {
       break label$126
      }
      HEAP32[$0 >> 2] = $8;
      if ($8) {
       break label$125
      }
      (wasm2js_i32$0 = 0, wasm2js_i32$1 = $9 & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
      break label$124;
     }
     HEAP32[($10 + ((HEAP32[($10 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $8;
     if (!$8) {
      break label$124
     }
    }
    HEAP32[($8 + 24 | 0) >> 2] = $10;
    label$127 : {
     $0 = HEAP32[($7 + 16 | 0) >> 2] | 0;
     if (!$0) {
      break label$127
     }
     HEAP32[($8 + 16 | 0) >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $8;
    }
    $0 = HEAP32[($7 + 20 | 0) >> 2] | 0;
    if (!$0) {
     break label$124
    }
    HEAP32[($8 + 20 | 0) >> 2] = $0;
    HEAP32[($0 + 24 | 0) >> 2] = $8;
   }
   label$128 : {
    label$129 : {
     if ($4 >>> 0 > 15 >>> 0) {
      break label$129
     }
     $0 = $4 + $3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = $0 | 3 | 0;
     $0 = $7 + $0 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = HEAP32[($0 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$128;
    }
    HEAP32[($7 + 4 | 0) >> 2] = $3 | 3 | 0;
    $5 = $7 + $3 | 0;
    HEAP32[($5 + 4 | 0) >> 2] = $4 | 1 | 0;
    HEAP32[($5 + $4 | 0) >> 2] = $4;
    label$130 : {
     if (!$6) {
      break label$130
     }
     $8 = $6 >>> 3 | 0;
     $3 = ($8 << 3 | 0) + 159364 | 0;
     $0 = HEAP32[(0 + 159344 | 0) >> 2] | 0;
     label$131 : {
      label$132 : {
       $8 = 1 << $8 | 0;
       if ($8 & $2 | 0) {
        break label$132
       }
       HEAP32[(0 + 159324 | 0) >> 2] = $8 | $2 | 0;
       $8 = $3;
       break label$131;
      }
      $8 = HEAP32[($3 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3 + 8 | 0) >> 2] = $0;
     HEAP32[($8 + 12 | 0) >> 2] = $0;
     HEAP32[($0 + 12 | 0) >> 2] = $3;
     HEAP32[($0 + 8 | 0) >> 2] = $8;
    }
    HEAP32[(0 + 159344 | 0) >> 2] = $5;
    HEAP32[(0 + 159332 | 0) >> 2] = $4;
   }
   $0 = $7 + 8 | 0;
  }
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function getenv($0) {
  $0 = $0 | 0;
  var $1 = 0, $4 = 0, $3 = 0, $2 = 0;
  label$1 : {
   $1 = __strchrnul($0 | 0) | 0;
   if (($1 | 0) != ($0 | 0)) {
    break label$1
   }
   return 0 | 0;
  }
  $2 = 0;
  label$2 : {
   $3 = $1 - $0 | 0;
   if (HEAPU8[($0 + $3 | 0) >> 0] | 0) {
    break label$2
   }
   $4 = HEAP32[(0 + 159140 | 0) >> 2] | 0;
   if (!$4) {
    break label$2
   }
   $1 = HEAP32[$4 >> 2] | 0;
   if (!$1) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     label$5 : {
      if (strncmp($0 | 0, $1 | 0, $3 | 0) | 0) {
       break label$5
      }
      $1 = $1 + $3 | 0;
      if ((HEAPU8[$1 >> 0] | 0 | 0) == (61 | 0)) {
       break label$3
      }
     }
     $1 = HEAP32[($4 + 4 | 0) >> 2] | 0;
     $4 = $4 + 4 | 0;
     if ($1) {
      continue label$4
     }
     break label$2;
    };
   }
   $2 = $1 + 1 | 0;
  }
  return $2 | 0;
 }
 
 function __strchrnul($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  label$1 : {
   label$2 : {
    if (!($0 & 3 | 0)) {
     break label$2
    }
    label$3 : while (1) {
     $1 = HEAPU8[$0 >> 0] | 0;
     if (!$1) {
      break label$1
     }
     if (($1 | 0) == (61 | 0)) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     if ($0 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : {
    $1 = HEAP32[$0 >> 2] | 0;
    $2 = ($1 ^ -1 | 0) & -2139062144 | 0;
    if ($2 & ($1 + -16843009 | 0) | 0) {
     break label$4
    }
    if ($2 & (($1 ^ 1027423549 | 0) + -16843009 | 0) | 0) {
     break label$4
    }
    label$5 : while (1) {
     $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     $0 = $0 + 4 | 0;
     $2 = ($1 ^ -1 | 0) & -2139062144 | 0;
     if ($2 & ($1 + -16843009 | 0) | 0) {
      break label$4
     }
     if (!($2 & (($1 ^ 1027423549 | 0) + -16843009 | 0) | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $1 = $1 & 255 | 0;
   if (!$1) {
    break label$1
   }
   if (($1 | 0) == (61 | 0)) {
    break label$1
   }
   label$6 : {
    label$7 : while (1) {
     $1 = $0 + 1 | 0;
     $2 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     if (($2 | 0) == (61 | 0)) {
      break label$6
     }
     $0 = $1;
     if ($2) {
      continue label$7
     }
     break label$7;
    };
   }
   return $1 | 0;
  }
  return $0 | 0;
 }
 
 function strncmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return 0 | 0;
  }
  $3 = 0;
  label$2 : {
   $4 = HEAPU8[$0 >> 0] | 0;
   if (!$4) {
    break label$2
   }
   label$3 : {
    label$4 : while (1) {
     $5 = HEAPU8[$1 >> 0] | 0;
     if (!$5) {
      break label$3
     }
     $2 = $2 + -1 | 0;
     if (!$2) {
      break label$3
     }
     if (($4 & 255 | 0 | 0) != ($5 | 0)) {
      break label$3
     }
     $1 = $1 + 1 | 0;
     $4 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
     $0 = $0 + 1 | 0;
     if ($4) {
      continue label$4
     }
     break label$2;
    };
   }
   $3 = $4;
  }
  return ($3 & 255 | 0) - (HEAPU8[$1 >> 0] | 0) | 0 | 0;
 }
 
 function isdigit($0) {
  $0 = $0 | 0;
  return ($0 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function isspace($0) {
  $0 = $0 | 0;
  return ($0 | 0) == (32 | 0) | ($0 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function emscripten_futex_wake($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return 0 | 0;
 }
 
 function init_pthread_self() {
  HEAP32[(0 + 159160 | 0) >> 2] = 42;
  HEAP32[(0 + 159232 | 0) >> 2] = 159288;
 }
 
 function __get_tp() {
  return 159144 | 0;
 }
 
 function siprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  HEAP32[($3 + 12 | 0) >> 2] = $2;
  $2 = vsiprintf($0 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function vsiprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return vsniprintf($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function vsscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $3 = memset($3 | 0, 0 | 0, 144 | 0) | 0;
  HEAP32[($3 + 76 | 0) >> 2] = -1;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 32 | 0) >> 2] = 114;
  HEAP32[($3 + 84 | 0) >> 2] = $0;
  $0 = vfscanf($3 | 0, $1 | 0, $2 | 0) | 0;
  __stack_pointer = $3 + 144 | 0;
  return $0 | 0;
 }
 
 function memchr($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = ($1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!($0 & 3 | 0)) {
       break label$4
      }
      if (!$1) {
       break label$4
      }
      label$5 : while (1) {
       $3 = HEAPU8[$0 >> 0] | 0;
       if (!$3) {
        break label$3
       }
       $1 = $1 + -1 | 0;
       $2 = ($1 | 0) != (0 | 0);
       $0 = $0 + 1 | 0;
       if (!($0 & 3 | 0)) {
        break label$4
       }
       if ($1) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$2) {
      break label$1
     }
     label$6 : {
      label$7 : {
       if (!(HEAPU8[$0 >> 0] | 0)) {
        break label$7
       }
       if ($1 >>> 0 < 4 >>> 0) {
        break label$7
       }
       label$8 : while (1) {
        $2 = HEAP32[$0 >> 2] | 0;
        if ((($2 ^ -1 | 0) & ($2 + -16843009 | 0) | 0) & -2139062144 | 0) {
         break label$6
        }
        $0 = $0 + 4 | 0;
        $1 = $1 + -4 | 0;
        if ($1 >>> 0 > 3 >>> 0) {
         continue label$8
        }
        break label$8;
       };
      }
      if (!$1) {
       break label$1
      }
     }
     $2 = 0;
     break label$2;
    }
    $2 = 1;
   }
   label$9 : while (1) {
    label$10 : {
     switch ($2 | 0) {
     case 0:
      $3 = HEAPU8[$0 >> 0] | 0;
      $2 = 1;
      continue label$9;
     default:
      break label$10;
     };
    }
    label$12 : {
     if ($3 & 255 | 0) {
      break label$12
     }
     return $0 | 0;
    }
    $0 = $0 + 1 | 0;
    $1 = $1 + -1 | 0;
    if (!$1) {
     break label$1
    }
    $2 = 0;
    continue label$9;
   };
  }
  return 0 | 0;
 }
 
 function strnlen($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = memchr($0 | 0, $1 | 0) | 0;
  return ($2 ? $2 - $0 | 0 : $1) | 0;
 }
 
 function frexp($0, $1) {
  $0 = +$0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2 = 0, $10 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3 = $10 & 2047 | 0;
   if (($3 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0 != 0.0) {
       break label$4
      }
      $3 = 0;
      break label$3;
     }
     $0 = +frexp(+($0 * 18446744073709551615.0), $1 | 0);
     $3 = (HEAP32[$1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1 >> 2] = $3;
    return +$0;
   }
   HEAP32[$1 >> 2] = $3 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0 = +wasm2js_scratch_load_f64();
  }
  return +$0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, i64toi32_i32$0 = 0, $8 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  HEAP32[($5 + 204 | 0) >> 2] = $2;
  $6 = 0;
  memset($5 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5 + 200 | 0) >> 2] = HEAP32[($5 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if ((printf_core(0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $6 = __lockfile($0 | 0) | 0;
   }
   $7 = HEAP32[$0 >> 2] | 0;
   label$4 : {
    if ((HEAP32[($0 + 72 | 0) >> 2] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0 >> 2] = $7 & -33 | 0;
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       if (HEAP32[($0 + 48 | 0) >> 2] | 0) {
        break label$8
       }
       HEAP32[($0 + 48 | 0) >> 2] = 80;
       HEAP32[($0 + 28 | 0) >> 2] = 0;
       i64toi32_i32$0 = 0;
       HEAP32[($0 + 16 | 0) >> 2] = 0;
       HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
       $8 = HEAP32[($0 + 44 | 0) >> 2] | 0;
       HEAP32[($0 + 44 | 0) >> 2] = $5;
       break label$7;
      }
      $8 = 0;
      if (HEAP32[($0 + 16 | 0) >> 2] | 0) {
       break label$6
      }
     }
     $2 = -1;
     if (__towrite($0 | 0) | 0) {
      break label$5
     }
    }
    $2 = printf_core($0 | 0, $1 | 0, $5 + 200 | 0 | 0, $5 + 80 | 0 | 0, $5 + 160 | 0 | 0, $3 | 0, $4 | 0) | 0;
   }
   $1 = $7 & 32 | 0;
   label$9 : {
    if (!$8) {
     break label$9
    }
    FUNCTION_TABLE[HEAP32[($0 + 36 | 0) >> 2] | 0 | 0]($0, 0, 0) | 0;
    HEAP32[($0 + 48 | 0) >> 2] = 0;
    HEAP32[($0 + 44 | 0) >> 2] = $8;
    HEAP32[($0 + 28 | 0) >> 2] = 0;
    $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
    i64toi32_i32$0 = 0;
    HEAP32[($0 + 16 | 0) >> 2] = 0;
    HEAP32[($0 + 20 | 0) >> 2] = i64toi32_i32$0;
    $2 = $3 ? $2 : -1;
   }
   $3 = HEAP32[$0 >> 2] | 0;
   HEAP32[$0 >> 2] = $3 | $1 | 0;
   $1 = $3 & 32 | 0 ? -1 : $2;
   if (!$6) {
    break label$1
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $5 + 208 | 0;
  return $1 | 0;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $13 = 0, $15 = 0, $20 = 0, i64toi32_i32$1 = 0, $18 = 0, $12 = 0, $14 = 0, $17 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $11 = 0, $19 = 0, $16 = 0, $22 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9 = 0, $10 = 0, $24 = 0, $24$hi = 0, $21 = 0, $23 = 0, $32 = 0, $33 = 0, $34 = 0, $8 = 0, $272 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  HEAP32[($7 + 76 | 0) >> 2] = $1;
  $8 = $7 + 55 | 0;
  $9 = $7 + 56 | 0;
  $10 = 0;
  $11 = 0;
  $1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       if (($1 | 0) > (2147483647 - $11 | 0 | 0)) {
        break label$4
       }
       $11 = $1 + $11 | 0;
       $12 = HEAP32[($7 + 76 | 0) >> 2] | 0;
       $1 = $12;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            $13 = HEAPU8[$1 >> 0] | 0;
            if (!$13) {
             break label$10
            }
            label$11 : while (1) {
             label$12 : {
              label$13 : {
               label$14 : {
                $13 = $13 & 255 | 0;
                if ($13) {
                 break label$14
                }
                $13 = $1;
                break label$13;
               }
               if (($13 | 0) != (37 | 0)) {
                break label$12
               }
               $13 = $1;
               label$15 : while (1) {
                if ((HEAPU8[($1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
                 break label$13
                }
                $14 = $1 + 2 | 0;
                HEAP32[($7 + 76 | 0) >> 2] = $14;
                $13 = $13 + 1 | 0;
                $15 = HEAPU8[($1 + 2 | 0) >> 0] | 0;
                $1 = $14;
                if (($15 | 0) == (37 | 0)) {
                 continue label$15
                }
                break label$15;
               };
              }
              $1 = $13 - $12 | 0;
              $14 = 2147483647 - $11 | 0;
              if (($1 | 0) > ($14 | 0)) {
               break label$4
              }
              label$16 : {
               if (!$0) {
                break label$16
               }
               out($0 | 0, $12 | 0, $1 | 0);
              }
              if ($1) {
               continue label$5
              }
              $16 = -1;
              $13 = 1;
              label$17 : {
               $1 = HEAP32[($7 + 76 | 0) >> 2] | 0;
               $15 = HEAP8[($1 + 1 | 0) >> 0] | 0;
               if (!(isdigit($15 | 0) | 0)) {
                break label$17
               }
               if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$17
               }
               $16 = $15 + -48 | 0;
               $10 = 1;
               $13 = 3;
              }
              $1 = $1 + $13 | 0;
              HEAP32[($7 + 76 | 0) >> 2] = $1;
              $17 = 0;
              label$18 : {
               label$19 : {
                $18 = HEAP8[$1 >> 0] | 0;
                $15 = $18 + -32 | 0;
                if ($15 >>> 0 <= 31 >>> 0) {
                 break label$19
                }
                $13 = $1;
                break label$18;
               }
               $17 = 0;
               $13 = $1;
               $15 = 1 << $15 | 0;
               if (!($15 & 75913 | 0)) {
                break label$18
               }
               label$20 : while (1) {
                $13 = $1 + 1 | 0;
                HEAP32[($7 + 76 | 0) >> 2] = $13;
                $17 = $15 | $17 | 0;
                $18 = HEAP8[($1 + 1 | 0) >> 0] | 0;
                $15 = $18 + -32 | 0;
                if ($15 >>> 0 >= 32 >>> 0) {
                 break label$18
                }
                $1 = $13;
                $15 = 1 << $15 | 0;
                if ($15 & 75913 | 0) {
                 continue label$20
                }
                break label$20;
               };
              }
              label$21 : {
               label$22 : {
                if (($18 | 0) != (42 | 0)) {
                 break label$22
                }
                label$23 : {
                 label$24 : {
                  $1 = HEAP8[($13 + 1 | 0) >> 0] | 0;
                  if (!(isdigit($1 | 0) | 0)) {
                   break label$24
                  }
                  if ((HEAPU8[($13 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$24
                  }
                  HEAP32[((($1 << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $18 = $13 + 3 | 0;
                  $19 = HEAP32[((((HEAP8[($13 + 1 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  $10 = 1;
                  break label$23;
                 }
                 if ($10) {
                  break label$9
                 }
                 $18 = $13 + 1 | 0;
                 label$25 : {
                  if ($0) {
                   break label$25
                  }
                  HEAP32[($7 + 76 | 0) >> 2] = $18;
                  $10 = 0;
                  $19 = 0;
                  break label$21;
                 }
                 $1 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $1 + 4 | 0;
                 $19 = HEAP32[$1 >> 2] | 0;
                 $10 = 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $18;
                if (($19 | 0) > (-1 | 0)) {
                 break label$21
                }
                $19 = 0 - $19 | 0;
                $17 = $17 | 8192 | 0;
                break label$21;
               }
               $19 = getint($7 + 76 | 0 | 0) | 0;
               if (($19 | 0) < (0 | 0)) {
                break label$4
               }
               $18 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              $1 = 0;
              $20 = -1;
              label$26 : {
               label$27 : {
                if ((HEAPU8[$18 >> 0] | 0 | 0) == (46 | 0)) {
                 break label$27
                }
                $15 = $18;
                $21 = 0;
                break label$26;
               }
               label$28 : {
                if ((HEAPU8[($18 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
                 break label$28
                }
                label$29 : {
                 label$30 : {
                  $13 = HEAP8[($18 + 2 | 0) >> 0] | 0;
                  if (!(isdigit($13 | 0) | 0)) {
                   break label$30
                  }
                  if ((HEAPU8[($18 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                   break label$30
                  }
                  HEAP32[((($13 << 2 | 0) + $4 | 0) + -192 | 0) >> 2] = 10;
                  $15 = $18 + 4 | 0;
                  $20 = HEAP32[((((HEAP8[($18 + 2 | 0) >> 0] | 0) << 3 | 0) + $3 | 0) + -384 | 0) >> 2] | 0;
                  break label$29;
                 }
                 if ($10) {
                  break label$9
                 }
                 $15 = $18 + 2 | 0;
                 label$31 : {
                  if ($0) {
                   break label$31
                  }
                  $20 = 0;
                  break label$29;
                 }
                 $13 = HEAP32[$2 >> 2] | 0;
                 HEAP32[$2 >> 2] = $13 + 4 | 0;
                 $20 = HEAP32[$13 >> 2] | 0;
                }
                HEAP32[($7 + 76 | 0) >> 2] = $15;
                $21 = ($20 ^ -1 | 0) >>> 31 | 0;
                break label$26;
               }
               HEAP32[($7 + 76 | 0) >> 2] = $18 + 1 | 0;
               $21 = 1;
               $20 = getint($7 + 76 | 0 | 0) | 0;
               $15 = HEAP32[($7 + 76 | 0) >> 2] | 0;
              }
              label$32 : while (1) {
               $18 = $1;
               $22 = 28;
               $13 = $15;
               if (((HEAP8[$13 >> 0] | 0) + -123 | 0) >>> 0 < -58 >>> 0) {
                break label$3
               }
               $15 = $13 + 1 | 0;
               HEAP32[($7 + 76 | 0) >> 2] = $15;
               $1 = HEAPU8[(((HEAP8[$13 >> 0] | 0) + Math_imul($18, 58) | 0) + 156847 | 0) >> 0] | 0;
               if (($1 + -1 | 0) >>> 0 < 8 >>> 0) {
                continue label$32
               }
               break label$32;
              };
              label$33 : {
               label$34 : {
                label$35 : {
                 if (($1 | 0) == (27 | 0)) {
                  break label$35
                 }
                 if (!$1) {
                  break label$3
                 }
                 label$36 : {
                  if (($16 | 0) < (0 | 0)) {
                   break label$36
                  }
                  HEAP32[($4 + ($16 << 2 | 0) | 0) >> 2] = $1;
                  i64toi32_i32$2 = $3 + ($16 << 3 | 0) | 0;
                  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
                  $272 = i64toi32_i32$0;
                  i64toi32_i32$0 = $7;
                  HEAP32[($7 + 64 | 0) >> 2] = $272;
                  HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$1;
                  break label$34;
                 }
                 if (!$0) {
                  break label$6
                 }
                 pop_arg($7 + 64 | 0 | 0, $1 | 0, $2 | 0, $6 | 0);
                 break label$33;
                }
                if (($16 | 0) > (-1 | 0)) {
                 break label$3
                }
               }
               $1 = 0;
               if (!$0) {
                continue label$5
               }
              }
              $23 = $17 & -65537 | 0;
              $15 = $17 & 8192 | 0 ? $23 : $17;
              $17 = 0;
              $16 = 132791;
              $22 = $9;
              label$37 : {
               label$38 : {
                label$39 : {
                 label$40 : {
                  label$41 : {
                   label$42 : {
                    label$43 : {
                     label$44 : {
                      label$45 : {
                       label$46 : {
                        label$47 : {
                         label$48 : {
                          label$49 : {
                           label$50 : {
                            label$51 : {
                             label$52 : {
                              $1 = HEAP8[$13 >> 0] | 0;
                              $1 = $18 ? (($1 & 15 | 0 | 0) == (3 | 0) ? $1 & -33 | 0 : $1) : $1;
                              switch ($1 + -88 | 0 | 0) {
                              case 11:
                               break label$37;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$38;
                              case 27:
                               break label$43;
                              case 12:
                              case 17:
                               break label$46;
                              case 23:
                               break label$47;
                              case 0:
                              case 32:
                               break label$48;
                              case 24:
                               break label$49;
                              case 22:
                               break label$50;
                              case 29:
                               break label$51;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$52;
                              };
                             }
                             $22 = $9;
                             label$53 : {
                              switch ($1 + -65 | 0 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$38;
                              case 2:
                               break label$41;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             if (($1 | 0) == (83 | 0)) {
                              break label$42
                             }
                             break label$8;
                            }
                            $17 = 0;
                            $16 = 132791;
                            i64toi32_i32$2 = $7;
                            i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                            i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                            $24 = i64toi32_i32$1;
                            $24$hi = i64toi32_i32$0;
                            break label$45;
                           }
                           $1 = 0;
                           label$54 : {
                            switch ($18 & 255 | 0 | 0) {
                            case 0:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 1:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 2:
                             i64toi32_i32$1 = $11;
                             i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                             i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                             HEAP32[i64toi32_i32$1 >> 2] = $11;
                             HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                             continue label$5;
                            case 3:
                             HEAP16[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 1] = $11;
                             continue label$5;
                            case 4:
                             HEAP8[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 0] = $11;
                             continue label$5;
                            case 6:
                             HEAP32[(HEAP32[($7 + 64 | 0) >> 2] | 0) >> 2] = $11;
                             continue label$5;
                            case 7:
                             break label$54;
                            default:
                             continue label$5;
                            };
                           }
                           i64toi32_i32$1 = $11;
                           i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                           i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                           HEAP32[i64toi32_i32$1 >> 2] = $11;
                           HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                           continue label$5;
                          }
                          $20 = $20 >>> 0 > 8 >>> 0 ? $20 : 8;
                          $15 = $15 | 8 | 0;
                          $1 = 120;
                         }
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         $12 = fmt_x(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0, $1 & 32 | 0 | 0) | 0;
                         $17 = 0;
                         $16 = 132791;
                         i64toi32_i32$2 = $7;
                         i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                         if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                          break label$44
                         }
                         if (!($15 & 8 | 0)) {
                          break label$44
                         }
                         $16 = ($1 >>> 4 | 0) + 132791 | 0;
                         $17 = 2;
                         break label$44;
                        }
                        $17 = 0;
                        $16 = 132791;
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$0 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$1 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $12 = fmt_o(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9 | 0) | 0;
                        if (!($15 & 8 | 0)) {
                         break label$44
                        }
                        $1 = $9 - $12 | 0;
                        $20 = ($20 | 0) > ($1 | 0) ? $20 : $1 + 1 | 0;
                        break label$44;
                       }
                       label$61 : {
                        i64toi32_i32$2 = $7;
                        i64toi32_i32$1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                        i64toi32_i32$0 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                        $24 = i64toi32_i32$1;
                        $24$hi = i64toi32_i32$0;
                        i64toi32_i32$2 = i64toi32_i32$1;
                        i64toi32_i32$1 = -1;
                        i64toi32_i32$3 = -1;
                        if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                         $32 = 1
                        } else {
                         if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                          if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                           $33 = 0
                          } else {
                           $33 = 1
                          }
                          $34 = $33;
                         } else {
                          $34 = 0
                         }
                         $32 = $34;
                        }
                        if ($32) {
                         break label$61
                        }
                        i64toi32_i32$2 = $24$hi;
                        i64toi32_i32$2 = 0;
                        i64toi32_i32$3 = 0;
                        i64toi32_i32$0 = $24$hi;
                        i64toi32_i32$1 = $24;
                        i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                        i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                        $24 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                        $24$hi = i64toi32_i32$5;
                        i64toi32_i32$3 = $7;
                        HEAP32[($7 + 64 | 0) >> 2] = $24;
                        HEAP32[($7 + 68 | 0) >> 2] = i64toi32_i32$5;
                        $17 = 1;
                        $16 = 132791;
                        break label$45;
                       }
                       label$62 : {
                        if (!($15 & 2048 | 0)) {
                         break label$62
                        }
                        $17 = 1;
                        $16 = 132792;
                        break label$45;
                       }
                       $17 = $15 & 1 | 0;
                       $16 = $17 ? 132793 : 132791;
                      }
                      i64toi32_i32$5 = $24$hi;
                      $12 = fmt_u($24 | 0, i64toi32_i32$5 | 0, $9 | 0) | 0;
                     }
                     label$63 : {
                      if (!$21) {
                       break label$63
                      }
                      if (($20 | 0) < (0 | 0)) {
                       break label$4
                      }
                     }
                     $15 = $21 ? $15 & -65537 | 0 : $15;
                     label$64 : {
                      i64toi32_i32$2 = $7;
                      i64toi32_i32$5 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                      $24 = i64toi32_i32$5;
                      $24$hi = i64toi32_i32$3;
                      i64toi32_i32$2 = i64toi32_i32$5;
                      i64toi32_i32$5 = 0;
                      i64toi32_i32$1 = 0;
                      if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                       break label$64
                      }
                      if ($20) {
                       break label$64
                      }
                      $12 = $9;
                      $22 = $12;
                      $20 = 0;
                      break label$7;
                     }
                     i64toi32_i32$2 = $24$hi;
                     $1 = ($9 - $12 | 0) + !($24 | i64toi32_i32$2 | 0) | 0;
                     $20 = ($20 | 0) > ($1 | 0) ? $20 : $1;
                     break label$8;
                    }
                    $1 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    $12 = $1 ? $1 : 138196;
                    $1 = strnlen($12 | 0, ($20 >>> 0 < 2147483647 >>> 0 ? $20 : 2147483647) | 0) | 0;
                    $22 = $12 + $1 | 0;
                    label$65 : {
                     if (($20 | 0) <= (-1 | 0)) {
                      break label$65
                     }
                     $15 = $23;
                     $20 = $1;
                     break label$7;
                    }
                    $15 = $23;
                    $20 = $1;
                    if (HEAPU8[$22 >> 0] | 0) {
                     break label$4
                    }
                    break label$7;
                   }
                   label$66 : {
                    if (!$20) {
                     break label$66
                    }
                    $13 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                    break label$40;
                   }
                   $1 = 0;
                   pad($0 | 0, 32 | 0, $19 | 0, 0 | 0, $15 | 0);
                   break label$39;
                  }
                  HEAP32[($7 + 12 | 0) >> 2] = 0;
                  i64toi32_i32$1 = $7;
                  i64toi32_i32$2 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                  i64toi32_i32$3 = HEAP32[($7 + 68 | 0) >> 2] | 0;
                  HEAP32[($7 + 8 | 0) >> 2] = i64toi32_i32$2;
                  HEAP32[($7 + 64 | 0) >> 2] = $7 + 8 | 0;
                  $13 = $7 + 8 | 0;
                  $20 = -1;
                 }
                 $1 = 0;
                 label$67 : {
                  label$68 : while (1) {
                   $14 = HEAP32[$13 >> 2] | 0;
                   if (!$14) {
                    break label$67
                   }
                   label$69 : {
                    $14 = wctomb($7 + 4 | 0 | 0, $14 | 0) | 0;
                    $12 = ($14 | 0) < (0 | 0);
                    if ($12) {
                     break label$69
                    }
                    if ($14 >>> 0 > ($20 - $1 | 0) >>> 0) {
                     break label$69
                    }
                    $13 = $13 + 4 | 0;
                    $1 = $14 + $1 | 0;
                    if ($20 >>> 0 > $1 >>> 0) {
                     continue label$68
                    }
                    break label$67;
                   }
                   break label$68;
                  };
                  if ($12) {
                   break label$2
                  }
                 }
                 $22 = 61;
                 if (($1 | 0) < (0 | 0)) {
                  break label$3
                 }
                 pad($0 | 0, 32 | 0, $19 | 0, $1 | 0, $15 | 0);
                 label$70 : {
                  if ($1) {
                   break label$70
                  }
                  $1 = 0;
                  break label$39;
                 }
                 $14 = 0;
                 $13 = HEAP32[($7 + 64 | 0) >> 2] | 0;
                 label$71 : while (1) {
                  $12 = HEAP32[$13 >> 2] | 0;
                  if (!$12) {
                   break label$39
                  }
                  $12 = wctomb($7 + 4 | 0 | 0, $12 | 0) | 0;
                  $14 = $12 + $14 | 0;
                  if ($14 >>> 0 > $1 >>> 0) {
                   break label$39
                  }
                  out($0 | 0, $7 + 4 | 0 | 0, $12 | 0);
                  $13 = $13 + 4 | 0;
                  if ($14 >>> 0 < $1 >>> 0) {
                   continue label$71
                  }
                  break label$71;
                 };
                }
                pad($0 | 0, 32 | 0, $19 | 0, $1 | 0, $15 ^ 8192 | 0 | 0);
                $1 = ($19 | 0) > ($1 | 0) ? $19 : $1;
                continue label$5;
               }
               label$72 : {
                if (!$21) {
                 break label$72
                }
                if (($20 | 0) < (0 | 0)) {
                 break label$4
                }
               }
               $22 = 61;
               $1 = FUNCTION_TABLE[$5 | 0]($0, +HEAPF64[($7 + 64 | 0) >> 3], $19, $20, $15, $1) | 0;
               if (($1 | 0) >= (0 | 0)) {
                continue label$5
               }
               break label$3;
              }
              i64toi32_i32$1 = $7;
              i64toi32_i32$3 = HEAP32[($7 + 64 | 0) >> 2] | 0;
              i64toi32_i32$2 = HEAP32[($7 + 68 | 0) >> 2] | 0;
              HEAP8[($7 + 55 | 0) >> 0] = i64toi32_i32$3;
              $20 = 1;
              $12 = $8;
              $22 = $9;
              $15 = $23;
              break label$7;
             }
             $14 = $1 + 1 | 0;
             HEAP32[($7 + 76 | 0) >> 2] = $14;
             $13 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
             $1 = $14;
             continue label$11;
            };
           }
           if ($0) {
            break label$1
           }
           if (!$10) {
            break label$6
           }
           $1 = 1;
           label$73 : {
            label$74 : while (1) {
             $13 = HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0;
             if (!$13) {
              break label$73
             }
             pop_arg($3 + ($1 << 3 | 0) | 0 | 0, $13 | 0, $2 | 0, $6 | 0);
             $11 = 1;
             $1 = $1 + 1 | 0;
             if (($1 | 0) != (10 | 0)) {
              continue label$74
             }
             break label$1;
            };
           }
           $11 = 1;
           if ($1 >>> 0 >= 10 >>> 0) {
            break label$1
           }
           $13 = 0;
           label$75 : while (1) {
            if ($13) {
             break label$9
            }
            $11 = 1;
            $1 = $1 + 1 | 0;
            if (($1 | 0) == (10 | 0)) {
             break label$1
            }
            $13 = HEAP32[($4 + ($1 << 2 | 0) | 0) >> 2] | 0;
            continue label$75;
           };
          }
          $22 = 28;
          break label$3;
         }
         $22 = $9;
        }
        $18 = $22 - $12 | 0;
        $20 = ($20 | 0) > ($18 | 0) ? $20 : $18;
        if (($20 | 0) > (2147483647 - $17 | 0 | 0)) {
         break label$4
        }
        $22 = 61;
        $13 = $17 + $20 | 0;
        $1 = ($19 | 0) > ($13 | 0) ? $19 : $13;
        if (($1 | 0) > ($14 | 0)) {
         break label$3
        }
        pad($0 | 0, 32 | 0, $1 | 0, $13 | 0, $15 | 0);
        out($0 | 0, $16 | 0, $17 | 0);
        pad($0 | 0, 48 | 0, $1 | 0, $13 | 0, $15 ^ 65536 | 0 | 0);
        pad($0 | 0, 48 | 0, $20 | 0, $18 | 0, 0 | 0);
        out($0 | 0, $12 | 0, $18 | 0);
        pad($0 | 0, 32 | 0, $1 | 0, $13 | 0, $15 ^ 8192 | 0 | 0);
        continue label$5;
       }
       break label$5;
      };
      $11 = 0;
      break label$1;
     }
     $22 = 61;
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = $22), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   }
   $11 = -1;
  }
  __stack_pointer = $7 + 80 | 0;
  return $11 | 0;
 }
 
 function out($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAPU8[$0 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   __fwritex($1 | 0, $2 | 0, $0 | 0) | 0;
  }
 }
 
 function getint($0) {
  $0 = $0 | 0;
  var $2 = 0, $4 = 0, $1 = 0, $3 = 0;
  $1 = HEAP32[$0 >> 2] | 0;
  $2 = 0;
  label$1 : {
   label$2 : while (1) {
    $3 = HEAP8[$1 >> 0] | 0;
    if (!(isdigit($3 | 0) | 0)) {
     break label$1
    }
    $4 = -1;
    label$3 : {
     if ($2 >>> 0 > 214748364 >>> 0) {
      break label$3
     }
     $4 = $3 + -48 | 0;
     $2 = Math_imul($2, 10);
     $4 = ($4 | 0) > (2147483647 - $2 | 0 | 0) ? -1 : $4 + $2 | 0;
    }
    $1 = $1 + 1 | 0;
    HEAP32[$0 >> 2] = $1;
    $2 = $4;
    continue label$2;
   };
  }
  return $2 | 0;
 }
 
 function pop_arg($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $21 = 0, $29 = 0, $37 = 0, $45 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $87 = 0, $97 = 0, $105 = 0, $115 = 0, $125 = 0, $133 = 0, $141 = 0;
  label$1 : {
   switch ($1 + -9 | 0 | 0) {
   case 0:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    HEAP32[$0 >> 2] = HEAP32[$1 >> 2] | 0;
    return;
   case 1:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $21 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $21;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 2:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $29 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $29;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 4:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
    $37 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $37;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 5:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = 0;
    $45 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $45;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 3:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $55 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $55;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 6:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP16[$1 >> 1] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $63 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $63;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 7:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU16[$1 >> 1] | 0;
    i64toi32_i32$1 = 0;
    $71 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $71;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 8:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP8[$1 >> 0] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $79 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $79;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 9:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAPU8[$1 >> 0] | 0;
    i64toi32_i32$1 = 0;
    $87 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $87;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 10:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $97 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $97;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 11:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $105 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $105;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 12:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $115 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $115;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 13:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($1 + 4 | 0) >> 2] | 0;
    $125 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $125;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 14:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$1 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $133 = i64toi32_i32$1;
    i64toi32_i32$1 = $0;
    HEAP32[i64toi32_i32$1 >> 2] = $133;
    HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
    return;
   case 15:
    $1 = HEAP32[$2 >> 2] | 0;
    HEAP32[$2 >> 2] = $1 + 4 | 0;
    i64toi32_i32$0 = HEAP32[$1 >> 2] | 0;
    i64toi32_i32$1 = 0;
    $141 = i64toi32_i32$0;
    i64toi32_i32$0 = $0;
    HEAP32[i64toi32_i32$0 >> 2] = $141;
    HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
    return;
   case 16:
    $1 = ((HEAP32[$2 >> 2] | 0) + 7 | 0) & -8 | 0;
    HEAP32[$2 >> 2] = $1 + 8 | 0;
    HEAPF64[$0 >> 3] = +HEAPF64[$1 >> 3];
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
    break;
   default:
    break label$1;
   };
  }
 }
 
 function fmt_x($0, $0$hi, $1, $2) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10 = 0, $3 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = HEAPU8[(($0 & 15 | 0) + 157376 | 0) >> 0] | 0 | $2 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $10;
    $0$hi = i64toi32_i32$0;
    if ($3) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_o($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9 = 0, $2 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1 = $1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1 >> 0] = $0 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0 = $9;
    $0$hi = i64toi32_i32$0;
    if ($2) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1 | 0;
 }
 
 function fmt_u($0, $0$hi, $1) {
  $0 = $0 | 0;
  $0$hi = $0$hi | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $3 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $2 = 0, i64toi32_i32$5 = 0, $2$hi = 0, i64toi32_i32$4 = 0, $4 = 0, $11 = 0, $15$hi = 0, $5 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2 = $0;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1 = $1 + -1 | 0;
    $11 = $1;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2 | 0, i64toi32_i32$2 | 0, 246 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $15$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$2 = $15$hi;
    i64toi32_i32$3 = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$1 = $0;
    i64toi32_i32$4 = i64toi32_i32$3 + $0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < $0 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    HEAP8[$11 >> 0] = i64toi32_i32$4 | 48 | 0;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$2 = $0;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0 = $2;
    $0$hi = i64toi32_i32$2;
    if ($3) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3 = $2;
   if (!$3) {
    break label$4
   }
   label$5 : while (1) {
    $1 = $1 + -1 | 0;
    $4 = ($3 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1 >> 0] = Math_imul($4, 246) + $3 | 0 | 48 | 0;
    $5 = $3 >>> 0 > 9 >>> 0;
    $3 = $4;
    if ($5) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1 | 0;
 }
 
 function pad($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) <= ($3 | 0)) {
    break label$1
   }
   if ($4 & 73728 | 0) {
    break label$1
   }
   $2 = $2 - $3 | 0;
   $3 = $2 >>> 0 < 256 >>> 0;
   memset($5 | 0, $1 & 255 | 0 | 0, ($3 ? $2 : 256) | 0) | 0;
   label$2 : {
    if ($3) {
     break label$2
    }
    label$3 : while (1) {
     out($0 | 0, $5 | 0, 256 | 0);
     $2 = $2 + -256 | 0;
     if ($2 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   out($0 | 0, $5 | 0, $2 | 0);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function wctomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 0 | 0;
  }
  return wcrtomb($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $11 = 0, $12 = 0, $13 = 0, $19 = 0, $24 = 0, $6 = 0, i64toi32_i32$1 = 0, $16 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $25 = 0, $26 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $18 = 0, $22 = 0, $9 = 0, $27 = 0.0, $14 = 0, $8 = 0, $15 = 0, $17 = 0, $8$hi = 0, $10 = 0, $23 = 0, $7 = 0, $43 = 0, $44 = 0, $45 = 0, $20$hi = 0, $46 = 0, $21$hi = 0, $20 = 0, $168 = 0, $170$hi = 0, $172$hi = 0, $174 = 0, $174$hi = 0, $179$hi = 0, $392 = 0.0;
  $6 = __stack_pointer - 560 | 0;
  __stack_pointer = $6;
  $7 = 0;
  HEAP32[($6 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$0;
    $8$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $43 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $44 = 0
      } else {
       $44 = 1
      }
      $45 = $44;
     } else {
      $45 = 0
     }
     $43 = $45;
    }
    if ($43) {
     break label$2
    }
    $9 = 1;
    $10 = 132801;
    $1 = -$1;
    i64toi32_i32$2 = __DOUBLE_BITS(+$1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $8 = i64toi32_i32$2;
    $8$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4 & 2048 | 0)) {
     break label$3
    }
    $9 = 1;
    $10 = 132804;
    break label$1;
   }
   $9 = $4 & 1 | 0;
   $10 = $9 ? 132807 : 132802;
   $7 = !$9;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $8$hi;
    i64toi32_i32$3 = $8;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $11 = $9 + 3 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 & -65537 | 0 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    $12 = $5 & 32 | 0;
    out($0 | 0, ($1 != $1 ? ($12 ? 134856 : 137294) : $12 ? 135119 : 137455) | 0, 3 | 0);
    pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
    break label$4;
   }
   $14 = $6 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1 = +frexp(+$1, $6 + 44 | 0 | 0);
       $1 = $1 + $1;
       if ($1 == 0.0) {
        break label$9
       }
       $11 = HEAP32[($6 + 44 | 0) >> 2] | 0;
       HEAP32[($6 + 44 | 0) >> 2] = $11 + -1 | 0;
       $15 = $5 | 32 | 0;
       if (($15 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $15 = $5 | 32 | 0;
      if (($15 | 0) == (97 | 0)) {
       break label$6
      }
      $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
      $17 = HEAP32[($6 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $17 = $11 + -29 | 0;
     HEAP32[($6 + 44 | 0) >> 2] = $17;
     $16 = ($3 | 0) < (0 | 0) ? 6 : $3;
     $1 = $1 * 268435456.0;
    }
    $18 = ($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 0 : 288) | 0;
    $12 = $18;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1 < 4294967296.0 & $1 >= 0.0 | 0)) {
        break label$12
       }
       $11 = ~~$1 >>> 0;
       break label$11;
      }
      $11 = 0;
     }
     HEAP32[$12 >> 2] = $11;
     $12 = $12 + 4 | 0;
     $1 = ($1 - +($11 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($17 | 0) >= (1 | 0)) {
       break label$14
      }
      $3 = $17;
      $11 = $12;
      $19 = $18;
      break label$13;
     }
     $19 = $18;
     $3 = $17;
     label$15 : while (1) {
      $3 = ($3 | 0) < (29 | 0) ? $3 : 29;
      label$16 : {
       $11 = $12 + -4 | 0;
       if ($11 >>> 0 < $19 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $20 = $3;
       $20$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $8 = 0;
       $8$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $168 = $11;
        i64toi32_i32$0 = $11;
        i64toi32_i32$1 = HEAP32[$11 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $170$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $20$hi;
        i64toi32_i32$2 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $20$hi;
        i64toi32_i32$3 = $20;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $46 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $46 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $172$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $174 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $174$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $172$hi;
        i64toi32_i32$1 = $46;
        i64toi32_i32$2 = $174$hi;
        i64toi32_i32$3 = $174;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $21$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $8 = i64toi32_i32$1;
        $8$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($8 | 0, i64toi32_i32$5 | 0, -1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $179$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $21$hi;
        i64toi32_i32$5 = $179$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $21$hi;
        i64toi32_i32$3 = i64toi32_i32$4;
        i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
        }
        HEAP32[$168 >> 2] = i64toi32_i32$2;
        $11 = $11 + -4 | 0;
        if ($11 >>> 0 >= $19 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $8$hi;
       $11 = $8;
       if (!$11) {
        break label$16
       }
       $19 = $19 + -4 | 0;
       HEAP32[$19 >> 2] = $11;
      }
      label$18 : {
       label$19 : while (1) {
        $11 = $12;
        if ($11 >>> 0 <= $19 >>> 0) {
         break label$18
        }
        $12 = $11 + -4 | 0;
        if (!(HEAP32[$12 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) - $3 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $12 = $11;
      if (($3 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    label$20 : {
     if (($3 | 0) > (-1 | 0)) {
      break label$20
     }
     $22 = ((($16 + 25 | 0) >>> 0) / (9 >>> 0) | 0) + 1 | 0;
     $23 = ($15 | 0) == (102 | 0);
     label$21 : while (1) {
      $12 = 0 - $3 | 0;
      $24 = ($12 | 0) < (9 | 0) ? $12 : 9;
      label$22 : {
       label$23 : {
        if ($19 >>> 0 < $11 >>> 0) {
         break label$23
        }
        $12 = HEAP32[$19 >> 2] | 0;
        break label$22;
       }
       $25 = 1e9 >>> $24 | 0;
       $26 = (-1 << $24 | 0) ^ -1 | 0;
       $3 = 0;
       $12 = $19;
       label$24 : while (1) {
        $13 = HEAP32[$12 >> 2] | 0;
        HEAP32[$12 >> 2] = ($13 >>> $24 | 0) + $3 | 0;
        $3 = Math_imul($13 & $26 | 0, $25);
        $12 = $12 + 4 | 0;
        if ($12 >>> 0 < $11 >>> 0) {
         continue label$24
        }
        break label$24;
       };
       $12 = HEAP32[$19 >> 2] | 0;
       if (!$3) {
        break label$22
       }
       HEAP32[$11 >> 2] = $3;
       $11 = $11 + 4 | 0;
      }
      $3 = (HEAP32[($6 + 44 | 0) >> 2] | 0) + $24 | 0;
      HEAP32[($6 + 44 | 0) >> 2] = $3;
      $19 = $19 + (!$12 << 2 | 0) | 0;
      $12 = $23 ? $18 : $19;
      $11 = (($11 - $12 | 0) >> 2 | 0 | 0) > ($22 | 0) ? $12 + ($22 << 2 | 0) | 0 : $11;
      if (($3 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $3 = 0;
    label$25 : {
     if ($19 >>> 0 >= $11 >>> 0) {
      break label$25
     }
     $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
     $12 = 10;
     $13 = HEAP32[$19 >> 2] | 0;
     if ($13 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $3 = $3 + 1 | 0;
      $12 = Math_imul($12, 10);
      if ($13 >>> 0 >= $12 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $12 = ($16 - (($15 | 0) == (102 | 0) ? 0 : $3) | 0) - (($16 | 0) != (0 | 0) & ($15 | 0) == (103 | 0) | 0) | 0;
     if (($12 | 0) >= (Math_imul(($11 - $18 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $13 = $12 + 9216 | 0;
     $25 = ($13 | 0) / (9 | 0) | 0;
     $24 = (($25 << 2 | 0) + (($6 + 48 | 0) + (($17 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $12 = 10;
     label$28 : {
      $13 = Math_imul($25, -9) + $13 | 0;
      if (($13 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $12 = Math_imul($12, 10);
       $13 = $13 + 1 | 0;
       if (($13 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $26 = $24 + 4 | 0;
     label$30 : {
      label$31 : {
       $13 = HEAP32[$24 >> 2] | 0;
       $22 = ($13 >>> 0) / ($12 >>> 0) | 0;
       $25 = Math_imul($22, $12);
       if (($13 | 0) != ($25 | 0)) {
        break label$31
       }
       if (($26 | 0) == ($11 | 0)) {
        break label$30
       }
      }
      $13 = $13 - $25 | 0;
      label$32 : {
       label$33 : {
        if ($22 & 1 | 0) {
         break label$33
        }
        $1 = 9007199254740992.0;
        if (($12 | 0) != (1e9 | 0)) {
         break label$32
        }
        if ($24 >>> 0 <= $19 >>> 0) {
         break label$32
        }
        if (!((HEAPU8[($24 + -4 | 0) >> 0] | 0) & 1 | 0)) {
         break label$32
        }
       }
       $1 = 9007199254740994.0;
      }
      $392 = ($26 | 0) == ($11 | 0) ? 1.0 : 1.5;
      $26 = $12 >>> 1 | 0;
      $27 = $13 >>> 0 < $26 >>> 0 ? .5 : ($13 | 0) == ($26 | 0) ? $392 : 1.5;
      label$34 : {
       if ($7) {
        break label$34
       }
       if ((HEAPU8[$10 >> 0] | 0 | 0) != (45 | 0)) {
        break label$34
       }
       $27 = -$27;
       $1 = -$1;
      }
      HEAP32[$24 >> 2] = $25;
      if ($1 + $27 == $1) {
       break label$30
      }
      $12 = $25 + $12 | 0;
      HEAP32[$24 >> 2] = $12;
      label$35 : {
       if ($12 >>> 0 < 1e9 >>> 0) {
        break label$35
       }
       label$36 : while (1) {
        HEAP32[$24 >> 2] = 0;
        label$37 : {
         $24 = $24 + -4 | 0;
         if ($24 >>> 0 >= $19 >>> 0) {
          break label$37
         }
         $19 = $19 + -4 | 0;
         HEAP32[$19 >> 2] = 0;
        }
        $12 = (HEAP32[$24 >> 2] | 0) + 1 | 0;
        HEAP32[$24 >> 2] = $12;
        if ($12 >>> 0 > 999999999 >>> 0) {
         continue label$36
        }
        break label$36;
       };
      }
      $3 = Math_imul(($18 - $19 | 0) >> 2 | 0, 9);
      $12 = 10;
      $13 = HEAP32[$19 >> 2] | 0;
      if ($13 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$38 : while (1) {
       $3 = $3 + 1 | 0;
       $12 = Math_imul($12, 10);
       if ($13 >>> 0 >= $12 >>> 0) {
        continue label$38
       }
       break label$38;
      };
     }
     $12 = $24 + 4 | 0;
     $11 = $11 >>> 0 > $12 >>> 0 ? $12 : $11;
    }
    label$39 : {
     label$40 : while (1) {
      $12 = $11;
      $13 = $11 >>> 0 <= $19 >>> 0;
      if ($13) {
       break label$39
      }
      $11 = $12 + -4 | 0;
      if (!(HEAP32[$11 >> 2] | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      if (($15 | 0) == (103 | 0)) {
       break label$42
      }
      $24 = $4 & 8 | 0;
      break label$41;
     }
     $11 = $16 ? $16 : 1;
     $24 = ($11 | 0) > ($3 | 0) & ($3 | 0) > (-5 | 0) | 0;
     $16 = ($24 ? $3 ^ -1 | 0 : -1) + $11 | 0;
     $5 = ($24 ? -1 : -2) + $5 | 0;
     $24 = $4 & 8 | 0;
     if ($24) {
      break label$41
     }
     $11 = -9;
     label$43 : {
      if ($13) {
       break label$43
      }
      $24 = HEAP32[($12 + -4 | 0) >> 2] | 0;
      if (!$24) {
       break label$43
      }
      $13 = 10;
      $11 = 0;
      if (($24 >>> 0) % (10 >>> 0) | 0) {
       break label$43
      }
      label$44 : while (1) {
       $25 = $11;
       $11 = $11 + 1 | 0;
       $13 = Math_imul($13, 10);
       if (!(($24 >>> 0) % ($13 >>> 0) | 0)) {
        continue label$44
       }
       break label$44;
      };
      $11 = $25 ^ -1 | 0;
     }
     $13 = Math_imul(($12 - $18 | 0) >> 2 | 0, 9);
     label$45 : {
      if (($5 & -33 | 0 | 0) != (70 | 0)) {
       break label$45
      }
      $24 = 0;
      $11 = ($13 + $11 | 0) + -9 | 0;
      $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
      $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
      break label$41;
     }
     $24 = 0;
     $11 = (($3 + $13 | 0) + $11 | 0) + -9 | 0;
     $11 = ($11 | 0) > (0 | 0) ? $11 : 0;
     $16 = ($16 | 0) < ($11 | 0) ? $16 : $11;
    }
    $13 = -1;
    $25 = $16 | $24 | 0;
    if (($16 | 0) > (($25 ? 2147483645 : 2147483646) | 0)) {
     break label$4
    }
    $26 = ($16 + (($25 | 0) != (0 | 0)) | 0) + 1 | 0;
    label$46 : {
     label$47 : {
      $23 = $5 & -33 | 0;
      if (($23 | 0) != (70 | 0)) {
       break label$47
      }
      if (($3 | 0) > (2147483647 - $26 | 0 | 0)) {
       break label$4
      }
      $11 = ($3 | 0) > (0 | 0) ? $3 : 0;
      break label$46;
     }
     label$48 : {
      $11 = $3 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11 = fmt_u(($3 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$4 | 0, $14 | 0) | 0;
      if (($14 - $11 | 0 | 0) > (1 | 0)) {
       break label$48
      }
      label$49 : while (1) {
       $11 = $11 + -1 | 0;
       HEAP8[$11 >> 0] = 48;
       if (($14 - $11 | 0 | 0) < (2 | 0)) {
        continue label$49
       }
       break label$49;
      };
     }
     $22 = $11 + -2 | 0;
     HEAP8[$22 >> 0] = $5;
     $13 = -1;
     HEAP8[($11 + -1 | 0) >> 0] = ($3 | 0) < (0 | 0) ? 45 : 43;
     $11 = $14 - $22 | 0;
     if (($11 | 0) > (2147483647 - $26 | 0 | 0)) {
      break label$4
     }
    }
    $13 = -1;
    $11 = $11 + $26 | 0;
    if (($11 | 0) > ($9 ^ 2147483647 | 0 | 0)) {
     break label$4
    }
    $26 = $11 + $9 | 0;
    pad($0 | 0, 32 | 0, $2 | 0, $26 | 0, $4 | 0);
    out($0 | 0, $10 | 0, $9 | 0);
    pad($0 | 0, 48 | 0, $2 | 0, $26 | 0, $4 ^ 65536 | 0 | 0);
    label$50 : {
     label$51 : {
      label$52 : {
       label$53 : {
        if (($23 | 0) != (70 | 0)) {
         break label$53
        }
        $24 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $13 = $19 >>> 0 > $18 >>> 0 ? $18 : $19;
        $19 = $13;
        label$54 : while (1) {
         i64toi32_i32$5 = $19;
         i64toi32_i32$4 = HEAP32[$19 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
         label$55 : {
          label$56 : {
           if (($19 | 0) == ($13 | 0)) {
            break label$56
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$55
           }
           label$57 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$57
            }
            break label$55;
           };
          }
          if (($11 | 0) != ($3 | 0)) {
           break label$55
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $24;
         }
         out($0 | 0, $11 | 0, $3 - $11 | 0 | 0);
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 <= $18 >>> 0) {
          continue label$54
         }
         break label$54;
        };
        label$58 : {
         if (!$25) {
          break label$58
         }
         out($0 | 0, 138192 | 0, 1 | 0);
        }
        if ($19 >>> 0 >= $12 >>> 0) {
         break label$52
        }
        if (($16 | 0) < (1 | 0)) {
         break label$52
        }
        label$59 : while (1) {
         label$60 : {
          i64toi32_i32$5 = $19;
          i64toi32_i32$0 = HEAP32[$19 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11 = fmt_u(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3 | 0) | 0;
          if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
           break label$60
          }
          label$61 : while (1) {
           $11 = $11 + -1 | 0;
           HEAP8[$11 >> 0] = 48;
           if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
            continue label$61
           }
           break label$61;
          };
         }
         out($0 | 0, $11 | 0, (($16 | 0) < (9 | 0) ? $16 : 9) | 0);
         $11 = $16 + -9 | 0;
         $19 = $19 + 4 | 0;
         if ($19 >>> 0 >= $12 >>> 0) {
          break label$51
         }
         $13 = ($16 | 0) > (9 | 0);
         $16 = $11;
         if ($13) {
          continue label$59
         }
         break label$51;
        };
       }
       label$62 : {
        if (($16 | 0) < (0 | 0)) {
         break label$62
        }
        $25 = $12 >>> 0 > $19 >>> 0 ? $12 : $19 + 4 | 0;
        $18 = $6 + 16 | 0 | 8 | 0;
        $3 = $6 + 16 | 0 | 9 | 0;
        $12 = $19;
        label$63 : while (1) {
         label$64 : {
          i64toi32_i32$5 = $12;
          i64toi32_i32$4 = HEAP32[$12 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11 = fmt_u(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3 | 0) | 0;
          if (($11 | 0) != ($3 | 0)) {
           break label$64
          }
          HEAP8[($6 + 24 | 0) >> 0] = 48;
          $11 = $18;
         }
         label$65 : {
          label$66 : {
           if (($12 | 0) == ($19 | 0)) {
            break label$66
           }
           if ($11 >>> 0 <= ($6 + 16 | 0) >>> 0) {
            break label$65
           }
           label$67 : while (1) {
            $11 = $11 + -1 | 0;
            HEAP8[$11 >> 0] = 48;
            if ($11 >>> 0 > ($6 + 16 | 0) >>> 0) {
             continue label$67
            }
            break label$65;
           };
          }
          out($0 | 0, $11 | 0, 1 | 0);
          $11 = $11 + 1 | 0;
          if (!($16 | $24 | 0)) {
           break label$65
          }
          out($0 | 0, 138192 | 0, 1 | 0);
         }
         $13 = $3 - $11 | 0;
         out($0 | 0, $11 | 0, (($16 | 0) < ($13 | 0) ? $16 : $13) | 0);
         $16 = $16 - $13 | 0;
         $12 = $12 + 4 | 0;
         if ($12 >>> 0 >= $25 >>> 0) {
          break label$62
         }
         if (($16 | 0) > (-1 | 0)) {
          continue label$63
         }
         break label$63;
        };
       }
       pad($0 | 0, 48 | 0, $16 + 18 | 0 | 0, 18 | 0, 0 | 0);
       out($0 | 0, $22 | 0, $14 - $22 | 0 | 0);
       break label$50;
      }
      $11 = $16;
     }
     pad($0 | 0, 48 | 0, $11 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    pad($0 | 0, 32 | 0, $2 | 0, $26 | 0, $4 ^ 8192 | 0 | 0);
    $13 = ($26 | 0) > ($2 | 0) ? $26 : $2;
    break label$4;
   }
   $26 = $10 + ((($5 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$68 : {
    if ($3 >>> 0 > 11 >>> 0) {
     break label$68
    }
    $11 = 12 - $3 | 0;
    $27 = 16.0;
    label$69 : while (1) {
     $27 = $27 * 16.0;
     $11 = $11 + -1 | 0;
     if ($11) {
      continue label$69
     }
     break label$69;
    };
    label$70 : {
     if ((HEAPU8[$26 >> 0] | 0 | 0) != (45 | 0)) {
      break label$70
     }
     $1 = -($27 + (-$1 - $27));
     break label$68;
    }
    $1 = $1 + $27 - $27;
   }
   label$71 : {
    $12 = HEAP32[($6 + 44 | 0) >> 2] | 0;
    $11 = $12 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11 = fmt_u(($12 ^ $11 | 0) - $11 | 0 | 0, i64toi32_i32$0 | 0, $14 | 0) | 0;
    if (($11 | 0) != ($14 | 0)) {
     break label$71
    }
    HEAP8[($6 + 15 | 0) >> 0] = 48;
    $11 = $6 + 15 | 0;
   }
   $24 = $9 | 2 | 0;
   $19 = $5 & 32 | 0;
   $25 = $11 + -2 | 0;
   HEAP8[$25 >> 0] = $5 + 15 | 0;
   HEAP8[($11 + -1 | 0) >> 0] = ($12 | 0) < (0 | 0) ? 45 : 43;
   $13 = $4 & 8 | 0;
   $12 = $6 + 16 | 0;
   label$72 : while (1) {
    $11 = $12;
    label$73 : {
     label$74 : {
      if (!(Math_abs($1) < 2147483648.0)) {
       break label$74
      }
      $12 = ~~$1;
      break label$73;
     }
     $12 = -2147483648;
    }
    HEAP8[$11 >> 0] = HEAPU8[($12 + 157376 | 0) >> 0] | 0 | $19 | 0;
    $1 = ($1 - +($12 | 0)) * 16.0;
    label$75 : {
     $12 = $11 + 1 | 0;
     if (($12 - ($6 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$75
     }
     label$76 : {
      if ($13) {
       break label$76
      }
      if (($3 | 0) > (0 | 0)) {
       break label$76
      }
      if ($1 == 0.0) {
       break label$75
      }
     }
     HEAP8[($11 + 1 | 0) >> 0] = 46;
     $12 = $11 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue label$72
    }
    break label$72;
   };
   $13 = -1;
   $22 = $14 - $25 | 0;
   $11 = $24 + $22 | 0;
   if ((2147483645 - $11 | 0 | 0) < ($3 | 0)) {
    break label$4
   }
   label$77 : {
    label$78 : {
     if (!$3) {
      break label$78
     }
     $19 = $12 - ($6 + 16 | 0) | 0;
     if (($19 + -2 | 0 | 0) >= ($3 | 0)) {
      break label$78
     }
     $12 = $3 + 2 | 0;
     break label$77;
    }
    $19 = $12 - ($6 + 16 | 0) | 0;
    $12 = $19;
   }
   $11 = $11 + $12 | 0;
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 | 0);
   out($0 | 0, $26 | 0, $24 | 0);
   pad($0 | 0, 48 | 0, $2 | 0, $11 | 0, $4 ^ 65536 | 0 | 0);
   out($0 | 0, $6 + 16 | 0 | 0, $19 | 0);
   pad($0 | 0, 48 | 0, $12 - $19 | 0 | 0, 0 | 0, 0 | 0);
   out($0 | 0, $25 | 0, $22 | 0);
   pad($0 | 0, 32 | 0, $2 | 0, $11 | 0, $4 ^ 8192 | 0 | 0);
   $13 = ($11 | 0) > ($2 | 0) ? $11 : $2;
  }
  __stack_pointer = $6 + 560 | 0;
  return $13 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2 = 0, $12 = 0, $12$hi = 0, $15 = 0, $15$hi = 0, wasm2js_i32$0 = 0, wasm2js_f64$0 = 0.0;
  $2 = ((HEAP32[$1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1 >> 2] = $2 + 16 | 0;
  i64toi32_i32$2 = $2;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  (wasm2js_i32$0 = $0, wasm2js_f64$0 = +__trunctfdf2($12 | 0, i64toi32_i32$0 | 0, $15 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
 }
 
 function __DOUBLE_BITS($0) {
  $0 = +$0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function vsniprintf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $3 = __memcpy($3 | 0, 157392 | 0, 144 | 0) | 0;
  HEAP32[($3 + 44 | 0) >> 2] = $0;
  HEAP32[($3 + 20 | 0) >> 2] = $0;
  $4 = -2 - $0 | 0;
  $4 = $4 >>> 0 < 2147483647 >>> 0 ? $4 : 2147483647;
  HEAP32[($3 + 48 | 0) >> 2] = $4;
  $0 = $0 + $4 | 0;
  HEAP32[($3 + 28 | 0) >> 2] = $0;
  HEAP32[($3 + 16 | 0) >> 2] = $0;
  $0 = vfiprintf($3 | 0, $1 | 0, $2 | 0) | 0;
  label$1 : {
   if (!$4) {
    break label$1
   }
   $4 = HEAP32[($3 + 20 | 0) >> 2] | 0;
   HEAP8[($4 - (($4 | 0) == (HEAP32[($3 + 16 | 0) >> 2] | 0 | 0)) | 0) >> 0] = 0;
  }
  __stack_pointer = $3 + 144 | 0;
  return $0 | 0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $5 = 0, $4 = 0, $7 = 0, $6 = 0;
  $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  label$1 : {
   $5 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   $6 = HEAP32[($0 + 28 | 0) >> 2] | 0;
   $7 = (HEAP32[($0 + 20 | 0) >> 2] | 0) - $6 | 0;
   $7 = $5 >>> 0 < $7 >>> 0 ? $5 : $7;
   if (!$7) {
    break label$1
   }
   __memcpy($4 | 0, $6 | 0, $7 | 0) | 0;
   $4 = (HEAP32[$3 >> 2] | 0) + $7 | 0;
   HEAP32[$3 >> 2] = $4;
   $5 = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $7 | 0;
   HEAP32[($3 + 4 | 0) >> 2] = $5;
  }
  label$2 : {
   $5 = $5 >>> 0 < $2 >>> 0 ? $5 : $2;
   if (!$5) {
    break label$2
   }
   __memcpy($4 | 0, $1 | 0, $5 | 0) | 0;
   $4 = (HEAP32[$3 >> 2] | 0) + $5 | 0;
   HEAP32[$3 >> 2] = $4;
   HEAP32[($3 + 4 | 0) >> 2] = (HEAP32[($3 + 4 | 0) >> 2] | 0) - $5 | 0;
  }
  HEAP8[$4 >> 0] = 0;
  $3 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  HEAP32[($0 + 28 | 0) >> 2] = $3;
  HEAP32[($0 + 20 | 0) >> 2] = $3;
  return $2 | 0;
 }
 
 function __shlim($0, $1, $1$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, i64toi32_i32$2 = 0, $11 = 0, $12 = 0, $14 = 0, $13 = 0, $21$hi = 0, i64toi32_i32$3 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] = $1$hi;
  $2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  i64toi32_i32$1 = (HEAP32[(i64toi32_i32$1 + 44 | 0) >> 2] | 0) - $2 | 0;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  $13 = i64toi32_i32$1;
  i64toi32_i32$1 = $0;
  HEAP32[(i64toi32_i32$1 + 120 | 0) >> 2] = $13;
  HEAP32[(i64toi32_i32$1 + 124 | 0) >> 2] = i64toi32_i32$0;
  $3 = HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] | 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   if (!($1 | $1$hi | 0)) {
    break label$1
   }
   i64toi32_i32$1 = $3 - $2 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $21$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $21$hi;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$3 = $1;
   if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
    $11 = 1
   } else {
    if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0) {
      $12 = 0
     } else {
      $12 = 1
     }
     $14 = $12;
    } else {
     $14 = 0
    }
    $11 = $14;
   }
   if ($11) {
    break label$1
   }
   i64toi32_i32$2 = $1$hi;
   $3 = $2 + $1 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $3;
 }
 
 function __shgetc($0) {
  $0 = $0 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $1 = 0, $3$hi = 0, $4$hi = 0, $2 = 0, $3 = 0, $5 = 0, $4 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $7 = 0, $7$hi = 0, $15 = 0, $15$hi = 0, $35 = 0, $40 = 0, $40$hi = 0, $59 = 0, $59$hi = 0, $67 = 0, $74 = 0, $74$hi = 0;
  i64toi32_i32$2 = $0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 120 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 124 | 0) >> 2] | 0;
  $7 = i64toi32_i32$0;
  $7$hi = i64toi32_i32$1;
  $1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $2 = HEAP32[(i64toi32_i32$2 + 44 | 0) >> 2] | 0;
  i64toi32_i32$0 = $1 - $2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
  $15 = i64toi32_i32$0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $7$hi;
  i64toi32_i32$2 = $7;
  i64toi32_i32$0 = $15$hi;
  i64toi32_i32$3 = $15;
  i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
  i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
  if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
   i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
  }
  $3 = i64toi32_i32$4;
  $3$hi = i64toi32_i32$5;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 116 | 0) >> 2] | 0;
     $4 = i64toi32_i32$5;
     $4$hi = i64toi32_i32$2;
     if (!(i64toi32_i32$5 | i64toi32_i32$2 | 0)) {
      break label$3
     }
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3;
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$3 = $4;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
      $26 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        $27 = 0
       } else {
        $27 = 1
       }
       $28 = $27;
      } else {
       $28 = 0
      }
      $26 = $28;
     }
     if ($26) {
      break label$2
     }
    }
    $2 = __uflow($0 | 0) | 0;
    if (($2 | 0) > (-1 | 0)) {
     break label$1
    }
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    $2 = HEAP32[($0 + 44 | 0) >> 2] | 0;
   }
   i64toi32_i32$2 = $0;
   i64toi32_i32$1 = -1;
   HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] = -1;
   HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] = i64toi32_i32$1;
   HEAP32[(i64toi32_i32$2 + 104 | 0) >> 2] = $1;
   $35 = i64toi32_i32$2;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$2 = $2 - $1 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
   $40 = i64toi32_i32$2;
   $40$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$3 = $3;
   i64toi32_i32$2 = $40$hi;
   i64toi32_i32$5 = $40;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   i64toi32_i32$3 = $35;
   HEAP32[(i64toi32_i32$3 + 120 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[(i64toi32_i32$3 + 124 | 0) >> 2] = i64toi32_i32$4;
   return -1 | 0;
  }
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$1 = $3;
  i64toi32_i32$3 = 0;
  i64toi32_i32$5 = 1;
  i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
  i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
  if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
  }
  $3 = i64toi32_i32$2;
  $3$hi = i64toi32_i32$0;
  $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
  $5 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  label$4 : {
   i64toi32_i32$4 = $0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
   $4 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$1;
   i64toi32_i32$4 = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) | 0) {
    break label$4
   }
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$4 = $4$hi;
   i64toi32_i32$5 = $4;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$0 = $3;
   i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
   i64toi32_i32$2 = (i64toi32_i32$5 >>> 0 < i64toi32_i32$0 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$4 - i64toi32_i32$2 | 0;
   $4 = i64toi32_i32$3;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$5 = $5 - $1 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 >> 31 | 0;
   $59 = i64toi32_i32$5;
   $59$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$5 = $59$hi;
   i64toi32_i32$0 = $59;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$5 | 0)) {
    $29 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
      $30 = 0
     } else {
      $30 = 1
     }
     $31 = $30;
    } else {
     $31 = 0
    }
    $29 = $31;
   }
   if ($29) {
    break label$4
   }
   i64toi32_i32$4 = $4$hi;
   $5 = $1 + $4 | 0;
  }
  HEAP32[($0 + 104 | 0) >> 2] = $5;
  $67 = $0;
  i64toi32_i32$4 = $3$hi;
  $5 = HEAP32[($0 + 44 | 0) >> 2] | 0;
  i64toi32_i32$2 = $5 - $1 | 0;
  i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
  $74 = i64toi32_i32$2;
  $74$hi = i64toi32_i32$4;
  i64toi32_i32$4 = $3$hi;
  i64toi32_i32$0 = $3;
  i64toi32_i32$2 = $74$hi;
  i64toi32_i32$5 = $74;
  i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
  i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
  if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
   i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
  }
  i64toi32_i32$0 = $67;
  HEAP32[(i64toi32_i32$0 + 120 | 0) >> 2] = i64toi32_i32$1;
  HEAP32[(i64toi32_i32$0 + 124 | 0) >> 2] = i64toi32_i32$3;
  label$5 : {
   if ($1 >>> 0 > $5 >>> 0) {
    break label$5
   }
   HEAP8[($1 + -1 | 0) >> 0] = $2;
  }
  return $2 | 0;
 }
 
 function mbrtowc($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $5 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = $2 ? $2 : 159320;
  $2 = HEAP32[$4 >> 2] | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1) {
       break label$4
      }
      if ($2) {
       break label$3
      }
      $2 = 0;
      break label$1;
     }
     $5 = HEAPU8[$1 >> 0] | 0;
     $1 = ($5 << 24 | 0) >> 24 | 0;
     $0 = $0 ? $0 : $3 + 12 | 0;
     label$5 : {
      if ($2) {
       break label$5
      }
      label$6 : {
       if (($1 | 0) < (0 | 0)) {
        break label$6
       }
       HEAP32[$0 >> 2] = $5;
       $2 = ($1 | 0) != (0 | 0);
       break label$1;
      }
      label$7 : {
       if (HEAP32[(HEAP32[(0 + 159232 | 0) >> 2] | 0) >> 2] | 0) {
        break label$7
       }
       HEAP32[$0 >> 2] = $1 & 57343 | 0;
       $2 = 1;
       break label$1;
      }
      $2 = $5 + -194 | 0;
      if ($2 >>> 0 > 50 >>> 0) {
       break label$3
      }
      $2 = HEAP32[(($2 << 2 | 0) + 157888 | 0) >> 2] | 0;
      break label$2;
     }
     $1 = ($1 & 248 | 0) >>> 3 | 0;
     if (($1 + -16 | 0 | (($2 >> 26 | 0) + $1 | 0) | 0) >>> 0 > 7 >>> 0) {
      break label$3
     }
     $2 = $5 + -128 | 0 | ($2 << 6 | 0) | 0;
     if (($2 | 0) < (0 | 0)) {
      break label$2
     }
     HEAP32[$4 >> 2] = 0;
     HEAP32[$0 >> 2] = $2;
     $2 = 1;
     break label$1;
    }
    HEAP32[$4 >> 2] = 0;
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    $2 = -1;
    break label$1;
   }
   HEAP32[$4 >> 2] = $2;
   $2 = -2;
  }
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function mbsinit($0) {
  $0 = $0 | 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return 1 | 0;
  }
  return !(HEAP32[$0 >> 2] | 0) | 0;
 }
 
 function __intscan($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $3$hi = 0, $6 = 0, $3 = 0, i64toi32_i32$1 = 0, $7$hi = 0, $9 = 0, $8$hi = 0, $7 = 0, $8 = 0, $10$hi = 0, $10 = 0, $2 = 0, $5 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $11 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $183 = 0, $183$hi = 0, $240 = 0, $240$hi = 0, $387$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   label$2 : {
    if (($1 | 0) != (1 | 0)) {
     break label$2
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    i64toi32_i32$0 = 0;
    $3 = 0;
    $3$hi = i64toi32_i32$0;
    break label$1;
   }
   label$3 : while (1) {
    label$4 : {
     label$5 : {
      $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
      if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
       break label$5
      }
      HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
      $4 = HEAPU8[$4 >> 0] | 0;
      break label$4;
     }
     $4 = __shgetc($0 | 0) | 0;
    }
    if (isspace($4 | 0) | 0) {
     continue label$3
    }
    break label$3;
   };
   $5 = 0;
   label$6 : {
    label$7 : {
     switch ($4 + -43 | 0 | 0) {
     case 0:
     case 2:
      break label$7;
     default:
      break label$6;
     };
    }
    $5 = ($4 | 0) == (45 | 0) ? -1 : 0;
    label$8 : {
     $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
     if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
     $4 = HEAPU8[$4 >> 0] | 0;
     break label$6;
    }
    $4 = __shgetc($0 | 0) | 0;
   }
   label$9 : {
    label$10 : {
     label$11 : {
      label$12 : {
       label$13 : {
        if (($1 | 0) != (0 | 0) & ($1 | 0) != (16 | 0) | 0) {
         break label$13
        }
        if (($4 | 0) != (48 | 0)) {
         break label$13
        }
        label$14 : {
         label$15 : {
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$15
          }
          HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
          $4 = HEAPU8[$4 >> 0] | 0;
          break label$14;
         }
         $4 = __shgetc($0 | 0) | 0;
        }
        label$16 : {
         if (($4 & -33 | 0 | 0) != (88 | 0)) {
          break label$16
         }
         label$17 : {
          label$18 : {
           $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
           if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
            break label$18
           }
           HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
           $4 = HEAPU8[$4 >> 0] | 0;
           break label$17;
          }
          $4 = __shgetc($0 | 0) | 0;
         }
         $1 = 16;
         if ((HEAPU8[($4 + 157537 | 0) >> 0] | 0) >>> 0 < 16 >>> 0) {
          break label$11
         }
         i64toi32_i32$0 = 0;
         $3 = 0;
         $3$hi = i64toi32_i32$0;
         label$19 : {
          i64toi32_i32$2 = $0;
          i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
          i64toi32_i32$2 = i64toi32_i32$0;
          i64toi32_i32$0 = 0;
          i64toi32_i32$3 = 0;
          if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
           $27 = 1
          } else {
           if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
            if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
             $28 = 0
            } else {
             $28 = 1
            }
            $29 = $28;
           } else {
            $29 = 0
           }
           $27 = $29;
          }
          if ($27) {
           break label$19
          }
          HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
         }
         i64toi32_i32$2 = 0;
         __shlim($0 | 0, 0 | 0, i64toi32_i32$2 | 0);
         break label$1;
        }
        if ($1) {
         break label$12
        }
        $1 = 8;
        break label$11;
       }
       $1 = $1 ? $1 : 10;
       if ($1 >>> 0 > (HEAPU8[($4 + 157537 | 0) >> 0] | 0) >>> 0) {
        break label$12
       }
       i64toi32_i32$2 = 0;
       $3 = 0;
       $3$hi = i64toi32_i32$2;
       label$20 : {
        i64toi32_i32$3 = $0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
        i64toi32_i32$3 = i64toi32_i32$2;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $30 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
           $31 = 0
          } else {
           $31 = 1
          }
          $32 = $31;
         } else {
          $32 = 0
         }
         $30 = $32;
        }
        if ($30) {
         break label$20
        }
        HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       i64toi32_i32$3 = 0;
       __shlim($0 | 0, 0 | 0, i64toi32_i32$3 | 0);
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
       break label$1;
      }
      if (($1 | 0) != (10 | 0)) {
       break label$11
      }
      i64toi32_i32$3 = 0;
      $3 = 0;
      $3$hi = i64toi32_i32$3;
      label$21 : {
       $6 = $4 + -48 | 0;
       if ($6 >>> 0 > 9 >>> 0) {
        break label$21
       }
       $1 = 0;
       label$22 : while (1) {
        $1 = Math_imul($1, 10);
        label$23 : {
         label$24 : {
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$24
          }
          HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
          $4 = HEAPU8[$4 >> 0] | 0;
          break label$23;
         }
         $4 = __shgetc($0 | 0) | 0;
        }
        $1 = $1 + $6 | 0;
        label$25 : {
         $6 = $4 + -48 | 0;
         if ($6 >>> 0 > 9 >>> 0) {
          break label$25
         }
         if ($1 >>> 0 < 429496729 >>> 0) {
          continue label$22
         }
        }
        break label$22;
       };
       i64toi32_i32$3 = 0;
       $3 = $1;
       $3$hi = i64toi32_i32$3;
      }
      label$26 : {
       if ($6 >>> 0 > 9 >>> 0) {
        break label$26
       }
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$1 = 0;
       i64toi32_i32$1 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $7 = i64toi32_i32$1;
       $7$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $8 = $6;
       $8$hi = i64toi32_i32$3;
       label$27 : while (1) {
        label$28 : {
         label$29 : {
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$29
          }
          HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
          $4 = HEAPU8[$4 >> 0] | 0;
          break label$28;
         }
         $4 = __shgetc($0 | 0) | 0;
        }
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$3 = $8$hi;
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$0 = $7;
        i64toi32_i32$1 = $8$hi;
        i64toi32_i32$2 = $8;
        i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        i64toi32_i32$5 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $3 = i64toi32_i32$4;
        $3$hi = i64toi32_i32$5;
        $6 = $4 + -48 | 0;
        if ($6 >>> 0 > 9 >>> 0) {
         break label$26
        }
        i64toi32_i32$5 = $3$hi;
        i64toi32_i32$3 = $3;
        i64toi32_i32$0 = 429496729;
        i64toi32_i32$2 = -1717986918;
        if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0 | 0) | 0) {
         break label$26
        }
        i64toi32_i32$3 = $3$hi;
        i64toi32_i32$5 = 0;
        i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, 10 | 0, i64toi32_i32$5 | 0) | 0;
        i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
        $7 = i64toi32_i32$5;
        $7$hi = i64toi32_i32$3;
        i64toi32_i32$3 = 0;
        $8 = $6;
        $8$hi = i64toi32_i32$3;
        i64toi32_i32$2 = $6;
        i64toi32_i32$5 = -1;
        i64toi32_i32$0 = -1;
        i64toi32_i32$5 = i64toi32_i32$3 ^ i64toi32_i32$5 | 0;
        $183 = i64toi32_i32$2 ^ i64toi32_i32$0 | 0;
        $183$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $7$hi;
        i64toi32_i32$3 = $7;
        i64toi32_i32$2 = $183$hi;
        i64toi32_i32$0 = $183;
        if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0 | 0) | 0) {
         continue label$27
        }
        break label$27;
       };
       $1 = 10;
       break label$10;
      }
      $1 = 10;
      if ($6 >>> 0 <= 9 >>> 0) {
       break label$10
      }
      break label$9;
     }
     label$30 : {
      if (!($1 & ($1 + -1 | 0) | 0)) {
       break label$30
      }
      i64toi32_i32$3 = 0;
      $3 = 0;
      $3$hi = i64toi32_i32$3;
      label$31 : {
       $9 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
       if ($1 >>> 0 <= $9 >>> 0) {
        break label$31
       }
       $6 = 0;
       label$32 : while (1) {
        $6 = Math_imul($6, $1);
        label$33 : {
         label$34 : {
          $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
          if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
           break label$34
          }
          HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
          $4 = HEAPU8[$4 >> 0] | 0;
          break label$33;
         }
         $4 = __shgetc($0 | 0) | 0;
        }
        $6 = $9 + $6 | 0;
        label$35 : {
         $9 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
         if ($1 >>> 0 <= $9 >>> 0) {
          break label$35
         }
         if ($6 >>> 0 < 119304647 >>> 0) {
          continue label$32
         }
        }
        break label$32;
       };
       i64toi32_i32$3 = 0;
       $3 = $6;
       $3$hi = i64toi32_i32$3;
      }
      if ($1 >>> 0 <= $9 >>> 0) {
       break label$10
      }
      i64toi32_i32$3 = 0;
      $7 = $1;
      $7$hi = i64toi32_i32$3;
      label$36 : while (1) {
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$3 = $7$hi;
       i64toi32_i32$3 = $3$hi;
       i64toi32_i32$5 = $7$hi;
       i64toi32_i32$5 = __wasm_i64_mul($3 | 0, i64toi32_i32$3 | 0, $7 | 0, i64toi32_i32$5 | 0) | 0;
       i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
       $8 = i64toi32_i32$5;
       $8$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = $9;
       i64toi32_i32$5 = 0;
       i64toi32_i32$2 = 255;
       i64toi32_i32$5 = i64toi32_i32$3 & i64toi32_i32$5 | 0;
       $10 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
       $10$hi = i64toi32_i32$5;
       i64toi32_i32$3 = $10;
       i64toi32_i32$0 = -1;
       i64toi32_i32$2 = -1;
       i64toi32_i32$0 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
       $240 = i64toi32_i32$3 ^ i64toi32_i32$2 | 0;
       $240$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $8$hi;
       i64toi32_i32$5 = $8;
       i64toi32_i32$3 = $240$hi;
       i64toi32_i32$2 = $240;
       if (i64toi32_i32$0 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
        break label$10
       }
       label$37 : {
        label$38 : {
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break label$38
         }
         HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
         $4 = HEAPU8[$4 >> 0] | 0;
         break label$37;
        }
        $4 = __shgetc($0 | 0) | 0;
       }
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$5 = $10$hi;
       i64toi32_i32$5 = $8$hi;
       i64toi32_i32$2 = $8;
       i64toi32_i32$0 = $10$hi;
       i64toi32_i32$3 = $10;
       i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $3 = i64toi32_i32$1;
       $3$hi = i64toi32_i32$4;
       $9 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
       if ($1 >>> 0 <= $9 >>> 0) {
        break label$10
       }
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$4 = $3$hi;
       i64toi32_i32$4 = $7$hi;
       i64toi32_i32$2 = 0;
       i64toi32_i32$5 = $3$hi;
       i64toi32_i32$3 = 0;
       __multi3($2 | 0, $7 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0, $3 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = $2;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
       i64toi32_i32$5 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       i64toi32_i32$4 = 0;
       if ((i64toi32_i32$2 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$3 | 0) | 0) {
        break label$10
       }
       continue label$36;
      };
     }
     $11 = HEAP8[(((Math_imul($1, 23) >>> 5 | 0) & 7 | 0) + 157793 | 0) >> 0] | 0;
     i64toi32_i32$2 = 0;
     $3 = 0;
     $3$hi = i64toi32_i32$2;
     label$39 : {
      $6 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
      if ($1 >>> 0 <= $6 >>> 0) {
       break label$39
      }
      $9 = 0;
      label$40 : while (1) {
       $9 = $9 << $11 | 0;
       label$41 : {
        label$42 : {
         $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
         if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
          break label$42
         }
         HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
         $4 = HEAPU8[$4 >> 0] | 0;
         break label$41;
        }
        $4 = __shgetc($0 | 0) | 0;
       }
       $9 = $6 | $9 | 0;
       label$43 : {
        $6 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
        if ($1 >>> 0 <= $6 >>> 0) {
         break label$43
        }
        if ($9 >>> 0 < 134217728 >>> 0) {
         continue label$40
        }
       }
       break label$40;
      };
      i64toi32_i32$2 = 0;
      $3 = $9;
      $3$hi = i64toi32_i32$2;
     }
     if ($1 >>> 0 <= $6 >>> 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $8 = $11;
     $8$hi = i64toi32_i32$2;
     i64toi32_i32$2 = -1;
     i64toi32_i32$4 = -1;
     i64toi32_i32$5 = $8$hi;
     i64toi32_i32$3 = $8;
     i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$5 = 0;
      $33 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
      $33 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
     }
     $10 = $33;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$2 = $10;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$3 = $3;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0) {
      break label$10
     }
     label$44 : while (1) {
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $8$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$5 = $8$hi;
      i64toi32_i32$4 = $8;
      i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
       $34 = 0;
      } else {
       i64toi32_i32$5 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
       $34 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      }
      $3 = $34;
      $3$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = 0;
      i64toi32_i32$4 = 255;
      i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
      $7 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
      $7$hi = i64toi32_i32$3;
      label$45 : {
       label$46 : {
        $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$46
        }
        HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
        $4 = HEAPU8[$4 >> 0] | 0;
        break label$45;
       }
       $4 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $7$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$5 = $3;
      i64toi32_i32$2 = $7$hi;
      i64toi32_i32$4 = $7;
      i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
      $3 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
      $3$hi = i64toi32_i32$2;
      $6 = HEAPU8[($4 + 157537 | 0) >> 0] | 0;
      if ($1 >>> 0 <= $6 >>> 0) {
       break label$10
      }
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$2 = $10$hi;
      i64toi32_i32$2 = $3$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$5 = $10$hi;
      i64toi32_i32$4 = $10;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0 | 0) | 0) {
       continue label$44
      }
      break label$44;
     };
    }
    if ($1 >>> 0 <= (HEAPU8[($4 + 157537 | 0) >> 0] | 0) >>> 0) {
     break label$9
    }
    label$47 : while (1) {
     label$48 : {
      label$49 : {
       $4 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (($4 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
        break label$49
       }
       HEAP32[($0 + 4 | 0) >> 2] = $4 + 1 | 0;
       $4 = HEAPU8[$4 >> 0] | 0;
       break label$48;
      }
      $4 = __shgetc($0 | 0) | 0;
     }
     if ($1 >>> 0 > (HEAPU8[($4 + 157537 | 0) >> 0] | 0) >>> 0) {
      continue label$47
     }
     break label$47;
    };
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    i64toi32_i32$3 = -1;
    $3 = -1;
    $3$hi = i64toi32_i32$3;
    $5 = 0;
   }
   label$50 : {
    i64toi32_i32$4 = $0;
    i64toi32_i32$3 = HEAP32[($0 + 112 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($0 + 116 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
     $35 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$5 >>> 0) {
       $36 = 0
      } else {
       $36 = 1
      }
      $37 = $36;
     } else {
      $37 = 0
     }
     $35 = $37;
    }
    if ($35) {
     break label$50
    }
    HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$2 = $5;
   i64toi32_i32$4 = i64toi32_i32$2 >> 31 | 0;
   $7 = i64toi32_i32$2;
   $7$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $3$hi;
   i64toi32_i32$5 = $3;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$3 = $7;
   i64toi32_i32$2 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   $387$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $7$hi;
   i64toi32_i32$2 = $387$hi;
   i64toi32_i32$4 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
   i64toi32_i32$5 = $7$hi;
   i64toi32_i32$0 = i64toi32_i32$4 - i64toi32_i32$3 | 0;
   i64toi32_i32$1 = (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$5 | 0;
   i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$1 | 0;
   $3 = i64toi32_i32$0;
   $3$hi = i64toi32_i32$1;
  }
  __stack_pointer = $2 + 16 | 0;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$4 = $3;
  i64toi32_i32$HIGH_BITS = $3$hi;
  return i64toi32_i32$4 | 0;
 }
 
 function copysignl($0, $1, $1$hi, $2, $2$hi, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, $22 = 0, $23 = 0, $24 = 0, $7 = 0, $11 = 0, $18$hi = 0, $20 = 0, $20$hi = 0, $21 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $1;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $7 = i64toi32_i32$1;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $22 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $11 = $22 & 32768 | 0;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $23 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $23 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $11 | ($23 & 32767 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $18$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $20 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $20$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $18$hi;
  i64toi32_i32$0 = $24;
  i64toi32_i32$2 = $20$hi;
  i64toi32_i32$3 = $20;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  $21 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
  i64toi32_i32$0 = $7;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $21;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function scalbnl($0, $1, $1$hi, $2, $2$hi, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  $3 = $3 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4 = 0, i64toi32_i32$4 = 0, $20 = 0, $70 = 0, $71 = 0, $71$hi = 0, $72 = 0, $72$hi = 0, $76$hi = 0, $80 = 0, $83 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  label$1 : {
   label$2 : {
    if (($3 | 0) < (16384 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 2147352576;
    __multf3($4 + 32 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = ($4 + 32 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 32 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 36 | 0) >> 2] | 0;
    $1 = i64toi32_i32$2;
    $1$hi = i64toi32_i32$3;
    label$3 : {
     if ($3 >>> 0 >= 32767 >>> 0) {
      break label$3
     }
     $3 = $3 + -16383 | 0;
     break label$1;
    }
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$1 = 0;
    i64toi32_i32$0 = 2147352576;
    __multf3($4 + 16 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
    $3 = (($3 | 0) < (49149 | 0) ? $3 : 49149) + -32766 | 0;
    i64toi32_i32$2 = ($4 + 16 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 20 | 0) >> 2] | 0;
    $1 = i64toi32_i32$1;
    $1$hi = i64toi32_i32$0;
    break label$1;
   }
   if (($3 | 0) > (-16383 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$0 = $2$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 7471104;
   __multf3($4 + 64 | 0 | 0, $1 | 0, i64toi32_i32$0 | 0, $2 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = ($4 + 64 | 0) + 8 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$3;
   $2$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
   $1 = i64toi32_i32$2;
   $1$hi = i64toi32_i32$3;
   label$4 : {
    if ($3 >>> 0 <= -32652 >>> 0) {
     break label$4
    }
    $3 = $3 + 16269 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 7471104;
   __multf3($4 + 48 | 0 | 0, $1 | 0, i64toi32_i32$3 | 0, $2 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   $3 = (($3 | 0) > (-48920 | 0) ? $3 : -48920) + 32538 | 0;
   i64toi32_i32$2 = ($4 + 48 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $2 = i64toi32_i32$0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 48 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 52 | 0) >> 2] | 0;
   $1 = i64toi32_i32$1;
   $1$hi = i64toi32_i32$0;
  }
  $70 = $4;
  i64toi32_i32$0 = $1$hi;
  $71 = $1;
  $71$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  $72 = $2;
  $72$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3 + 16383 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $20 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $20 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $76$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $71$hi;
  i64toi32_i32$2 = $72$hi;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = $76$hi;
  __multf3($70 | 0, $71 | 0, i64toi32_i32$1 | 0, $72 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, $20 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$2 = $4 + 8 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $80 = i64toi32_i32$3;
  i64toi32_i32$3 = $0;
  HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] = $80;
  HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$2 = $4;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $83 = i64toi32_i32$0;
  i64toi32_i32$0 = $0;
  HEAP32[i64toi32_i32$0 >> 2] = $83;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = i64toi32_i32$2 + 80 | 0;
 }
 
 function fabsl($0, $1, $1$hi, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2;
  i64toi32_i32$1 = 2147483647;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $5 = i64toi32_i32$2 & -1 | 0;
  i64toi32_i32$2 = $0;
  HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] = $5;
  HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $1$hi;
  HEAP32[i64toi32_i32$2 >> 2] = $1;
  HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] = i64toi32_i32$1;
 }
 
 function __floatscan($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8 = 0, $3 = 0, $4 = 0, $4$hi = 0, $9 = 0, $9$hi = 0, $7 = 0, $5 = 0, $6 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  i64toi32_i32$0 = 0;
  $4 = 0;
  $4$hi = i64toi32_i32$0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 > 2 >>> 0) {
     break label$2
    }
    $2 = $2 << 2 | 0;
    $5 = HEAP32[($2 + 157868 | 0) >> 2] | 0;
    $6 = HEAP32[($2 + 157856 | 0) >> 2] | 0;
    label$3 : while (1) {
     label$4 : {
      label$5 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$5
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$4;
      }
      $2 = __shgetc($1 | 0) | 0;
     }
     if (isspace($2 | 0) | 0) {
      continue label$3
     }
     break label$3;
    };
    $7 = 1;
    label$6 : {
     label$7 : {
      switch ($2 + -43 | 0 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $7 = ($2 | 0) == (45 | 0) ? -1 : 1;
     label$8 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$8
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$6;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    $8 = 0;
    label$9 : {
     label$10 : {
      label$11 : while (1) {
       if (($2 | 32 | 0 | 0) != (HEAP8[($8 + 132368 | 0) >> 0] | 0 | 0)) {
        break label$10
       }
       label$12 : {
        if ($8 >>> 0 > 6 >>> 0) {
         break label$12
        }
        label$13 : {
         $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$13
         }
         HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
         $2 = HEAPU8[$2 >> 0] | 0;
         break label$12;
        }
        $2 = __shgetc($1 | 0) | 0;
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != (8 | 0)) {
        continue label$11
       }
       break label$9;
      };
     }
     label$14 : {
      label$15 : {
       label$16 : {
        label$17 : {
         label$18 : {
          switch ($8 | 0) {
          case 3:
           i64toi32_i32$2 = $1;
           i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$2 = i64toi32_i32$0;
           i64toi32_i32$0 = 0;
           i64toi32_i32$3 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
            $16 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
             if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
              $17 = 0
             } else {
              $17 = 1
             }
             $18 = $17;
            } else {
             $18 = 0
            }
            $16 = $18;
           }
           if ($16) {
            break label$9
           }
           HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
           break label$9;
          case 0:
           label$21 : while (1) {
            if (($2 | 32 | 0 | 0) != (HEAP8[($8 + 134856 | 0) >> 0] | 0 | 0)) {
             break label$17
            }
            label$22 : {
             if ($8 >>> 0 > 1 >>> 0) {
              break label$22
             }
             label$23 : {
              $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
              if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
               break label$23
              }
              HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
              $2 = HEAPU8[$2 >> 0] | 0;
              break label$22;
             }
             $2 = __shgetc($1 | 0) | 0;
            }
            $8 = $8 + 1 | 0;
            if (($8 | 0) != (3 | 0)) {
             continue label$21
            }
            break label$16;
           };
          case 1:
          case 2:
           break label$17;
          default:
           break label$18;
          };
         }
         if (($8 | 0) == (8 | 0)) {
          break label$9
         }
        }
        label$24 : {
         switch ($8 | 0) {
         default:
          i64toi32_i32$2 = 0;
          $4 = 0;
          $4$hi = i64toi32_i32$2;
          label$26 : {
           i64toi32_i32$3 = $1;
           i64toi32_i32$2 = HEAP32[($1 + 112 | 0) >> 2] | 0;
           i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
           i64toi32_i32$3 = i64toi32_i32$2;
           i64toi32_i32$2 = 0;
           i64toi32_i32$0 = 0;
           if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
            $19 = 1
           } else {
            if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
             if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
              $20 = 0
             } else {
              $20 = 1
             }
             $21 = $20;
            } else {
             $21 = 0
            }
            $19 = $21;
           }
           if ($19) {
            break label$26
           }
           HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
          }
          (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
          break label$15;
         case 3:
          break label$16;
         case 0:
          break label$24;
         };
        }
        label$27 : {
         if (($2 | 0) != (48 | 0)) {
          break label$27
         }
         label$28 : {
          label$29 : {
           $8 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($8 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$29
           }
           HEAP32[($1 + 4 | 0) >> 2] = $8 + 1 | 0;
           $8 = HEAPU8[$8 >> 0] | 0;
           break label$28;
          }
          $8 = __shgetc($1 | 0) | 0;
         }
         label$30 : {
          if (($8 & -33 | 0 | 0) != (88 | 0)) {
           break label$30
          }
          hexfloat($3 + 16 | 0 | 0, $1 | 0, $6 | 0, $5 | 0, $7 | 0);
          i64toi32_i32$0 = $3 + 24 | 0;
          i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
          $9 = i64toi32_i32$3;
          $9$hi = i64toi32_i32$1;
          i64toi32_i32$0 = $3;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
          $4 = i64toi32_i32$1;
          $4$hi = i64toi32_i32$3;
          break label$1;
         }
         i64toi32_i32$0 = $1;
         i64toi32_i32$3 = HEAP32[($1 + 112 | 0) >> 2] | 0;
         i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
         i64toi32_i32$0 = i64toi32_i32$3;
         i64toi32_i32$3 = 0;
         i64toi32_i32$2 = 0;
         if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
          $22 = 1
         } else {
          if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
           if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
            $23 = 0
           } else {
            $23 = 1
           }
           $24 = $23;
          } else {
           $24 = 0
          }
          $22 = $24;
         }
         if ($22) {
          break label$27
         }
         HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
        }
        decfloat($3 + 32 | 0 | 0, $1 | 0, $2 | 0, $6 | 0, $5 | 0, $7 | 0);
        i64toi32_i32$2 = $3 + 40 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $9 = i64toi32_i32$0;
        $9$hi = i64toi32_i32$1;
        i64toi32_i32$2 = $3;
        i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 32 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 36 | 0) >> 2] | 0;
        $4 = i64toi32_i32$1;
        $4$hi = i64toi32_i32$0;
        break label$1;
       }
       label$31 : {
        label$32 : {
         $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$32
         }
         HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
         $2 = HEAPU8[$2 >> 0] | 0;
         break label$31;
        }
        $2 = __shgetc($1 | 0) | 0;
       }
       if (($2 | 0) != (40 | 0)) {
        break label$14
       }
       label$33 : while (1) {
        label$34 : {
         label$35 : {
          $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$35
          }
          HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
          $2 = HEAPU8[$2 >> 0] | 0;
          break label$34;
         }
         $2 = __shgetc($1 | 0) | 0;
        }
        $8 = $2 + -65 | 0;
        if (($2 + -48 | 0) >>> 0 < 10 >>> 0) {
         continue label$33
        }
        if ($8 >>> 0 < 26 >>> 0) {
         continue label$33
        }
        $8 = $2 + -97 | 0;
        if (($2 | 0) == (95 | 0)) {
         continue label$33
        }
        if ($8 >>> 0 < 26 >>> 0) {
         continue label$33
        }
        break label$33;
       };
       i64toi32_i32$0 = 2147450880;
       $9 = 0;
       $9$hi = i64toi32_i32$0;
       if (($2 | 0) == (41 | 0)) {
        break label$1
       }
       i64toi32_i32$0 = 0;
       $4 = 0;
       $4$hi = i64toi32_i32$0;
       label$36 : {
        i64toi32_i32$2 = $1;
        i64toi32_i32$0 = HEAP32[($1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
        i64toi32_i32$2 = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
         $25 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $26 = 0
          } else {
           $26 = 1
          }
          $27 = $26;
         } else {
          $27 = 0
         }
         $25 = $27;
        }
        if ($25) {
         break label$36
        }
        HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
       }
       (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      }
      i64toi32_i32$2 = $4$hi;
      __shlim($1 | 0, $4 | 0, i64toi32_i32$2 | 0);
      break label$2;
     }
     i64toi32_i32$2 = 0;
     $4 = 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$2 = 2147450880;
     $9 = 0;
     $9$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $1;
     i64toi32_i32$2 = HEAP32[($1 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1 + 116 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$2 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
      $28 = 1
     } else {
      if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $29 = 0
       } else {
        $29 = 1
       }
       $30 = $29;
      } else {
       $30 = 0
      }
      $28 = $30;
     }
     if ($28) {
      break label$1
     }
     HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
     break label$1;
    }
    __extendsftf2($3 | 0, Math_fround(Math_fround(Math_fround($7 | 0) * Math_fround(infinity))));
    i64toi32_i32$0 = $3 + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $9 = i64toi32_i32$3;
    $9$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $3;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $4 = i64toi32_i32$1;
    $4$hi = i64toi32_i32$3;
    break label$1;
   }
   i64toi32_i32$3 = 0;
   $9 = 0;
   $9$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $4$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $4;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $9$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $9;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$3;
  __stack_pointer = $3 + 48 | 0;
 }
 
 function hexfloat($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, i64toi32_i32$5 = 0, i64toi32_i32$2 = 0, $5 = 0, $7 = 0, $11$hi = 0, $17$hi = 0, $11 = 0, $12$hi = 0, $17 = 0, $9$hi = 0, $12 = 0, $6 = 0, $13$hi = 0, $16$hi = 0, $9 = 0, $10 = 0, $13 = 0, $16 = 0, $8 = 0, $15 = 0, $20$hi = 0, $14 = 0, $20 = 0, $18 = 0, $19 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $125 = 0, $125$hi = 0, $129 = 0, $129$hi = 0, $140 = 0, $140$hi = 0, $144 = 0, $144$hi = 0, $162 = 0, $162$hi = 0, $166 = 0, $166$hi = 0, $248$hi = 0, $255$hi = 0, $264 = 0, $264$hi = 0, $268 = 0, $268$hi = 0, $272 = 0, $272$hi = 0, $276 = 0, $276$hi = 0, $286 = 0, $286$hi = 0, $303 = 0, $303$hi = 0, $307 = 0, $307$hi = 0, $312 = 0, $312$hi = 0, $314 = 0, $314$hi = 0, $332$hi = 0, $340 = 0, $341 = 0, $344$hi = 0, $368 = 0, $368$hi = 0, $372 = 0, $372$hi = 0, $408 = 0, $408$hi = 0, $412 = 0, $412$hi = 0, $416 = 0, $416$hi = 0, $420 = 0, $420$hi = 0, $429 = 0, $429$hi = 0, $432 = 0, $432$hi = 0, $436 = 0, $436$hi = 0, $440 = 0, $440$hi = 0, $442 = 0, $442$hi = 0, $446 = 0, $446$hi = 0, $450 = 0, $450$hi = 0, $454 = 0, $454$hi = 0, $486 = 0, $486$hi = 0, $490 = 0, $490$hi = 0, $494 = 0, $494$hi = 0, $498 = 0, $498$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $5 = __stack_pointer - 432 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    label$3 : {
     $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
     if (($6 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     HEAP32[($1 + 4 | 0) >> 2] = $6 + 1 | 0;
     $7 = HEAPU8[$6 >> 0] | 0;
     $8 = 0;
     break label$2;
    }
    $8 = 0;
    $6 = 0;
    break label$1;
   }
   $6 = 1;
  }
  label$4 : {
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            switch ($6 | 0) {
            case 0:
             $7 = __shgetc($1 | 0) | 0;
             break label$12;
            default:
             break label$13;
            };
           }
           label$15 : {
            if (($7 | 0) == (48 | 0)) {
             break label$15
            }
            i64toi32_i32$0 = 1073676288;
            $9 = 0;
            $9$hi = i64toi32_i32$0;
            $10 = 0;
            if (($7 | 0) == (46 | 0)) {
             break label$10
            }
            i64toi32_i32$0 = 0;
            $11 = 0;
            $11$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            $12 = 0;
            $12$hi = i64toi32_i32$0;
            i64toi32_i32$0 = 0;
            $13 = 0;
            $13$hi = i64toi32_i32$0;
            $14 = 0;
            $15 = 0;
            break label$9;
           }
           $6 = HEAP32[($1 + 4 | 0) >> 2] | 0;
           if (($6 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
            break label$11
           }
           $8 = 1;
           HEAP32[($1 + 4 | 0) >> 2] = $6 + 1 | 0;
           $7 = HEAPU8[$6 >> 0] | 0;
          }
          $6 = 1;
          continue label$5;
         }
         $8 = 1;
         break label$6;
        }
        label$16 : {
         label$17 : {
          $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
          if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
           break label$17
          }
          HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
          $7 = HEAPU8[$7 >> 0] | 0;
          break label$16;
         }
         $7 = __shgetc($1 | 0) | 0;
        }
        i64toi32_i32$0 = 0;
        $11 = 0;
        $11$hi = i64toi32_i32$0;
        if (($7 | 0) == (48 | 0)) {
         break label$8
        }
        $15 = 1;
        i64toi32_i32$0 = 0;
        $12 = 0;
        $12$hi = i64toi32_i32$0;
        i64toi32_i32$0 = 0;
        $13 = 0;
        $13$hi = i64toi32_i32$0;
        $14 = 0;
       }
       i64toi32_i32$0 = 0;
       $16 = 0;
       $16$hi = i64toi32_i32$0;
       break label$7;
      }
      i64toi32_i32$0 = 0;
      $16 = 0;
      $16$hi = i64toi32_i32$0;
      label$18 : while (1) {
       label$19 : {
        label$20 : {
         $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
         if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
          break label$20
         }
         HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
         $7 = HEAPU8[$7 >> 0] | 0;
         break label$19;
        }
        $7 = __shgetc($1 | 0) | 0;
       }
       i64toi32_i32$0 = $16$hi;
       i64toi32_i32$2 = $16;
       i64toi32_i32$1 = -1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       $16 = i64toi32_i32$4;
       $16$hi = i64toi32_i32$5;
       i64toi32_i32$5 = 0;
       $11 = 0;
       $11$hi = i64toi32_i32$5;
       $15 = 1;
       if (($7 | 0) == (48 | 0)) {
        continue label$18
       }
       break label$18;
      };
      i64toi32_i32$5 = 0;
      $12 = 0;
      $12$hi = i64toi32_i32$5;
      i64toi32_i32$5 = 0;
      $13 = 0;
      $13$hi = i64toi32_i32$5;
      $14 = 0;
      $8 = 1;
     }
     i64toi32_i32$5 = 0;
     $17 = 0;
     $17$hi = i64toi32_i32$5;
     label$21 : while (1) {
      $6 = $7 | 32 | 0;
      label$22 : {
       label$23 : {
        $18 = $7 + -48 | 0;
        if ($18 >>> 0 < 10 >>> 0) {
         break label$23
        }
        label$24 : {
         if (($6 + -97 | 0) >>> 0 < 6 >>> 0) {
          break label$24
         }
         if (($7 | 0) == (46 | 0)) {
          break label$24
         }
         $19 = $7;
         break label$4;
        }
        $19 = 46;
        if (($7 | 0) != (46 | 0)) {
         break label$23
        }
        if ($15) {
         break label$4
        }
        $15 = 1;
        i64toi32_i32$5 = $17$hi;
        $16 = $17;
        $16$hi = i64toi32_i32$5;
        break label$22;
       }
       $7 = ($7 | 0) > (57 | 0) ? $6 + -87 | 0 : $18;
       label$25 : {
        label$26 : {
         i64toi32_i32$5 = $17$hi;
         i64toi32_i32$0 = $17;
         i64toi32_i32$2 = 0;
         i64toi32_i32$3 = 7;
         if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
          $106 = 1
         } else {
          if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
           if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
            $107 = 0
           } else {
            $107 = 1
           }
           $108 = $107;
          } else {
           $108 = 0
          }
          $106 = $108;
         }
         if ($106) {
          break label$26
         }
         $10 = $7 + ($10 << 4 | 0) | 0;
         break label$25;
        }
        label$27 : {
         i64toi32_i32$0 = $17$hi;
         i64toi32_i32$3 = $17;
         i64toi32_i32$5 = 0;
         i64toi32_i32$2 = 28;
         if (i64toi32_i32$0 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 > i64toi32_i32$2 >>> 0 | 0) | 0) {
          break label$27
         }
         __floatsitf($5 + 48 | 0 | 0, $7 | 0);
         i64toi32_i32$3 = $13$hi;
         i64toi32_i32$3 = $9$hi;
         i64toi32_i32$3 = $13$hi;
         i64toi32_i32$0 = $9$hi;
         i64toi32_i32$2 = 0;
         i64toi32_i32$5 = 1073414144;
         __multf3($5 + 32 | 0 | 0, $13 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$0 = $5;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 48 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 52 | 0) >> 2] | 0;
         $125 = i64toi32_i32$5;
         $125$hi = i64toi32_i32$2;
         i64toi32_i32$0 = (i64toi32_i32$0 + 48 | 0) + 8 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $129 = i64toi32_i32$2;
         $129$hi = i64toi32_i32$5;
         i64toi32_i32$0 = $5;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
         $13 = i64toi32_i32$5;
         $13$hi = i64toi32_i32$2;
         i64toi32_i32$0 = (i64toi32_i32$0 + 32 | 0) + 8 | 0;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $9 = i64toi32_i32$2;
         $9$hi = i64toi32_i32$5;
         i64toi32_i32$5 = $125$hi;
         i64toi32_i32$2 = $129$hi;
         i64toi32_i32$0 = $13$hi;
         i64toi32_i32$3 = $9$hi;
         __multf3($5 + 16 | 0 | 0, $125 | 0, i64toi32_i32$5 | 0, $129 | 0, i64toi32_i32$2 | 0, $13 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$3 | 0);
         i64toi32_i32$2 = $5;
         i64toi32_i32$3 = HEAP32[($5 + 16 | 0) >> 2] | 0;
         i64toi32_i32$0 = HEAP32[($5 + 20 | 0) >> 2] | 0;
         $140 = i64toi32_i32$3;
         $140$hi = i64toi32_i32$0;
         i64toi32_i32$2 = ($5 + 16 | 0) + 8 | 0;
         i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
         i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
         $144 = i64toi32_i32$0;
         $144$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $11$hi;
         i64toi32_i32$3 = $12$hi;
         i64toi32_i32$3 = $140$hi;
         i64toi32_i32$0 = $144$hi;
         i64toi32_i32$2 = $11$hi;
         i64toi32_i32$5 = $12$hi;
         __addtf3($5 | 0, $140 | 0, i64toi32_i32$3 | 0, $144 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$2 | 0, $12 | 0, i64toi32_i32$5 | 0);
         i64toi32_i32$0 = $5 + 8 | 0;
         i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $12 = i64toi32_i32$5;
         $12$hi = i64toi32_i32$2;
         i64toi32_i32$0 = $5;
         i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
         i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
         $11 = i64toi32_i32$2;
         $11$hi = i64toi32_i32$5;
         break label$25;
        }
        if (!$7) {
         break label$25
        }
        if ($14) {
         break label$25
        }
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$5 = $9$hi;
        i64toi32_i32$5 = $13$hi;
        i64toi32_i32$2 = $9$hi;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = 1073610752;
        __multf3($5 + 80 | 0 | 0, $13 | 0, i64toi32_i32$5 | 0, $9 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0);
        i64toi32_i32$2 = $5;
        i64toi32_i32$3 = HEAP32[($5 + 80 | 0) >> 2] | 0;
        i64toi32_i32$0 = HEAP32[($5 + 84 | 0) >> 2] | 0;
        $162 = i64toi32_i32$3;
        $162$hi = i64toi32_i32$0;
        i64toi32_i32$2 = ($5 + 80 | 0) + 8 | 0;
        i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
        $166 = i64toi32_i32$0;
        $166$hi = i64toi32_i32$3;
        i64toi32_i32$3 = $11$hi;
        i64toi32_i32$3 = $12$hi;
        i64toi32_i32$3 = $162$hi;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$2 = $11$hi;
        i64toi32_i32$5 = $12$hi;
        __addtf3($5 + 64 | 0 | 0, $162 | 0, i64toi32_i32$3 | 0, $166 | 0, i64toi32_i32$0 | 0, $11 | 0, i64toi32_i32$2 | 0, $12 | 0, i64toi32_i32$5 | 0);
        i64toi32_i32$0 = ($5 + 64 | 0) + 8 | 0;
        i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $12 = i64toi32_i32$5;
        $12$hi = i64toi32_i32$2;
        $14 = 1;
        i64toi32_i32$0 = $5;
        i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 64 | 0) >> 2] | 0;
        i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 68 | 0) >> 2] | 0;
        $11 = i64toi32_i32$2;
        $11$hi = i64toi32_i32$5;
       }
       i64toi32_i32$5 = $17$hi;
       i64toi32_i32$0 = $17;
       i64toi32_i32$2 = 0;
       i64toi32_i32$3 = 1;
       i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
       i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
        i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
       }
       $17 = i64toi32_i32$1;
       $17$hi = i64toi32_i32$4;
       $8 = 1;
      }
      label$28 : {
       $7 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($7 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$28
       }
       HEAP32[($1 + 4 | 0) >> 2] = $7 + 1 | 0;
       $7 = HEAPU8[$7 >> 0] | 0;
       continue label$21;
      }
      $7 = __shgetc($1 | 0) | 0;
      continue label$21;
     };
    }
    $6 = 0;
    continue label$5;
   };
  }
  label$29 : {
   label$30 : {
    if ($8) {
     break label$30
    }
    label$31 : {
     i64toi32_i32$5 = $1;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 112 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 116 | 0) >> 2] | 0;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) < (i64toi32_i32$4 | 0)) {
      $109 = 1
     } else {
      if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
        $110 = 0
       } else {
        $110 = 1
       }
       $111 = $110;
      } else {
       $111 = 0
      }
      $109 = $111;
     }
     if ($109) {
      break label$31
     }
     HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$5 = 0;
    __shlim($1 | 0, 0 | 0, i64toi32_i32$5 | 0);
    __extenddftf2($5 + 96 | 0 | 0, +(+($4 | 0) * 0.0));
    i64toi32_i32$3 = $5 + 104 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$0;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 96 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$3 + 100 | 0) >> 2] | 0;
    $11 = i64toi32_i32$0;
    $11$hi = i64toi32_i32$5;
    break label$29;
   }
   label$32 : {
    i64toi32_i32$5 = $17$hi;
    i64toi32_i32$3 = $17;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 7;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $112 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$4 >>> 0) {
       $113 = 0
      } else {
       $113 = 1
      }
      $114 = $113;
     } else {
      $114 = 0
     }
     $112 = $114;
    }
    if ($112) {
     break label$32
    }
    i64toi32_i32$3 = $17$hi;
    $9 = $17;
    $9$hi = i64toi32_i32$3;
    label$33 : while (1) {
     $10 = $10 << 4 | 0;
     i64toi32_i32$3 = $9$hi;
     i64toi32_i32$4 = $9;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 1;
     i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$0 | 0;
     i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $9 = i64toi32_i32$2;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$3 = i64toi32_i32$2;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 8;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | 0) {
      continue label$33
     }
     break label$33;
    };
   }
   label$34 : {
    label$35 : {
     if (($19 & -33 | 0 | 0) != (80 | 0)) {
      break label$35
     }
     i64toi32_i32$3 = scanexp($1 | 0) | 0;
     i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
     $9 = i64toi32_i32$3;
     $9$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$3 = -2147483648;
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0) {
      break label$34
     }
     i64toi32_i32$0 = 0;
     $11 = 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     __shlim($1 | 0, 0 | 0, i64toi32_i32$0 | 0);
     i64toi32_i32$0 = 0;
     $17 = 0;
     $17$hi = i64toi32_i32$0;
     break label$29;
    }
    i64toi32_i32$0 = 0;
    $9 = 0;
    $9$hi = i64toi32_i32$0;
    i64toi32_i32$4 = $1;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
    i64toi32_i32$4 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $115 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $116 = 0
      } else {
       $116 = 1
      }
      $117 = $116;
     } else {
      $117 = 0
     }
     $115 = $117;
    }
    if ($115) {
     break label$34
    }
    HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
   }
   label$36 : {
    if ($10) {
     break label$36
    }
    __extenddftf2($5 + 112 | 0 | 0, +(+($4 | 0) * 0.0));
    i64toi32_i32$3 = $5 + 120 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$4;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$3 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 112 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 116 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$4;
    break label$29;
   }
   label$37 : {
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$4 = $17$hi;
    i64toi32_i32$5 = $15;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$0 = i64toi32_i32$5 ? $16 : $17;
    i64toi32_i32$3 = i64toi32_i32$5 ? i64toi32_i32$4 : i64toi32_i32$1;
    i64toi32_i32$5 = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 2;
    i64toi32_i32$1 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     $118 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $118 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
    }
    $248$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $9$hi;
    i64toi32_i32$0 = $248$hi;
    i64toi32_i32$3 = $118;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$4 = $9;
    i64toi32_i32$1 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    i64toi32_i32$0 = i64toi32_i32$1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = -32;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $17 = i64toi32_i32$5;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $255$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$2 = i64toi32_i32$5;
    i64toi32_i32$0 = $255$hi;
    i64toi32_i32$4 = 0 - $3 | 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
     $119 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 > i64toi32_i32$4 >>> 0) {
       $120 = 0
      } else {
       $120 = 1
      }
      $121 = $120;
     } else {
      $121 = 0
     }
     $119 = $121;
    }
    if ($119) {
     break label$37
    }
    (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    __floatsitf($5 + 160 | 0 | 0, $4 | 0);
    i64toi32_i32$4 = $5;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 160 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 164 | 0) >> 2] | 0;
    $264 = i64toi32_i32$2;
    $264$hi = i64toi32_i32$1;
    i64toi32_i32$4 = (i64toi32_i32$4 + 160 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $268 = i64toi32_i32$1;
    $268$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $264$hi;
    i64toi32_i32$1 = $268$hi;
    i64toi32_i32$4 = -1;
    i64toi32_i32$0 = 2147418111;
    __multf3($5 + 144 | 0 | 0, $264 | 0, i64toi32_i32$2 | 0, $268 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$1 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 144 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 148 | 0) >> 2] | 0;
    $272 = i64toi32_i32$0;
    $272$hi = i64toi32_i32$4;
    i64toi32_i32$1 = (i64toi32_i32$1 + 144 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $276 = i64toi32_i32$4;
    $276$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $272$hi;
    i64toi32_i32$4 = $276$hi;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 2147418111;
    __multf3($5 + 128 | 0 | 0, $272 | 0, i64toi32_i32$0 | 0, $276 | 0, i64toi32_i32$4 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0);
    i64toi32_i32$4 = ($5 + 128 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$2;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 128 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$4 + 132 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$2;
    break label$29;
   }
   label$38 : {
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$1 = $3 + -226 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
    $286 = i64toi32_i32$1;
    $286$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $17$hi;
    i64toi32_i32$4 = $17;
    i64toi32_i32$1 = $286$hi;
    i64toi32_i32$0 = $286;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$1 | 0)) {
     $122 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $123 = 0
      } else {
       $123 = 1
      }
      $124 = $123;
     } else {
      $124 = 0
     }
     $122 = $124;
    }
    if ($122) {
     break label$38
    }
    label$39 : {
     if (($10 | 0) <= (-1 | 0)) {
      break label$39
     }
     label$40 : while (1) {
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$4 = $12$hi;
      i64toi32_i32$4 = $11$hi;
      i64toi32_i32$2 = $12$hi;
      i64toi32_i32$0 = 0;
      i64toi32_i32$1 = -1073807360;
      __addtf3($5 + 416 | 0 | 0, $11 | 0, i64toi32_i32$4 | 0, $12 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$1 = i64toi32_i32$2;
      i64toi32_i32$1 = i64toi32_i32$4;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$2 = 0;
      i64toi32_i32$4 = 1073610752;
      $7 = __getf2($11 | 0, i64toi32_i32$1 | 0, $12 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$4 = i64toi32_i32$0;
      i64toi32_i32$4 = i64toi32_i32$1;
      i64toi32_i32$0 = $5;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 416 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 420 | 0) >> 2] | 0;
      $303 = i64toi32_i32$4;
      $303$hi = i64toi32_i32$2;
      $1 = ($7 | 0) < (0 | 0);
      i64toi32_i32$3 = $1;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$4 = $303$hi;
      i64toi32_i32$1 = i64toi32_i32$3 ? $11 : $303;
      i64toi32_i32$0 = i64toi32_i32$3 ? i64toi32_i32$2 : i64toi32_i32$4;
      $307 = i64toi32_i32$1;
      $307$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $12$hi;
      i64toi32_i32$3 = ($5 + 416 | 0) + 8 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $312 = i64toi32_i32$0;
      $312$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $1;
      i64toi32_i32$1 = $12$hi;
      i64toi32_i32$0 = $312$hi;
      i64toi32_i32$2 = i64toi32_i32$4 ? $12 : $312;
      i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
      $314 = i64toi32_i32$2;
      $314$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $11$hi;
      i64toi32_i32$2 = i64toi32_i32$1;
      i64toi32_i32$4 = $307$hi;
      i64toi32_i32$1 = $314$hi;
      __addtf3($5 + 400 | 0 | 0, $11 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$2 | 0, $307 | 0, i64toi32_i32$4 | 0, $314 | 0, i64toi32_i32$1 | 0);
      i64toi32_i32$1 = $17$hi;
      i64toi32_i32$2 = $17;
      i64toi32_i32$4 = -1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
      if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $17 = i64toi32_i32$0;
      $17$hi = i64toi32_i32$5;
      i64toi32_i32$1 = ($5 + 400 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $12 = i64toi32_i32$5;
      $12$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $5;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 400 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 404 | 0) >> 2] | 0;
      $11 = i64toi32_i32$2;
      $11$hi = i64toi32_i32$5;
      $10 = $10 << 1 | 0 | ($7 | 0) > (-1 | 0) | 0;
      if (($10 | 0) > (-1 | 0)) {
       continue label$40
      }
      break label$40;
     };
    }
    label$41 : {
     label$42 : {
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$2 = $3;
      i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
      $332$hi = i64toi32_i32$5;
      i64toi32_i32$5 = $17$hi;
      i64toi32_i32$1 = $17;
      i64toi32_i32$2 = $332$hi;
      i64toi32_i32$3 = $3;
      i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$3 | 0;
      i64toi32_i32$0 = (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$2 | 0;
      i64toi32_i32$0 = i64toi32_i32$5 - i64toi32_i32$0 | 0;
      i64toi32_i32$5 = i64toi32_i32$4;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $16 = i64toi32_i32$2;
      $16$hi = i64toi32_i32$4;
      $7 = i64toi32_i32$2;
      $340 = (i64toi32_i32$2 | 0) > (0 | 0) ? i64toi32_i32$2 : 0;
      $341 = $2;
      i64toi32_i32$4 = 0;
      $344$hi = i64toi32_i32$4;
      i64toi32_i32$4 = $16$hi;
      i64toi32_i32$0 = i64toi32_i32$2;
      i64toi32_i32$5 = $344$hi;
      i64toi32_i32$3 = $2;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
       $126 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
        if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $127 = 0
        } else {
         $127 = 1
        }
        $128 = $127;
       } else {
        $128 = 0
       }
       $126 = $128;
      }
      $7 = $126 ? $340 : $341;
      if (($7 | 0) < (113 | 0)) {
       break label$42
      }
      __floatsitf($5 + 384 | 0 | 0, $4 | 0);
      i64toi32_i32$3 = $5 + 392 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
      $16 = i64toi32_i32$0;
      $16$hi = i64toi32_i32$4;
      i64toi32_i32$4 = 0;
      $9 = 0;
      $9$hi = i64toi32_i32$4;
      i64toi32_i32$3 = $5;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 384 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 388 | 0) >> 2] | 0;
      $13 = i64toi32_i32$4;
      $13$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $20 = 0;
      $20$hi = i64toi32_i32$0;
      break label$41;
     }
     __extenddftf2($5 + 352 | 0 | 0, +(+scalbn(+(1.0), 144 - $7 | 0 | 0)));
     __floatsitf($5 + 336 | 0 | 0, $4 | 0);
     i64toi32_i32$3 = $5;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 356 | 0) >> 2] | 0;
     $368 = i64toi32_i32$0;
     $368$hi = i64toi32_i32$4;
     i64toi32_i32$3 = (i64toi32_i32$3 + 352 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $372 = i64toi32_i32$4;
     $372$hi = i64toi32_i32$0;
     i64toi32_i32$3 = $5;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 340 | 0) >> 2] | 0;
     $13 = i64toi32_i32$0;
     $13$hi = i64toi32_i32$4;
     i64toi32_i32$3 = (i64toi32_i32$3 + 336 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $16 = i64toi32_i32$4;
     $16$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $368$hi;
     i64toi32_i32$4 = $372$hi;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$5 = $16$hi;
     copysignl($5 + 368 | 0 | 0, $368 | 0, i64toi32_i32$0 | 0, $372 | 0, i64toi32_i32$4 | 0, $13 | 0, i64toi32_i32$3 | 0, $16 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$4 = ($5 + 368 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $20 = i64toi32_i32$5;
     $20$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 368 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 372 | 0) >> 2] | 0;
     $9 = i64toi32_i32$3;
     $9$hi = i64toi32_i32$5;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    $7 = (($7 | 0) < (32 | 0) & (__letf2($11 | 0, i64toi32_i32$5 | 0, $12 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0) | 0 | 0) != (0 | 0) | 0) & !($10 & 1 | 0) | 0;
    __floatunsitf($5 + 320 | 0 | 0, $10 + $7 | 0 | 0);
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$3 = $5;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 320 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 324 | 0) >> 2] | 0;
    $408 = i64toi32_i32$0;
    $408$hi = i64toi32_i32$4;
    i64toi32_i32$3 = (i64toi32_i32$3 + 320 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $412 = i64toi32_i32$4;
    $412$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$4 = $16$hi;
    i64toi32_i32$3 = $408$hi;
    i64toi32_i32$5 = $412$hi;
    __multf3($5 + 304 | 0 | 0, $13 | 0, i64toi32_i32$0 | 0, $16 | 0, i64toi32_i32$4 | 0, $408 | 0, i64toi32_i32$3 | 0, $412 | 0, i64toi32_i32$5 | 0);
    i64toi32_i32$4 = $5;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
    $416 = i64toi32_i32$5;
    $416$hi = i64toi32_i32$3;
    i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $420 = i64toi32_i32$3;
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $9$hi;
    i64toi32_i32$5 = $20$hi;
    i64toi32_i32$5 = $416$hi;
    i64toi32_i32$3 = $420$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$0 = $20$hi;
    __addtf3($5 + 272 | 0 | 0, $416 | 0, i64toi32_i32$5 | 0, $420 | 0, i64toi32_i32$3 | 0, $9 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$0 | 0);
    i64toi32_i32$0 = $13$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$1 = $7;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$5 = i64toi32_i32$1 ? 0 : $11;
    i64toi32_i32$3 = i64toi32_i32$1 ? i64toi32_i32$0 : i64toi32_i32$4;
    $429 = i64toi32_i32$5;
    $429$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $12$hi;
    i64toi32_i32$4 = i64toi32_i32$1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = $12$hi;
    i64toi32_i32$0 = i64toi32_i32$4 ? 0 : $12;
    i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$3 : i64toi32_i32$5;
    $432 = i64toi32_i32$0;
    $432$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $13$hi;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$4 = $429$hi;
    i64toi32_i32$3 = $432$hi;
    __multf3($5 + 288 | 0 | 0, $13 | 0, i64toi32_i32$1 | 0, $16 | 0, i64toi32_i32$0 | 0, $429 | 0, i64toi32_i32$4 | 0, $432 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 288 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 292 | 0) >> 2] | 0;
    $436 = i64toi32_i32$3;
    $436$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 288 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $440 = i64toi32_i32$4;
    $440$hi = i64toi32_i32$3;
    i64toi32_i32$0 = $5;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 272 | 0) >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 276 | 0) >> 2] | 0;
    $442 = i64toi32_i32$3;
    $442$hi = i64toi32_i32$4;
    i64toi32_i32$0 = (i64toi32_i32$0 + 272 | 0) + 8 | 0;
    i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $446 = i64toi32_i32$4;
    $446$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $436$hi;
    i64toi32_i32$4 = $440$hi;
    i64toi32_i32$0 = $442$hi;
    i64toi32_i32$1 = $446$hi;
    __addtf3($5 + 256 | 0 | 0, $436 | 0, i64toi32_i32$3 | 0, $440 | 0, i64toi32_i32$4 | 0, $442 | 0, i64toi32_i32$0 | 0, $446 | 0, i64toi32_i32$1 | 0);
    i64toi32_i32$4 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 256 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 260 | 0) >> 2] | 0;
    $450 = i64toi32_i32$1;
    $450$hi = i64toi32_i32$0;
    i64toi32_i32$4 = (i64toi32_i32$4 + 256 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $454 = i64toi32_i32$0;
    $454$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $9$hi;
    i64toi32_i32$1 = $20$hi;
    i64toi32_i32$1 = $450$hi;
    i64toi32_i32$0 = $454$hi;
    i64toi32_i32$4 = $9$hi;
    i64toi32_i32$3 = $20$hi;
    __subtf3($5 + 240 | 0 | 0, $450 | 0, i64toi32_i32$1 | 0, $454 | 0, i64toi32_i32$0 | 0, $9 | 0, i64toi32_i32$4 | 0, $20 | 0, i64toi32_i32$3 | 0);
    label$43 : {
     i64toi32_i32$0 = $5;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 240 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 244 | 0) >> 2] | 0;
     $11 = i64toi32_i32$3;
     $11$hi = i64toi32_i32$4;
     i64toi32_i32$0 = (i64toi32_i32$0 + 240 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $12 = i64toi32_i32$4;
     $12$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $11$hi;
     i64toi32_i32$4 = $12$hi;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if (__letf2($11 | 0, i64toi32_i32$3 | 0, $12 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0) {
      break label$43
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$1 = $12$hi;
    i64toi32_i32$1 = $17$hi;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$0 = $12$hi;
    scalbnl($5 + 224 | 0 | 0, $11 | 0, i64toi32_i32$1 | 0, $12 | 0, i64toi32_i32$0 | 0, $17 | 0);
    i64toi32_i32$4 = ($5 + 224 | 0) + 8 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
    $17 = i64toi32_i32$0;
    $17$hi = i64toi32_i32$1;
    i64toi32_i32$4 = $5;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
    $11 = i64toi32_i32$1;
    $11$hi = i64toi32_i32$0;
    break label$29;
   }
   (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
   __floatsitf($5 + 208 | 0 | 0, $4 | 0);
   i64toi32_i32$4 = $5;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 208 | 0) >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 212 | 0) >> 2] | 0;
   $486 = i64toi32_i32$0;
   $486$hi = i64toi32_i32$1;
   i64toi32_i32$4 = (i64toi32_i32$4 + 208 | 0) + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $490 = i64toi32_i32$1;
   $490$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $486$hi;
   i64toi32_i32$1 = $490$hi;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 65536;
   __multf3($5 + 192 | 0 | 0, $486 | 0, i64toi32_i32$0 | 0, $490 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = $5;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 192 | 0) >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 196 | 0) >> 2] | 0;
   $494 = i64toi32_i32$3;
   $494$hi = i64toi32_i32$4;
   i64toi32_i32$1 = (i64toi32_i32$1 + 192 | 0) + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $498 = i64toi32_i32$4;
   $498$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $494$hi;
   i64toi32_i32$4 = $498$hi;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 65536;
   __multf3($5 + 176 | 0 | 0, $494 | 0, i64toi32_i32$3 | 0, $498 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
   i64toi32_i32$4 = ($5 + 176 | 0) + 8 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $17 = i64toi32_i32$0;
   $17$hi = i64toi32_i32$1;
   i64toi32_i32$4 = $5;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
   $11 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
  }
  i64toi32_i32$0 = $11$hi;
  i64toi32_i32$1 = $0;
  HEAP32[i64toi32_i32$1 >> 2] = $11;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = $17$hi;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = $17;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  __stack_pointer = $5 + 432 | 0;
 }
 
 function decfloat($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $6 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $10$hi = 0, $10 = 0, $14 = 0, $15$hi = 0, $13 = 0, $7 = 0, i64toi32_i32$0 = 0, $15 = 0, $11 = 0, $16 = 0, $22$hi = 0, $17 = 0, $19$hi = 0, $22 = 0, $12 = 0, $19 = 0, $18 = 0, $20 = 0, $23$hi = 0, $24$hi = 0, $23 = 0, $24 = 0, $8 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $180 = 0, $181 = 0, $21 = 0, $25 = 0.0, $9 = 0, $127 = 0, $224 = 0, $224$hi = 0, $228 = 0, $228$hi = 0, $230 = 0, $230$hi = 0, $234 = 0, $234$hi = 0, $244$hi = 0, $253 = 0, $253$hi = 0, $257 = 0, $257$hi = 0, $261 = 0, $261$hi = 0, $265 = 0, $265$hi = 0, $275 = 0, $275$hi = 0, $284 = 0, $284$hi = 0, $288 = 0, $288$hi = 0, $292 = 0, $292$hi = 0, $296 = 0, $296$hi = 0, $345 = 0, $345$hi = 0, $349 = 0, $349$hi = 0, $351 = 0, $351$hi = 0, $355 = 0, $355$hi = 0, $374 = 0, $374$hi = 0, $378 = 0, $378$hi = 0, $380 = 0, $380$hi = 0, $384 = 0, $384$hi = 0, $395 = 0, $395$hi = 0, $399 = 0, $399$hi = 0, $401 = 0, $401$hi = 0, $405 = 0, $405$hi = 0, $433 = 0, $433$hi = 0, $437 = 0, $437$hi = 0, $439 = 0, $439$hi = 0, $443 = 0, $443$hi = 0, $453 = 0, $453$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $502 = 0, $579$hi = 0, $581$hi = 0, $588$hi = 0, $635 = 0, $637 = 0, $731 = 0, $731$hi = 0, $735 = 0, $735$hi = 0, $737 = 0, $737$hi = 0, $741 = 0, $741$hi = 0, $760 = 0, $760$hi = 0, $764 = 0, $764$hi = 0, $806 = 0, $867 = 0, $867$hi = 0, $871 = 0, $871$hi = 0, $890 = 0, $890$hi = 0, $894 = 0, $894$hi = 0, $912 = 0, $912$hi = 0, $916 = 0, $916$hi = 0, $953 = 0, $953$hi = 0, $957 = 0, $957$hi = 0, $976 = 0, $976$hi = 0, $980 = 0, $980$hi = 0, $1003 = 0, $1003$hi = 0, $1007 = 0, $1007$hi = 0, $1023 = 0, $1023$hi = 0, $1027 = 0, $1027$hi = 0, $1041 = 0, $1041$hi = 0, $1045 = 0, $1045$hi = 0, $1066 = 0, $1066$hi = 0, $1070 = 0, $1070$hi = 0, $1093 = 0, $1093$hi = 0, $1097 = 0, $1097$hi = 0, $1103 = 0, $1103$hi = 0, $1110 = 0, $1110$hi = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $6 = __stack_pointer - 8976 | 0;
  __stack_pointer = $6;
  $7 = 0;
  $8 = $4 + $3 | 0;
  $9 = 0 - $8 | 0;
  i64toi32_i32$0 = 0;
  $10 = 0;
  $10$hi = i64toi32_i32$0;
  $11 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : while (1) {
      label$5 : {
       if (($2 | 0) == (48 | 0)) {
        break label$5
       }
       if (($2 | 0) != (46 | 0)) {
        break label$1
       }
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$3
       }
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       break label$2;
      }
      label$6 : {
       $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
       if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
        break label$6
       }
       $11 = 1;
       HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
       $2 = HEAPU8[$2 >> 0] | 0;
       continue label$4;
      }
      $11 = 1;
      $2 = __shgetc($1 | 0) | 0;
      continue label$4;
     };
    }
    $2 = __shgetc($1 | 0) | 0;
   }
   $7 = 1;
   i64toi32_i32$0 = 0;
   $10 = 0;
   $10$hi = i64toi32_i32$0;
   if (($2 | 0) != (48 | 0)) {
    break label$1
   }
   label$7 : while (1) {
    label$8 : {
     label$9 : {
      $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
      if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
       break label$9
      }
      HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
      $2 = HEAPU8[$2 >> 0] | 0;
      break label$8;
     }
     $2 = __shgetc($1 | 0) | 0;
    }
    i64toi32_i32$0 = $10$hi;
    i64toi32_i32$2 = $10;
    i64toi32_i32$1 = -1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $10 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$5;
    if (($2 | 0) == (48 | 0)) {
     continue label$7
    }
    break label$7;
   };
   $11 = 1;
   $7 = 1;
  }
  $12 = 0;
  HEAP32[($6 + 784 | 0) >> 2] = 0;
  $13 = $2 + -48 | 0;
  label$10 : {
   label$11 : {
    label$12 : {
     label$13 : {
      label$14 : {
       label$15 : {
        label$16 : {
         label$17 : {
          $14 = ($2 | 0) == (46 | 0);
          if ($14) {
           break label$17
          }
          i64toi32_i32$5 = 0;
          $15 = 0;
          $15$hi = i64toi32_i32$5;
          if ($13 >>> 0 <= 9 >>> 0) {
           break label$17
          }
          $16 = 0;
          $17 = 0;
          break label$16;
         }
         i64toi32_i32$5 = 0;
         $15 = 0;
         $15$hi = i64toi32_i32$5;
         $17 = 0;
         $16 = 0;
         $12 = 0;
         label$18 : while (1) {
          label$19 : {
           label$20 : {
            if (!($14 & 1 | 0)) {
             break label$20
            }
            label$21 : {
             if ($7) {
              break label$21
             }
             i64toi32_i32$5 = $15$hi;
             $10 = $15;
             $10$hi = i64toi32_i32$5;
             $7 = 1;
             break label$19;
            }
            $14 = !$11;
            break label$15;
           }
           i64toi32_i32$5 = $15$hi;
           i64toi32_i32$0 = $15;
           i64toi32_i32$2 = 0;
           i64toi32_i32$3 = 1;
           i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
           i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
           if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
            i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
           }
           $15 = i64toi32_i32$1;
           $15$hi = i64toi32_i32$4;
           label$22 : {
            if (($16 | 0) > (2044 | 0)) {
             break label$22
            }
            $11 = ($2 | 0) == (48 | 0);
            i64toi32_i32$4 = $15$hi;
            $18 = $15;
            $14 = ($6 + 784 | 0) + ($16 << 2 | 0) | 0;
            label$23 : {
             if (!$17) {
              break label$23
             }
             $13 = ($2 + Math_imul(HEAP32[$14 >> 2] | 0, 10) | 0) + -48 | 0;
            }
            $12 = $11 ? $12 : $18;
            HEAP32[$14 >> 2] = $13;
            $11 = 1;
            $2 = $17 + 1 | 0;
            $127 = $2;
            $2 = ($2 | 0) == (9 | 0);
            $17 = $2 ? 0 : $127;
            $16 = $16 + $2 | 0;
            break label$19;
           }
           if (($2 | 0) == (48 | 0)) {
            break label$19
           }
           HEAP32[($6 + 8960 | 0) >> 2] = HEAP32[($6 + 8960 | 0) >> 2] | 0 | 1 | 0;
           $12 = 18396;
          }
          label$24 : {
           label$25 : {
            $2 = HEAP32[($1 + 4 | 0) >> 2] | 0;
            if (($2 | 0) == (HEAP32[($1 + 104 | 0) >> 2] | 0 | 0)) {
             break label$25
            }
            HEAP32[($1 + 4 | 0) >> 2] = $2 + 1 | 0;
            $2 = HEAPU8[$2 >> 0] | 0;
            break label$24;
           }
           $2 = __shgetc($1 | 0) | 0;
          }
          $13 = $2 + -48 | 0;
          $14 = ($2 | 0) == (46 | 0);
          if ($14) {
           continue label$18
          }
          if ($13 >>> 0 < 10 >>> 0) {
           continue label$18
          }
          break label$18;
         };
        }
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$4 = $15$hi;
        i64toi32_i32$2 = $7;
        i64toi32_i32$4 = $10$hi;
        i64toi32_i32$0 = $15$hi;
        i64toi32_i32$3 = i64toi32_i32$2 ? $10 : $15;
        i64toi32_i32$5 = i64toi32_i32$2 ? i64toi32_i32$4 : i64toi32_i32$0;
        $10 = i64toi32_i32$3;
        $10$hi = i64toi32_i32$5;
        label$26 : {
         if (!$11) {
          break label$26
         }
         if (($2 & -33 | 0 | 0) != (69 | 0)) {
          break label$26
         }
         i64toi32_i32$5 = scanexp($1 | 0) | 0;
         i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
         $19 = i64toi32_i32$5;
         $19$hi = i64toi32_i32$3;
         i64toi32_i32$2 = i64toi32_i32$5;
         i64toi32_i32$5 = -2147483648;
         i64toi32_i32$4 = 0;
         if ((i64toi32_i32$2 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) | 0) {
          break label$11
         }
         if (!$11) {
          break label$13
         }
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$2 = $10$hi;
         i64toi32_i32$2 = $19$hi;
         i64toi32_i32$4 = $19;
         i64toi32_i32$3 = $10$hi;
         i64toi32_i32$5 = $10;
         i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
         i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
         if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
          i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
         }
         $10 = i64toi32_i32$0;
         $10$hi = i64toi32_i32$1;
         break label$12;
        }
        $14 = !$11;
        if (($2 | 0) < (0 | 0)) {
         break label$14
        }
       }
       i64toi32_i32$2 = $1;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 112 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 116 | 0) >> 2] | 0;
       i64toi32_i32$2 = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$5 = 0;
       if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
        $169 = 1
       } else {
        if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$5 >>> 0) {
          $170 = 0
         } else {
          $170 = 1
         }
         $171 = $170;
        } else {
         $171 = 0
        }
        $169 = $171;
       }
       if ($169) {
        break label$14
       }
       HEAP32[($1 + 4 | 0) >> 2] = (HEAP32[($1 + 4 | 0) >> 2] | 0) + -1 | 0;
      }
      if (!$14) {
       break label$12
      }
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 28), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     break label$11;
    }
    label$27 : {
     $1 = HEAP32[($6 + 784 | 0) >> 2] | 0;
     if ($1) {
      break label$27
     }
     __extenddftf2($6 | 0, +(+($5 | 0) * 0.0));
     i64toi32_i32$5 = $6 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $6;
     i64toi32_i32$4 = HEAP32[$6 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 4 | 0) >> 2] | 0;
     $10 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    label$28 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$5 = $15;
     i64toi32_i32$4 = 0;
     i64toi32_i32$1 = 9;
     if ((i64toi32_i32$2 | 0) > (i64toi32_i32$4 | 0)) {
      $172 = 1
     } else {
      if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$5 >>> 0 <= i64toi32_i32$1 >>> 0) {
        $173 = 0
       } else {
        $173 = 1
       }
       $174 = $173;
      } else {
       $174 = 0
      }
      $172 = $174;
     }
     if ($172) {
      break label$28
     }
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$4 = $15;
     if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$28
     }
     label$29 : {
      if (($3 | 0) > (30 | 0)) {
       break label$29
      }
      if ($1 >>> $3 | 0) {
       break label$28
      }
     }
     __floatsitf($6 + 48 | 0 | 0, $5 | 0);
     __floatunsitf($6 + 32 | 0 | 0, $1 | 0);
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 48 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 52 | 0) >> 2] | 0;
     $224 = i64toi32_i32$1;
     $224$hi = i64toi32_i32$5;
     i64toi32_i32$4 = (i64toi32_i32$4 + 48 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $228 = i64toi32_i32$5;
     $228$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 36 | 0) >> 2] | 0;
     $230 = i64toi32_i32$1;
     $230$hi = i64toi32_i32$5;
     i64toi32_i32$4 = (i64toi32_i32$4 + 32 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $234 = i64toi32_i32$5;
     $234$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $224$hi;
     i64toi32_i32$5 = $228$hi;
     i64toi32_i32$4 = $230$hi;
     i64toi32_i32$2 = $234$hi;
     __multf3($6 + 16 | 0 | 0, $224 | 0, i64toi32_i32$1 | 0, $228 | 0, i64toi32_i32$5 | 0, $230 | 0, i64toi32_i32$4 | 0, $234 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = ($6 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $6;
     i64toi32_i32$4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 20 | 0) >> 2] | 0;
     $10 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    label$30 : {
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = 0;
     $244$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$5 = $10;
     i64toi32_i32$4 = $244$hi;
     i64toi32_i32$1 = ($4 | 0) / (-2 | 0) | 0;
     if ((i64toi32_i32$2 | 0) < (i64toi32_i32$4 | 0)) {
      $175 = 1
     } else {
      if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$4 | 0)) {
       if (i64toi32_i32$5 >>> 0 > i64toi32_i32$1 >>> 0) {
        $176 = 0
       } else {
        $176 = 1
       }
       $177 = $176;
      } else {
       $177 = 0
      }
      $175 = $177;
     }
     if ($175) {
      break label$30
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 96 | 0 | 0, $5 | 0);
     i64toi32_i32$1 = $6;
     i64toi32_i32$5 = HEAP32[($6 + 96 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 100 | 0) >> 2] | 0;
     $253 = i64toi32_i32$5;
     $253$hi = i64toi32_i32$2;
     i64toi32_i32$1 = ($6 + 96 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $257 = i64toi32_i32$2;
     $257$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $253$hi;
     i64toi32_i32$2 = $257$hi;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = 2147418111;
     __multf3($6 + 80 | 0 | 0, $253 | 0, i64toi32_i32$5 | 0, $257 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$2 = $6;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 80 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 84 | 0) >> 2] | 0;
     $261 = i64toi32_i32$4;
     $261$hi = i64toi32_i32$1;
     i64toi32_i32$2 = (i64toi32_i32$2 + 80 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $265 = i64toi32_i32$1;
     $265$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $261$hi;
     i64toi32_i32$1 = $265$hi;
     i64toi32_i32$2 = -1;
     i64toi32_i32$5 = 2147418111;
     __multf3($6 + 64 | 0 | 0, $261 | 0, i64toi32_i32$4 | 0, $265 | 0, i64toi32_i32$1 | 0, -1 | 0, i64toi32_i32$2 | 0, -1 | 0, i64toi32_i32$5 | 0);
     i64toi32_i32$1 = ($6 + 64 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$5;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 64 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[($6 + 68 | 0) >> 2] | 0;
     $10 = i64toi32_i32$2;
     $10$hi = i64toi32_i32$5;
     break label$10;
    }
    label$31 : {
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$2 = $4 + -226 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 >> 31 | 0;
     $275 = i64toi32_i32$2;
     $275$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$1 = $10;
     i64toi32_i32$2 = $275$hi;
     i64toi32_i32$4 = $275;
     if ((i64toi32_i32$5 | 0) > (i64toi32_i32$2 | 0)) {
      $178 = 1
     } else {
      if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0) {
        $179 = 0
       } else {
        $179 = 1
       }
       $180 = $179;
      } else {
       $180 = 0
      }
      $178 = $180;
     }
     if ($178) {
      break label$31
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
     __floatsitf($6 + 144 | 0 | 0, $5 | 0);
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 144 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 148 | 0) >> 2] | 0;
     $284 = i64toi32_i32$1;
     $284$hi = i64toi32_i32$5;
     i64toi32_i32$4 = (i64toi32_i32$4 + 144 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $288 = i64toi32_i32$5;
     $288$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $284$hi;
     i64toi32_i32$5 = $288$hi;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 65536;
     __multf3($6 + 128 | 0 | 0, $284 | 0, i64toi32_i32$1 | 0, $288 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 128 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($6 + 132 | 0) >> 2] | 0;
     $292 = i64toi32_i32$2;
     $292$hi = i64toi32_i32$4;
     i64toi32_i32$5 = ($6 + 128 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $296 = i64toi32_i32$4;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $292$hi;
     i64toi32_i32$4 = $296$hi;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 65536;
     __multf3($6 + 112 | 0 | 0, $292 | 0, i64toi32_i32$2 | 0, $296 | 0, i64toi32_i32$4 | 0, 0 | 0, i64toi32_i32$5 | 0, 0 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$4 = ($6 + 112 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$1;
     $15$hi = i64toi32_i32$5;
     i64toi32_i32$4 = $6;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 112 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 116 | 0) >> 2] | 0;
     $10 = i64toi32_i32$5;
     $10$hi = i64toi32_i32$1;
     break label$10;
    }
    label$32 : {
     if (!$17) {
      break label$32
     }
     label$33 : {
      if (($17 | 0) > (8 | 0)) {
       break label$33
      }
      $2 = ($6 + 784 | 0) + ($16 << 2 | 0) | 0;
      $1 = HEAP32[$2 >> 2] | 0;
      label$34 : while (1) {
       $1 = Math_imul($1, 10);
       $17 = $17 + 1 | 0;
       if (($17 | 0) != (9 | 0)) {
        continue label$34
       }
       break label$34;
      };
      HEAP32[$2 >> 2] = $1;
     }
     $16 = $16 + 1 | 0;
    }
    i64toi32_i32$1 = $10$hi;
    $7 = $10;
    label$35 : {
     if (($12 | 0) > (8 | 0)) {
      break label$35
     }
     if (($12 | 0) > ($7 | 0)) {
      break label$35
     }
     if (($7 | 0) > (17 | 0)) {
      break label$35
     }
     label$36 : {
      if (($7 | 0) != (9 | 0)) {
       break label$36
      }
      __floatsitf($6 + 192 | 0 | 0, $5 | 0);
      __floatunsitf($6 + 176 | 0 | 0, HEAP32[($6 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 192 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 196 | 0) >> 2] | 0;
      $345 = i64toi32_i32$1;
      $345$hi = i64toi32_i32$5;
      i64toi32_i32$4 = (i64toi32_i32$4 + 192 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $349 = i64toi32_i32$5;
      $349$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 176 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 180 | 0) >> 2] | 0;
      $351 = i64toi32_i32$1;
      $351$hi = i64toi32_i32$5;
      i64toi32_i32$4 = (i64toi32_i32$4 + 176 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $355 = i64toi32_i32$5;
      $355$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $345$hi;
      i64toi32_i32$5 = $349$hi;
      i64toi32_i32$4 = $351$hi;
      i64toi32_i32$2 = $355$hi;
      __multf3($6 + 160 | 0 | 0, $345 | 0, i64toi32_i32$1 | 0, $349 | 0, i64toi32_i32$5 | 0, $351 | 0, i64toi32_i32$4 | 0, $355 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$5 = ($6 + 160 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $6;
      i64toi32_i32$4 = HEAP32[($6 + 160 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6 + 164 | 0) >> 2] | 0;
      $10 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$2;
      break label$10;
     }
     label$37 : {
      if (($7 | 0) > (8 | 0)) {
       break label$37
      }
      __floatsitf($6 + 272 | 0 | 0, $5 | 0);
      __floatunsitf($6 + 256 | 0 | 0, HEAP32[($6 + 784 | 0) >> 2] | 0 | 0);
      i64toi32_i32$5 = $6;
      i64toi32_i32$2 = HEAP32[($6 + 272 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($6 + 276 | 0) >> 2] | 0;
      $374 = i64toi32_i32$2;
      $374$hi = i64toi32_i32$4;
      i64toi32_i32$5 = ($6 + 272 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $378 = i64toi32_i32$4;
      $378$hi = i64toi32_i32$2;
      i64toi32_i32$5 = $6;
      i64toi32_i32$2 = HEAP32[($6 + 256 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($6 + 260 | 0) >> 2] | 0;
      $380 = i64toi32_i32$2;
      $380$hi = i64toi32_i32$4;
      i64toi32_i32$5 = ($6 + 256 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $384 = i64toi32_i32$4;
      $384$hi = i64toi32_i32$2;
      i64toi32_i32$2 = $374$hi;
      i64toi32_i32$4 = $378$hi;
      i64toi32_i32$5 = $380$hi;
      i64toi32_i32$1 = $384$hi;
      __multf3($6 + 240 | 0 | 0, $374 | 0, i64toi32_i32$2 | 0, $378 | 0, i64toi32_i32$4 | 0, $380 | 0, i64toi32_i32$5 | 0, $384 | 0, i64toi32_i32$1 | 0);
      __floatsitf($6 + 224 | 0 | 0, HEAP32[(((8 - $7 | 0) << 2 | 0) + 157824 | 0) >> 2] | 0 | 0);
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 240 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 244 | 0) >> 2] | 0;
      $395 = i64toi32_i32$1;
      $395$hi = i64toi32_i32$5;
      i64toi32_i32$4 = (i64toi32_i32$4 + 240 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $399 = i64toi32_i32$5;
      $399$hi = i64toi32_i32$1;
      i64toi32_i32$4 = $6;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 224 | 0) >> 2] | 0;
      i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 228 | 0) >> 2] | 0;
      $401 = i64toi32_i32$1;
      $401$hi = i64toi32_i32$5;
      i64toi32_i32$4 = (i64toi32_i32$4 + 224 | 0) + 8 | 0;
      i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
      $405 = i64toi32_i32$5;
      $405$hi = i64toi32_i32$1;
      i64toi32_i32$1 = $395$hi;
      i64toi32_i32$5 = $399$hi;
      i64toi32_i32$4 = $401$hi;
      i64toi32_i32$2 = $405$hi;
      __divtf3($6 + 208 | 0 | 0, $395 | 0, i64toi32_i32$1 | 0, $399 | 0, i64toi32_i32$5 | 0, $401 | 0, i64toi32_i32$4 | 0, $405 | 0, i64toi32_i32$2 | 0);
      i64toi32_i32$5 = ($6 + 208 | 0) + 8 | 0;
      i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
      i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
      $15 = i64toi32_i32$2;
      $15$hi = i64toi32_i32$4;
      i64toi32_i32$5 = $6;
      i64toi32_i32$4 = HEAP32[($6 + 208 | 0) >> 2] | 0;
      i64toi32_i32$2 = HEAP32[($6 + 212 | 0) >> 2] | 0;
      $10 = i64toi32_i32$4;
      $10$hi = i64toi32_i32$2;
      break label$10;
     }
     $1 = HEAP32[($6 + 784 | 0) >> 2] | 0;
     label$38 : {
      $2 = ($3 + Math_imul($7, -3) | 0) + 27 | 0;
      if (($2 | 0) > (30 | 0)) {
       break label$38
      }
      if ($1 >>> $2 | 0) {
       break label$35
      }
     }
     __floatsitf($6 + 352 | 0 | 0, $5 | 0);
     __floatunsitf($6 + 336 | 0 | 0, $1 | 0);
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 352 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($6 + 356 | 0) >> 2] | 0;
     $433 = i64toi32_i32$2;
     $433$hi = i64toi32_i32$4;
     i64toi32_i32$5 = ($6 + 352 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $437 = i64toi32_i32$4;
     $437$hi = i64toi32_i32$2;
     i64toi32_i32$5 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 336 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($6 + 340 | 0) >> 2] | 0;
     $439 = i64toi32_i32$2;
     $439$hi = i64toi32_i32$4;
     i64toi32_i32$5 = ($6 + 336 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $443 = i64toi32_i32$4;
     $443$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $433$hi;
     i64toi32_i32$4 = $437$hi;
     i64toi32_i32$5 = $439$hi;
     i64toi32_i32$1 = $443$hi;
     __multf3($6 + 320 | 0 | 0, $433 | 0, i64toi32_i32$2 | 0, $437 | 0, i64toi32_i32$4 | 0, $439 | 0, i64toi32_i32$5 | 0, $443 | 0, i64toi32_i32$1 | 0);
     __floatsitf($6 + 304 | 0 | 0, HEAP32[(($7 << 2 | 0) + 157784 | 0) >> 2] | 0 | 0);
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 320 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 324 | 0) >> 2] | 0;
     $453 = i64toi32_i32$1;
     $453$hi = i64toi32_i32$5;
     i64toi32_i32$4 = (i64toi32_i32$4 + 320 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $457 = i64toi32_i32$5;
     $457$hi = i64toi32_i32$1;
     i64toi32_i32$4 = $6;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 304 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 308 | 0) >> 2] | 0;
     $459 = i64toi32_i32$1;
     $459$hi = i64toi32_i32$5;
     i64toi32_i32$4 = (i64toi32_i32$4 + 304 | 0) + 8 | 0;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$5;
     $463$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $453$hi;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$4 = $459$hi;
     i64toi32_i32$2 = $463$hi;
     __multf3($6 + 288 | 0 | 0, $453 | 0, i64toi32_i32$1 | 0, $457 | 0, i64toi32_i32$5 | 0, $459 | 0, i64toi32_i32$4 | 0, $463 | 0, i64toi32_i32$2 | 0);
     i64toi32_i32$5 = ($6 + 288 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$2;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $6;
     i64toi32_i32$4 = HEAP32[($6 + 288 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 292 | 0) >> 2] | 0;
     $10 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$2;
     break label$10;
    }
    label$39 : while (1) {
     $2 = $16;
     $16 = $2 + -1 | 0;
     if (!(HEAP32[(($6 + 784 | 0) + ($16 << 2 | 0) | 0) >> 2] | 0)) {
      continue label$39
     }
     break label$39;
    };
    label$40 : {
     label$41 : {
      $1 = ($7 | 0) % (9 | 0) | 0;
      if ($1) {
       break label$41
      }
      $17 = 0;
      $14 = 0;
      break label$40;
     }
     $17 = 0;
     $20 = ($7 | 0) < (0 | 0) ? $1 + 9 | 0 : $1;
     label$42 : {
      label$43 : {
       if ($2) {
        break label$43
       }
       $14 = 0;
       $2 = 0;
       break label$42;
      }
      $11 = HEAP32[(((8 - $20 | 0) << 2 | 0) + 157824 | 0) >> 2] | 0;
      $18 = (1e9 | 0) / ($11 | 0) | 0;
      $13 = 0;
      $1 = 0;
      $14 = 0;
      label$44 : while (1) {
       $16 = ($6 + 784 | 0) + ($1 << 2 | 0) | 0;
       $502 = $16;
       $16 = HEAP32[$16 >> 2] | 0;
       $12 = ($16 >>> 0) / ($11 >>> 0) | 0;
       $13 = $12 + $13 | 0;
       HEAP32[$502 >> 2] = $13;
       $13 = ($1 | 0) == ($14 | 0) & !$13 | 0;
       $14 = $13 ? ($14 + 1 | 0) & 2047 | 0 : $14;
       $7 = $13 ? $7 + -9 | 0 : $7;
       $13 = Math_imul($18, $16 - Math_imul($12, $11) | 0);
       $1 = $1 + 1 | 0;
       if (($1 | 0) != ($2 | 0)) {
        continue label$44
       }
       break label$44;
      };
      if (!$13) {
       break label$42
      }
      HEAP32[(($6 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $13;
      $2 = $2 + 1 | 0;
     }
     $7 = ($7 - $20 | 0) + 9 | 0;
    }
    label$45 : while (1) {
     $18 = ($6 + 784 | 0) + ($14 << 2 | 0) | 0;
     $12 = ($7 | 0) < (36 | 0);
     label$46 : {
      label$47 : while (1) {
       label$48 : {
        if ($12) {
         break label$48
        }
        if (($7 | 0) != (36 | 0)) {
         break label$46
        }
        if ((HEAP32[$18 >> 2] | 0) >>> 0 <= 10384592 >>> 0) {
         break label$48
        }
        $7 = 36;
        break label$46;
       }
       $11 = $2 + 2047 | 0;
       $13 = 0;
       label$49 : while (1) {
        label$50 : {
         label$51 : {
          $1 = $11 & 2047 | 0;
          $11 = ($6 + 784 | 0) + ($1 << 2 | 0) | 0;
          i64toi32_i32$5 = $11;
          i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
          i64toi32_i32$4 = 0;
          i64toi32_i32$5 = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = 29;
          i64toi32_i32$3 = i64toi32_i32$1 & 31 | 0;
          if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
           i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
           $181 = 0;
          } else {
           i64toi32_i32$2 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
           $181 = i64toi32_i32$5 << i64toi32_i32$3 | 0;
          }
          $579$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $581$hi = i64toi32_i32$2;
          i64toi32_i32$2 = $579$hi;
          i64toi32_i32$4 = $181;
          i64toi32_i32$5 = $581$hi;
          i64toi32_i32$1 = $13;
          i64toi32_i32$3 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
          i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$5 | 0;
          if (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) {
           i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
          }
          $10 = i64toi32_i32$3;
          $10$hi = i64toi32_i32$0;
          i64toi32_i32$2 = i64toi32_i32$3;
          i64toi32_i32$4 = 0;
          i64toi32_i32$1 = 1000000001;
          if (i64toi32_i32$0 >>> 0 > i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0 | 0) | 0) {
           break label$51
          }
          $13 = 0;
          break label$50;
         }
         i64toi32_i32$2 = $10$hi;
         i64toi32_i32$0 = 0;
         i64toi32_i32$0 = __wasm_i64_udiv($10 | 0, i64toi32_i32$2 | 0, 1e9 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
         $15 = i64toi32_i32$0;
         $15$hi = i64toi32_i32$2;
         i64toi32_i32$0 = -1;
         i64toi32_i32$0 = __wasm_i64_mul($15 | 0, i64toi32_i32$2 | 0, -1e9 | 0, i64toi32_i32$0 | 0) | 0;
         i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
         $588$hi = i64toi32_i32$2;
         i64toi32_i32$2 = $10$hi;
         i64toi32_i32$2 = $588$hi;
         i64toi32_i32$1 = i64toi32_i32$0;
         i64toi32_i32$0 = $10$hi;
         i64toi32_i32$4 = $10;
         i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
         i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
         if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
          i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
         }
         $10 = i64toi32_i32$5;
         $10$hi = i64toi32_i32$3;
         i64toi32_i32$3 = $15$hi;
         $13 = $15;
        }
        i64toi32_i32$3 = $10$hi;
        $16 = $10;
        HEAP32[$11 >> 2] = $10;
        $2 = ($1 | 0) != (($2 + -1 | 0) & 2047 | 0 | 0) ? $2 : ($1 | 0) == ($14 | 0) ? $2 : $10 ? $2 : $1;
        $11 = $1 + -1 | 0;
        if (($1 | 0) != ($14 | 0)) {
         continue label$49
        }
        break label$49;
       };
       $17 = $17 + -29 | 0;
       if (!$13) {
        continue label$47
       }
       break label$47;
      };
      label$52 : {
       $14 = ($14 + -1 | 0) & 2047 | 0;
       if (($14 | 0) != ($2 | 0)) {
        break label$52
       }
       $1 = ($6 + 784 | 0) + ((($2 + 2046 | 0) & 2047 | 0) << 2 | 0) | 0;
       $635 = $1;
       $637 = HEAP32[$1 >> 2] | 0;
       $1 = ($2 + -1 | 0) & 2047 | 0;
       HEAP32[$635 >> 2] = $637 | (HEAP32[(($6 + 784 | 0) + ($1 << 2 | 0) | 0) >> 2] | 0) | 0;
       $2 = $1;
      }
      $7 = $7 + 9 | 0;
      HEAP32[(($6 + 784 | 0) + ($14 << 2 | 0) | 0) >> 2] = $13;
      continue label$45;
     }
     break label$45;
    };
    label$53 : {
     label$54 : while (1) {
      $21 = ($2 + 1 | 0) & 2047 | 0;
      $20 = ($6 + 784 | 0) + ((($2 + -1 | 0) & 2047 | 0) << 2 | 0) | 0;
      label$55 : while (1) {
       $16 = ($7 | 0) > (45 | 0) ? 9 : 1;
       label$56 : {
        label$57 : while (1) {
         $11 = $14;
         $1 = 0;
         label$58 : {
          label$59 : {
           label$60 : while (1) {
            $14 = ($1 + $11 | 0) & 2047 | 0;
            if (($14 | 0) == ($2 | 0)) {
             break label$59
            }
            $14 = HEAP32[(($6 + 784 | 0) + ($14 << 2 | 0) | 0) >> 2] | 0;
            $13 = HEAP32[(($1 << 2 | 0) + 157808 | 0) >> 2] | 0;
            if ($14 >>> 0 < $13 >>> 0) {
             break label$59
            }
            if ($14 >>> 0 > $13 >>> 0) {
             break label$58
            }
            $1 = $1 + 1 | 0;
            if (($1 | 0) != (4 | 0)) {
             continue label$60
            }
            break label$60;
           };
          }
          if (($7 | 0) != (36 | 0)) {
           break label$58
          }
          i64toi32_i32$3 = 0;
          $10 = 0;
          $10$hi = i64toi32_i32$3;
          $1 = 0;
          i64toi32_i32$3 = 0;
          $15 = 0;
          $15$hi = i64toi32_i32$3;
          label$61 : while (1) {
           label$62 : {
            $14 = ($1 + $11 | 0) & 2047 | 0;
            if (($14 | 0) != ($2 | 0)) {
             break label$62
            }
            $2 = ($2 + 1 | 0) & 2047 | 0;
            HEAP32[((($2 << 2 | 0) + ($6 + 784 | 0) | 0) + -4 | 0) >> 2] = 0;
           }
           __floatunsitf($6 + 768 | 0 | 0, HEAP32[(($6 + 784 | 0) + ($14 << 2 | 0) | 0) >> 2] | 0 | 0);
           i64toi32_i32$3 = $10$hi;
           i64toi32_i32$3 = $15$hi;
           i64toi32_i32$3 = $10$hi;
           i64toi32_i32$1 = $15$hi;
           i64toi32_i32$2 = 0;
           i64toi32_i32$4 = 1075633366;
           __multf3($6 + 752 | 0 | 0, $10 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 1342177280 | 0, i64toi32_i32$4 | 0);
           i64toi32_i32$1 = $6;
           i64toi32_i32$4 = HEAP32[($6 + 752 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($6 + 756 | 0) >> 2] | 0;
           $731 = i64toi32_i32$4;
           $731$hi = i64toi32_i32$2;
           i64toi32_i32$1 = ($6 + 752 | 0) + 8 | 0;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           $735 = i64toi32_i32$2;
           $735$hi = i64toi32_i32$4;
           i64toi32_i32$1 = $6;
           i64toi32_i32$4 = HEAP32[($6 + 768 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($6 + 772 | 0) >> 2] | 0;
           $737 = i64toi32_i32$4;
           $737$hi = i64toi32_i32$2;
           i64toi32_i32$1 = ($6 + 768 | 0) + 8 | 0;
           i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
           i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
           $741 = i64toi32_i32$2;
           $741$hi = i64toi32_i32$4;
           i64toi32_i32$4 = $731$hi;
           i64toi32_i32$2 = $735$hi;
           i64toi32_i32$1 = $737$hi;
           i64toi32_i32$3 = $741$hi;
           __addtf3($6 + 736 | 0 | 0, $731 | 0, i64toi32_i32$4 | 0, $735 | 0, i64toi32_i32$2 | 0, $737 | 0, i64toi32_i32$1 | 0, $741 | 0, i64toi32_i32$3 | 0);
           i64toi32_i32$2 = ($6 + 736 | 0) + 8 | 0;
           i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
           i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
           $15 = i64toi32_i32$3;
           $15$hi = i64toi32_i32$1;
           i64toi32_i32$2 = $6;
           i64toi32_i32$1 = HEAP32[($6 + 736 | 0) >> 2] | 0;
           i64toi32_i32$3 = HEAP32[($6 + 740 | 0) >> 2] | 0;
           $10 = i64toi32_i32$1;
           $10$hi = i64toi32_i32$3;
           $1 = $1 + 1 | 0;
           if (($1 | 0) != (4 | 0)) {
            continue label$61
           }
           break label$61;
          };
          __floatsitf($6 + 720 | 0 | 0, $5 | 0);
          i64toi32_i32$3 = $10$hi;
          i64toi32_i32$3 = $15$hi;
          i64toi32_i32$2 = $6;
          i64toi32_i32$3 = HEAP32[($6 + 720 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[($6 + 724 | 0) >> 2] | 0;
          $760 = i64toi32_i32$3;
          $760$hi = i64toi32_i32$1;
          i64toi32_i32$2 = ($6 + 720 | 0) + 8 | 0;
          i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
          i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
          $764 = i64toi32_i32$1;
          $764$hi = i64toi32_i32$3;
          i64toi32_i32$3 = $10$hi;
          i64toi32_i32$1 = $15$hi;
          i64toi32_i32$2 = $760$hi;
          i64toi32_i32$4 = $764$hi;
          __multf3($6 + 704 | 0 | 0, $10 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0, $760 | 0, i64toi32_i32$2 | 0, $764 | 0, i64toi32_i32$4 | 0);
          i64toi32_i32$1 = ($6 + 704 | 0) + 8 | 0;
          i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
          i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
          $15 = i64toi32_i32$4;
          $15$hi = i64toi32_i32$2;
          i64toi32_i32$2 = 0;
          $10 = 0;
          $10$hi = i64toi32_i32$2;
          i64toi32_i32$1 = $6;
          i64toi32_i32$2 = HEAP32[($6 + 704 | 0) >> 2] | 0;
          i64toi32_i32$4 = HEAP32[($6 + 708 | 0) >> 2] | 0;
          $19 = i64toi32_i32$2;
          $19$hi = i64toi32_i32$4;
          $13 = $17 + 113 | 0;
          $1 = $13 - $4 | 0;
          $16 = ($1 | 0) < ($3 | 0);
          $14 = $16 ? (($1 | 0) > (0 | 0) ? $1 : 0) : $3;
          if (($14 | 0) <= (112 | 0)) {
           break label$56
          }
          i64toi32_i32$4 = 0;
          $22 = 0;
          $22$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          $23 = 0;
          $23$hi = i64toi32_i32$4;
          i64toi32_i32$4 = 0;
          $24 = 0;
          $24$hi = i64toi32_i32$4;
          break label$53;
         }
         $17 = $16 + $17 | 0;
         $14 = $2;
         if (($11 | 0) == ($2 | 0)) {
          continue label$57
         }
         break label$57;
        };
        $12 = 1e9 >>> $16 | 0;
        $18 = (-1 << $16 | 0) ^ -1 | 0;
        $1 = 0;
        $14 = $11;
        label$63 : while (1) {
         $13 = ($6 + 784 | 0) + ($11 << 2 | 0) | 0;
         $806 = $13;
         $13 = HEAP32[$13 >> 2] | 0;
         $1 = ($13 >>> $16 | 0) + $1 | 0;
         HEAP32[$806 >> 2] = $1;
         $1 = ($11 | 0) == ($14 | 0) & !$1 | 0;
         $14 = $1 ? ($14 + 1 | 0) & 2047 | 0 : $14;
         $7 = $1 ? $7 + -9 | 0 : $7;
         $1 = Math_imul($13 & $18 | 0, $12);
         $11 = ($11 + 1 | 0) & 2047 | 0;
         if (($11 | 0) != ($2 | 0)) {
          continue label$63
         }
         break label$63;
        };
        if (!$1) {
         continue label$55
        }
        label$64 : {
         if (($21 | 0) == ($14 | 0)) {
          break label$64
         }
         HEAP32[(($6 + 784 | 0) + ($2 << 2 | 0) | 0) >> 2] = $1;
         $2 = $21;
         continue label$54;
        }
        HEAP32[$20 >> 2] = HEAP32[$20 >> 2] | 0 | 1 | 0;
        continue label$55;
       }
       break label$55;
      };
      break label$54;
     };
     __extenddftf2($6 + 656 | 0 | 0, +(+scalbn(+(1.0), 225 - $14 | 0 | 0)));
     i64toi32_i32$1 = $6;
     i64toi32_i32$4 = HEAP32[($6 + 656 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 660 | 0) >> 2] | 0;
     $867 = i64toi32_i32$4;
     $867$hi = i64toi32_i32$2;
     i64toi32_i32$1 = ($6 + 656 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $871 = i64toi32_i32$2;
     $871$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$4 = $15$hi;
     i64toi32_i32$4 = $867$hi;
     i64toi32_i32$2 = $871$hi;
     i64toi32_i32$1 = $19$hi;
     i64toi32_i32$3 = $15$hi;
     copysignl($6 + 688 | 0 | 0, $867 | 0, i64toi32_i32$4 | 0, $871 | 0, i64toi32_i32$2 | 0, $19 | 0, i64toi32_i32$1 | 0, $15 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$2 = ($6 + 688 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $24 = i64toi32_i32$3;
     $24$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = HEAP32[($6 + 688 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($6 + 692 | 0) >> 2] | 0;
     $23 = i64toi32_i32$1;
     $23$hi = i64toi32_i32$3;
     __extenddftf2($6 + 640 | 0 | 0, +(+scalbn(+(1.0), 113 - $14 | 0 | 0)));
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$3 = HEAP32[($6 + 640 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6 + 644 | 0) >> 2] | 0;
     $890 = i64toi32_i32$3;
     $890$hi = i64toi32_i32$1;
     i64toi32_i32$2 = ($6 + 640 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $894 = i64toi32_i32$1;
     $894$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$2 = $890$hi;
     i64toi32_i32$4 = $894$hi;
     fmodl($6 + 672 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0, $890 | 0, i64toi32_i32$2 | 0, $894 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$1;
     i64toi32_i32$1 = $6;
     i64toi32_i32$4 = HEAP32[($6 + 672 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 676 | 0) >> 2] | 0;
     $10 = i64toi32_i32$4;
     $10$hi = i64toi32_i32$2;
     i64toi32_i32$1 = ($6 + 672 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$2;
     $22$hi = i64toi32_i32$4;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$3 = $22$hi;
     __subtf3($6 + 624 | 0 | 0, $19 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$2 | 0, $10 | 0, i64toi32_i32$1 | 0, $22 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$3 = $24$hi;
     i64toi32_i32$2 = $6;
     i64toi32_i32$3 = HEAP32[($6 + 624 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6 + 628 | 0) >> 2] | 0;
     $912 = i64toi32_i32$3;
     $912$hi = i64toi32_i32$1;
     i64toi32_i32$2 = ($6 + 624 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $916 = i64toi32_i32$1;
     $916$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $23$hi;
     i64toi32_i32$1 = $24$hi;
     i64toi32_i32$2 = $912$hi;
     i64toi32_i32$4 = $916$hi;
     __addtf3($6 + 608 | 0 | 0, $23 | 0, i64toi32_i32$3 | 0, $24 | 0, i64toi32_i32$1 | 0, $912 | 0, i64toi32_i32$2 | 0, $916 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$1 = ($6 + 608 | 0) + 8 | 0;
     i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $15 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$1 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 608 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($6 + 612 | 0) >> 2] | 0;
     $19 = i64toi32_i32$2;
     $19$hi = i64toi32_i32$4;
    }
    label$65 : {
     $7 = ($11 + 4 | 0) & 2047 | 0;
     if (($7 | 0) == ($2 | 0)) {
      break label$65
     }
     label$66 : {
      label$67 : {
       $7 = HEAP32[(($6 + 784 | 0) + ($7 << 2 | 0) | 0) >> 2] | 0;
       if ($7 >>> 0 > 499999999 >>> 0) {
        break label$67
       }
       label$68 : {
        if ($7) {
         break label$68
        }
        if ((($11 + 5 | 0) & 2047 | 0 | 0) == ($2 | 0)) {
         break label$66
        }
       }
       __extenddftf2($6 + 496 | 0 | 0, +(+($5 | 0) * .25));
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$1 = $6;
       i64toi32_i32$4 = HEAP32[($6 + 496 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6 + 500 | 0) >> 2] | 0;
       $953 = i64toi32_i32$4;
       $953$hi = i64toi32_i32$2;
       i64toi32_i32$1 = ($6 + 496 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $957 = i64toi32_i32$2;
       $957$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = $22$hi;
       i64toi32_i32$1 = $953$hi;
       i64toi32_i32$3 = $957$hi;
       __addtf3($6 + 480 | 0 | 0, $10 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$2 | 0, $953 | 0, i64toi32_i32$1 | 0, $957 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = ($6 + 480 | 0) + 8 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $22 = i64toi32_i32$3;
       $22$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $6;
       i64toi32_i32$1 = HEAP32[($6 + 480 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($6 + 484 | 0) >> 2] | 0;
       $10 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       break label$66;
      }
      label$69 : {
       if (($7 | 0) == (5e8 | 0)) {
        break label$69
       }
       __extenddftf2($6 + 592 | 0 | 0, +(+($5 | 0) * .75));
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$3 = $22$hi;
       i64toi32_i32$2 = $6;
       i64toi32_i32$3 = HEAP32[($6 + 592 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($6 + 596 | 0) >> 2] | 0;
       $976 = i64toi32_i32$3;
       $976$hi = i64toi32_i32$1;
       i64toi32_i32$2 = ($6 + 592 | 0) + 8 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $980 = i64toi32_i32$1;
       $980$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $10$hi;
       i64toi32_i32$1 = $22$hi;
       i64toi32_i32$2 = $976$hi;
       i64toi32_i32$4 = $980$hi;
       __addtf3($6 + 576 | 0 | 0, $10 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$1 | 0, $976 | 0, i64toi32_i32$2 | 0, $980 | 0, i64toi32_i32$4 | 0);
       i64toi32_i32$1 = ($6 + 576 | 0) + 8 | 0;
       i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $22 = i64toi32_i32$4;
       $22$hi = i64toi32_i32$2;
       i64toi32_i32$1 = $6;
       i64toi32_i32$2 = HEAP32[($6 + 576 | 0) >> 2] | 0;
       i64toi32_i32$4 = HEAP32[($6 + 580 | 0) >> 2] | 0;
       $10 = i64toi32_i32$2;
       $10$hi = i64toi32_i32$4;
       break label$66;
      }
      $25 = +($5 | 0);
      label$70 : {
       if ((($11 + 5 | 0) & 2047 | 0 | 0) != ($2 | 0)) {
        break label$70
       }
       __extenddftf2($6 + 528 | 0 | 0, +($25 * .5));
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$4 = $22$hi;
       i64toi32_i32$1 = $6;
       i64toi32_i32$4 = HEAP32[($6 + 528 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($6 + 532 | 0) >> 2] | 0;
       $1003 = i64toi32_i32$4;
       $1003$hi = i64toi32_i32$2;
       i64toi32_i32$1 = ($6 + 528 | 0) + 8 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $1007 = i64toi32_i32$2;
       $1007$hi = i64toi32_i32$4;
       i64toi32_i32$4 = $10$hi;
       i64toi32_i32$2 = $22$hi;
       i64toi32_i32$1 = $1003$hi;
       i64toi32_i32$3 = $1007$hi;
       __addtf3($6 + 512 | 0 | 0, $10 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$2 | 0, $1003 | 0, i64toi32_i32$1 | 0, $1007 | 0, i64toi32_i32$3 | 0);
       i64toi32_i32$2 = ($6 + 512 | 0) + 8 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $22 = i64toi32_i32$3;
       $22$hi = i64toi32_i32$1;
       i64toi32_i32$2 = $6;
       i64toi32_i32$1 = HEAP32[($6 + 512 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($6 + 516 | 0) >> 2] | 0;
       $10 = i64toi32_i32$1;
       $10$hi = i64toi32_i32$3;
       break label$66;
      }
      __extenddftf2($6 + 560 | 0 | 0, +($25 * .75));
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$3 = $22$hi;
      i64toi32_i32$2 = $6;
      i64toi32_i32$3 = HEAP32[($6 + 560 | 0) >> 2] | 0;
      i64toi32_i32$1 = HEAP32[($6 + 564 | 0) >> 2] | 0;
      $1023 = i64toi32_i32$3;
      $1023$hi = i64toi32_i32$1;
      i64toi32_i32$2 = ($6 + 560 | 0) + 8 | 0;
      i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $1027 = i64toi32_i32$1;
      $1027$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $10$hi;
      i64toi32_i32$1 = $22$hi;
      i64toi32_i32$2 = $1023$hi;
      i64toi32_i32$4 = $1027$hi;
      __addtf3($6 + 544 | 0 | 0, $10 | 0, i64toi32_i32$3 | 0, $22 | 0, i64toi32_i32$1 | 0, $1023 | 0, i64toi32_i32$2 | 0, $1027 | 0, i64toi32_i32$4 | 0);
      i64toi32_i32$1 = ($6 + 544 | 0) + 8 | 0;
      i64toi32_i32$4 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $22 = i64toi32_i32$4;
      $22$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $6;
      i64toi32_i32$2 = HEAP32[($6 + 544 | 0) >> 2] | 0;
      i64toi32_i32$4 = HEAP32[($6 + 548 | 0) >> 2] | 0;
      $10 = i64toi32_i32$2;
      $10$hi = i64toi32_i32$4;
     }
     if (($14 | 0) > (111 | 0)) {
      break label$65
     }
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1073676288;
     fmodl($6 + 464 | 0 | 0, $10 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$2 = $6;
     i64toi32_i32$3 = HEAP32[($6 + 464 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($6 + 468 | 0) >> 2] | 0;
     $1041 = i64toi32_i32$3;
     $1041$hi = i64toi32_i32$1;
     i64toi32_i32$2 = ($6 + 464 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1045 = i64toi32_i32$1;
     $1045$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1041$hi;
     i64toi32_i32$1 = $1045$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 0;
     if (__letf2($1041 | 0, i64toi32_i32$3 | 0, $1045 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0) {
      break label$65
     }
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = $10$hi;
     i64toi32_i32$2 = $22$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = 1073676288;
     __addtf3($6 + 448 | 0 | 0, $10 | 0, i64toi32_i32$4 | 0, $22 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$3 | 0);
     i64toi32_i32$2 = ($6 + 448 | 0) + 8 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $22 = i64toi32_i32$3;
     $22$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $6;
     i64toi32_i32$1 = HEAP32[($6 + 448 | 0) >> 2] | 0;
     i64toi32_i32$3 = HEAP32[($6 + 452 | 0) >> 2] | 0;
     $10 = i64toi32_i32$1;
     $10$hi = i64toi32_i32$3;
    }
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$3 = $15$hi;
    i64toi32_i32$3 = $10$hi;
    i64toi32_i32$3 = $22$hi;
    i64toi32_i32$3 = $19$hi;
    i64toi32_i32$1 = $15$hi;
    i64toi32_i32$2 = $10$hi;
    i64toi32_i32$4 = $22$hi;
    __addtf3($6 + 432 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0, $10 | 0, i64toi32_i32$2 | 0, $22 | 0, i64toi32_i32$4 | 0);
    i64toi32_i32$1 = $6;
    i64toi32_i32$4 = HEAP32[($6 + 432 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[($6 + 436 | 0) >> 2] | 0;
    $1066 = i64toi32_i32$4;
    $1066$hi = i64toi32_i32$2;
    i64toi32_i32$1 = ($6 + 432 | 0) + 8 | 0;
    i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $1070 = i64toi32_i32$2;
    $1070$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $23$hi;
    i64toi32_i32$4 = $24$hi;
    i64toi32_i32$4 = $1066$hi;
    i64toi32_i32$2 = $1070$hi;
    i64toi32_i32$1 = $23$hi;
    i64toi32_i32$3 = $24$hi;
    __subtf3($6 + 416 | 0 | 0, $1066 | 0, i64toi32_i32$4 | 0, $1070 | 0, i64toi32_i32$2 | 0, $23 | 0, i64toi32_i32$1 | 0, $24 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$2 = ($6 + 416 | 0) + 8 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$3;
    $15$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $6;
    i64toi32_i32$1 = HEAP32[($6 + 416 | 0) >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($6 + 420 | 0) >> 2] | 0;
    $19 = i64toi32_i32$1;
    $19$hi = i64toi32_i32$3;
    label$71 : {
     if (($13 & 2147483647 | 0 | 0) <= (-2 - $8 | 0 | 0)) {
      break label$71
     }
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$3 = $19$hi;
     i64toi32_i32$1 = $15$hi;
     fabsl($6 + 400 | 0 | 0, $19 | 0, i64toi32_i32$3 | 0, $15 | 0, i64toi32_i32$1 | 0);
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$1 = i64toi32_i32$3;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$2 = 0;
     i64toi32_i32$4 = 1073610752;
     __multf3($6 + 384 | 0 | 0, $19 | 0, i64toi32_i32$1 | 0, $15 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$4 | 0);
     i64toi32_i32$3 = $6;
     i64toi32_i32$4 = HEAP32[($6 + 400 | 0) >> 2] | 0;
     i64toi32_i32$2 = HEAP32[($6 + 404 | 0) >> 2] | 0;
     $1093 = i64toi32_i32$4;
     $1093$hi = i64toi32_i32$2;
     i64toi32_i32$3 = ($6 + 400 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$3 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
     $1097 = i64toi32_i32$2;
     $1097$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1093$hi;
     i64toi32_i32$2 = $1097$hi;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 1081081856;
     $2 = __getf2($1093 | 0, i64toi32_i32$4 | 0, $1097 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$1 = $15$hi;
     i64toi32_i32$2 = ($6 + 384 | 0) + 8 | 0;
     i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1103 = i64toi32_i32$1;
     $1103$hi = i64toi32_i32$3;
     $13 = ($2 | 0) < (0 | 0);
     i64toi32_i32$0 = $13;
     i64toi32_i32$3 = $15$hi;
     i64toi32_i32$1 = $1103$hi;
     i64toi32_i32$4 = i64toi32_i32$0 ? $15 : $1103;
     i64toi32_i32$2 = i64toi32_i32$0 ? i64toi32_i32$3 : i64toi32_i32$1;
     $15 = i64toi32_i32$4;
     $15$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $19$hi;
     i64toi32_i32$0 = $6;
     i64toi32_i32$2 = HEAP32[($6 + 384 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($6 + 388 | 0) >> 2] | 0;
     $1110 = i64toi32_i32$2;
     $1110$hi = i64toi32_i32$4;
     i64toi32_i32$1 = $13;
     i64toi32_i32$4 = $19$hi;
     i64toi32_i32$2 = $1110$hi;
     i64toi32_i32$3 = i64toi32_i32$1 ? $19 : $1110;
     i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$4 : i64toi32_i32$2;
     $19 = i64toi32_i32$3;
     $19$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = $22$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$1 = 0;
     i64toi32_i32$4 = 0;
     $11 = __letf2($10 | 0, $10$hi | 0, $22 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$4 | 0) | 0;
     label$72 : {
      $17 = $17 + (($2 | 0) > (-1 | 0)) | 0;
      if (($17 + 110 | 0 | 0) > ($9 | 0)) {
       break label$72
      }
      if (!(($13 ? $16 : $16 & ($14 | 0) != ($1 | 0) | 0) & ($11 | 0) != (0 | 0) | 0)) {
       break label$71
      }
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 68), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$4 = $15$hi;
    i64toi32_i32$4 = $19$hi;
    i64toi32_i32$1 = $15$hi;
    scalbnl($6 + 368 | 0 | 0, $19 | 0, i64toi32_i32$4 | 0, $15 | 0, i64toi32_i32$1 | 0, $17 | 0);
    i64toi32_i32$3 = ($6 + 368 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $15 = i64toi32_i32$1;
    $15$hi = i64toi32_i32$4;
    i64toi32_i32$3 = $6;
    i64toi32_i32$4 = HEAP32[($6 + 368 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[($6 + 372 | 0) >> 2] | 0;
    $10 = i64toi32_i32$4;
    $10$hi = i64toi32_i32$1;
    break label$10;
   }
   i64toi32_i32$1 = 0;
   $10 = 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   __shlim($1 | 0, 0 | 0, i64toi32_i32$1 | 0);
   i64toi32_i32$1 = 0;
   $15 = 0;
   $15$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $15$hi;
  i64toi32_i32$4 = $0;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $15;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $10$hi;
  HEAP32[i64toi32_i32$4 >> 2] = $10;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
  __stack_pointer = $6 + 8976 | 0;
 }
 
 function scanexp($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $5$hi = 0, $5 = 0, $2 = 0, $4 = 0, i64toi32_i32$2 = 0, $3 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $69$hi = 0, $71 = 0, $71$hi = 0, $120$hi = 0;
  label$1 : {
   label$2 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
     break label$2
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
    $1 = HEAPU8[$1 >> 0] | 0;
    break label$1;
   }
   $1 = __shgetc($0 | 0) | 0;
  }
  $2 = 0;
  $3 = 0;
  label$3 : {
   label$4 : {
    switch ($1 + -43 | 0 | 0) {
    case 0:
    case 2:
     break label$4;
    default:
     break label$3;
    };
   }
   $3 = ($1 | 0) == (45 | 0);
   label$5 : {
    $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
     break label$5
    }
    HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
    $1 = HEAPU8[$1 >> 0] | 0;
    break label$3;
   }
   $1 = __shgetc($0 | 0) | 0;
  }
  label$6 : {
   label$7 : {
    if (($1 + -58 | 0) >>> 0 <= -11 >>> 0) {
     break label$7
    }
    label$8 : while (1) {
     $2 = $1 + Math_imul($2, 10) | 0;
     label$9 : {
      label$10 : {
       $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
       if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
        break label$10
       }
       HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
       $1 = HEAPU8[$1 >> 0] | 0;
       break label$9;
      }
      $1 = __shgetc($0 | 0) | 0;
     }
     $2 = $2 + -48 | 0;
     label$11 : {
      $4 = $1 + -48 | 0;
      if ($4 >>> 0 > 9 >>> 0) {
       break label$11
      }
      if (($2 | 0) < (214748364 | 0)) {
       continue label$8
      }
     }
     break label$8;
    };
    i64toi32_i32$1 = $2;
    i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
    $5 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$0;
    label$12 : {
     if ($4 >>> 0 >= 10 >>> 0) {
      break label$12
     }
     label$13 : while (1) {
      i64toi32_i32$0 = 0;
      $69$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $5$hi;
      i64toi32_i32$1 = 0;
      i64toi32_i32$1 = __wasm_i64_mul($5 | 0, i64toi32_i32$0 | 0, 10 | 0, i64toi32_i32$1 | 0) | 0;
      i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
      $71 = i64toi32_i32$1;
      $71$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $69$hi;
      i64toi32_i32$2 = $1;
      i64toi32_i32$1 = $71$hi;
      i64toi32_i32$3 = $71;
      i64toi32_i32$4 = $1 + i64toi32_i32$3 | 0;
      i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
      if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
      }
      $5 = i64toi32_i32$4;
      $5$hi = i64toi32_i32$5;
      label$14 : {
       label$15 : {
        $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$15
        }
        HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
        $1 = HEAPU8[$1 >> 0] | 0;
        break label$14;
       }
       $1 = __shgetc($0 | 0) | 0;
      }
      i64toi32_i32$5 = $5$hi;
      i64toi32_i32$0 = $5;
      i64toi32_i32$2 = -1;
      i64toi32_i32$3 = -48;
      i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
      i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
      if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
       i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
      }
      $5 = i64toi32_i32$1;
      $5$hi = i64toi32_i32$4;
      $4 = $1 + -48 | 0;
      if ($4 >>> 0 > 9 >>> 0) {
       break label$12
      }
      i64toi32_i32$4 = $5$hi;
      i64toi32_i32$5 = $5;
      i64toi32_i32$0 = 21474836;
      i64toi32_i32$3 = 2061584302;
      if ((i64toi32_i32$4 | 0) < (i64toi32_i32$0 | 0)) {
       $17 = 1
      } else {
       if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$0 | 0)) {
        if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
         $18 = 0
        } else {
         $18 = 1
        }
        $19 = $18;
       } else {
        $19 = 0
       }
       $17 = $19;
      }
      if ($17) {
       continue label$13
      }
      break label$13;
     };
    }
    label$16 : {
     if ($4 >>> 0 >= 10 >>> 0) {
      break label$16
     }
     label$17 : while (1) {
      label$18 : {
       label$19 : {
        $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
        if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
         break label$19
        }
        HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
        $1 = HEAPU8[$1 >> 0] | 0;
        break label$18;
       }
       $1 = __shgetc($0 | 0) | 0;
      }
      if (($1 + -48 | 0) >>> 0 < 10 >>> 0) {
       continue label$17
      }
      break label$17;
     };
    }
    label$20 : {
     i64toi32_i32$3 = $0;
     i64toi32_i32$5 = HEAP32[($0 + 112 | 0) >> 2] | 0;
     i64toi32_i32$4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
     i64toi32_i32$3 = i64toi32_i32$5;
     i64toi32_i32$5 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$4 | 0) < (i64toi32_i32$5 | 0)) {
      $20 = 1
     } else {
      if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$5 | 0)) {
       if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
        $21 = 0
       } else {
        $21 = 1
       }
       $22 = $21;
      } else {
       $22 = 0
      }
      $20 = $22;
     }
     if ($20) {
      break label$20
     }
     HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
    }
    i64toi32_i32$3 = $5$hi;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$5 = $5;
    i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
    i64toi32_i32$1 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) + i64toi32_i32$4 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
    $120$hi = i64toi32_i32$1;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$4 = $3;
    i64toi32_i32$1 = $120$hi;
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$5 = i64toi32_i32$4 ? i64toi32_i32$2 : i64toi32_i32$5;
    i64toi32_i32$3 = i64toi32_i32$4 ? i64toi32_i32$1 : i64toi32_i32$0;
    $5 = i64toi32_i32$5;
    $5$hi = i64toi32_i32$3;
    break label$6;
   }
   i64toi32_i32$3 = -2147483648;
   $5 = 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = $0;
   i64toi32_i32$3 = HEAP32[($0 + 112 | 0) >> 2] | 0;
   i64toi32_i32$5 = HEAP32[($0 + 116 | 0) >> 2] | 0;
   i64toi32_i32$4 = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = 0;
   if ((i64toi32_i32$5 | 0) < (i64toi32_i32$3 | 0)) {
    $23 = 1
   } else {
    if ((i64toi32_i32$5 | 0) <= (i64toi32_i32$3 | 0)) {
     if (i64toi32_i32$4 >>> 0 >= i64toi32_i32$1 >>> 0) {
      $24 = 0
     } else {
      $24 = 1
     }
     $25 = $24;
    } else {
     $25 = 0
    }
    $23 = $25;
   }
   if ($23) {
    break label$6
   }
   HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
   i64toi32_i32$4 = -2147483648;
   i64toi32_i32$5 = 0;
   i64toi32_i32$HIGH_BITS = i64toi32_i32$4;
   return i64toi32_i32$5 | 0;
  }
  i64toi32_i32$5 = $5$hi;
  i64toi32_i32$4 = $5;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
  return i64toi32_i32$4 | 0;
 }
 
 function vfscanf($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, $12 = 0, i64toi32_i32$3 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $6 = 0, i64toi32_i32$5 = 0, $3 = 0, $11 = 0, $17 = 0, $10 = 0, $16 = 0, $5 = 0, $9$hi = 0, $14 = 0, $15 = 0, $19$hi = 0, $18 = 0, $9 = 0, $13 = 0, $19 = 0, $21$hi = 0, $7 = 0, $21 = 0, $20 = 0, i64toi32_i32$6 = 0, $4 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $78$hi = 0, $80$hi = 0, $85 = 0, $85$hi = 0, $144$hi = 0, $146$hi = 0, $152 = 0, $152$hi = 0, $275$hi = 0, $277$hi = 0, $282 = 0, $282$hi = 0, $322 = 0, $322$hi = 0, $328 = 0, $328$hi = 0, $329$hi = 0, $428 = 0, $428$hi = 0, $434 = 0, $434$hi = 0, $435$hi = 0, $653 = 0, $653$hi = 0, $658 = 0, $658$hi = 0, $684$hi = 0, $686$hi = 0, $692 = 0, $692$hi = 0, wasm2js_i32$0 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f64$0 = 0.0;
  $3 = __stack_pointer - 304 | 0;
  __stack_pointer = $3;
  $4 = 0;
  label$1 : {
   if ((HEAP32[($0 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4 = __lockfile($0 | 0) | 0;
  }
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      __toread($0 | 0) | 0;
      if (HEAP32[($0 + 4 | 0) >> 2] | 0) {
       break label$5
      }
      $5 = 0;
      break label$4;
     }
     label$6 : {
      $6 = HEAPU8[$1 >> 0] | 0;
      if ($6) {
       break label$6
      }
      $7 = 0;
      break label$2;
     }
     $8 = $3 + 16 | 0;
     i64toi32_i32$0 = 0;
     $9 = 0;
     $9$hi = i64toi32_i32$0;
     $7 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         label$11 : {
          label$12 : while (1) {
           label$13 : {
            label$14 : {
             $6 = $6 & 255 | 0;
             if (!(isspace($6 | 0) | 0)) {
              break label$14
             }
             label$15 : while (1) {
              $6 = $1;
              $1 = $1 + 1 | 0;
              if (isspace(HEAPU8[($6 + 1 | 0) >> 0] | 0 | 0) | 0) {
               continue label$15
              }
              break label$15;
             };
             i64toi32_i32$0 = 0;
             __shlim($0 | 0, 0 | 0, i64toi32_i32$0 | 0);
             label$16 : while (1) {
              label$17 : {
               label$18 : {
                $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$18
                }
                HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
                $1 = HEAPU8[$1 >> 0] | 0;
                break label$17;
               }
               $1 = __shgetc($0 | 0) | 0;
              }
              if (isspace($1 | 0) | 0) {
               continue label$16
              }
              break label$16;
             };
             $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$19 : {
              i64toi32_i32$2 = $0;
              i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$0;
              i64toi32_i32$0 = 0;
              i64toi32_i32$3 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
               $62 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0) {
                 $63 = 0
                } else {
                 $63 = 1
                }
                $64 = $63;
               } else {
                $64 = 0
               }
               $62 = $64;
              }
              if ($62) {
               break label$19
              }
              $1 = $1 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $1;
             }
             i64toi32_i32$3 = $0;
             i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $78$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $9$hi;
             i64toi32_i32$1 = $78$hi;
             i64toi32_i32$3 = i64toi32_i32$2;
             i64toi32_i32$2 = $9$hi;
             i64toi32_i32$0 = $9;
             i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $80$hi = i64toi32_i32$5;
             i64toi32_i32$3 = $1 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$3 >> 31 | 0;
             $85 = i64toi32_i32$3;
             $85$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $80$hi;
             i64toi32_i32$1 = i64toi32_i32$4;
             i64toi32_i32$3 = $85$hi;
             i64toi32_i32$0 = $85;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
             i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
              i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
             }
             $9 = i64toi32_i32$2;
             $9$hi = i64toi32_i32$4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               label$23 : {
                if (($6 | 0) != (37 | 0)) {
                 break label$23
                }
                $6 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
                if (($6 | 0) == (42 | 0)) {
                 break label$22
                }
                if (($6 | 0) != (37 | 0)) {
                 break label$21
                }
               }
               i64toi32_i32$4 = 0;
               __shlim($0 | 0, 0 | 0, i64toi32_i32$4 | 0);
               label$24 : {
                label$25 : {
                 if ((HEAPU8[$1 >> 0] | 0 | 0) != (37 | 0)) {
                  break label$25
                 }
                 label$26 : while (1) {
                  label$27 : {
                   label$28 : {
                    $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                    if (($6 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$28
                    }
                    HEAP32[($0 + 4 | 0) >> 2] = $6 + 1 | 0;
                    $6 = HEAPU8[$6 >> 0] | 0;
                    break label$27;
                   }
                   $6 = __shgetc($0 | 0) | 0;
                  }
                  if (isspace($6 | 0) | 0) {
                   continue label$26
                  }
                  break label$26;
                 };
                 $1 = $1 + 1 | 0;
                 break label$24;
                }
                label$29 : {
                 $6 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 if (($6 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$29
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = $6 + 1 | 0;
                 $6 = HEAPU8[$6 >> 0] | 0;
                 break label$24;
                }
                $6 = __shgetc($0 | 0) | 0;
               }
               label$30 : {
                if (($6 | 0) == (HEAPU8[$1 >> 0] | 0 | 0)) {
                 break label$30
                }
                label$31 : {
                 i64toi32_i32$5 = $0;
                 i64toi32_i32$4 = HEAP32[($0 + 112 | 0) >> 2] | 0;
                 i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
                 i64toi32_i32$5 = i64toi32_i32$4;
                 i64toi32_i32$4 = 0;
                 i64toi32_i32$0 = 0;
                 if ((i64toi32_i32$1 | 0) < (i64toi32_i32$4 | 0)) {
                  $65 = 1
                 } else {
                  if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$4 | 0)) {
                   if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$0 >>> 0) {
                    $66 = 0
                   } else {
                    $66 = 1
                   }
                   $67 = $66;
                  } else {
                   $67 = 0
                  }
                  $65 = $67;
                 }
                 if ($65) {
                  break label$31
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
                }
                if (($6 | 0) > (-1 | 0)) {
                 break label$2
                }
                $5 = 0;
                if ($7) {
                 break label$2
                }
                break label$4;
               }
               i64toi32_i32$0 = $0;
               i64toi32_i32$5 = HEAP32[($0 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
               $144$hi = i64toi32_i32$1;
               i64toi32_i32$1 = $9$hi;
               i64toi32_i32$1 = $144$hi;
               i64toi32_i32$0 = i64toi32_i32$5;
               i64toi32_i32$5 = $9$hi;
               i64toi32_i32$4 = $9;
               i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
               i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
               if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
               }
               $146$hi = i64toi32_i32$2;
               i64toi32_i32$0 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$0 >> 31 | 0;
               $152 = i64toi32_i32$0;
               $152$hi = i64toi32_i32$2;
               i64toi32_i32$2 = $146$hi;
               i64toi32_i32$1 = i64toi32_i32$3;
               i64toi32_i32$0 = $152$hi;
               i64toi32_i32$4 = $152;
               i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
               i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
               if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
                i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
               }
               $9 = i64toi32_i32$5;
               $9$hi = i64toi32_i32$3;
               $6 = $1;
               break label$13;
              }
              $1 = $1 + 2 | 0;
              $10 = 0;
              break label$20;
             }
             label$32 : {
              if (!(isdigit($6 | 0) | 0)) {
               break label$32
              }
              if ((HEAPU8[($1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$32
              }
              $1 = $1 + 3 | 0;
              $10 = arg_n($2 | 0, $6 + -48 | 0 | 0) | 0;
              break label$20;
             }
             $1 = $1 + 1 | 0;
             $10 = HEAP32[$2 >> 2] | 0;
             $2 = $2 + 4 | 0;
            }
            $11 = 0;
            label$33 : {
             label$34 : while (1) {
              $12 = HEAPU8[$1 >> 0] | 0;
              if (!(isdigit($12 | 0) | 0)) {
               break label$33
              }
              $1 = $1 + 1 | 0;
              $11 = (Math_imul($11, 10) + $12 | 0) + -48 | 0;
              continue label$34;
             };
            }
            $13 = 0;
            label$35 : {
             label$36 : {
              if (($12 | 0) == (109 | 0)) {
               break label$36
              }
              $14 = $1;
              break label$35;
             }
             $14 = $1 + 1 | 0;
             $15 = 0;
             $13 = ($10 | 0) != (0 | 0);
             $12 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
             $16 = 0;
            }
            $6 = $14 + 1 | 0;
            $17 = 3;
            $5 = $13;
            label$37 : {
             label$38 : {
              switch (($12 & 255 | 0) + -65 | 0 | 0) {
              case 39:
               $1 = (HEAPU8[($14 + 1 | 0) >> 0] | 0 | 0) == (104 | 0);
               $6 = $1 ? $14 + 2 | 0 : $6;
               $17 = $1 ? -2 : -1;
               break label$37;
              case 43:
               $1 = (HEAPU8[($14 + 1 | 0) >> 0] | 0 | 0) == (108 | 0);
               $6 = $1 ? $14 + 2 | 0 : $6;
               $17 = $1 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $17 = 1;
               break label$37;
              case 11:
               $17 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $17 = 0;
             $6 = $14;
            }
            $1 = HEAPU8[$6 >> 0] | 0;
            $12 = ($1 & 47 | 0 | 0) == (3 | 0);
            $5 = $12 ? 1 : $17;
            label$43 : {
             $18 = $12 ? $1 | 32 | 0 : $1;
             if (($18 | 0) == (91 | 0)) {
              break label$43
             }
             label$44 : {
              label$45 : {
               if (($18 | 0) == (110 | 0)) {
                break label$45
               }
               if (($18 | 0) != (99 | 0)) {
                break label$44
               }
               $11 = ($11 | 0) > (1 | 0) ? $11 : 1;
               break label$43;
              }
              i64toi32_i32$3 = $9$hi;
              store_int($10 | 0, $5 | 0, $9 | 0, i64toi32_i32$3 | 0);
              break label$13;
             }
             i64toi32_i32$3 = 0;
             __shlim($0 | 0, 0 | 0, i64toi32_i32$3 | 0);
             label$46 : while (1) {
              label$47 : {
               label$48 : {
                $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                 break label$48
                }
                HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
                $1 = HEAPU8[$1 >> 0] | 0;
                break label$47;
               }
               $1 = __shgetc($0 | 0) | 0;
              }
              if (isspace($1 | 0) | 0) {
               continue label$46
              }
              break label$46;
             };
             $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$49 : {
              i64toi32_i32$2 = $0;
              i64toi32_i32$3 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$2 = i64toi32_i32$3;
              i64toi32_i32$3 = 0;
              i64toi32_i32$4 = 0;
              if ((i64toi32_i32$1 | 0) < (i64toi32_i32$3 | 0)) {
               $68 = 1
              } else {
               if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$3 | 0)) {
                if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$4 >>> 0) {
                 $69 = 0
                } else {
                 $69 = 1
                }
                $70 = $69;
               } else {
                $70 = 0
               }
               $68 = $70;
              }
              if ($68) {
               break label$49
              }
              $1 = $1 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $1;
             }
             i64toi32_i32$4 = $0;
             i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $275$hi = i64toi32_i32$1;
             i64toi32_i32$1 = $9$hi;
             i64toi32_i32$1 = $275$hi;
             i64toi32_i32$4 = i64toi32_i32$2;
             i64toi32_i32$2 = $9$hi;
             i64toi32_i32$3 = $9;
             i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
             if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $277$hi = i64toi32_i32$5;
             i64toi32_i32$4 = $1 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$5 = i64toi32_i32$4 >> 31 | 0;
             $282 = i64toi32_i32$4;
             $282$hi = i64toi32_i32$5;
             i64toi32_i32$5 = $277$hi;
             i64toi32_i32$1 = i64toi32_i32$0;
             i64toi32_i32$4 = $282$hi;
             i64toi32_i32$3 = $282;
             i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
             i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
              i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
             }
             $9 = i64toi32_i32$2;
             $9$hi = i64toi32_i32$0;
            }
            i64toi32_i32$1 = $11;
            i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
            $19 = i64toi32_i32$1;
            $19$hi = i64toi32_i32$0;
            __shlim($0 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0);
            label$50 : {
             label$51 : {
              $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
              if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
               break label$51
              }
              HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
              break label$50;
             }
             if ((__shgetc($0 | 0) | 0 | 0) < (0 | 0)) {
              break label$8
             }
            }
            label$52 : {
             i64toi32_i32$5 = $0;
             i64toi32_i32$0 = HEAP32[($0 + 112 | 0) >> 2] | 0;
             i64toi32_i32$1 = HEAP32[($0 + 116 | 0) >> 2] | 0;
             i64toi32_i32$5 = i64toi32_i32$0;
             i64toi32_i32$0 = 0;
             i64toi32_i32$3 = 0;
             if ((i64toi32_i32$1 | 0) < (i64toi32_i32$0 | 0)) {
              $71 = 1
             } else {
              if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$0 | 0)) {
               if (i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0) {
                $72 = 0
               } else {
                $72 = 1
               }
               $73 = $72;
              } else {
               $73 = 0
              }
              $71 = $73;
             }
             if ($71) {
              break label$52
             }
             HEAP32[($0 + 4 | 0) >> 2] = (HEAP32[($0 + 4 | 0) >> 2] | 0) + -1 | 0;
            }
            $1 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($18 + -88 | 0 | 0) {
                 default:
                  $1 = $18 + -65 | 0;
                  if ($1 >>> 0 > 6 >>> 0) {
                   break label$53
                  }
                  if (!((1 << $1 | 0) & 113 | 0)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  __floatscan($3 + 8 | 0 | 0, $0 | 0, $5 | 0);
                  i64toi32_i32$3 = $0;
                  i64toi32_i32$5 = HEAP32[($0 + 120 | 0) >> 2] | 0;
                  i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
                  $322 = i64toi32_i32$5;
                  $322$hi = i64toi32_i32$1;
                  i64toi32_i32$5 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
                  i64toi32_i32$1 = i64toi32_i32$5 >> 31 | 0;
                  $328 = i64toi32_i32$5;
                  $328$hi = i64toi32_i32$1;
                  i64toi32_i32$1 = 0;
                  i64toi32_i32$3 = 0;
                  i64toi32_i32$5 = $328$hi;
                  i64toi32_i32$0 = $328;
                  i64toi32_i32$4 = i64toi32_i32$3 - i64toi32_i32$0 | 0;
                  i64toi32_i32$6 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0;
                  i64toi32_i32$2 = i64toi32_i32$6 + i64toi32_i32$5 | 0;
                  i64toi32_i32$2 = i64toi32_i32$1 - i64toi32_i32$2 | 0;
                  $329$hi = i64toi32_i32$2;
                  i64toi32_i32$2 = $322$hi;
                  i64toi32_i32$1 = $322;
                  i64toi32_i32$3 = $329$hi;
                  i64toi32_i32$0 = i64toi32_i32$4;
                  if ((i64toi32_i32$1 | 0) != (i64toi32_i32$4 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  label$63 : {
                   if (($18 | 16 | 0 | 0) != (115 | 0)) {
                    break label$63
                   }
                   memset($3 + 32 | 0 | 0, -1 | 0, 257 | 0) | 0;
                   HEAP8[($3 + 32 | 0) >> 0] = 0;
                   if (($18 | 0) != (115 | 0)) {
                    break label$54
                   }
                   HEAP8[($3 + 65 | 0) >> 0] = 0;
                   HEAP8[($3 + 46 | 0) >> 0] = 0;
                   $74 = 0;
                   HEAP16[($3 + 42 | 0) >> 1] = $74;
                   HEAP16[($3 + 44 | 0) >> 1] = $74 >>> 16 | 0;
                   break label$54;
                  }
                  $17 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                  $1 = ($17 | 0) == (94 | 0);
                  memset($3 + 32 | 0 | 0, $1 | 0, 257 | 0) | 0;
                  HEAP8[($3 + 32 | 0) >> 0] = 0;
                  $12 = $1 ? $6 + 2 | 0 : $6 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     label$67 : {
                      $1 = HEAPU8[($6 + ($1 ? 2 : 1) | 0) >> 0] | 0;
                      if (($1 | 0) == (45 | 0)) {
                       break label$67
                      }
                      if (($1 | 0) == (93 | 0)) {
                       break label$66
                      }
                      $17 = ($17 | 0) != (94 | 0);
                      $6 = $12;
                      break label$64;
                     }
                     $17 = ($17 | 0) != (94 | 0);
                     HEAP8[($3 + 78 | 0) >> 0] = $17;
                     break label$65;
                    }
                    $17 = ($17 | 0) != (94 | 0);
                    HEAP8[($3 + 126 | 0) >> 0] = $17;
                   }
                   $6 = $12 + 1 | 0;
                  }
                  label$68 : while (1) {
                   label$69 : {
                    label$70 : {
                     $12 = HEAPU8[$6 >> 0] | 0;
                     if (($12 | 0) == (45 | 0)) {
                      break label$70
                     }
                     if (!$12) {
                      break label$8
                     }
                     if (($12 | 0) == (93 | 0)) {
                      break label$54
                     }
                     break label$69;
                    }
                    $12 = 45;
                    $20 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
                    if (!$20) {
                     break label$69
                    }
                    if (($20 | 0) == (93 | 0)) {
                     break label$69
                    }
                    $14 = $6 + 1 | 0;
                    label$71 : {
                     label$72 : {
                      $1 = HEAPU8[($6 + -1 | 0) >> 0] | 0;
                      if ($1 >>> 0 < $20 >>> 0) {
                       break label$72
                      }
                      $12 = $20;
                      break label$71;
                     }
                     label$73 : while (1) {
                      $1 = $1 + 1 | 0;
                      HEAP8[(($3 + 32 | 0) + $1 | 0) >> 0] = $17;
                      $12 = HEAPU8[$14 >> 0] | 0;
                      if ($1 >>> 0 < $12 >>> 0) {
                       continue label$73
                      }
                      break label$73;
                     };
                    }
                    $6 = $14;
                   }
                   HEAP8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] = $17;
                   $6 = $6 + 1 | 0;
                   continue label$68;
                  };
                 case 23:
                  $1 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $1 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $1 = 0;
               }
               i64toi32_i32$1 = __intscan($0 | 0, $1 | 0) | 0;
               i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
               $19 = i64toi32_i32$1;
               $19$hi = i64toi32_i32$2;
               i64toi32_i32$0 = $0;
               i64toi32_i32$2 = HEAP32[($0 + 120 | 0) >> 2] | 0;
               i64toi32_i32$1 = HEAP32[($0 + 124 | 0) >> 2] | 0;
               $428 = i64toi32_i32$2;
               $428$hi = i64toi32_i32$1;
               i64toi32_i32$2 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
               i64toi32_i32$1 = i64toi32_i32$2 >> 31 | 0;
               $434 = i64toi32_i32$2;
               $434$hi = i64toi32_i32$1;
               i64toi32_i32$1 = 0;
               i64toi32_i32$0 = 0;
               i64toi32_i32$2 = $434$hi;
               i64toi32_i32$3 = $434;
               i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
               i64toi32_i32$6 = i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0;
               i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$2 | 0;
               i64toi32_i32$4 = i64toi32_i32$1 - i64toi32_i32$4 | 0;
               $435$hi = i64toi32_i32$4;
               i64toi32_i32$4 = $428$hi;
               i64toi32_i32$1 = $428;
               i64toi32_i32$0 = $435$hi;
               i64toi32_i32$3 = i64toi32_i32$5;
               if ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) | 0) {
                break label$9
               }
               label$74 : {
                if (($18 | 0) != (112 | 0)) {
                 break label$74
                }
                if (!$10) {
                 break label$74
                }
                i64toi32_i32$1 = $19$hi;
                HEAP32[$10 >> 2] = $19;
                break label$53;
               }
               i64toi32_i32$1 = $19$hi;
               store_int($10 | 0, $5 | 0, $19 | 0, i64toi32_i32$1 | 0);
               break label$53;
              }
              if (!$10) {
               break label$53
              }
              i64toi32_i32$3 = $8;
              i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
              $19 = i64toi32_i32$1;
              $19$hi = i64toi32_i32$4;
              i64toi32_i32$3 = $3;
              i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 8 | 0) >> 2] | 0;
              i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 12 | 0) >> 2] | 0;
              $21 = i64toi32_i32$4;
              $21$hi = i64toi32_i32$1;
              label$75 : {
               switch ($5 | 0) {
               case 0:
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$1 = $19$hi;
                i64toi32_i32$1 = $21$hi;
                i64toi32_i32$4 = $19$hi;
                (wasm2js_i32$0 = $10, wasm2js_f32$0 = Math_fround(__trunctfsf2($21 | 0, i64toi32_i32$1 | 0, $19 | 0, i64toi32_i32$4 | 0))), HEAPF32[wasm2js_i32$0 >> 2] = wasm2js_f32$0;
                break label$53;
               case 1:
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$4 = $19$hi;
                i64toi32_i32$4 = $21$hi;
                i64toi32_i32$1 = $19$hi;
                (wasm2js_i32$0 = $10, wasm2js_f64$0 = +__trunctfdf2($21 | 0, i64toi32_i32$4 | 0, $19 | 0, i64toi32_i32$1 | 0)), HEAPF64[wasm2js_i32$0 >> 3] = wasm2js_f64$0;
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              i64toi32_i32$1 = $21$hi;
              i64toi32_i32$4 = $10;
              HEAP32[i64toi32_i32$4 >> 2] = $21;
              HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$1;
              i64toi32_i32$1 = $19$hi;
              HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $19;
              HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$1;
              break label$53;
             }
             $17 = ($18 | 0) == (99 | 0);
             $11 = $17 ? $11 + 1 | 0 : 31;
             label$78 : {
              label$79 : {
               if (($5 | 0) != (1 | 0)) {
                break label$79
               }
               $12 = $10;
               label$80 : {
                if (!$13) {
                 break label$80
                }
                $12 = malloc($11 << 2 | 0 | 0) | 0;
                if (!$12) {
                 break label$10
                }
               }
               i64toi32_i32$4 = $3;
               i64toi32_i32$1 = 0;
               HEAP32[(i64toi32_i32$4 + 296 | 0) >> 2] = 0;
               HEAP32[(i64toi32_i32$4 + 300 | 0) >> 2] = i64toi32_i32$1;
               $1 = 0;
               $14 = ($13 | 0) != (0 | 0);
               label$81 : while (1) {
                $16 = $12;
                label$82 : {
                 label$83 : while (1) {
                  label$84 : {
                   label$85 : {
                    $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                    if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                     break label$85
                    }
                    HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                    $12 = HEAPU8[$12 >> 0] | 0;
                    break label$84;
                   }
                   $12 = __shgetc($0 | 0) | 0;
                  }
                  if (!(HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0)) {
                   break label$82
                  }
                  HEAP8[($3 + 27 | 0) >> 0] = $12;
                  $12 = mbrtowc($3 + 28 | 0 | 0, $3 + 27 | 0 | 0, $3 + 296 | 0 | 0) | 0;
                  if (($12 | 0) == (-2 | 0)) {
                   continue label$83
                  }
                  $15 = 0;
                  if (($12 | 0) == (-1 | 0)) {
                   break label$8
                  }
                  label$86 : {
                   if (!$16) {
                    break label$86
                   }
                   HEAP32[($16 + ($1 << 2 | 0) | 0) >> 2] = HEAP32[($3 + 28 | 0) >> 2] | 0;
                   $1 = $1 + 1 | 0;
                  }
                  if (($14 & ($1 | 0) == ($11 | 0) | 0 | 0) != (1 | 0)) {
                   continue label$83
                  }
                  break label$83;
                 };
                 $5 = 1;
                 $1 = $11;
                 $12 = $1 << 1 | 0 | 1 | 0;
                 $11 = $12;
                 $12 = dlrealloc($16 | 0, $12 << 2 | 0 | 0) | 0;
                 if ($12) {
                  continue label$81
                 }
                 break label$7;
                }
                break label$81;
               };
               $15 = 0;
               $11 = $16;
               if (!(mbsinit($3 + 296 | 0 | 0) | 0)) {
                break label$8
               }
               break label$78;
              }
              label$87 : {
               if (!$13) {
                break label$87
               }
               $1 = 0;
               $12 = malloc($11 | 0) | 0;
               if (!$12) {
                break label$10
               }
               label$88 : while (1) {
                $16 = $12;
                label$89 : while (1) {
                 label$90 : {
                  label$91 : {
                   $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                   if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                    break label$91
                   }
                   HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                   $12 = HEAPU8[$12 >> 0] | 0;
                   break label$90;
                  }
                  $12 = __shgetc($0 | 0) | 0;
                 }
                 label$92 : {
                  if (HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                   break label$92
                  }
                  $11 = 0;
                  $15 = $16;
                  break label$78;
                 }
                 HEAP8[($16 + $1 | 0) >> 0] = $12;
                 $1 = $1 + 1 | 0;
                 if (($1 | 0) != ($11 | 0)) {
                  continue label$89
                 }
                 break label$89;
                };
                $5 = 1;
                $1 = $11;
                $12 = $1 << 1 | 0 | 1 | 0;
                $11 = $12;
                $12 = dlrealloc($16 | 0, $12 | 0) | 0;
                if ($12) {
                 continue label$88
                }
                break label$88;
               };
               $15 = $16;
               $16 = 0;
               break label$7;
              }
              $1 = 0;
              label$93 : {
               if (!$10) {
                break label$93
               }
               label$94 : while (1) {
                label$95 : {
                 label$96 : {
                  $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                  if (($12 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                   break label$96
                  }
                  HEAP32[($0 + 4 | 0) >> 2] = $12 + 1 | 0;
                  $12 = HEAPU8[$12 >> 0] | 0;
                  break label$95;
                 }
                 $12 = __shgetc($0 | 0) | 0;
                }
                label$97 : {
                 if (HEAPU8[(($12 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                  break label$97
                 }
                 $11 = 0;
                 $16 = $10;
                 $15 = $10;
                 break label$78;
                }
                HEAP8[($10 + $1 | 0) >> 0] = $12;
                $1 = $1 + 1 | 0;
                continue label$94;
               };
              }
              label$98 : while (1) {
               label$99 : {
                label$100 : {
                 $1 = HEAP32[($0 + 4 | 0) >> 2] | 0;
                 if (($1 | 0) == (HEAP32[($0 + 104 | 0) >> 2] | 0 | 0)) {
                  break label$100
                 }
                 HEAP32[($0 + 4 | 0) >> 2] = $1 + 1 | 0;
                 $1 = HEAPU8[$1 >> 0] | 0;
                 break label$99;
                }
                $1 = __shgetc($0 | 0) | 0;
               }
               if (HEAPU8[(($1 + ($3 + 32 | 0) | 0) + 1 | 0) >> 0] | 0) {
                continue label$98
               }
               break label$98;
              };
              $16 = 0;
              $15 = 0;
              $11 = 0;
              $1 = 0;
             }
             $12 = HEAP32[($0 + 4 | 0) >> 2] | 0;
             label$101 : {
              i64toi32_i32$3 = $0;
              i64toi32_i32$1 = HEAP32[($0 + 112 | 0) >> 2] | 0;
              i64toi32_i32$4 = HEAP32[($0 + 116 | 0) >> 2] | 0;
              i64toi32_i32$3 = i64toi32_i32$1;
              i64toi32_i32$1 = 0;
              i64toi32_i32$0 = 0;
              if ((i64toi32_i32$4 | 0) < (i64toi32_i32$1 | 0)) {
               $75 = 1
              } else {
               if ((i64toi32_i32$4 | 0) <= (i64toi32_i32$1 | 0)) {
                if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
                 $76 = 0
                } else {
                 $76 = 1
                }
                $77 = $76;
               } else {
                $77 = 0
               }
               $75 = $77;
              }
              if ($75) {
               break label$101
              }
              $12 = $12 + -1 | 0;
              HEAP32[($0 + 4 | 0) >> 2] = $12;
             }
             i64toi32_i32$0 = $0;
             i64toi32_i32$3 = HEAP32[($0 + 120 | 0) >> 2] | 0;
             i64toi32_i32$4 = HEAP32[($0 + 124 | 0) >> 2] | 0;
             $653 = i64toi32_i32$3;
             $653$hi = i64toi32_i32$4;
             i64toi32_i32$3 = $12 - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
             i64toi32_i32$4 = i64toi32_i32$3 >> 31 | 0;
             $658 = i64toi32_i32$3;
             $658$hi = i64toi32_i32$4;
             i64toi32_i32$4 = $653$hi;
             i64toi32_i32$0 = $653;
             i64toi32_i32$3 = $658$hi;
             i64toi32_i32$1 = $658;
             i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$1 | 0;
             i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
             if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
              i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
             }
             $21 = i64toi32_i32$2;
             $21$hi = i64toi32_i32$5;
             if (!(i64toi32_i32$2 | i64toi32_i32$5 | 0)) {
              break label$11
             }
             label$102 : {
              if (($18 | 0) != (99 | 0)) {
               break label$102
              }
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$5 = $19$hi;
              i64toi32_i32$5 = $21$hi;
              i64toi32_i32$4 = $21;
              i64toi32_i32$0 = $19$hi;
              i64toi32_i32$1 = $19;
              if ((i64toi32_i32$4 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0) {
               break label$11
              }
             }
             label$103 : {
              if (!$13) {
               break label$103
              }
              HEAP32[$10 >> 2] = $16;
             }
             label$104 : {
              if ($17) {
               break label$104
              }
              label$105 : {
               if (!$11) {
                break label$105
               }
               HEAP32[($11 + ($1 << 2 | 0) | 0) >> 2] = 0;
              }
              label$106 : {
               if ($15) {
                break label$106
               }
               $15 = 0;
               break label$104;
              }
              HEAP8[($15 + $1 | 0) >> 0] = 0;
             }
             $16 = $11;
            }
            i64toi32_i32$1 = $0;
            i64toi32_i32$4 = HEAP32[($0 + 120 | 0) >> 2] | 0;
            i64toi32_i32$5 = HEAP32[($0 + 124 | 0) >> 2] | 0;
            $684$hi = i64toi32_i32$5;
            i64toi32_i32$5 = $9$hi;
            i64toi32_i32$5 = $684$hi;
            i64toi32_i32$1 = i64toi32_i32$4;
            i64toi32_i32$4 = $9$hi;
            i64toi32_i32$0 = $9;
            i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
            i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
            if (i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
            }
            $686$hi = i64toi32_i32$2;
            i64toi32_i32$1 = (HEAP32[($0 + 4 | 0) >> 2] | 0) - (HEAP32[($0 + 44 | 0) >> 2] | 0) | 0;
            i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
            $692 = i64toi32_i32$1;
            $692$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $686$hi;
            i64toi32_i32$5 = i64toi32_i32$3;
            i64toi32_i32$1 = $692$hi;
            i64toi32_i32$0 = $692;
            i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
            i64toi32_i32$3 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
            if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
            }
            $9 = i64toi32_i32$4;
            $9$hi = i64toi32_i32$3;
            $7 = $7 + (($10 | 0) != (0 | 0)) | 0;
           }
           $1 = $6 + 1 | 0;
           $6 = HEAPU8[($6 + 1 | 0) >> 0] | 0;
           if ($6) {
            continue label$12
           }
           break label$2;
          };
         }
         $16 = $11;
         break label$9;
        }
        $5 = 1;
        $15 = 0;
        $16 = 0;
        break label$7;
       }
       $5 = $13;
       break label$3;
      }
      $5 = $13;
     }
     if ($7) {
      break label$3
     }
    }
    $7 = -1;
   }
   if (!$5) {
    break label$2
   }
   free($15 | 0);
   free($16 | 0);
  }
  label$107 : {
   if (!$4) {
    break label$107
   }
   __unlockfile($0 | 0);
  }
  __stack_pointer = $3 + 304 | 0;
  return $7 | 0;
 }
 
 function arg_n($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  HEAP32[($2 + 12 | 0) >> 2] = $0;
  $0 = $0 + ($1 >>> 0 > 1 >>> 0 ? ($1 << 2 | 0) + -4 | 0 : 0) | 0;
  HEAP32[($2 + 8 | 0) >> 2] = $0 + 4 | 0;
  return HEAP32[$0 >> 2] | 0 | 0;
 }
 
 function store_int($0, $1, $2, $2$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $2$hi = $2$hi | 0;
  var i64toi32_i32$0 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    switch ($1 + 2 | 0 | 0) {
    case 0:
     i64toi32_i32$0 = $2$hi;
     HEAP8[$0 >> 0] = $2;
     return;
    case 1:
     i64toi32_i32$0 = $2$hi;
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     i64toi32_i32$0 = $2$hi;
     HEAP32[$0 >> 2] = $2;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   i64toi32_i32$0 = $2$hi;
   HEAP32[$0 >> 2] = $2;
   HEAP32[($0 + 4 | 0) >> 2] = i64toi32_i32$0;
  }
 }
 
 function dlrealloc($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $5 = 0, $2 = 0, $8 = 0, $7 = 0, $6 = 0, $3 = 0, $4 = 0, $9 = 0, $11 = 0, $12 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if ($0) {
    break label$1
   }
   return malloc($1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 < -64 >>> 0) {
    break label$2
   }
   HEAP32[(0 + 159132 | 0) >> 2] = 48;
   return 0 | 0;
  }
  $2 = $1 >>> 0 < 11 >>> 0 ? 16 : ($1 + 11 | 0) & -8 | 0;
  $3 = $0 + -4 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  $5 = $4 & -8 | 0;
  label$3 : {
   label$4 : {
    label$5 : {
     if ($4 & 3 | 0) {
      break label$5
     }
     if ($2 >>> 0 < 256 >>> 0) {
      break label$4
     }
     if ($5 >>> 0 < ($2 | 4 | 0) >>> 0) {
      break label$4
     }
     if (($5 - $2 | 0) >>> 0 <= ((HEAP32[(0 + 159804 | 0) >> 2] | 0) << 1 | 0) >>> 0) {
      break label$3
     }
     break label$4;
    }
    $6 = $0 + -8 | 0;
    $7 = $6 + $5 | 0;
    label$6 : {
     if ($5 >>> 0 < $2 >>> 0) {
      break label$6
     }
     $1 = $5 - $2 | 0;
     if ($1 >>> 0 < 16 >>> 0) {
      break label$3
     }
     HEAP32[$3 >> 2] = $4 & 1 | 0 | $2 | 0 | 2 | 0;
     $2 = $6 + $2 | 0;
     HEAP32[($2 + 4 | 0) >> 2] = $1 | 3 | 0;
     HEAP32[($7 + 4 | 0) >> 2] = HEAP32[($7 + 4 | 0) >> 2] | 0 | 1 | 0;
     dispose_chunk($2 | 0, $1 | 0);
     return $0 | 0;
    }
    label$7 : {
     if (($7 | 0) != (HEAP32[(0 + 159348 | 0) >> 2] | 0 | 0)) {
      break label$7
     }
     $5 = (HEAP32[(0 + 159336 | 0) >> 2] | 0) + $5 | 0;
     if ($5 >>> 0 <= $2 >>> 0) {
      break label$4
     }
     HEAP32[$3 >> 2] = $4 & 1 | 0 | $2 | 0 | 2 | 0;
     $1 = $6 + $2 | 0;
     $2 = $5 - $2 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = $2 | 1 | 0;
     HEAP32[(0 + 159336 | 0) >> 2] = $2;
     HEAP32[(0 + 159348 | 0) >> 2] = $1;
     return $0 | 0;
    }
    label$8 : {
     if (($7 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
      break label$8
     }
     $5 = (HEAP32[(0 + 159332 | 0) >> 2] | 0) + $5 | 0;
     if ($5 >>> 0 < $2 >>> 0) {
      break label$4
     }
     label$9 : {
      label$10 : {
       $1 = $5 - $2 | 0;
       if ($1 >>> 0 < 16 >>> 0) {
        break label$10
       }
       HEAP32[$3 >> 2] = $4 & 1 | 0 | $2 | 0 | 2 | 0;
       $2 = $6 + $2 | 0;
       HEAP32[($2 + 4 | 0) >> 2] = $1 | 1 | 0;
       $5 = $6 + $5 | 0;
       HEAP32[$5 >> 2] = $1;
       HEAP32[($5 + 4 | 0) >> 2] = (HEAP32[($5 + 4 | 0) >> 2] | 0) & -2 | 0;
       break label$9;
      }
      HEAP32[$3 >> 2] = $4 & 1 | 0 | $5 | 0 | 2 | 0;
      $1 = $6 + $5 | 0;
      HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
      $1 = 0;
      $2 = 0;
     }
     HEAP32[(0 + 159344 | 0) >> 2] = $2;
     HEAP32[(0 + 159332 | 0) >> 2] = $1;
     return $0 | 0;
    }
    $8 = HEAP32[($7 + 4 | 0) >> 2] | 0;
    if ($8 & 2 | 0) {
     break label$4
    }
    $9 = ($8 & -8 | 0) + $5 | 0;
    if ($9 >>> 0 < $2 >>> 0) {
     break label$4
    }
    $10 = $9 - $2 | 0;
    label$11 : {
     label$12 : {
      if ($8 >>> 0 > 255 >>> 0) {
       break label$12
      }
      $1 = HEAP32[($7 + 8 | 0) >> 2] | 0;
      $11 = $8 >>> 3 | 0;
      $8 = ($11 << 3 | 0) + 159364 | 0;
      label$13 : {
       $5 = HEAP32[($7 + 12 | 0) >> 2] | 0;
       if (($5 | 0) != ($1 | 0)) {
        break label$13
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $11 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($1 + 12 | 0) >> 2] = $5;
      HEAP32[($5 + 8 | 0) >> 2] = $1;
      break label$11;
     }
     $12 = HEAP32[($7 + 24 | 0) >> 2] | 0;
     label$14 : {
      label$15 : {
       $8 = HEAP32[($7 + 12 | 0) >> 2] | 0;
       if (($8 | 0) == ($7 | 0)) {
        break label$15
       }
       $1 = HEAP32[($7 + 8 | 0) >> 2] | 0;
       HEAP32[(0 + 159340 | 0) >> 2] | 0;
       HEAP32[($1 + 12 | 0) >> 2] = $8;
       HEAP32[($8 + 8 | 0) >> 2] = $1;
       break label$14;
      }
      label$16 : {
       $1 = $7 + 20 | 0;
       $5 = HEAP32[$1 >> 2] | 0;
       if ($5) {
        break label$16
       }
       $1 = $7 + 16 | 0;
       $5 = HEAP32[$1 >> 2] | 0;
       if ($5) {
        break label$16
       }
       $8 = 0;
       break label$14;
      }
      label$17 : while (1) {
       $11 = $1;
       $8 = $5;
       $1 = $5 + 20 | 0;
       $5 = HEAP32[$1 >> 2] | 0;
       if ($5) {
        continue label$17
       }
       $1 = $8 + 16 | 0;
       $5 = HEAP32[($8 + 16 | 0) >> 2] | 0;
       if ($5) {
        continue label$17
       }
       break label$17;
      };
      HEAP32[$11 >> 2] = 0;
     }
     if (!$12) {
      break label$11
     }
     label$18 : {
      label$19 : {
       $5 = HEAP32[($7 + 28 | 0) >> 2] | 0;
       $1 = ($5 << 2 | 0) + 159628 | 0;
       if (($7 | 0) != (HEAP32[$1 >> 2] | 0 | 0)) {
        break label$19
       }
       HEAP32[$1 >> 2] = $8;
       if ($8) {
        break label$18
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
       break label$11;
      }
      HEAP32[($12 + ((HEAP32[($12 + 16 | 0) >> 2] | 0 | 0) == ($7 | 0) ? 16 : 20) | 0) >> 2] = $8;
      if (!$8) {
       break label$11
      }
     }
     HEAP32[($8 + 24 | 0) >> 2] = $12;
     label$20 : {
      $1 = HEAP32[($7 + 16 | 0) >> 2] | 0;
      if (!$1) {
       break label$20
      }
      HEAP32[($8 + 16 | 0) >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $8;
     }
     $1 = HEAP32[($7 + 20 | 0) >> 2] | 0;
     if (!$1) {
      break label$11
     }
     HEAP32[($8 + 20 | 0) >> 2] = $1;
     HEAP32[($1 + 24 | 0) >> 2] = $8;
    }
    label$21 : {
     if ($10 >>> 0 > 15 >>> 0) {
      break label$21
     }
     HEAP32[$3 >> 2] = $4 & 1 | 0 | $9 | 0 | 2 | 0;
     $1 = $6 + $9 | 0;
     HEAP32[($1 + 4 | 0) >> 2] = HEAP32[($1 + 4 | 0) >> 2] | 0 | 1 | 0;
     return $0 | 0;
    }
    HEAP32[$3 >> 2] = $4 & 1 | 0 | $2 | 0 | 2 | 0;
    $1 = $6 + $2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $10 | 3 | 0;
    $2 = $6 + $9 | 0;
    HEAP32[($2 + 4 | 0) >> 2] = HEAP32[($2 + 4 | 0) >> 2] | 0 | 1 | 0;
    dispose_chunk($1 | 0, $10 | 0);
    return $0 | 0;
   }
   label$22 : {
    $2 = malloc($1 | 0) | 0;
    if ($2) {
     break label$22
    }
    return 0 | 0;
   }
   $5 = HEAP32[$3 >> 2] | 0;
   $5 = ($5 & 3 | 0 ? -4 : -8) + ($5 & -8 | 0) | 0;
   __memcpy($2 | 0, $0 | 0, ($5 >>> 0 < $1 >>> 0 ? $5 : $1) | 0) | 0;
   free($0 | 0);
   $0 = $2;
  }
  return $0 | 0;
 }
 
 function string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  $3 = HEAP32[($0 + 84 | 0) >> 2] | 0;
  $4 = $2 + 256 | 0;
  $5 = memchr($3 | 0, $4 | 0) | 0;
  $4 = $5 ? $5 - $3 | 0 : $4;
  $2 = $4 >>> 0 < $2 >>> 0 ? $4 : $2;
  __memcpy($1 | 0, $3 | 0, $2 | 0) | 0;
  $4 = $3 + $4 | 0;
  HEAP32[($0 + 84 | 0) >> 2] = $4;
  HEAP32[($0 + 8 | 0) >> 2] = $4;
  HEAP32[($0 + 4 | 0) >> 2] = $3 + $2 | 0;
  return $2 | 0;
 }
 
 function wcrtomb($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = 1;
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    if ($1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(0 + 159232 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
      break label$3;
     }
     label$5 : {
      if ($1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0 + 1 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0 + 2 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0 + 3 | 0) >> 0] = $1 & 63 | 0 | 128 | 0;
      HEAP8[$0 >> 0] = $1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0 + 2 | 0) >> 0] = ($1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0 + 1 | 0) >> 0] = ($1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     (wasm2js_i32$0 = __errno_location() | 0, wasm2js_i32$1 = 25), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
    }
    $2 = -1;
   }
   return $2 | 0;
  }
  HEAP8[$0 >> 0] = $1;
  return 1 | 0;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = HEAP32[(0 + 159124 | 0) >> 2] | 0;
  $2 = ($0 + 3 | 0) & -4 | 0;
  $0 = $1 + $2 | 0;
  label$1 : {
   label$2 : {
    if (!$2) {
     break label$2
    }
    if ($0 >>> 0 <= $1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0 >>> 0 <= (emscripten_get_heap_size() | 0) >>> 0) {
     break label$3
    }
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 159124 | 0) >> 2] = $0;
   return $1 | 0;
  }
  HEAP32[(0 + 159132 | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function emscripten_get_heap_size() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function free($0) {
  $0 = $0 | 0;
  var $2 = 0, $6 = 0, $1 = 0, $4 = 0, $3 = 0, $5 = 0, $7 = 0, $379 = 0, $386 = 0, $393 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = $0 + -8 | 0;
   $2 = HEAP32[($0 + -4 | 0) >> 2] | 0;
   $0 = $2 & -8 | 0;
   $3 = $1 + $0 | 0;
   label$2 : {
    if ($2 & 1 | 0) {
     break label$2
    }
    if (!($2 & 3 | 0)) {
     break label$1
    }
    $2 = HEAP32[$1 >> 2] | 0;
    $1 = $1 - $2 | 0;
    $4 = HEAP32[(0 + 159340 | 0) >> 2] | 0;
    if ($1 >>> 0 < $4 >>> 0) {
     break label$1
    }
    $0 = $2 + $0 | 0;
    label$3 : {
     if (($1 | 0) == (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4 = HEAP32[($1 + 8 | 0) >> 2] | 0;
      $5 = $2 >>> 3 | 0;
      $6 = ($5 << 3 | 0) + 159364 | 0;
      label$5 : {
       $2 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($2 | 0) != ($4 | 0)) {
        break label$5
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($4 + 12 | 0) >> 2] = $2;
      HEAP32[($2 + 8 | 0) >> 2] = $4;
      break label$2;
     }
     $7 = HEAP32[($1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6 = HEAP32[($1 + 12 | 0) >> 2] | 0;
       if (($6 | 0) == ($1 | 0)) {
        break label$7
       }
       $2 = HEAP32[($1 + 8 | 0) >> 2] | 0;
       HEAP32[($2 + 12 | 0) >> 2] = $6;
       HEAP32[($6 + 8 | 0) >> 2] = $2;
       break label$6;
      }
      label$8 : {
       $2 = $1 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $2 = $1 + 16 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        break label$8
       }
       $6 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5 = $2;
       $6 = $4;
       $2 = $6 + 20 | 0;
       $4 = HEAP32[$2 >> 2] | 0;
       if ($4) {
        continue label$9
       }
       $2 = $6 + 16 | 0;
       $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
       if ($4) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5 >> 2] = 0;
     }
     if (!$7) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4 = HEAP32[($1 + 28 | 0) >> 2] | 0;
       $2 = ($4 << 2 | 0) + 159628 | 0;
       if (($1 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
        break label$11
       }
       HEAP32[$2 >> 2] = $6;
       if ($6) {
        break label$10
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($1 | 0) ? 16 : 20) | 0) >> 2] = $6;
      if (!$6) {
       break label$2
      }
     }
     HEAP32[($6 + 24 | 0) >> 2] = $7;
     label$12 : {
      $2 = HEAP32[($1 + 16 | 0) >> 2] | 0;
      if (!$2) {
       break label$12
      }
      HEAP32[($6 + 16 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     $2 = HEAP32[($1 + 20 | 0) >> 2] | 0;
     if (!$2) {
      break label$2
     }
     HEAP32[($6 + 20 | 0) >> 2] = $2;
     HEAP32[($2 + 24 | 0) >> 2] = $6;
     break label$2;
    }
    $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
    if (($2 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 159332 | 0) >> 2] = $0;
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
    return;
   }
   if ($1 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $2 = HEAP32[($3 + 4 | 0) >> 2] | 0;
   if (!($2 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($3 | 0) != (HEAP32[(0 + 159348 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 159348 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 159336 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 159336 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      if (($1 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 159332 | 0) >> 2] = 0;
      HEAP32[(0 + 159344 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($3 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 159344 | 0) >> 2] = $1;
      $0 = (HEAP32[(0 + 159332 | 0) >> 2] | 0) + $0 | 0;
      HEAP32[(0 + 159332 | 0) >> 2] = $0;
      HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
      HEAP32[($1 + $0 | 0) >> 2] = $0;
      return;
     }
     $0 = ($2 & -8 | 0) + $0 | 0;
     label$17 : {
      label$18 : {
       if ($2 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($3 + 8 | 0) >> 2] | 0;
       $5 = $2 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 159364 | 0;
       label$19 : {
        $2 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($2 | 0) != ($4 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $2;
       HEAP32[($2 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($3 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($3 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($3 | 0)) {
         break label$21
        }
        $2 = HEAP32[($3 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 159340 | 0) >> 2] | 0;
        HEAP32[($2 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $2;
        break label$20;
       }
       label$22 : {
        $2 = $3 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $2 = $3 + 16 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $2;
        $6 = $4;
        $2 = $6 + 20 | 0;
        $4 = HEAP32[$2 >> 2] | 0;
        if ($4) {
         continue label$23
        }
        $2 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($3 + 28 | 0) >> 2] | 0;
        $2 = ($4 << 2 | 0) + 159628 | 0;
        if (($3 | 0) != (HEAP32[$2 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$2 >> 2] = $6;
        if ($6) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($3 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $2 = HEAP32[($3 + 16 | 0) >> 2] | 0;
       if (!$2) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $2;
       HEAP32[($2 + 24 | 0) >> 2] = $6;
      }
      $2 = HEAP32[($3 + 20 | 0) >> 2] | 0;
      if (!$2) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $2;
      HEAP32[($2 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
     HEAP32[($1 + $0 | 0) >> 2] = $0;
     if (($1 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 159332 | 0) >> 2] = $0;
     return;
    }
    HEAP32[($3 + 4 | 0) >> 2] = $2 & -2 | 0;
    HEAP32[($1 + 4 | 0) >> 2] = $0 | 1 | 0;
    HEAP32[($1 + $0 | 0) >> 2] = $0;
   }
   label$27 : {
    if ($0 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2 = $0 >>> 3 | 0;
    $0 = ($2 << 3 | 0) + 159364 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
      $2 = 1 << $2 | 0;
      if ($4 & $2 | 0) {
       break label$29
      }
      HEAP32[(0 + 159324 | 0) >> 2] = $4 | $2 | 0;
      $2 = $0;
      break label$28;
     }
     $2 = HEAP32[($0 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0 + 8 | 0) >> 2] = $1;
    HEAP32[($2 + 12 | 0) >> 2] = $1;
    HEAP32[($1 + 12 | 0) >> 2] = $0;
    HEAP32[($1 + 8 | 0) >> 2] = $2;
    return;
   }
   $2 = 31;
   label$30 : {
    if ($0 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2 = $0 >>> 8 | 0;
    $379 = $2;
    $2 = (($2 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $379 << $2 | 0;
    $386 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $386 << $4 | 0;
    $393 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2 = (($393 << $6 | 0) >>> 15 | 0) - ($2 | $4 | 0 | $6 | 0) | 0;
    $2 = ($2 << 1 | 0 | (($0 >>> ($2 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1 + 28 | 0) >> 2] = $2;
   HEAP32[($1 + 16 | 0) >> 2] = 0;
   HEAP32[($1 + 20 | 0) >> 2] = 0;
   $4 = ($2 << 2 | 0) + 159628 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
       $3 = 1 << $2 | 0;
       if ($6 & $3 | 0) {
        break label$34
       }
       HEAP32[(0 + 159328 | 0) >> 2] = $6 | $3 | 0;
       HEAP32[$4 >> 2] = $1;
       HEAP32[($1 + 24 | 0) >> 2] = $4;
       break label$33;
      }
      $2 = $0 << (($2 | 0) == (31 | 0) ? 0 : 25 - ($2 >>> 1 | 0) | 0) | 0;
      $6 = HEAP32[$4 >> 2] | 0;
      label$35 : while (1) {
       $4 = $6;
       if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0 | 0)) {
        break label$32
       }
       $6 = $2 >>> 29 | 0;
       $2 = $2 << 1 | 0;
       $3 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
       $6 = HEAP32[$3 >> 2] | 0;
       if ($6) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3 >> 2] = $1;
      HEAP32[($1 + 24 | 0) >> 2] = $4;
     }
     HEAP32[($1 + 12 | 0) >> 2] = $1;
     HEAP32[($1 + 8 | 0) >> 2] = $1;
     break label$31;
    }
    $0 = HEAP32[($4 + 8 | 0) >> 2] | 0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($4 + 8 | 0) >> 2] = $1;
    HEAP32[($1 + 24 | 0) >> 2] = 0;
    HEAP32[($1 + 12 | 0) >> 2] = $4;
    HEAP32[($1 + 8 | 0) >> 2] = $0;
   }
   $1 = (HEAP32[(0 + 159356 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 159356 | 0) >> 2] = $1 ? $1 : -1;
  }
 }
 
 function dispose_chunk($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $6 = 0, $4 = 0, $2 = 0, $5 = 0, $7 = 0, $360 = 0, $367 = 0, $374 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  $2 = $0 + $1 | 0;
  label$1 : {
   label$2 : {
    $3 = HEAP32[($0 + 4 | 0) >> 2] | 0;
    if ($3 & 1 | 0) {
     break label$2
    }
    if (!($3 & 3 | 0)) {
     break label$1
    }
    $3 = HEAP32[$0 >> 2] | 0;
    $1 = $3 + $1 | 0;
    label$3 : {
     label$4 : {
      $0 = $0 - $3 | 0;
      if (($0 | 0) == (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
       break label$4
      }
      label$5 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$5
       }
       $4 = HEAP32[($0 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 159364 | 0;
       $3 = HEAP32[($0 + 12 | 0) >> 2] | 0;
       if (($3 | 0) != ($4 | 0)) {
        break label$3
       }
       (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
       break label$2;
      }
      $7 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      label$6 : {
       label$7 : {
        $6 = HEAP32[($0 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($0 | 0)) {
         break label$7
        }
        $3 = HEAP32[($0 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 159340 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$6;
       }
       label$8 : {
        $3 = $0 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $3 = $0 + 16 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         break label$8
        }
        $6 = 0;
        break label$6;
       }
       label$9 : while (1) {
        $5 = $3;
        $6 = $4;
        $3 = $6 + 20 | 0;
        $4 = HEAP32[$3 >> 2] | 0;
        if ($4) {
         continue label$9
        }
        $3 = $6 + 16 | 0;
        $4 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($4) {
         continue label$9
        }
        break label$9;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$2
      }
      label$10 : {
       label$11 : {
        $4 = HEAP32[($0 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 159628 | 0;
        if (($0 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
         break label$11
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$10
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
        break label$2;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($0 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$2
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$12 : {
       $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$12
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($0 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$2
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
      break label$2;
     }
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if (($3 & 3 | 0 | 0) != (3 | 0)) {
      break label$2
     }
     HEAP32[(0 + 159332 | 0) >> 2] = $1;
     HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[$2 >> 2] = $1;
     return;
    }
    HEAP32[($4 + 12 | 0) >> 2] = $3;
    HEAP32[($3 + 8 | 0) >> 2] = $4;
   }
   label$13 : {
    label$14 : {
     $3 = HEAP32[($2 + 4 | 0) >> 2] | 0;
     if ($3 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if (($2 | 0) != (HEAP32[(0 + 159348 | 0) >> 2] | 0 | 0)) {
       break label$15
      }
      HEAP32[(0 + 159348 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 159336 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 159336 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      if (($0 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 159332 | 0) >> 2] = 0;
      HEAP32[(0 + 159344 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if (($2 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
       break label$16
      }
      HEAP32[(0 + 159344 | 0) >> 2] = $0;
      $1 = (HEAP32[(0 + 159332 | 0) >> 2] | 0) + $1 | 0;
      HEAP32[(0 + 159332 | 0) >> 2] = $1;
      HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
      HEAP32[($0 + $1 | 0) >> 2] = $1;
      return;
     }
     $1 = ($3 & -8 | 0) + $1 | 0;
     label$17 : {
      label$18 : {
       if ($3 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4 = HEAP32[($2 + 8 | 0) >> 2] | 0;
       $5 = $3 >>> 3 | 0;
       $6 = ($5 << 3 | 0) + 159364 | 0;
       label$19 : {
        $3 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($3 | 0) != ($4 | 0)) {
         break label$19
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159324 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159324 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($4 + 12 | 0) >> 2] = $3;
       HEAP32[($3 + 8 | 0) >> 2] = $4;
       break label$17;
      }
      $7 = HEAP32[($2 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6 = HEAP32[($2 + 12 | 0) >> 2] | 0;
        if (($6 | 0) == ($2 | 0)) {
         break label$21
        }
        $3 = HEAP32[($2 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 159340 | 0) >> 2] | 0;
        HEAP32[($3 + 12 | 0) >> 2] = $6;
        HEAP32[($6 + 8 | 0) >> 2] = $3;
        break label$20;
       }
       label$22 : {
        $4 = $2 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $4 = $2 + 16 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         break label$22
        }
        $6 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5 = $4;
        $6 = $3;
        $4 = $3 + 20 | 0;
        $3 = HEAP32[$4 >> 2] | 0;
        if ($3) {
         continue label$23
        }
        $4 = $6 + 16 | 0;
        $3 = HEAP32[($6 + 16 | 0) >> 2] | 0;
        if ($3) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5 >> 2] = 0;
      }
      if (!$7) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4 = HEAP32[($2 + 28 | 0) >> 2] | 0;
        $3 = ($4 << 2 | 0) + 159628 | 0;
        if (($2 | 0) != (HEAP32[$3 >> 2] | 0 | 0)) {
         break label$25
        }
        HEAP32[$3 >> 2] = $6;
        if ($6) {
         break label$24
        }
        (wasm2js_i32$0 = 0, wasm2js_i32$1 = (HEAP32[(0 + 159328 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4 | 0) | 0) | 0), HEAP32[(wasm2js_i32$0 + 159328 | 0) >> 2] = wasm2js_i32$1;
        break label$17;
       }
       HEAP32[($7 + ((HEAP32[($7 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0) ? 16 : 20) | 0) >> 2] = $6;
       if (!$6) {
        break label$17
       }
      }
      HEAP32[($6 + 24 | 0) >> 2] = $7;
      label$26 : {
       $3 = HEAP32[($2 + 16 | 0) >> 2] | 0;
       if (!$3) {
        break label$26
       }
       HEAP32[($6 + 16 | 0) >> 2] = $3;
       HEAP32[($3 + 24 | 0) >> 2] = $6;
      }
      $3 = HEAP32[($2 + 20 | 0) >> 2] | 0;
      if (!$3) {
       break label$17
      }
      HEAP32[($6 + 20 | 0) >> 2] = $3;
      HEAP32[($3 + 24 | 0) >> 2] = $6;
     }
     HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
     HEAP32[($0 + $1 | 0) >> 2] = $1;
     if (($0 | 0) != (HEAP32[(0 + 159344 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 159332 | 0) >> 2] = $1;
     return;
    }
    HEAP32[($2 + 4 | 0) >> 2] = $3 & -2 | 0;
    HEAP32[($0 + 4 | 0) >> 2] = $1 | 1 | 0;
    HEAP32[($0 + $1 | 0) >> 2] = $1;
   }
   label$27 : {
    if ($1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $3 = $1 >>> 3 | 0;
    $1 = ($3 << 3 | 0) + 159364 | 0;
    label$28 : {
     label$29 : {
      $4 = HEAP32[(0 + 159324 | 0) >> 2] | 0;
      $3 = 1 << $3 | 0;
      if ($4 & $3 | 0) {
       break label$29
      }
      HEAP32[(0 + 159324 | 0) >> 2] = $4 | $3 | 0;
      $3 = $1;
      break label$28;
     }
     $3 = HEAP32[($1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($1 + 8 | 0) >> 2] = $0;
    HEAP32[($3 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 12 | 0) >> 2] = $1;
    HEAP32[($0 + 8 | 0) >> 2] = $3;
    return;
   }
   $3 = 31;
   label$30 : {
    if ($1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $3 = $1 >>> 8 | 0;
    $360 = $3;
    $3 = (($3 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4 = $360 << $3 | 0;
    $367 = $4;
    $4 = (($4 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6 = $367 << $4 | 0;
    $374 = $6;
    $6 = (($6 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $3 = (($374 << $6 | 0) >>> 15 | 0) - ($3 | $4 | 0 | $6 | 0) | 0;
    $3 = ($3 << 1 | 0 | (($1 >>> ($3 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($0 + 28 | 0) >> 2] = $3;
   HEAP32[($0 + 16 | 0) >> 2] = 0;
   HEAP32[($0 + 20 | 0) >> 2] = 0;
   $4 = ($3 << 2 | 0) + 159628 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      $6 = HEAP32[(0 + 159328 | 0) >> 2] | 0;
      $2 = 1 << $3 | 0;
      if ($6 & $2 | 0) {
       break label$33
      }
      HEAP32[(0 + 159328 | 0) >> 2] = $6 | $2 | 0;
      HEAP32[$4 >> 2] = $0;
      HEAP32[($0 + 24 | 0) >> 2] = $4;
      break label$32;
     }
     $3 = $1 << (($3 | 0) == (31 | 0) ? 0 : 25 - ($3 >>> 1 | 0) | 0) | 0;
     $6 = HEAP32[$4 >> 2] | 0;
     label$34 : while (1) {
      $4 = $6;
      if (((HEAP32[($6 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($1 | 0)) {
       break label$31
      }
      $6 = $3 >>> 29 | 0;
      $3 = $3 << 1 | 0;
      $2 = ($4 + ($6 & 4 | 0) | 0) + 16 | 0;
      $6 = HEAP32[$2 >> 2] | 0;
      if ($6) {
       continue label$34
      }
      break label$34;
     };
     HEAP32[$2 >> 2] = $0;
     HEAP32[($0 + 24 | 0) >> 2] = $4;
    }
    HEAP32[($0 + 12 | 0) >> 2] = $0;
    HEAP32[($0 + 8 | 0) >> 2] = $0;
    return;
   }
   $1 = HEAP32[($4 + 8 | 0) >> 2] | 0;
   HEAP32[($1 + 12 | 0) >> 2] = $0;
   HEAP32[($4 + 8 | 0) >> 2] = $0;
   HEAP32[($0 + 24 | 0) >> 2] = 0;
   HEAP32[($0 + 12 | 0) >> 2] = $4;
   HEAP32[($0 + 8 | 0) >> 2] = $1;
  }
 }
 
 function std__get_new_handler_28_29() {
  return void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29() | 0 | 0;
 }
 
 function std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $12 = 0;
  label$1 : {
   if ($0 >>> 0 > 99999999 >>> 0) {
    break label$1
   }
   return char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1 | 0, $0 | 0) | 0 | 0;
  }
  $2 = ($0 >>> 0) / (1e8 >>> 0) | 0;
  $12 = char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($1 | 0, $2 | 0) | 0;
  $0 = Math_imul($2, -1e8) + $0 | 0;
  $1 = ($0 >>> 0) / (1e4 >>> 0) | 0;
  return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($12 | 0, $1 | 0) | 0 | 0, Math_imul($1, -1e4) + $0 | 0 | 0) | 0 | 0;
 }
 
 function char__20std____2____itoa__append8_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  label$1 : {
   if ($1 >>> 0 > 9999 >>> 0) {
    break label$1
   }
   return char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
  }
  $2 = ($1 >>> 0) / (1e4 >>> 0) | 0;
  return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $2 | 0) | 0 | 0, Math_imul($2, -1e4) + $1 | 0 | 0) | 0 | 0;
 }
 
 function char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($1 >>> 0 > 9 >>> 0) {
    break label$1
   }
   return char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
  }
  return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = ($1 >>> 0) / (100 >>> 0) | 0;
  return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $2 | 0) | 0 | 0, Math_imul($2, -100) + $1 | 0 | 0) | 0 | 0;
 }
 
 function char__20std____2____itoa__append4_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if ($1 >>> 0 > 99 >>> 0) {
    break label$1
   }
   return char__20std____2____itoa__append2_no_zeros_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
  }
  label$2 : {
   if ($1 >>> 0 > 999 >>> 0) {
    break label$2
   }
   return char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
  }
  return char__20std____2____itoa__append4_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 >> 0] = $1 + 48 | 0;
  return $0 + 1 | 0 | 0;
 }
 
 function char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = HEAPU16[(($1 << 1 | 0) + 158096 | 0) >> 1] | 0;
  HEAP8[$0 >> 0] = $2;
  HEAP8[($0 + 1 | 0) >> 0] = $2 >>> 8 | 0;
  return $0 + 2 | 0 | 0;
 }
 
 function char__20std____2____itoa__append3_unsigned_20int__28char__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = ($1 >>> 0) / (100 >>> 0) | 0;
  return char__20std____2____itoa__append2_unsigned_20int__28char__2c_20unsigned_20int_29(char__20std____2____itoa__append1_unsigned_20int__28char__2c_20unsigned_20int_29($0 | 0, $2 | 0) | 0 | 0, Math_imul($2, -100) + $1 | 0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = 10;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   $1 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0 | 0) | 0) + -1 | 0;
  }
  return $1 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_cap_28_29_20const($0) {
  $0 = $0 | 0;
  return (HEAP32[((std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29_20const($0 | 0) | 0) + 8 | 0) >> 2] | 0) & 2147483647 | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0) {
  $0 = $0 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0 | 0) | 0 | 0;
  }
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_long_pointer_28_29($0) {
  $0 = $0 | 0;
  return HEAP32[(std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0) >> 2] | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0) {
  $0 = $0 | 0;
  return std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0 | 0;
 }
 
 function std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return memmove($0 | 0, $1 | 0, $2 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  label$1 : {
   if (!(std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____is_long_28_29_20const($0 | 0) | 0)) {
    break label$1
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0 | 0, $1 | 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0 | 0, $1 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0, wasm2js_i32$1 = $1), HEAP32[(wasm2js_i32$0 + 4 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0, wasm2js_i32$1 = $1), HEAP8[(wasm2js_i32$0 + 11 | 0) >> 0] = wasm2js_i32$1;
 }
 
 function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  HEAP8[$0 >> 0] = $1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  label$1 : {
   if ((-18 - $1 | 0) >>> 0 < $2 >>> 0) {
    break label$1
   }
   $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0 | 0) | 0;
   $9 = -17;
   label$2 : {
    if ($1 >>> 0 > 2147483622 >>> 0) {
     break label$2
    }
    HEAP32[($7 + 8 | 0) >> 2] = $1 << 1 | 0;
    HEAP32[($7 + 12 | 0) >> 2] = $2 + $1 | 0;
    $9 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29(HEAP32[(unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($7 + 12 | 0 | 0, $7 + 8 | 0 | 0) | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   }
   $2 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($9 | 0) | 0;
   label$3 : {
    if (!$4) {
     break label$3
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 | 0, $8 | 0, $4 | 0) | 0;
   }
   label$4 : {
    if (!$5) {
     break label$4
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($2 + $4 | 0 | 0, $6 | 0, $5 | 0) | 0;
   }
   label$5 : {
    if (($3 | 0) == ($4 | 0)) {
     break label$5
    }
    std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29(($2 + $4 | 0) + $5 | 0 | 0, $8 + $4 | 0 | 0, $3 - $4 | 0 | 0) | 0;
   }
   label$6 : {
    if (($1 | 0) == (10 | 0)) {
     break label$6
    }
    std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($8 | 0);
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0 | 0, $2 | 0);
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0 | 0, $9 | 0);
   $4 = $5 + $3 | 0;
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0 | 0, $4 | 0);
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $4 | 0 | 0, 0 | 0);
   __stack_pointer = $7 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const();
  abort();
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $7 = 0;
  $1 = 10;
  label$1 : {
   if ($0 >>> 0 < 11 >>> 0) {
    break label$1
   }
   $0 = unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0 + 1 | 0 | 0) | 0;
   $7 = $0;
   $0 = $0 + -1 | 0;
   $1 = ($0 | 0) == (11 | 0) ? $7 : $0;
  }
  return $1 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  return std____2__allocator_char___allocate_28unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   __memcpy($0 | 0, $1 | 0, $2 | 0) | 0;
  }
  return $0 | 0;
 }
 
 function std____2__allocator_traits_std____2__allocator_char__20___deallocate_28std____2__allocator_char___2c_20char__2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0, wasm2js_i32$1 = $1), HEAP32[wasm2js_i32$0 >> 2] = wasm2js_i32$1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0;
  (wasm2js_i32$0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20___first_28_29($0 | 0) | 0, wasm2js_i32$1 = $1 | -2147483648 | 0), HEAP32[(wasm2js_i32$0 + 8 | 0) >> 2] = wasm2js_i32$1;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const() {
  abort();
  abort();
 }
 
 function unsigned_20long_20const__20std____2__max_unsigned_20long_2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__20__28unsigned_20long_20const__2c_20unsigned_20long_20const__2c_20std____2____less_unsigned_20long_2c_20unsigned_20long__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return (std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const(HEAP32[$0 >> 2] | 0 | 0, HEAP32[$1 >> 2] | 0 | 0) | 0 ? $1 : $0) | 0;
 }
 
 function unsigned_20long_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____align_it_16ul__28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return ($0 + 15 | 0) & -16 | 0 | 0;
 }
 
 function std____2__allocator_char___allocate_28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function std____2__allocator_char___deallocate_28char__2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0 | 0);
 }
 
 function std____2____libcpp_deallocate_28void__2c_20unsigned_20long_2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0 | 0);
 }
 
 function void_20std____2____do_deallocate_handle_size___28void__2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  void_20std____2____libcpp_operator_delete_void___28void__29($0 | 0);
 }
 
 function void_20std____2____libcpp_operator_delete_void___28void__29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function std____2____libcpp_allocate_28unsigned_20long_2c_20unsigned_20long_29($0) {
  $0 = $0 | 0;
  return void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function void__20std____2____libcpp_operator_new_unsigned_20long__28unsigned_20long_29($0) {
  $0 = $0 | 0;
  return operator_20new_28unsigned_20long_29($0 | 0) | 0 | 0;
 }
 
 function std____2____less_unsigned_20long_2c_20unsigned_20long___operator_28_29_28unsigned_20long_20const__2c_20unsigned_20long_20const__29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $0 >>> 0 < $1 >>> 0 | 0;
 }
 
 function std____2__char_traits_char___length_28char_20const__29($0) {
  $0 = $0 | 0;
  return strlen($0 | 0) | 0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___insert_28unsigned_20long_2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0;
  $3 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___size_28_29_20const($0 | 0) | 0;
  label$1 : {
   label$2 : {
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___capacity_28_29_20const($0 | 0) | 0;
    if (($4 - $3 | 0) >>> 0 < $2 >>> 0) {
     break label$2
    }
    if (!$2) {
     break label$1
    }
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_pointer_28_29($0 | 0) | 0;
    label$3 : {
     if (!$3) {
      break label$3
     }
     std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($4 + $2 | 0 | 0, $4 | 0, $3 | 0) | 0;
     $1 = $1 + ($4 >>> 0 <= $1 >>> 0 ? (($4 + $3 | 0) >>> 0 > $1 >>> 0 ? $2 : 0) : 0) | 0;
    }
    $1 = std____2__char_traits_char___move_28char__2c_20char_20const__2c_20unsigned_20long_29($4 | 0, $1 | 0, $2 | 0) | 0;
    $2 = $3 + $2 | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_size_28unsigned_20long_29($0 | 0, $2 | 0);
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($1 + $2 | 0 | 0, 0 | 0);
    return $0 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29($0 | 0, $4 | 0, ($3 + $2 | 0) - $4 | 0 | 0, $3 | 0, 0 | 0, $2 | 0, $1 | 0);
  }
  return $0 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__20std____2___28anonymous_20namespace_29__i_to_string_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int__28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($2 + 8 | 0 | 0, $2 + 21 | 0 | 0, $2 + 32 | 0 | 0, $1 | 0);
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0 | 0, $2 + 21 | 0 | 0, HEAP32[($2 + 8 | 0) >> 2] | 0 | 0) | 0;
  __stack_pointer = $2 + 32 | 0;
 }
 
 function std____2__to_chars_result_20std____2__to_chars_int_2c_200__28char__2c_20char__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0 | 0, $1 | 0, $2 | 0, $3 | 0);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20___basic_string_char__2c_20void__28char__2c_20char__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = std____2____compressed_pair_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____rep_2c_20std____2__allocator_char__20_____compressed_pair_std____2____default_init_tag_2c_20std____2____default_init_tag__28std____2____default_init_tag___2c_20std____2____default_init_tag___29($0 | 0, $3 + 8 | 0 | 0, $3 | 0) | 0;
  std____2___MetaBase___is_cpp17_forward_iterator_char____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0 | 0, $1 | 0, $2 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function std____2__to_chars_result_20std____2____to_chars_itoa_int__28char__2c_20char__2c_20int_2c_20std____2__integral_constant_bool_2c_20true__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (($1 | 0) == ($2 | 0)) {
    break label$1
   }
   if (($3 | 0) > (-1 | 0)) {
    break label$1
   }
   HEAP8[$1 >> 0] = 45;
   $1 = $1 + 1 | 0;
   $3 = unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($3 | 0) | 0;
  }
  std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0 | 0, $1 | 0, $2 | 0, $3 | 0);
 }
 
 function std____2___MetaBase___is_cpp17_forward_iterator_char____value____EnableIfImpl_void__20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____init_char___28char__2c_20char__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $4 = 0, $3 = 0, $5 = 0;
  label$1 : {
   $3 = std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($1 | 0, $2 | 0) | 0;
   if ($3 >>> 0 >= -16 >>> 0) {
    break label$1
   }
   label$2 : {
    label$3 : {
     if ($3 >>> 0 > 10 >>> 0) {
      break label$3
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_short_size_28unsigned_20long_29($0 | 0, $3 | 0);
     $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____get_short_pointer_28_29($0 | 0) | 0;
     break label$2;
    }
    $5 = (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____recommend_28unsigned_20long_29($3 | 0) | 0) + 1 | 0;
    $4 = std____2__allocator_traits_std____2__allocator_char__20___allocate_28std____2__allocator_char___2c_20unsigned_20long_29($5 | 0) | 0;
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_pointer_28char__29($0 | 0, $4 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_cap_28unsigned_20long_29($0 | 0, $5 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____set_long_size_28unsigned_20long_29($0 | 0, $3 | 0);
   }
   label$4 : {
    label$5 : while (1) {
     if (($1 | 0) == ($2 | 0)) {
      break label$4
     }
     std____2__char_traits_char___assign_28char__2c_20char_20const__29($4 | 0, HEAPU8[$1 >> 0] | 0 | 0);
     $4 = $4 + 1 | 0;
     $1 = $1 + 1 | 0;
     continue label$5;
    };
   }
   std____2__char_traits_char___assign_28char__2c_20char_20const__29($4 | 0, 0 | 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20_____throw_length_error_28_29_20const();
  abort();
 }
 
 function std____2__iterator_traits_char____difference_type_20std____2__distance_char___28char__2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function std____2__iterator_traits_char____difference_type_20std____2____distance_char___28char__2c_20char__2c_20std____2__random_access_iterator_tag_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return $1 - $0 | 0 | 0;
 }
 
 function unsigned_20int_20std____2____complement_unsigned_20int__28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return 0 - $0 | 0 | 0;
 }
 
 function std____2__to_chars_result_20std____2____to_chars_itoa_unsigned_20int__28char__2c_20char__2c_20unsigned_20int_2c_20std____2__integral_constant_bool_2c_20false__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   label$2 : {
    $4 = $2 - $1 | 0;
    if (($4 | 0) > (9 | 0)) {
     break label$2
    }
    $5 = 61;
    if ((std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($3 | 0) | 0 | 0) > ($4 | 0)) {
     break label$1
    }
   }
   $5 = 0;
   $2 = std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($3 | 0, $1 | 0) | 0;
  }
  HEAP32[($0 + 4 | 0) >> 2] = $5;
  HEAP32[$0 >> 2] = $2;
 }
 
 function std____2____itoa____traits_base_unsigned_20int_2c_20void_____width_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = Math_imul(32 - Math_clz32($0 | 1 | 0) | 0, 1233) >>> 12 | 0;
  return ($1 - ((HEAP32[(($1 << 2 | 0) + 158304 | 0) >> 2] | 0) >>> 0 > $0 >>> 0) | 0) + 1 | 0 | 0;
 }
 
 function std____2____itoa____traits_base_unsigned_20int_2c_20void_____convert_28unsigned_20int_2c_20char__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return std____2____itoa____u32toa_28unsigned_20int_2c_20char__29($0 | 0, $1 | 0) | 0 | 0;
 }
 
 function void_20_28_std____2___28anonymous_20namespace_29____libcpp_atomic_load_void_20_28__29_28_29__28void_20_28__20const__29_28_29_2c_20int_29_29_28_29() {
  return 0 | 0;
 }
 
 function strcmp($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $3 = 0, $2 = 0;
  $2 = HEAPU8[$1 >> 0] | 0;
  label$1 : {
   $3 = HEAPU8[$0 >> 0] | 0;
   if (!$3) {
    break label$1
   }
   if (($3 | 0) != ($2 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2 = HEAPU8[($1 + 1 | 0) >> 0] | 0;
    $3 = HEAPU8[($0 + 1 | 0) >> 0] | 0;
    if (!$3) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 | 0) == ($2 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3 - ($2 & 255 | 0) | 0 | 0;
 }
 
 function __cxxabiv1____shim_type_info_____shim_type_info_28_29($0) {
  $0 = $0 | 0;
  return $0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop1_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____shim_type_info__noop2_28_29_20const($0) {
  $0 = $0 | 0;
 }
 
 function __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function __cxxabiv1____class_type_info_____class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function __cxxabiv1____si_class_type_info_____si_class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29($0) {
  $0 = $0 | 0;
  operator_20delete_28void__29($0 | 0);
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0 | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ($2) {
    break label$1
   }
   return (HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) | 0;
  }
  label$2 : {
   if (($0 | 0) != ($1 | 0)) {
    break label$2
   }
   return 1 | 0;
  }
  return !(strcmp(HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, HEAP32[($1 + 4 | 0) >> 2] | 0 | 0) | 0) | 0;
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 64 | 0;
  __stack_pointer = $3;
  $4 = 1;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, $1 | 0, 0 | 0) | 0) {
    break label$1
   }
   label$2 : {
    if ($1) {
     break label$2
    }
    $4 = 0;
    break label$1;
   }
   $4 = 0;
   $1 = __dynamic_cast($1 | 0) | 0;
   if (!$1) {
    break label$1
   }
   memset($3 + 8 | 0 | 4 | 0 | 0, 0 | 0, 52 | 0) | 0;
   HEAP32[($3 + 56 | 0) >> 2] = 1;
   HEAP32[($3 + 20 | 0) >> 2] = -1;
   HEAP32[($3 + 16 | 0) >> 2] = $0;
   HEAP32[($3 + 8 | 0) >> 2] = $1;
   FUNCTION_TABLE[HEAP32[((HEAP32[$1 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($1, $3 + 8 | 0, HEAP32[$2 >> 2] | 0, 1);
   label$3 : {
    $1 = HEAP32[($3 + 32 | 0) >> 2] | 0;
    if (($1 | 0) != (1 | 0)) {
     break label$3
    }
    HEAP32[$2 >> 2] = HEAP32[($3 + 24 | 0) >> 2] | 0;
   }
   $4 = ($1 | 0) == (1 | 0);
  }
  __stack_pointer = $3 + 64 | 0;
  return $4 | 0;
 }
 
 function __dynamic_cast($0) {
  $0 = $0 | 0;
  var $1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $1 = __stack_pointer - 64 | 0;
  __stack_pointer = $1;
  $2 = HEAP32[$0 >> 2] | 0;
  $3 = HEAP32[($2 + -4 | 0) >> 2] | 0;
  $4 = HEAP32[($2 + -8 | 0) >> 2] | 0;
  i64toi32_i32$1 = $1 + 28 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 36 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 44 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $1 + 52 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  $2 = 0;
  $7 = $1 + 59 | 0;
  $8 = 0;
  HEAP8[$7 >> 0] = $8;
  HEAP8[($7 + 1 | 0) >> 0] = $8 >>> 8 | 0;
  HEAP8[($7 + 2 | 0) >> 0] = $8 >>> 16 | 0;
  HEAP8[($7 + 3 | 0) >> 0] = $8 >>> 24 | 0;
  i64toi32_i32$1 = $1;
  i64toi32_i32$0 = 0;
  HEAP32[($1 + 20 | 0) >> 2] = 0;
  HEAP32[($1 + 24 | 0) >> 2] = i64toi32_i32$0;
  HEAP32[($1 + 16 | 0) >> 2] = 158380;
  HEAP32[($1 + 12 | 0) >> 2] = $0;
  HEAP32[($1 + 8 | 0) >> 2] = 158428;
  $0 = $0 + $4 | 0;
  label$1 : {
   label$2 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($3 | 0, 158428 | 0, 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($1 + 56 | 0) >> 2] = 1;
    FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($3, $1 + 8 | 0, $0, $0, 1, 0);
    $2 = (HEAP32[($1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0) ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[((HEAP32[$3 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($3, $1 + 8 | 0, $0, 1, 0);
   label$3 : {
    switch (HEAP32[($1 + 44 | 0) >> 2] | 0 | 0) {
    case 0:
     $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = HEAP32[($1 + 28 | 0) >> 2] | 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = (HEAP32[($1 + 40 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (HEAP32[($1 + 48 | 0) >> 2] | 0 | 0) == (1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   label$5 : {
    if ((HEAP32[($1 + 32 | 0) >> 2] | 0 | 0) == (1 | 0)) {
     break label$5
    }
    if (HEAP32[($1 + 48 | 0) >> 2] | 0) {
     break label$1
    }
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
    if ((HEAP32[($1 + 40 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$1
    }
   }
   $2 = HEAP32[($1 + 24 | 0) >> 2] | 0;
  }
  __stack_pointer = $1 + 64 | 0;
  return $2 | 0;
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0, $4 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  HEAP8[($0 + 53 | 0) >> 0] = 1;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
    break label$1
   }
   HEAP8[($0 + 52 | 0) >> 0] = 1;
   label$2 : {
    label$3 : {
     $2 = HEAP32[($0 + 16 | 0) >> 2] | 0;
     if ($2) {
      break label$3
     }
     HEAP32[($0 + 36 | 0) >> 2] = 1;
     HEAP32[($0 + 24 | 0) >> 2] = $3;
     HEAP32[($0 + 16 | 0) >> 2] = $1;
     if (($3 | 0) != (1 | 0)) {
      break label$1
     }
     if ((HEAP32[($0 + 48 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    label$4 : {
     if (($2 | 0) != ($1 | 0)) {
      break label$4
     }
     label$5 : {
      $2 = HEAP32[($0 + 24 | 0) >> 2] | 0;
      if (($2 | 0) != (2 | 0)) {
       break label$5
      }
      HEAP32[($0 + 24 | 0) >> 2] = $3;
      $2 = $3;
     }
     if ((HEAP32[($0 + 48 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$1
     }
     if (($2 | 0) == (1 | 0)) {
      break label$2
     }
     break label$1;
    }
    HEAP32[($0 + 36 | 0) >> 2] = (HEAP32[($0 + 36 | 0) >> 2] | 0) + 1 | 0;
   }
   HEAP8[($0 + 54 | 0) >> 0] = 1;
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
       break label$5
      }
      if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$4
      }
     }
     if (($3 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1 + 32 | 0) >> 2] = $3;
    label$6 : {
     if ((HEAP32[($1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     HEAP16[($1 + 52 | 0) >> 1] = 0;
     $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $1, $2, $2, 1, $4);
     label$7 : {
      if (!(HEAPU8[($1 + 53 | 0) >> 0] | 0)) {
       break label$7
      }
      HEAP32[($1 + 44 | 0) >> 2] = 3;
      if (!(HEAPU8[($1 + 52 | 0) >> 0] | 0)) {
       break label$6
      }
      break label$2;
     }
     HEAP32[($1 + 44 | 0) >> 2] = 4;
    }
    HEAP32[($1 + 20 | 0) >> 2] = $2;
    HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
    return;
   }
   $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
   FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  label$1 : {
   if ((HEAP32[($0 + 4 | 0) >> 2] | 0 | 0) != ($1 | 0)) {
    break label$1
   }
   if ((HEAP32[($0 + 28 | 0) >> 2] | 0 | 0) == (1 | 0)) {
    break label$1
   }
   HEAP32[($0 + 28 | 0) >> 2] = $2;
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
   return;
  }
  $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  label$1 : {
   $3 = HEAP32[($0 + 16 | 0) >> 2] | 0;
   if ($3) {
    break label$1
   }
   HEAP32[($0 + 36 | 0) >> 2] = 1;
   HEAP32[($0 + 24 | 0) >> 2] = $2;
   HEAP32[($0 + 16 | 0) >> 2] = $1;
   return;
  }
  label$2 : {
   label$3 : {
    if (($3 | 0) != ($1 | 0)) {
     break label$3
    }
    if ((HEAP32[($0 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP32[($0 + 24 | 0) >> 2] = $2;
    return;
   }
   HEAP8[($0 + 54 | 0) >> 0] = 1;
   HEAP32[($0 + 24 | 0) >> 2] = 2;
   HEAP32[($0 + 36 | 0) >> 2] = (HEAP32[($0 + 36 | 0) >> 2] | 0) + 1 | 0;
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
  }
 }
 
 function __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  label$1 : {
   label$2 : {
    if ($3) {
     break label$2
    }
    $5 = 0;
    break label$1;
   }
   $5 = $1 >> 8 | 0;
   if (!($1 & 1 | 0)) {
    break label$1
   }
   $5 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2] | 0 | 0, $5 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 28 | 0) >> 2] | 0 | 0]($0, $2, $3 + $5 | 0, $1 & 2 | 0 ? $4 : 2);
 }
 
 function update_offset_to_base_28char_20const__2c_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return HEAP32[($0 + $1 | 0) >> 2] | 0 | 0;
 }
 
 function __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
   return;
  }
  $4 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  $5 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$5 >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0);
  label$2 : {
   $0 = $0 + 24 | 0;
   $4 = $5 + ($4 << 3 | 0) | 0;
   if ($0 >>> 0 >= $4 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    __cxxabiv1____base_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const(HEAP32[$0 >> 2] | 0 | 0, HEAP32[($0 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0);
    if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    $0 = $0 + 8 | 0;
    if ($0 >>> 0 < $4 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $8 = 0, $6 = 0, $7 = 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   label$3 : {
    if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
       break label$5
      }
      if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
       break label$4
      }
     }
     if (($3 | 0) != (1 | 0)) {
      break label$2
     }
     HEAP32[($1 + 32 | 0) >> 2] = 1;
     return;
    }
    HEAP32[($1 + 32 | 0) >> 2] = $3;
    label$6 : {
     if ((HEAP32[($1 + 44 | 0) >> 2] | 0 | 0) == (4 | 0)) {
      break label$6
     }
     $5 = $0 + 16 | 0;
     $3 = $5 + ((HEAP32[($0 + 12 | 0) >> 2] | 0) << 3 | 0) | 0;
     $6 = 0;
     $7 = 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : while (1) {
         if ($5 >>> 0 >= $3 >>> 0) {
          break label$9
         }
         HEAP16[($1 + 52 | 0) >> 1] = 0;
         __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $2 | 0, 1 | 0, $4 | 0);
         if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
          break label$9
         }
         label$11 : {
          if (!(HEAPU8[($1 + 53 | 0) >> 0] | 0)) {
           break label$11
          }
          label$12 : {
           if (!(HEAPU8[($1 + 52 | 0) >> 0] | 0)) {
            break label$12
           }
           $8 = 1;
           if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
            break label$8
           }
           $6 = 1;
           $7 = 1;
           $8 = 1;
           if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 2 | 0) {
            break label$11
           }
           break label$8;
          }
          $6 = 1;
          $8 = $7;
          if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0)) {
           break label$8
          }
         }
         $5 = $5 + 8 | 0;
         continue label$10;
        };
       }
       $5 = 4;
       $8 = $7;
       if (!($6 & 1 | 0)) {
        break label$7
       }
      }
      $5 = 3;
     }
     HEAP32[($1 + 44 | 0) >> 2] = $5;
     if ($8 & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($1 + 20 | 0) >> 2] = $2;
    HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$2
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$2
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
    return;
   }
   $8 = HEAP32[($0 + 12 | 0) >> 2] | 0;
   $6 = $0 + 16 | 0;
   __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
   $5 = $0 + 24 | 0;
   $8 = $6 + ($8 << 3 | 0) | 0;
   if ($5 >>> 0 >= $8 >>> 0) {
    break label$2
   }
   label$13 : {
    label$14 : {
     $0 = HEAP32[($0 + 8 | 0) >> 2] | 0;
     if ($0 & 2 | 0) {
      break label$14
     }
     if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$13
     }
    }
    label$15 : while (1) {
     if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
     $5 = $5 + 8 | 0;
     if ($5 >>> 0 < $8 >>> 0) {
      continue label$15
     }
     break label$2;
    };
   }
   label$16 : {
    if ($0 & 1 | 0) {
     break label$16
    }
    label$17 : while (1) {
     if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
      break label$2
     }
     if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
     __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
     $5 = $5 + 8 | 0;
     if ($5 >>> 0 < $8 >>> 0) {
      continue label$17
     }
     break label$2;
    };
   }
   label$18 : while (1) {
    if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$19 : {
     if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
      break label$19
     }
     if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
      break label$2
     }
    }
    __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$5 >> 2] | 0 | 0, HEAP32[($5 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0);
    $5 = $5 + 8 | 0;
    if ($5 >>> 0 < $8 >>> 0) {
     continue label$18
    }
    break label$18;
   };
  }
 }
 
 function __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = $1 >> 8 | 0;
  label$1 : {
   if (!($1 & 1 | 0)) {
    break label$1
   }
   $7 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$4 >> 2] | 0 | 0, $7 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 20 | 0) >> 2] | 0 | 0]($0, $2, $3, $4 + $7 | 0, $1 & 2 | 0 ? $5 : 2, $6);
 }
 
 function __cxxabiv1____base_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = $1 >> 8 | 0;
  label$1 : {
   if (!($1 & 1 | 0)) {
    break label$1
   }
   $6 = update_offset_to_base_28char_20const__2c_20long_29(HEAP32[$3 >> 2] | 0 | 0, $6 | 0) | 0;
  }
  FUNCTION_TABLE[HEAP32[((HEAP32[$0 >> 2] | 0) + 24 | 0) >> 2] | 0 | 0]($0, $2, $3 + $6 | 0, $1 & 2 | 0 ? $4 : 2, $5);
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0);
   return;
  }
  label$2 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[$1 >> 2] | 0 | 0, $4 | 0) | 0)) {
    break label$2
   }
   label$3 : {
    label$4 : {
     if ((HEAP32[($1 + 16 | 0) >> 2] | 0 | 0) == ($2 | 0)) {
      break label$4
     }
     if ((HEAP32[($1 + 20 | 0) >> 2] | 0 | 0) != ($2 | 0)) {
      break label$3
     }
    }
    if (($3 | 0) != (1 | 0)) {
     break label$2
    }
    HEAP32[($1 + 32 | 0) >> 2] = 1;
    return;
   }
   HEAP32[($1 + 20 | 0) >> 2] = $2;
   HEAP32[($1 + 32 | 0) >> 2] = $3;
   HEAP32[($1 + 40 | 0) >> 2] = (HEAP32[($1 + 40 | 0) >> 2] | 0) + 1 | 0;
   label$5 : {
    if ((HEAP32[($1 + 36 | 0) >> 2] | 0 | 0) != (1 | 0)) {
     break label$5
    }
    if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) != (2 | 0)) {
     break label$5
    }
    HEAP8[($1 + 54 | 0) >> 0] = 1;
   }
   HEAP32[($1 + 44 | 0) >> 2] = 4;
  }
 }
 
 function __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $8 = 0, $7 = 0, $10 = 0, $12 = 0, $11 = 0, $9 = 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0, $4 | 0);
   return;
  }
  $6 = HEAPU8[($1 + 53 | 0) >> 0] | 0;
  $7 = HEAP32[($0 + 12 | 0) >> 2] | 0;
  HEAP8[($1 + 53 | 0) >> 0] = 0;
  $8 = HEAPU8[($1 + 52 | 0) >> 0] | 0;
  HEAP8[($1 + 52 | 0) >> 0] = 0;
  $9 = $0 + 16 | 0;
  __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$9 >> 2] | 0 | 0, HEAP32[($0 + 20 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0);
  $10 = HEAPU8[($1 + 53 | 0) >> 0] | 0;
  $11 = $6 | $10 | 0;
  $12 = HEAPU8[($1 + 52 | 0) >> 0] | 0;
  $8 = $8 | $12 | 0;
  label$2 : {
   $6 = $0 + 24 | 0;
   $7 = $9 + ($7 << 3 | 0) | 0;
   if ($6 >>> 0 >= $7 >>> 0) {
    break label$2
   }
   label$3 : while (1) {
    if (HEAPU8[($1 + 54 | 0) >> 0] | 0) {
     break label$2
    }
    label$4 : {
     label$5 : {
      if (!($12 & 255 | 0)) {
       break label$5
      }
      if ((HEAP32[($1 + 24 | 0) >> 2] | 0 | 0) == (1 | 0)) {
       break label$2
      }
      if ((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 2 | 0) {
       break label$4
      }
      break label$2;
     }
     if (!($10 & 255 | 0)) {
      break label$4
     }
     if (!((HEAPU8[($0 + 8 | 0) >> 0] | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP16[($1 + 52 | 0) >> 1] = 0;
    __cxxabiv1____base_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const(HEAP32[$6 >> 2] | 0 | 0, HEAP32[($6 + 4 | 0) >> 2] | 0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0, $5 | 0);
    $10 = HEAPU8[($1 + 53 | 0) >> 0] | 0;
    $11 = $10 | $11 | 0;
    $12 = HEAPU8[($1 + 52 | 0) >> 0] | 0;
    $8 = $12 | $8 | 0;
    $6 = $6 + 8 | 0;
    if ($6 >>> 0 < $7 >>> 0) {
     continue label$3
    }
    break label$3;
   };
  }
  HEAP8[($1 + 53 | 0) >> 0] = ($11 & 255 | 0 | 0) != (0 | 0);
  HEAP8[($1 + 52 | 0) >> 0] = ($8 & 255 | 0 | 0) != (0 | 0);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  label$1 : {
   if (!(is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0 | 0, HEAP32[($1 + 8 | 0) >> 2] | 0 | 0, $5 | 0) | 0)) {
    break label$1
   }
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1 | 0, $2 | 0, $3 | 0, $4 | 0);
  }
 }
 
 function dynCall_jiji(fptr, $0, $1, $1$hi, $2) {
  fptr = fptr | 0;
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[fptr | 0]($0, $1, i64toi32_i32$0, $2) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17 = 0, $18 = 0, $6 = 0, $7 = 0, $9 = 0, $9$hi = 0, $12$hi = 0, $5 = 0, $5$hi = 0;
  $6 = $0;
  $7 = $1;
  i64toi32_i32$0 = 0;
  $9 = $2;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = dynCall_jiji($6 | 0, $7 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  setTempRet0($18 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5 | 0;
 }
 
 function legalfunc$_embind_register_bigint($0, $1, $2, $3, $3$hi, $4, $4$hi) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $3$hi = $3$hi | 0;
  $4 = $4 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$2 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $9 = 0, $12 = 0, $14 = 0;
  $5 = $0;
  $6 = $1;
  $7 = $2;
  i64toi32_i32$0 = $3$hi;
  $9 = $3;
  i64toi32_i32$2 = $3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $18 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $12 = $18;
  i64toi32_i32$1 = $4$hi;
  $14 = $4;
  i64toi32_i32$0 = $4;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $19 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $19 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  legalimport$_embind_register_bigint($5 | 0, $6 | 0, $7 | 0, $9 | 0, $12 | 0, $14 | 0, $19 | 0);
 }
 
 function legalfunc$__wasi_fd_seek($0, $1, $1$hi, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1$hi = $1$hi | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12 = 0, $4 = 0, $6 = 0, i64toi32_i32$2 = 0;
  $4 = $0;
  i64toi32_i32$0 = $1$hi;
  $6 = $1;
  i64toi32_i32$2 = $1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return legalimport$__wasi_fd_seek($4 | 0, $6 | 0, $12 | 0, $2 | 0, $3 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21 = 0, $22 = 0, var$6 = 0, $24 = 0, $17 = 0, $18 = 0, $23 = 0, $29 = 0, $45 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17 = Math_imul(var$4, var$5);
  $18 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23 = $17 + Math_imul($18, $21) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29 = $23 + Math_imul($22, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45 = $29 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, var$8$hi = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, var$7$hi = 0, $49 = 0, $63$hi = 0, $65 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140 = 0, $140$hi = 0, $142$hi = 0, $144 = 0, $144$hi = 0, $151 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140 = $45;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, null_method, grayscale_convert, jsimd_rgb_gray_convert, rgb_gray_convert, rgb_ycc_start, null_convert, rgb_rgb_convert, jsimd_rgb_ycc_convert, rgb_ycc_convert, cmyk_ycck_convert, start_pass_fdctmgr, forward_DCT, jsimd_fdct_islow, jpeg_fdct_islow, jsimd_fdct_ifast, jpeg_fdct_ifast, forward_DCT_float, jsimd_fdct_float, jpeg_fdct_float, jsimd_convsamp, convsamp, preprocess_deringing, jsimd_quantize, quantize, jsimd_convsamp_float, convsamp_float, float_preprocess_deringing, jsimd_quantize_float, quantize_float, start_pass_huff, finish_pass_gather, finish_pass_huff, encode_mcu_gather, encode_mcu_huff, start_pass_coef, compress_data, compress_first_pass, compress_output, compress_trellis_pass, start_pass_main, process_data_simple_main, write_marker_byte, write_marker_header, write_tables_only, write_file_trailer, write_scan_header, write_frame_header, write_file_header, finish_pass_master, pass_startup, prepare_for_pass, start_pass_phuff, encode_mcu_DC_first, encode_mcu_AC_first, encode_mcu_DC_refine, encode_mcu_AC_refine, finish_pass_phuff, finish_pass_gather_phuff, start_pass_prep, pre_process_context, pre_process_data, sep_downsample, start_pass_downsample, fullsize_smooth_downsample, fullsize_downsample, jsimd_h2v1_downsample, h2v1_downsample, h2v2_smooth_downsample, jsimd_h2v2_downsample, h2v2_downsample, int_downsample, init_mem_destination, term_mem_destination, empty_mem_output_buffer, reset_error_mgr, format_message, output_message, emit_message, error_exit, self_destruct, free_pool, access_virt_barray, access_virt_sarray, realize_virt_arrays, request_virt_barray, request_virt_sarray, alloc_barray, alloc_sarray, alloc_large, alloc_small, finish_pass, start_pass, encode_mcu_DC_first_1, encode_mcu_AC_first_1, encode_mcu_DC_refine_1, encode_mcu_AC_refine_1, encode_mcu, MozJPEGOptions__20emscripten__internal__raw_constructor_MozJPEGOptions__28_29, void_20emscripten__internal__raw_destructor_MozJPEGOptions__28MozJPEGOptions__29, int_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20int___getWire_MozJPEGOptions__28int_20MozJPEGOptions____20const__2c_20MozJPEGOptions_20const__29, void_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20int___setWire_MozJPEGOptions__28int_20MozJPEGOptions____20const__2c_20MozJPEGOptions__2c_20int_29, bool_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20bool___getWire_MozJPEGOptions__28bool_20MozJPEGOptions____20const__2c_20MozJPEGOptions_20const__29, void_20emscripten__internal__MemberAccess_MozJPEGOptions_2c_20bool___setWire_MozJPEGOptions__28bool_20MozJPEGOptions____20const__2c_20MozJPEGOptions__2c_20bool_29, encode_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29, emscripten__internal__Invoker_int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions___invoke_28int_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char__20__2c_20void____unnamed___2c_20int_2c_20int_2c_20int_2c_20MozJPEGOptions__29, get_image_28int_29, emscripten__internal__Invoker_emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29, free_image_28int_29, emscripten__internal__Invoker_void_2c_20int___invoke_28void_20_28__29_28int_29_2c_20int_29, malloc, free, fmt_fp, pop_arg_long_double, string_read, __stdio_close, __stdio_write, __stdio_seek, sn_write, __cxxabiv1____shim_type_info_____shim_type_info_28_29, __cxxabiv1____fundamental_type_info_____fundamental_type_info_28_29, __cxxabiv1____shim_type_info__noop1_28_29_20const, __cxxabiv1____shim_type_info__noop2_28_29_20const, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____vmi_class_type_info_____vmi_class_type_info_28_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____vmi_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____vmi_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____class_type_info_____class_type_info_28_29, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, __cxxabiv1____si_class_type_info_____si_class_type_info_28_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 function __wasm_memory_grow(pagesToAdd) {
  pagesToAdd = pagesToAdd | 0;
  var oldPages = __wasm_memory_size() | 0;
  var newPages = oldPages + pagesToAdd | 0;
  if ((oldPages < newPages) && (newPages < 65536)) {
   var newBuffer = new ArrayBuffer(Math_imul(newPages, 65536));
   var newHEAP8 = new Int8Array(newBuffer);
   newHEAP8.set(HEAP8);
   HEAP8 = new Int8Array(newBuffer);
   HEAP16 = new Int16Array(newBuffer);
   HEAP32 = new Int32Array(newBuffer);
   HEAPU8 = new Uint8Array(newBuffer);
   HEAPU16 = new Uint16Array(newBuffer);
   HEAPU32 = new Uint32Array(newBuffer);
   HEAPF32 = new Float32Array(newBuffer);
   HEAPF64 = new Float64Array(newBuffer);
   buffer = newBuffer;
   memory.buffer = buffer;
   bufferView = HEAPU8;
  }
  return oldPages;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": malloc, 
  "free": free, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__getTypeName": __getTypeName, 
  "__embind_register_native_and_builtin_types": __embind_register_native_and_builtin_types, 
  "__errno_location": __errno_location, 
  "__stdio_exit": __stdio_exit, 
  "emscripten_stack_init": emscripten_stack_init, 
  "emscripten_stack_get_free": emscripten_stack_get_free, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "emscripten_stack_get_end": emscripten_stack_get_end, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];


