ebb costs:
[0]: 109
[28]: (list_max([31 * (N([pF1], [((pF1 - (f64.convert_i32_u(0))) * 1000000000.) != 0.], [rF0 + rF0], [(pF1 - (f64.convert_i32_u(0))) * 1000000000.])); 32 * (N([pF1], [((pF1 - (f64.convert_i32_u(i32.trunc_f64_u(pF1)))) * 1000000000.) != 0.], [rF0 + rF0], [(pF1 - (f64.convert_i32_u(i32.trunc_f64_u(pF1)))) * 1000000000.]))])) + (list_max([1; 1]))
[36]: 13
[42]: (list_max([35 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))])); 44 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))])); 72 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))])); 81 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))])); 79 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))])); 88 * (N([m[44]; pn3], [(m[44] - pn3) > 0], [0; 0], [m[44] - (select(pn3 < 29, 29, pn3)); m[44] - (select(pn3 < 29, 29, pn3))]))])) + (list_max([1; 1; 1; 1; 1; 1]))
[42]: 21
[45]: (25 * (N([ln10; ln18], [(ln10 + -4) >= ln18], [(((((gn0 - 560) + 48) + (select(0 < 0, 288, 0))) + 4) + -4) + -4; ((gn0 - 560) + 48) + (select(0 < 0, 288, 0))], [ln10 + -4; ln18]))) + 1
[47]: 12
[49]: 2
[51]: (12 * (N([m[0]], [i32.eqz(m[0])], [0], [m[0]]))) + 1
[54]: 1
[55]: 14
[57]: 1
[58]: 18
[61]: (list_max([96 * (N([m[44]; pn3], [(m[44] + (0 - pn3)) < 0], [0 - (select(0 < 29, 29, 0)); 0 - (select(0 < 29, 29, 0))], [m[44] + (select((0 - pn3) < 9, 9, 0 - pn3)); m[44] + (select((0 - pn3) < 9, 9, 0 - pn3))])); 104 * (N([m[44]; pn3], [(m[44] + (0 - pn3)) < 0], [0 - (select(0 < 29, 29, 0)); 0 - (select(0 < 29, 29, 0))], [m[44] + (select((0 - pn3) < 9, 9, 0 - pn3)); m[44] + (select((0 - pn3) < 9, 9, 0 - pn3))])); 56 * (N([m[44]; pn3], [(m[44] + (0 - pn3)) < 0], [0 - (select(0 < 29, 29, 0)); 0 - (select(0 < 29, 29, 0))], [m[44] + (select((0 - pn3) < 9, 9, 0 - pn3)); m[44] + (select((0 - pn3) < 9, 9, 0 - pn3))]))])) + (list_max([1; 1; 1]))
[61]: 31
[67]: (22 * (N([ln10; ln11], [(ln11 + 4) < ln10], [(((gn0 - 560) + 48) + (select(0 < 0, 288, 0))) + 4; (((gn0 - 560) + 48) + (select(0 < 0, 288, 0))) + 4], [ln10; ln11 + 4]))) + 1
[69]: 14
[71]: 37
[73]: 1
[74]: 24
[78]: (11 * (N([ln11; ln12], [ln12 >= (ln11 * 10)], [10 * 10; 0], [ln11 * 10; ln12]))) + 1
[80]: 1
[81]: 65
[86]: (11 * (N([ln12], [(ln12 + 1) != 8], [(((((select(pn3 < 0, pn3, 6)) - (select((pn5 || 32) == 102, 0, 0))) - (((select(pn3 < 0, pn3, 6)) != 0) && ((pn5 || 32) == 103))) + 9216) - ((((((select(pn3 < 0, pn3, 6)) - (select((pn5 || 32) == 102, 0, 0))) - (((select(pn3 < 0, pn3, 6)) != 0) && ((pn5 || 32) == 103))) + 9216) /s 9) * 9)) + 1], [ln12 + 1]))) + 1
[88]: 1
[89]: 110
[110]: (list_max([22 * (N([], [(0 + 1) > 999999999], [], [])); 29 * (N([], [(0 + 1) > 999999999], [], []))])) + (list_max([1; 1]))
[115]: 1
[116]: 17
[118]: (11 * (N([ln11; ln12], [ln12 >= (ln11 * 10)], [0; 0], [ln11 * 10; ln12]))) + 1
[120]: 1
[121]: 11
[122]: 2
[124]: (13 * (N([m[0]], [i32.eqz(m[0])], [m[0]], [m[0]]))) + 1
[127]: 1
[128]: 59
[139]: (13 * (N([ln12; ln21], [i32.eqz(ln21 rem_u (ln12 * 10))], [0; 0], [ln12 * 10; ln21]))) + 1
[141]: 5
[142]: 38
[147]: 48
[157]: (12 * (N([ln10; ln13], [(ln13 - (ln10 + -1)) < 2], [0; 0], [ln10 + -1; ln13]))) + 1
[159]: 1
[160]: 28
[162]: 61
[169]: (list_max([(28 + (list_sum([|f34|; |f39|]))) * (N([ln17; ln18], [(ln18 + 4) <= ln17], [0; 0], [ln17; ln18 + 4])); (34 + (list_sum([|f34|; |f39|]))) * (N([ln17; ln18], [(ln18 + 4) <= ln17], [0; 0], [ln17; ln18 + 4])); (30 + (list_sum([|f34|; |f39|]))) * (N([ln17; ln18], [(ln18 + 4) <= ln17], [0; 0], [ln17; ln18 + 4])); (44 + (list_sum([|f34|; |f39|]))) * (N([ln17; ln18], [(ln18 + 4) <= ln17], [0; 0], [ln17; ln18 + 4]))])) + (list_max([1; 1; 1; 1]))
[169]: 18
[174]: (12 * (N([ln10; ln6], [(ln10 + -1) > (ln6 + 16)], [0; 0], [ln10 + -1; ln6]))) + 1
[177]: 1
[179]: 10
[181]: 14
[183]: 18
[189]: (list_max([(39 + (list_sum([|f34|; |f39|]))) * (N([ln15], [ln15 > 9], [0], [ln15 + -9])); (54 + (list_sum([|f34|; |f39|]))) * (N([ln15], [ln15 > 9], [0], [ln15 + -9]))])) + (list_max([1; 1]))
[189]: 12
[192]: (12 * (N([ln10; ln6], [(ln10 + -1) > (ln6 + 16)], [0; 0], [ln10 + -1; ln6]))) + 1
[194]: 1
[195]: 29
[199]: 1
[201]: 29
[204]: (list_max([(55 + (list_sum([|f34|; |f39|]))) * (N([ln15; pn3; rn0], [(ln15 - (pn3 - (rn0 + 1))) > -1], [0; pn3; rn0], [ln15 - (pn3 - (rn0 + 1)); pn3; rn0])); (60 + (list_sum([|f34|; |f39|]))) * (N([ln15; pn3; rn0], [(ln15 - (pn3 - (rn0 + 1))) > -1], [0; pn3; rn0], [ln15 - (pn3 - (rn0 + 1)); pn3; rn0])); (48 + (list_sum([|f34|; |f39|]))) * (N([ln15; pn3; rn0], [(ln15 - (pn3 - rn0)) > -1], [0; pn3; rn0], [ln15 - (pn3 - rn0); pn3; rn0])); (62 + (list_sum([|f34|; |f39|]))) * (N([ln15; pn3; rn0], [(ln15 - (pn3 - (rn0 + -1))) > -1], [0; pn3; rn0], [ln15 - (pn3 - (rn0 + -1)); pn3; rn0])); (61 + (list_sum([|f34|; |f39|]))) * (N([ln15; ln17; pn3], [(ln15 - (pn3 - (ln17 + 1))) > -1], [0; 0; pn3], [ln15 - (pn3 - (ln17 + 1)); ln17; pn3])); (66 + (list_sum([|f34|; |f39|]))) * (N([ln15; ln17; pn3], [(ln15 - (pn3 - (ln17 + 1))) > -1], [0; 0; pn3], [ln15 - (pn3 - (ln17 + 1)); ln17; pn3])); (54 + (list_sum([|f34|; |f39|]))) * (N([ln15; ln17; pn3], [(ln15 - (pn3 - ln17)) > -1], [0; 0; pn3], [ln15 - (pn3 - ln17); ln17; pn3])); (68 + (list_sum([|f34|; |f39|]))) * (N([ln15; ln17; pn3], [(ln15 - (pn3 - (ln17 + -1))) > -1], [0; 0; pn3], [ln15 - (pn3 - (ln17 + -1)); ln17; pn3]))])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1]))
[204]: 28
[212]: (12 * (N([ln10; ln6], [(ln10 + -1) > (ln6 + 16)], [0; 0], [ln10 + -1; ln6]))) + 1
[215]: 1
[217]: 18
[219]: 28
[222]: 1
[223]: 15
[225]: 3
[226]: 9
[227]: 16
[229]: 22
[232]: (9 * (N([ln10], [ln10 + -1], [0], [ln10 + -1]))) + 1
[234]: 15
[239]: 64
[243]: (list_max([44 * (N([pF1], [((pF1 - (f64.convert_i32_s(-2147483648))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(-2147483648))) * 16.])); 55 * (N([pF1], [((pF1 - (f64.convert_i32_s(-2147483648))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(-2147483648))) * 16.])); 59 * (N([pF1], [((pF1 - (f64.convert_i32_s(-2147483648))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(-2147483648))) * 16.])); 55 * (N([pF1], [((pF1 - (f64.convert_i32_s(-2147483648))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(-2147483648))) * 16.])); 64 * (N([pF1], [((pF1 - (f64.convert_i32_s(-2147483648))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(-2147483648))) * 16.])); 45 * (N([pF1], [((pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.])); 56 * (N([pF1], [((pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.])); 60 * (N([pF1], [((pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.])); 56 * (N([pF1], [((pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.])); 65 * (N([pF1], [((pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.) != 0.], [pF1], [(pF1 - (f64.convert_i32_s(i32.trunc_f64_s(pF1)))) * 16.]))])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
[259]: 93
[268]: 6
[270]: 0
