ebb costs:
[0]: 20
[6]: (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1
[10]: 1
[11]: 22
[16]: (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1
[19]: 1
[20]: 9
[23]: (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]))
[29]: 1
[30]: 2
[32]: 0
21 ebb paths found
[0 11 30]
[0 11 20 30]
[0 11 20 23 32]
[0 11 20 23 29 30]
[0 11 16 19 20 30]
[0 11 16 19 20 23 32]
[0 11 16 19 20 23 29 30]
[0 6 11 30]
[0 6 11 20 30]
[0 6 11 20 23 32]
[0 6 11 20 23 29 30]
[0 6 11 16 19 20 30]
[0 6 11 16 19 20 23 32]
[0 6 11 16 19 20 23 29 30]
[0 6 10 11 30]
[0 6 10 11 20 30]
[0 6 10 11 20 23 32]
[0 6 10 11 20 23 29 30]
[0 6 10 11 16 19 20 30]
[0 6 10 11 16 19 20 23 32]
[0 6 10 11 16 19 20 23 29 30]
|f27| = list_max([
  list_sum([20; 22; 2]);
  list_sum([20; 22; 9; 2]);
  list_sum([
    20;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ]);
  list_sum([
    20;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    2
  ]);
  list_sum([
    20;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    9;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    9;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    2
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    0
  ]);
  list_sum([
    20;
    (22 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + 1;
    1;
    22;
    (25 * (N([pn2], [(pn2 + -4) > 3], [pn2], [pn2 + -4]))) + 1;
    1;
    9;
    (15 * (N([pn2], [pn2 + -1], [pn2], [pn2 + -1]))) + (list_max([1; 2]));
    1;
    2
  ])
])
