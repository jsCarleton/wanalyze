ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4]
  ebb cost:   25
  ebb exits:  [5]
  ebb succs:  [5]
ebb entry:  5
  ebb type:   loop
  ebb blocks: [5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279]
  ebb cost:   list_MAX([
  (list_sum([
    3;
    list_MAX([
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [pn1 + 2]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        26;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
      (list_sum([
        99;
        list_MAX([
          23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
        ])
      ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]))
    ])
  ])) * (N([pn0], [not(pn0)], [pn0], [pn0]))
])
  ebb exits:  [280 282 283 284 285]
  ebb succs:  [280 282 283 284 285]
  unknown number of paths to exit 280
  unknown number of paths to exit 282
  unknown number of paths to exit 283
  unknown number of paths to exit 284
  unknown number of paths to exit 285
  1 loop paths
  [5 6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 116]
nested ebbs:
  ebb entry:  5
    ebb type:   block
    ebb blocks: [5]
    ebb cost:   3
    ebb exits:  [6]
    ebb succs:  [6]
  ebb entry:  6
    ebb type:   loop
    ebb blocks: [6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278]
    ebb cost:   list_MAX([
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [pn1 + 2]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    26;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]));
  (list_sum([
    99;
    list_MAX([
      23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
    ])
  ])) * (N([pn1], [(pn1 + 1) - pn1], [pn1], [(((((pn1 + 2) + 3) + 1) + 1) + 2) + 1]))
])
    ebb exits:  [5 279 282 283 284 285]
    ebb succs:  [5 279 282 283 284 285]
    0 paths to exit 5

    unknown number of paths to exit 279
    unknown number of paths to exit 282
    unknown number of paths to exit 283
    unknown number of paths to exit 284
    unknown number of paths to exit 285
    13 loop paths
    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 123 124]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 163]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 165]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 167]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 169]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 171]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 173]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 154 155 156 157 158 159 160 161 175]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 146 147 212 221 222 223 224 225 226 227 228 229 230 231 232 235 236 237 238 239 240 241]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 146 147 243 244]    [6 7 8 9 10 11 12 13 14 15 16 17 18 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 44 45 46 47 48 49 50 51 52 53 54 55 56 65 66 67 70 71 72 76 77 78 81 82 83 84 85 86 95 96 97 100 101 104 105 106 107 108 109 110 111 112 113 114 115 118 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 177 178 179 180 195 196 197 198 201 273 274 275 276]
nested ebbs:
    ebb entry:  6
      ebb type:   block
      ebb blocks: [6 7 8 9 10 11 12 13 14]
      ebb cost:   26
      ebb exits:  [15 250 282]
      ebb succs:  [15 250 282]
    ebb entry:  15
      ebb type:   loop
      ebb blocks: [15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248]
      ebb cost:   list_MAX([
  23 * (N([ln14], [not((ln14 & 255) != 37)], [m[0]], [m[1]]))
])
      ebb exits:  [5 6 249 269 271 273 274 278 282 283 284]
      ebb succs:  [5 6 249 269 271 273 274 278 282 283 284]
      0 paths to exit 5

      0 paths to exit 6

      unknown number of paths to exit 249
      unknown number of paths to exit 269
      unknown number of paths to exit 271
      unknown number of paths to exit 273
      unknown number of paths to exit 274
      unknown number of paths to exit 278
      unknown number of paths to exit 282
      unknown number of paths to exit 283
      unknown number of paths to exit 284
      1 loop paths
      [15 16 17 18 21 247]
nested ebbs:
      ebb entry:  15
        ebb type:   block
        ebb blocks: [15 16 17 18 19 20 21 22]
        ebb cost:   15
        ebb exits:  [23 30 247]
        ebb succs:  [23 30 247]
      ebb entry:  23
        ebb type:   loop
        ebb blocks: [23 24 25 26 27 28]
        ebb cost:   (22 * (N([m[2]], [m[2] == 37], [m[2]], [m[2]]))) + 3
        ebb exits:  [29 30]
        ebb succs:  [29 30]
        1 paths to exit 29
        [23 24 27 28]
        1 paths to exit 30
        [23 24 25]
        1 loop paths
        [23 24 27]
        2 post loop exit paths
        [28]        [25]
      ebb entry:  29
        ebb type:   block
        ebb blocks: [29]
        ebb cost:   1
        ebb exits:  [30]
        ebb succs:  [30]
      ebb entry:  30
        ebb type:   block
        ebb blocks: [30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45]
        ebb cost:   82
        ebb exits:  [6 46 50 282]
        ebb succs:  [6 46 50 282]
      ebb entry:  46
        ebb type:   loop
        ebb blocks: [46 47 48]
        ebb cost:   (28 * (N([m[1]], [(1 shl (m[1] + -32)) & 75913], [m[1]], [m[1]]))) + 1
        ebb exits:  [49 50]
        ebb succs:  [49 50]
        1 paths to exit 49
        [46 47 48]
        1 paths to exit 50
        [46]
        1 loop paths
        [46 47]
        1 post loop exit paths
        [48]
      ebb entry:  49
        ebb type:   block
        ebb blocks: [49]
        ebb cost:   1
        ebb exits:  [50]
        ebb succs:  [50]
      ebb entry:  50
        ebb type:   block
        ebb blocks: [50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104]
        ebb cost:   120
        ebb exits:  [105 269 282]
        ebb succs:  [105 269 282]
      ebb entry:  105
        ebb type:   loop
        ebb blocks: [105 106 107]
        ebb cost:   (33 * (N([m[0]], [((m[0] + -1) & 255) < 8], [m[0]], [m[0]]))) + 1
        ebb exits:  [108 283]
        ebb succs:  [108 283]
        1 paths to exit 108
        [105 106 107]
        1 paths to exit 283
        [105]
        1 loop paths
        [105 106]
        1 post loop exit paths
        [107]
      ebb entry:  108
        ebb type:   block
        ebb blocks: [108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223]
        ebb cost:   166
        ebb exits:  [5 6 224 241 243 271 273 274 278 282 283 284]
        ebb succs:  [5 6 224 241 243 271 273 274 278 282 283 284]
      ebb entry:  224
        ebb type:   loop
        ebb blocks: [224 225 226 227 228]
        ebb cost:   ((31 + |f43|) * (N([ln12; ln20; ln7; m[0]], [((R(43, 0, i32, m[0], ln7 + 4)) + ln12) < ln20], [0; 0; 0; m[0]], [(R(43, 8, i32, m[0], ln7 + 4)) + ln12; ln20; ln7; m[0]]))) + 1
        ebb exits:  [229 230 284]
        ebb succs:  [229 230 284]
        1 paths to exit 229
        [224 225 226 227 228]
        2 paths to exit 230
        [224 225 226]
        [224]
        1 paths to exit 284
        [224 225]
        1 loop paths
        [224 225 226 227]
        1 post loop exit paths
        [228]
      ebb entry:  229
        ebb type:   block
        ebb blocks: [229]
        ebb cost:   1
        ebb exits:  [230]
        ebb succs:  [230]
      ebb entry:  230
        ebb type:   block
        ebb blocks: [230 231 232 233 234 235]
        ebb cost:   21
        ebb exits:  [236 241 283]
        ebb succs:  [236 241 283]
      ebb entry:  236
        ebb type:   loop
        ebb blocks: [236 237 238 239]
        ebb cost:   ((31 + (list_sum(|f43|, |f29|))) * (N([ln12; ln15; ln7; m[0]], [((R(43, 0, i32, m[0], ln7 + 4)) + ln15) < ln12], [0; 0; 0; m[0]], [ln12; (R(43, 8, i32, m[0], ln7 + 4)) + ln15; ln7; m[0]]))) + 1
        ebb exits:  [240 241]
        ebb succs:  [240 241]
        1 paths to exit 240
        [236 237 238 239]
        2 paths to exit 241
        [236 237]
        [236]
        1 loop paths
        [236 237 238]
        1 post loop exit paths
        [239]
      ebb entry:  240
        ebb type:   block
        ebb blocks: [240]
        ebb cost:   1
        ebb exits:  [241]
        ebb succs:  [241]
      ebb entry:  241
        ebb type:   block
        ebb blocks: [241 242]
        ebb cost:   16
        ebb exits:  [6 243]
        ebb succs:  [6 243]
      ebb entry:  243
        ebb type:   block
        ebb blocks: [243 244 245 246]
        ebb cost:   22
        ebb exits:  [6 247 282 283]
        ebb succs:  [6 247 282 283]
      ebb entry:  247
        ebb type:   block
        ebb blocks: [247 248]
        ebb cost:   8
        ebb exits:  [15 249]
        ebb succs:  [15 249]
    ebb entry:  249
      ebb type:   block
      ebb blocks: [249]
      ebb cost:   1
      ebb exits:  [250]
      ebb succs:  [250]
    ebb entry:  250
      ebb type:   block
      ebb blocks: [250 251 252 253]
      ebb cost:   9
      ebb exits:  [254 278 285]
      ebb succs:  [254 278 285]
    ebb entry:  254
      ebb type:   loop
      ebb blocks: [254 255 256 257]
      ebb cost:   ((27 + |f31|) * (N([ln12], [(ln12 + 1) != 10], [0], [ln12 + 1]))) + 1
      ebb exits:  [258 259 285]
      ebb succs:  [258 259 285]
      0 paths to exit 258

      1 paths to exit 259
      [254]
      1 paths to exit 285
      [254 255 256]
      1 loop paths
      [254 255]
      1 post loop exit paths
      [256]
    ebb entry:  258
      ebb type:   block
      ebb blocks: [258]
      ebb cost:   1
      ebb exits:  [259]
      ebb succs:  [259]
    ebb entry:  259
      ebb type:   block
      ebb blocks: [259 260 261 262 263]
      ebb cost:   8
      ebb exits:  [264 285]
      ebb succs:  [264 285]
    ebb entry:  264
      ebb type:   loop
      ebb blocks: [264 265 266 267]
      ebb cost:   17 * (N([ln12], [not((ln12 + 1) == 10)], [0], [ln12 + 1]))
      ebb exits:  [268 269 285]
      ebb succs:  [268 269 285]
      0 paths to exit 268

      1 paths to exit 269
      [264]
      1 paths to exit 285
      [264 265]
      1 loop paths
      [264 265 266]
    ebb entry:  268
      ebb type:   block
      ebb blocks: [268]
      ebb cost:   1
      ebb exits:  [269]
      ebb succs:  [269]
    ebb entry:  269
      ebb type:   block
      ebb blocks: [269 270]
      ebb cost:   3
      ebb exits:  [271 283]
      ebb succs:  [271 283]
    ebb entry:  271
      ebb type:   block
      ebb blocks: [271 272]
      ebb cost:   12
      ebb exits:  [273 274]
      ebb succs:  [273 274]
    ebb entry:  273
      ebb type:   block
      ebb blocks: [273]
      ebb cost:   3
      ebb exits:  [274]
      ebb succs:  [274]
    ebb entry:  274
      ebb type:   block
      ebb blocks: [274 275 276 277]
      ebb cost:   70
      ebb exits:  [6 278 282 283]
      ebb succs:  [6 278 282 283]
    ebb entry:  278
      ebb type:   block
      ebb blocks: [278]
      ebb cost:   1
      ebb exits:  [279]
      ebb succs:  [279]
  ebb entry:  279
    ebb type:   block
    ebb blocks: [279]
    ebb cost:   1
    ebb exits:  [280]
    ebb succs:  [280]
ebb entry:  280
  ebb type:   block
  ebb blocks: [280 281]
  ebb cost:   3
  ebb exits:  [282 285]
  ebb succs:  [282 285]
ebb entry:  282
  ebb type:   block
  ebb blocks: [282]
  ebb cost:   3
  ebb exits:  [283]
  ebb succs:  [283]
ebb entry:  283
  ebb type:   block
  ebb blocks: [283]
  ebb cost:   4
  ebb exits:  [284]
  ebb succs:  [284]
ebb entry:  284
  ebb type:   block
  ebb blocks: [284]
  ebb cost:   3
  ebb exits:  [285]
  ebb succs:  [285]
ebb entry:  285
  ebb type:   block
  ebb blocks: [285 286]
  ebb cost:   6
  ebb exits:  [286]
  ebb succs:  []
ebb costs:
[0]: 25
[5]: list_MAX((list_sum(3, list_MAX((list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [(pn1 + 2)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(99, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])))) * N([pn0], [not(pn0)], [pn0], [pn0])))
[5]: 3
[6]: list_MAX((list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [(pn1 + 2)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(26, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])), (list_sum(99, list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))) * N([pn1], [((pn1 + 1) - pn1)], [pn1], [((((((pn1 + 2) + 3) + 1) + 1) + 2) + 1)])))
[6]: 26
[15]: list_MAX((23 * N([ln14], [not(((ln14 & 255) != 37))], [m[0]], [m[1]])))
[15]: 15
[23]: ((22 * N([m[2]], [(m[2] == 37)], [m[2]], [m[2]])) + 3)
[29]: 1
[30]: 82
[46]: ((28 * N([m[1]], [((1 shl (m[1] + -32)) & 75913)], [m[1]], [m[1]])) + 1)
[49]: 1
[50]: 120
[105]: ((33 * N([m[0]], [(((m[0] + -1) & 255) < 8)], [m[0]], [m[0]])) + 1)
[108]: 166
[224]: (((31 + |f43|) * N([ln12; ln20; ln7; m[0]], [((R(43, 0, i32, m[0], (ln7 + 4)) + ln12) < ln20)], [0; 0; 0; m[0]], [(R(43, 8, i32, m[0], (ln7 + 4)) + ln12); ln20; ln7; m[0]])) + 1)
[229]: 1
[230]: 21
[236]: (((31 + list_sum(|f43|, |f29|)) * N([ln12; ln15; ln7; m[0]], [((R(43, 0, i32, m[0], (ln7 + 4)) + ln15) < ln12)], [0; 0; 0; m[0]], [ln12; (R(43, 8, i32, m[0], (ln7 + 4)) + ln15); ln7; m[0]])) + 1)
[240]: 1
[241]: 16
[243]: 22
[247]: 8
[249]: 1
[250]: 9
[254]: (((27 + |f31|) * N([ln12], [((ln12 + 1) != 10)], [0], [(ln12 + 1)])) + 1)
[258]: 1
[259]: 8
[264]: (17 * N([ln12], [not(((ln12 + 1) == 10))], [0], [(ln12 + 1)]))
[268]: 1
[269]: 3
[271]: 12
[273]: 3
[274]: 70
[278]: 1
[279]: 1
[280]: 3
[282]: 3
[283]: 4
[284]: 3
[285]: 6
6 ebb paths found
[0 5 285]
[0 5 284 285]
[0 5 283 284 285]
[0 5 282 283 284 285]
[0 5 280 285]
[0 5 280 282 283 284 285]
