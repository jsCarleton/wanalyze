ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9]
  ebb cost:   list_max([20; 33 + |f2855|; 31; 44 + |f2855|; 44; 57 + |f2855|; 55; 68 + |f2855|; 20; 33 + |f2855|; 31; 44 + |f2855|; 44; 57 + |f2855|; 55; 68 + |f2855|])
  ebb exits:  [10 34]
  ebb succs:  [34 10]
  8 paths to exit 10
  [0 2 3 5 7 8 9]
  [0 2 3 5 6 7 8 9]
  [0 2 3 4 5 7 8 9]
  [0 2 3 4 5 6 7 8 9]
  [0 1 2 3 5 7 8 9]
  [0 1 2 3 5 6 7 8 9]
  [0 1 2 3 4 5 7 8 9]
  [0 1 2 3 4 5 6 7 8 9]
  8 paths to exit 34
  [0 2 3 5 7 8 9]
  [0 2 3 5 6 7 8 9]
  [0 2 3 4 5 7 8 9]
  [0 2 3 4 5 6 7 8 9]
  [0 1 2 3 5 7 8 9]
  [0 1 2 3 5 6 7 8 9]
  [0 1 2 3 4 5 7 8 9]
  [0 1 2 3 4 5 6 7 8 9]
ebb entry:  10
  ebb type:   block
  ebb blocks: [10]
  ebb cost:   1
  ebb exits:  [11]
  ebb succs:  [11]
  1 paths to exit 11
  [10]
ebb entry:  11
  ebb type:   loop
  ebb blocks: [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  ebb cost:   (list_max([[33 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 36 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 85 + (list_max([|f987|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 46 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 49 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 98 + (list_max([|f987|; |f1090|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 25 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 51 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 66 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 69 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 118 + (list_max([|f987|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 79 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 82 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 131 + (list_max([|f987|; |f1090|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 43 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 46 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 95 + (list_max([|f987|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 56 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 59 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 108 + (list_max([|f987|; |f1090|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 35 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 61 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 76 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 79 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 128 + (list_max([|f987|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 89 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 92 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 141 + (list_max([|f987|; |f1090|; |f1157|; |f2855|; |f2874|]))*I(i32.eqz(0), , )]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
  ebb exits:  [33 56 59 64]
  ebb succs:  [64 59 56 33]
  28 paths to exit 33
  [11 13 14 20 23 28 29 32]
  [11 13 14 20 23 24 29 32]
  [11 13 14 20 23 24 25 26 27 28 29 32]
  [11 13 14 20 21 22 23 28 29 32]
  [11 13 14 20 21 22 23 24 29 32]
  [11 13 14 20 21 22 23 24 25 26 27 28 29 32]
  [11 13 14 15 29 32]
  [11 13 14 15 16 17 18 29 32]
  [11 13 14 15 16 17 18 19 20 23 28 29 32]
  [11 13 14 15 16 17 18 19 20 23 24 29 32]
  [11 13 14 15 16 17 18 19 20 23 24 25 26 27 28 29 32]
  [11 13 14 15 16 17 18 19 20 21 22 23 28 29 32]
  [11 13 14 15 16 17 18 19 20 21 22 23 24 29 32]
  [11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32]
  [11 12 13 14 20 23 28 29 32]
  [11 12 13 14 20 23 24 29 32]
  [11 12 13 14 20 23 24 25 26 27 28 29 32]
  [11 12 13 14 20 21 22 23 28 29 32]
  [11 12 13 14 20 21 22 23 24 29 32]
  [11 12 13 14 20 21 22 23 24 25 26 27 28 29 32]
  [11 12 13 14 15 29 32]
  [11 12 13 14 15 16 17 18 29 32]
  [11 12 13 14 15 16 17 18 19 20 23 28 29 32]
  [11 12 13 14 15 16 17 18 19 20 23 24 29 32]
  [11 12 13 14 15 16 17 18 19 20 23 24 25 26 27 28 29 32]
  [11 12 13 14 15 16 17 18 19 20 21 22 23 28 29 32]
  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 29 32]
  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32]
  16 paths to exit 56
  [11 13 14 20 23 24 25 26]
  [11 13 14 20 23 24 25]
  [11 13 14 20 21 22 23 24 25 26]
  [11 13 14 20 21 22 23 24 25]
  [11 13 14 15 16 17 18 19 20 23 24 25 26]
  [11 13 14 15 16 17 18 19 20 23 24 25]
  [11 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
  [11 13 14 15 16 17 18 19 20 21 22 23 24 25]
  [11 12 13 14 20 23 24 25 26]
  [11 12 13 14 20 23 24 25]
  [11 12 13 14 20 21 22 23 24 25 26]
  [11 12 13 14 20 21 22 23 24 25]
  [11 12 13 14 15 16 17 18 19 20 23 24 25 26]
  [11 12 13 14 15 16 17 18 19 20 23 24 25]
  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
  4 paths to exit 59
  [11 13 14 15 16 17]
  [11 13 14 15 16]
  [11 12 13 14 15 16 17]
  [11 12 13 14 15 16]
  4 paths to exit 64
  [11 13 14 20 21]
  [11 13 14 15 16 17 18 19 20 21]
  [11 12 13 14 20 21]
  [11 12 13 14 15 16 17 18 19 20 21]
  28 loop paths
  [11 13 14 20 23 28 29 30]  [11 13 14 20 23 24 29 30]  [11 13 14 20 23 24 25 26 27 28 29 30]  [11 13 14 20 21 22 23 28 29 30]  [11 13 14 20 21 22 23 24 29 30]  [11 13 14 20 21 22 23 24 25 26 27 28 29 30]  [11 13 14 15 29 30]  [11 13 14 15 16 17 18 29 30]  [11 13 14 15 16 17 18 19 20 23 28 29 30]  [11 13 14 15 16 17 18 19 20 23 24 29 30]  [11 13 14 15 16 17 18 19 20 23 24 25 26 27 28 29 30]  [11 13 14 15 16 17 18 19 20 21 22 23 28 29 30]  [11 13 14 15 16 17 18 19 20 21 22 23 24 29 30]  [11 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30]  [11 12 13 14 20 23 28 29 30]  [11 12 13 14 20 23 24 29 30]  [11 12 13 14 20 23 24 25 26 27 28 29 30]  [11 12 13 14 20 21 22 23 28 29 30]  [11 12 13 14 20 21 22 23 24 29 30]  [11 12 13 14 20 21 22 23 24 25 26 27 28 29 30]  [11 12 13 14 15 29 30]  [11 12 13 14 15 16 17 18 29 30]  [11 12 13 14 15 16 17 18 19 20 23 28 29 30]  [11 12 13 14 15 16 17 18 19 20 23 24 29 30]  [11 12 13 14 15 16 17 18 19 20 23 24 25 26 27 28 29 30]  [11 12 13 14 15 16 17 18 19 20 21 22 23 28 29 30]  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 29 30]  [11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30]
  28 post loop exit paths
  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33]
  ebb cost:   1
  ebb exits:  [34]
  ebb succs:  [34]
  1 paths to exit 34
  [33]
ebb entry:  34
  ebb type:   block
  ebb blocks: [34]
  ebb cost:   1
  ebb exits:  [35]
  ebb succs:  [35]
  1 paths to exit 35
  [34]
ebb entry:  35
  ebb type:   loop
  ebb blocks: [35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54]
  ebb cost:   (list_max([[32 + |f2874|*I(i32.eqz(0), , ); 39 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 45 + (list_max([|f1090|; |f2874|]))*I(i32.eqz(0), , ); 52 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 23 + |f2874|*I(i32.eqz(0), , ); 48 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 64 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 71 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 77 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 84 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 42 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 49 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 55 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 62 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 33 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 58 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 74 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 81 + (list_max([|f2855|; |f2874|]))*I(i32.eqz(0), , ); 87 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , ); 94 + (list_max([|f1090|; |f2855|; |f2874|]))*I(i32.eqz(0), , )]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
  ebb exits:  [55 56 59 64]
  ebb succs:  [64 59 56 55]
  20 paths to exit 55
  [35 37 38 44 47 50 51 54]
  [35 37 38 44 47 48 49 50 51 54]
  [35 37 38 44 45 46 47 50 51 54]
  [35 37 38 44 45 46 47 48 49 50 51 54]
  [35 37 38 39 51 54]
  [35 37 38 39 40 41 42 51 54]
  [35 37 38 39 40 41 42 43 44 47 50 51 54]
  [35 37 38 39 40 41 42 43 44 47 48 49 50 51 54]
  [35 37 38 39 40 41 42 43 44 45 46 47 50 51 54]
  [35 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 54]
  [35 36 37 38 44 47 50 51 54]
  [35 36 37 38 44 47 48 49 50 51 54]
  [35 36 37 38 44 45 46 47 50 51 54]
  [35 36 37 38 44 45 46 47 48 49 50 51 54]
  [35 36 37 38 39 51 54]
  [35 36 37 38 39 40 41 42 51 54]
  [35 36 37 38 39 40 41 42 43 44 47 50 51 54]
  [35 36 37 38 39 40 41 42 43 44 47 48 49 50 51 54]
  [35 36 37 38 39 40 41 42 43 44 45 46 47 50 51 54]
  [35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 54]
  8 paths to exit 56
  [35 37 38 44 47 48]
  [35 37 38 44 45 46 47 48]
  [35 37 38 39 40 41 42 43 44 47 48]
  [35 37 38 39 40 41 42 43 44 45 46 47 48]
  [35 36 37 38 44 47 48]
  [35 36 37 38 44 45 46 47 48]
  [35 36 37 38 39 40 41 42 43 44 47 48]
  [35 36 37 38 39 40 41 42 43 44 45 46 47 48]
  4 paths to exit 59
  [35 37 38 39 40 41]
  [35 37 38 39 40]
  [35 36 37 38 39 40 41]
  [35 36 37 38 39 40]
  4 paths to exit 64
  [35 37 38 44 45]
  [35 37 38 39 40 41 42 43 44 45]
  [35 36 37 38 44 45]
  [35 36 37 38 39 40 41 42 43 44 45]
  20 loop paths
  [35 37 38 44 47 50 51 52]  [35 37 38 44 47 48 49 50 51 52]  [35 37 38 44 45 46 47 50 51 52]  [35 37 38 44 45 46 47 48 49 50 51 52]  [35 37 38 39 51 52]  [35 37 38 39 40 41 42 51 52]  [35 37 38 39 40 41 42 43 44 47 50 51 52]  [35 37 38 39 40 41 42 43 44 47 48 49 50 51 52]  [35 37 38 39 40 41 42 43 44 45 46 47 50 51 52]  [35 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52]  [35 36 37 38 44 47 50 51 52]  [35 36 37 38 44 47 48 49 50 51 52]  [35 36 37 38 44 45 46 47 50 51 52]  [35 36 37 38 44 45 46 47 48 49 50 51 52]  [35 36 37 38 39 51 52]  [35 36 37 38 39 40 41 42 51 52]  [35 36 37 38 39 40 41 42 43 44 47 50 51 52]  [35 36 37 38 39 40 41 42 43 44 47 48 49 50 51 52]  [35 36 37 38 39 40 41 42 43 44 45 46 47 50 51 52]  [35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52]
  20 post loop exit paths
  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]  [54]
ebb entry:  55
  ebb type:   block
  ebb blocks: [55]
  ebb cost:   1
  ebb exits:  [56]
  ebb succs:  [56]
  1 paths to exit 56
  [55]
ebb entry:  56
  ebb type:   block
  ebb blocks: [56 57 58]
  ebb cost:   list_max([4; 13 + (list_max([|f2855|; |f2874|]))])
  ebb exits:  [59]
  ebb succs:  [59]
  2 paths to exit 59
  [56 58]
  [56 57 58]
ebb entry:  59
  ebb type:   block
  ebb blocks: [59 60 61 62 63]
  ebb cost:   list_max([5; 4])
  ebb exits:  [64 66 67]
  ebb succs:  [67 66 64]
  0 paths to exit 64

  1 paths to exit 66
  [59 60]
  1 paths to exit 67
  [59 62]
ebb entry:  64
  ebb type:   block
  ebb blocks: [64 65]
  ebb cost:   36
  ebb exits:  [65]
  ebb succs:  []
  1 paths to exit 65
  [64]
ebb entry:  66
  ebb type:   block
  ebb blocks: [66]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
ebb entry:  67
  ebb type:   block
  ebb blocks: [67]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
