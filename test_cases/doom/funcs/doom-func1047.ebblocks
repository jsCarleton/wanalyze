ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6]
  ebb cost:   list_max([19; 30; 43; 54; 19; 30; 43; 54; 12; 23; 36; 47])
  ebb exits:  [7 16 17]
  ebb succs:  [17 16 7]
  4 paths to exit 7
  [0 2 3 5 6]
  [0 2 3 4 5 6]
  [0 1 2 3 5 6]
  [0 1 2 3 4 5 6]
  4 paths to exit 16
  [0 2 3 5 6]
  [0 2 3 4 5 6]
  [0 1 2 3 5 6]
  [0 1 2 3 4 5 6]
  4 paths to exit 17
  [0 2 3 5]
  [0 2 3 4 5]
  [0 1 2 3 5]
  [0 1 2 3 4 5]
ebb entry:  7
  ebb type:   block
  ebb blocks: [7]
  ebb cost:   1
  ebb exits:  [8]
  ebb succs:  [8]
  1 paths to exit 8
  [7]
ebb entry:  8
  ebb type:   loop
  ebb blocks: [8 9 10 11 12 13 14]
  ebb cost:   (list_max([[19 + |f2855|*I((ln5 + 1) != 30, ln5 = ln5, ln5 = ln5 + 1); 29 + (list_max([|f2851|; |f2855|]))*I((ln5 + 1) != 30, ln5 = ln5, ln5 = ln5 + 1); 33 + (list_max([|f2851|; |f2855|]))*I((ln5 + 1) != 30, ln5 = ln5, ln5 = ln5 + 1); 44 + (list_max([|f2851|; |f2855|; |f2874|]))*I((ln5 + 1) != 30, ln5 = ln5, ln5 = ln5 + 1)]])) + (list_max([1; 1; 1; 1]))
  ebb exits:  [15]
  ebb succs:  [15]
  4 paths to exit 15
  [8 9 13 14]
  [8 9 10 13 14]
  [8 9 10 11 13 14]
  [8 9 10 11 12 13 14]
  4 loop paths
  [8 9 13]  [8 9 10 13]  [8 9 10 11 13]  [8 9 10 11 12 13]
  4 post loop exit paths
  [14]  [14]  [14]  [14]
ebb entry:  15
  ebb type:   block
  ebb blocks: [15]
  ebb cost:   1
  ebb exits:  [16]
  ebb succs:  [16]
  1 paths to exit 16
  [15]
ebb entry:  16
  ebb type:   block
  ebb blocks: [16]
  ebb cost:   3
  ebb exits:  [17]
  ebb succs:  [17]
  1 paths to exit 17
  [16]
ebb entry:  17
  ebb type:   block
  ebb blocks: [17]
  ebb cost:   1
  ebb exits:  [18]
  ebb succs:  [18]
  1 paths to exit 18
  [17]
ebb entry:  18
  ebb type:   loop
  ebb blocks: [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46]
  ebb cost:   (list_max([[105 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 100 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 105 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 94 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 87 + (list_max([|f1048|; |f1100|; |f1116|; |f2851|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 94 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 119 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 114 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 119 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 108 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 101 + (list_max([|f683|; |f1048|; |f1100|; |f1116|; |f2851|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 108 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 118 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 113 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 118 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 107 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 100 + (list_max([|f1048|; |f1100|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 107 + (list_max([|f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 132 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 127 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 132 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 121 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 114 + (list_max([|f683|; |f1048|; |f1100|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 121 + (list_max([|f683|; |f1048|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 24 + |f2855|*I(rn0, rn0 = rn0, rn0 = rn0); 113 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 108 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 113 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 102 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 95 + (list_max([|f1048|; |f1100|; |f1101|; |f1116|; |f2851|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 102 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 127 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 122 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 127 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 116 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 109 + (list_max([|f683|; |f1048|; |f1100|; |f1101|; |f1116|; |f2851|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 116 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(pn1, pn1 = pn1, pn1 = pn1); 126 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 121 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 126 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 115 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 108 + (list_max([|f1048|; |f1100|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 115 + (list_max([|f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 140 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 135 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 140 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 129 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 122 + (list_max([|f683|; |f1048|; |f1100|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 129 + (list_max([|f683|; |f1048|; |f1101|; |f1116|; |f2851|; |f2855|; |f2874|]))*I(rn0, rn0 = rn0, rn0 = rn0); 32 + (list_max([|f1101|; |f2855|]))*I(rn0, rn0 = rn0, rn0 = rn0)]])) + (list_max([1; 2; 2; 2; 2; 1; 2; 2; 2; 2]))
  ebb exits:  [47 52]
  ebb succs:  [52 47]
  10 paths to exit 47
  [18 20 46]
  [18 20 21 24 27 45 46]
  [18 20 21 24 25 26 27 45 46]
  [18 20 21 22 23 24 27 45 46]
  [18 20 21 22 23 24 25 26 27 45 46]
  [18 19 20 46]
  [18 19 20 21 24 27 45 46]
  [18 19 20 21 24 25 26 27 45 46]
  [18 19 20 21 22 23 24 27 45 46]
  [18 19 20 21 22 23 24 25 26 27 45 46]
  4 paths to exit 52
  [18 20 21 24 25]
  [18 20 21 22 23 24 25]
  [18 19 20 21 24 25]
  [18 19 20 21 22 23 24 25]
  50 loop paths
  [18 20 21 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 24 27 28 29 30 31 32 33 34 36 42 43]  [18 20 21 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 24 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 24 27 28 29 30 31 32 33 34 41 42 43]  [18 20 21 24 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 36 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 41 42 43]  [18 20 21 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 36 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 41 42 43]  [18 20 21 22 23 24 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 41 42 43]  [18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 20 21 22]  [18 19 20 21 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 24 27 28 29 30 31 32 33 34 36 42 43]  [18 19 20 21 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 24 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 24 27 28 29 30 31 32 33 34 41 42 43]  [18 19 20 21 24 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 36 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 41 42 43]  [18 19 20 21 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 36 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 41 42 43]  [18 19 20 21 22 23 24 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 36 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 38 39 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 41 42 43]  [18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 39 42 43]  [18 19 20 21 22]
  10 post loop exit paths
  [46]  [45 46]  [45 46]  [45 46]  [45 46]  [46]  [45 46]  [45 46]  [45 46]  [45 46]
ebb entry:  47
  ebb type:   block
  ebb blocks: [47 48 49 50 51]
  ebb cost:   list_max([5; 4])
  ebb exits:  [52 54 55]
  ebb succs:  [55 54 52]
  0 paths to exit 52

  1 paths to exit 54
  [47 48]
  1 paths to exit 55
  [47 50]
ebb entry:  52
  ebb type:   block
  ebb blocks: [52 53]
  ebb cost:   36
  ebb exits:  [53]
  ebb succs:  []
  1 paths to exit 53
  [52]
ebb entry:  54
  ebb type:   block
  ebb blocks: [54]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
ebb entry:  55
  ebb type:   block
  ebb blocks: [55]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
