ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4]
  ebb cost:   21
  ebb exits:  [5 9 10]
  ebb succs:  [10 9 5]
  1 paths to exit 5
  [0 1 2 3 4]
  2 paths to exit 9
  [0 1 2 3 4]
  [0 1 2 3]
  1 paths to exit 10
  [0 1]
ebb entry:  5
  ebb type:   block
  ebb blocks: [5]
  ebb cost:   20
  ebb exits:  [6]
  ebb succs:  [6]
  2 paths to exit 6
  [5 6]
  [5]
ebb entry:  6
  ebb type:   loop
  ebb blocks: [6 7]
  ebb cost:   17*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = 0 + 1, pn0 = pn0;ln4 = ln4 + 1) + 1
  ebb exits:  [8]
  ebb succs:  [8]
  1 paths to exit 8
  [6 7]
  1 loop paths
  [6]
  1 post loop exit paths
  [7]
ebb entry:  8
  ebb type:   block
  ebb blocks: [8]
  ebb cost:   4
  ebb exits:  [9]
  ebb succs:  [9]
  1 paths to exit 9
  [8]
ebb entry:  9
  ebb type:   block
  ebb blocks: [9]
  ebb cost:   6
  ebb exits:  [10]
  ebb succs:  [10]
  1 paths to exit 10
  [9]
ebb entry:  10
  ebb type:   block
  ebb blocks: [10 11]
  ebb cost:   6
  ebb exits:  [12 44]
  ebb succs:  [44 12]
  1 paths to exit 12
  [10 11]
  1 paths to exit 44
  [10 11]
ebb entry:  12
  ebb type:   block
  ebb blocks: [12]
  ebb cost:   3
  ebb exits:  [13]
  ebb succs:  [13]
  1 paths to exit 13
  [12]
ebb entry:  13
  ebb type:   loop
  ebb blocks: [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42]
  ebb cost:   (list_max([121*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 128*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 154*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 177*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 187*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 183*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 206*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 216*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 156*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 163*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 189*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 212*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 222*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 218*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 241*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 251*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 166*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 173*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 199*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 222*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 232*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 228*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 251*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1); 261*I((ln5 + 1) < (i32.load@(pn0)), pn0 = pn0;ln5 = 0, pn0 = pn0;ln5 = ln5 + 1)])) + 1
  ebb exits:  [43]
  ebb succs:  [43]
  24 paths to exit 43
  [13 14 20 21 22 23 37 38 39 41 42]
  [13 14 20 21 22 23 37 38 39 40 41 42]
  [13 14 20 21 22 23 24 25 27 28 34 35 41 42]
  [13 14 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41 42]
  [13 14 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41 42]
  [13 14 20 21 22 23 24 25 26 27 28 34 35 41 42]
  [13 14 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41 42]
  [13 14 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 37 38 39 41 42]
  [13 14 15 16 17 18 20 21 22 23 37 38 39 40 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41 42]
  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 37 38 39 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 37 38 39 40 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41 42]
  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41 42]
  24 loop paths
  [13 14 20 21 22 23 37 38 39 41]  [13 14 20 21 22 23 37 38 39 40 41]  [13 14 20 21 22 23 24 25 27 28 34 35 41]  [13 14 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41]  [13 14 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41]  [13 14 20 21 22 23 24 25 26 27 28 34 35 41]  [13 14 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41]  [13 14 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41]  [13 14 15 16 17 18 20 21 22 23 37 38 39 41]  [13 14 15 16 17 18 20 21 22 23 37 38 39 40 41]  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 34 35 41]  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41]  [13 14 15 16 17 18 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41]  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 34 35 41]  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41]  [13 14 15 16 17 18 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 37 38 39 41]  [13 14 15 16 17 18 19 20 21 22 23 37 38 39 40 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 34 35 41]  [13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 41]
  24 post loop exit paths
  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]  [42]
  ebb entry:  13
    ebb type:   block
    ebb blocks: [13 14]
    ebb cost:   58
    ebb exits:  [15 20]
    ebb succs:  [20 15]
    1 paths to exit 15
    [13 14]
    1 paths to exit 20
    [13 14]
  ebb entry:  15
    ebb type:   block
    ebb blocks: [15]
    ebb cost:   30
    ebb exits:  [16]
    ebb succs:  [16]
    2 paths to exit 16
    [15 16]
    [15]
  ebb entry:  16
    ebb type:   loop
    ebb blocks: [16 17]
    ebb cost:   15*I(ln4 > 1, ln4 = ((((((pn1 + (ln5 shl 2)))) - (((ln2 + ((((pn0 + (ln5 shl 2)) + 276)) shl 2)) + 20))) xor (((((pn1 + (ln5 shl 2)))) - (((ln2 + ((((pn0 + (ln5 shl 2)) + 276)) shl 2)) + 20))) shr_s 31)) - (((((pn1 + (ln5 shl 2)))) - (((ln2 + ((((pn0 + (ln5 shl 2)) + 276)) shl 2)) + 20))) shr_s 31)) shr_u 1, ln4 = ln4 shr_u 1) + 1
    ebb exits:  [18]
    ebb succs:  [18]
    1 paths to exit 18
    [16 17]
    1 loop paths
    [16]
    1 post loop exit paths
    [17]
  ebb entry:  18
    ebb type:   block
    ebb blocks: [18 19]
    ebb cost:   14
    ebb exits:  [20]
    ebb succs:  [20]
    2 paths to exit 20
    [18 19]
    [18]
  ebb entry:  20
    ebb type:   block
    ebb blocks: [20]
    ebb cost:   16
    ebb exits:  [21]
    ebb succs:  [21]
    1 paths to exit 21
    [20]
  ebb entry:  21
    ebb type:   block
    ebb blocks: [21]
    ebb cost:   1
    ebb exits:  [22]
    ebb succs:  [22]
    1 paths to exit 22
    [21]
  ebb entry:  22
    ebb type:   loop
    ebb blocks: [22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38]
    ebb cost:   (list_max([28*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 65*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 88*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 98*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 94*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 117*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1); 127*I((ln13 + 1) != 64, ln13 = 1, ln13 = ln13 + 1)])) + 1
    ebb exits:  [39 41]
    ebb succs:  [41 39]
    1 paths to exit 39
    [22 23 37 38]
    6 paths to exit 41
    [22 23 24 25 27 28 34 35]
    [22 23 24 25 27 28 29 30 31 32 34 35]
    [22 23 24 25 27 28 29 30 31 32 33 34 35]
    [22 23 24 25 26 27 28 34 35]
    [22 23 24 25 26 27 28 29 30 31 32 34 35]
    [22 23 24 25 26 27 28 29 30 31 32 33 34 35]
    7 loop paths
    [22 23 37]    [22 23 24 25 27 28 34]    [22 23 24 25 27 28 29 30 31 32 34]    [22 23 24 25 27 28 29 30 31 32 33 34]    [22 23 24 25 26 27 28 34]    [22 23 24 25 26 27 28 29 30 31 32 34]    [22 23 24 25 26 27 28 29 30 31 32 33 34]
    7 post loop exit paths
    [38]    [35]    [35]    [35]    [35]    [35]    [35]
    ebb entry:  22
      ebb type:   block
      ebb blocks: [22 23 24 25 26 27 28]
      ebb cost:   70
      ebb exits:  [29 34 37]
      ebb succs:  [37 34 29]
      2 paths to exit 29
      [22 23 24 25 27 28]
      [22 23 24 25 26 27 28]
      2 paths to exit 34
      [22 23 24 25 27 28]
      [22 23 24 25 26 27 28]
      1 paths to exit 37
      [22 23]
    ebb entry:  29
      ebb type:   block
      ebb blocks: [29]
      ebb cost:   18
      ebb exits:  [30]
      ebb succs:  [30]
      2 paths to exit 30
      [29 30]
      [29]
    ebb entry:  30
      ebb type:   loop
      ebb blocks: [30 31]
      ebb cost:   15*I(ln4 > 3, ln4 = (((((ln11 + (((144000 + (ln13 shl 2))) shl 1))) xor ((((ln11 + (((144000 + (ln13 shl 2))) shl 1))) shl 16) shr_s 31)) - ((((ln11 + (((144000 + (ln13 shl 2))) shl 1))) shl 16) shr_s 31)) && 65535) shr_u 1, ln4 = ln4 shr_u 1) + 1
      ebb exits:  [32]
      ebb succs:  [32]
      1 paths to exit 32
      [30 31]
      1 loop paths
      [30]
      1 post loop exit paths
      [31]
    ebb entry:  32
      ebb type:   block
      ebb blocks: [32 33]
      ebb cost:   14
      ebb exits:  [34]
      ebb succs:  [34]
      2 paths to exit 34
      [32 33]
      [32]
    ebb entry:  34
      ebb type:   block
      ebb blocks: [34 35 36]
      ebb cost:   25
      ebb exits:  [22 37 41]
      ebb succs:  [37 22]
      1 paths to exit 22
      [34]
      0 paths to exit 37

      1 paths to exit 41
      [34 35]
    ebb entry:  37
      ebb type:   block
      ebb blocks: [37 38]
      ebb cost:   12
      ebb exits:  [22 39]
      ebb succs:  [22]
      1 paths to exit 22
      [37]
      1 paths to exit 39
      [37 38]
  ebb entry:  39
    ebb type:   block
    ebb blocks: [39 40]
    ebb cost:   11
    ebb exits:  [41]
    ebb succs:  [41]
    2 paths to exit 41
    [39 40]
    [39]
  ebb entry:  41
    ebb type:   block
    ebb blocks: [41 42]
    ebb cost:   14
    ebb exits:  [13 43]
    ebb succs:  [13]
    1 paths to exit 13
    [41]
    1 paths to exit 43
    [41 42]
ebb entry:  43
  ebb type:   block
  ebb blocks: [43]
  ebb cost:   1
  ebb exits:  [44]
  ebb succs:  [44]
  1 paths to exit 44
  [43]
ebb entry:  44
  ebb type:   block
  ebb blocks: [44 45]
  ebb cost:   2
  ebb exits:  [45]
  ebb succs:  []
  1 paths to exit 45
  [44]
