ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
  ebb cost:   167
  ebb exits:  [15 68 70 72 78 80]
  ebb succs:  [80 78 72 70 68 15]
  2 paths to exit 15
  [0 1 2 3 4 5 6 7 8 9 14]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
  1 paths to exit 68
  [0 1 2 3 4 5 6 7 8 9 10]
  1 paths to exit 70
  [0 1 2 3 4 5 6 7 8 9 10 11]
  1 paths to exit 72
  [0 1 2 3 4 5 6 7 8 9 10 11 12]
  1 paths to exit 78
  [0 1 2 3]
  2 paths to exit 80
  [0 1 2 3 4 5 6 7 8 9 14]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14]
ebb entry:  15
  ebb type:   block
  ebb blocks: [15]
  ebb cost:   32
  ebb exits:  [16]
  ebb succs:  [16]
  1 paths to exit 16
  [15]
ebb entry:  16
  ebb type:   loop
  ebb blocks: [16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65]
  ebb cost:   (list_max([113*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 218*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 201*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 231*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 214*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 227*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 210*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 240*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 223*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 98*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 203*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 186*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 216*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 199*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 212*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 195*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 225*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 208*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 80*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 129*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 142*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 138*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 151*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 126*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 231*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 214*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 244*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 227*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 240*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 223*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 253*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 236*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 111*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 216*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 199*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 229*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 212*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 225*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 208*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 238*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 221*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 93*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 142*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 155*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 151*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2); 164*I((i32.load8_u@(ln2)) != 2, ln2 = g0 - 256, ln2 = ln2)])) + 1
  ebb exits:  [66 74 76 80 166]
  ebb succs:  [166 80 76 74 66]
  6 paths to exit 66
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 65]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 65]
  [16 17 18 19 21 22 23 24 25 26 27 28 65]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 65]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 65]
  [16 17 18 19 20 21 22 23 24 25 26 27 28 65]
  1 paths to exit 74
  [16]
  1 paths to exit 76
  [16 17]
  47 paths to exit 80
  [16 17 18 19 21 22 23 39 40 43 44 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 21 22 23 24 62 63]
  [16 17 18 19 21 22 23 24 25 26 27 31 32 34 62 63]
  [16 17 18 19 21 22 23 24 25 26 27 31 32 33 34 62 63]
  [16 17 18 19 21 22 23 24 25 26 27 28 29 32 34 62 63]
  [16 17 18 19 21 22 23 24 25 26 27 28 29 32 33 34 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62 63]
  [16 17 18 19 20 21 22 23 24 62 63]
  [16 17 18 19 20 21 22 23 24 25 26 27 31 32 34 62 63]
  [16 17 18 19 20 21 22 23 24 25 26 27 31 32 33 34 62 63]
  [16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 34 62 63]
  [16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 33 34 62 63]
  [16 17 18]
  0 paths to exit 166

  46 loop paths
  [16 17 18 19 21 22 23 39 40 43 44 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62]  [16 17 18 19 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62]  [16 17 18 19 21 22 23 24 62]  [16 17 18 19 21 22 23 24 25 26 27 31 32 34 62]  [16 17 18 19 21 22 23 24 25 26 27 31 32 33 34 62]  [16 17 18 19 21 22 23 24 25 26 27 28 29 32 34 62]  [16 17 18 19 21 22 23 24 25 26 27 28 29 32 33 34 62]  [16 17 18 19 20 21 22 23 39 40 43 44 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 51 52 53 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 43 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 51 52 53 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 58 59 60 61 62]  [16 17 18 19 20 21 22 23 39 40 41 44 45 46 47 48 49 52 53 54 55 56 59 60 61 62]  [16 17 18 19 20 21 22 23 24 62]  [16 17 18 19 20 21 22 23 24 25 26 27 31 32 34 62]  [16 17 18 19 20 21 22 23 24 25 26 27 31 32 33 34 62]  [16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 34 62]  [16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 33 34 62]
  52 post loop exit paths
  [65]  [65]  [65]  [65]  [65]  [65]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]  [63]
  ebb entry:  16
    ebb type:   block
    ebb blocks: [16 17 18 19 20 21 22 23 24]
    ebb cost:   81
    ebb exits:  [25 39 62 74 76 80]
    ebb succs:  [62 39 25]
    2 paths to exit 25
    [16 17 18 19 21 22 23 24]
    [16 17 18 19 20 21 22 23 24]
    2 paths to exit 39
    [16 17 18 19 21 22 23]
    [16 17 18 19 20 21 22 23]
    2 paths to exit 62
    [16 17 18 19 21 22 23 24]
    [16 17 18 19 20 21 22 23 24]
    1 paths to exit 74
    [16]
    1 paths to exit 76
    [16 17]
    1 paths to exit 80
    [16 17 18]
  ebb entry:  25
    ebb type:   block
    ebb blocks: [25]
    ebb cost:   12
    ebb exits:  [26]
    ebb succs:  [26]
    1 paths to exit 26
    [25]
  ebb entry:  26
    ebb type:   loop
    ebb blocks: [26 27 28 29 30 31 32 33 34 35 36]
    ebb cost:   (list_max([49*I(not(i32.eqz(ln3)), ln3 = ((((i32.wrap_i64((ln2))) + -1) shr_u 2) shl 2) + -4, ln3 = ln3 + -4); 62*I(not(i32.eqz(ln3)), ln3 = ((((i32.wrap_i64((ln2))) + -1) shr_u 2) shl 2) + -4, ln3 = ln3 + -4); 58*I(not(i32.eqz(ln3)), ln3 = ((((i32.wrap_i64((ln2))) + -1) shr_u 2) shl 2) + -4, ln3 = ln3 + -4); 71*I(not(i32.eqz(ln3)), ln3 = ((((i32.wrap_i64((ln2))) + -1) shr_u 2) shl 2) + -4, ln3 = ln3 + -4)])) + 0
    ebb exits:  [37 62 65]
    ebb succs:  [65 62 37]
    0 paths to exit 37

    4 paths to exit 62
    [26 27 31 32 34]
    [26 27 31 32 33 34]
    [26 27 28 29 32 34]
    [26 27 28 29 32 33 34]
    1 paths to exit 65
    [26 27 28]
    4 loop paths
    [26 27 31 32 34 35]    [26 27 31 32 33 34 35]    [26 27 28 29 32 34 35]    [26 27 28 29 32 33 34 35]
  ebb entry:  37
    ebb type:   block
    ebb blocks: [37 38]
    ebb cost:   1
    ebb exits:  [39 166]
    ebb succs:  [39]
    0 paths to exit 39

    1 paths to exit 166
    [37]
  ebb entry:  39
    ebb type:   block
    ebb blocks: [39 40 41 42 43 44]
    ebb cost:   41
    ebb exits:  [45 62]
    ebb succs:  [62 45]
    2 paths to exit 45
    [39 40 43 44]
    [39 40 41 44]
    2 paths to exit 62
    [39 40 43 44]
    [39 40 41 44]
  ebb entry:  45
    ebb type:   block
    ebb blocks: [45]
    ebb cost:   5
    ebb exits:  [46]
    ebb succs:  [46]
    1 paths to exit 46
    [45]
  ebb entry:  46
    ebb type:   loop
    ebb blocks: [46 47 48 49 50 51 52 53 54 55 56 57 58 59 60]
    ebb cost:   (list_max([98*I((1 || ((((i32.load8_u@(ln3)) shl 16) || ((i32.load8_u@(ln3)) shl 8)) || ((i32.load8_u@(ln3)) shl 24))) && 1, ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3, ln3 = ln3 + 3;ln3 = ln3 + 3;ln3 = ln3 + 3); 81*I((0 || 0) && 1, , ); 111*I((1 || ((((i32.load8_u@(ln3)) shl 16) || ((i32.load8_u@(ln3)) shl 8)) || ((i32.load8_u@(ln3)) shl 24))) && 1, ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3, ln3 = ln3 + 3;ln3 = ln3 + 3;ln3 = ln3 + 3); 94*I((0 || 0) && 1, , ); 107*I((1 || ((((i32.load8_u@(ln3)) shl 16) || ((i32.load8_u@(ln3)) shl 8)) || ((i32.load8_u@(ln3)) shl 24))) && 1, ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3, ln3 = ln3 + 3;ln3 = ln3 + 3;ln3 = ln3 + 3); 90*I((0 || 0) && 1, , ); 120*I((1 || ((((i32.load8_u@(ln3)) shl 16) || ((i32.load8_u@(ln3)) shl 8)) || ((i32.load8_u@(ln3)) shl 24))) && 1, ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3;ln3 = (((ln2)) + 4) + 3, ln3 = ln3 + 3;ln3 = ln3 + 3;ln3 = ln3 + 3); 103*I((0 || 0) && 1, , )])) + 1
    ebb exits:  [61 65]
    ebb succs:  [65 61]
    8 paths to exit 61
    [46 47 51 52 54 55 58 59 60]
    [46 47 51 52 54 55 56 59 60]
    [46 47 51 52 53 54 55 58 59 60]
    [46 47 51 52 53 54 55 56 59 60]
    [46 47 48 49 52 54 55 58 59 60]
    [46 47 48 49 52 54 55 56 59 60]
    [46 47 48 49 52 53 54 55 58 59 60]
    [46 47 48 49 52 53 54 55 56 59 60]
    1 paths to exit 65
    [46 47 48]
    8 loop paths
    [46 47 51 52 54 55 58 59]    [46 47 51 52 54 55 56 59]    [46 47 51 52 53 54 55 58 59]    [46 47 51 52 53 54 55 56 59]    [46 47 48 49 52 54 55 58 59]    [46 47 48 49 52 54 55 56 59]    [46 47 48 49 52 53 54 55 58 59]    [46 47 48 49 52 53 54 55 56 59]
    8 post loop exit paths
    [60]    [60]    [60]    [60]    [60]    [60]    [60]    [60]
  ebb entry:  61
    ebb type:   block
    ebb blocks: [61]
    ebb cost:   1
    ebb exits:  [62]
    ebb succs:  [62]
    1 paths to exit 62
    [61]
  ebb entry:  62
    ebb type:   block
    ebb blocks: [62 63 64]
    ebb cost:   13
    ebb exits:  [16 65 80]
    ebb succs:  [65 16]
    1 paths to exit 16
    [62]
    0 paths to exit 65

    1 paths to exit 80
    [62 63]
  ebb entry:  65
    ebb type:   block
    ebb blocks: [65]
    ebb cost:   1
    ebb exits:  [66]
    ebb succs:  []
    1 paths to exit 66
    [65]
ebb entry:  66
  ebb type:   block
  ebb blocks: [66 67]
  ebb cost:   4
  ebb exits:  [68 158]
  ebb succs:  [158 68]
  0 paths to exit 68

  1 paths to exit 158
  [66]
ebb entry:  68
  ebb type:   block
  ebb blocks: [68 69]
  ebb cost:   5
  ebb exits:  [70 166]
  ebb succs:  [166 70]
  0 paths to exit 70

  1 paths to exit 166
  [68]
ebb entry:  70
  ebb type:   block
  ebb blocks: [70 71]
  ebb cost:   5
  ebb exits:  [72 166]
  ebb succs:  [166 72]
  0 paths to exit 72

  1 paths to exit 166
  [70]
ebb entry:  72
  ebb type:   block
  ebb blocks: [72 73]
  ebb cost:   5
  ebb exits:  [74 166]
  ebb succs:  [166 74]
  0 paths to exit 74

  1 paths to exit 166
  [72]
ebb entry:  74
  ebb type:   block
  ebb blocks: [74 75]
  ebb cost:   5
  ebb exits:  [76 166]
  ebb succs:  [166 76]
  0 paths to exit 76

  1 paths to exit 166
  [74]
ebb entry:  76
  ebb type:   block
  ebb blocks: [76 77]
  ebb cost:   5
  ebb exits:  [78 166]
  ebb succs:  [166 78]
  0 paths to exit 78

  1 paths to exit 166
  [76]
ebb entry:  78
  ebb type:   block
  ebb blocks: [78 79]
  ebb cost:   4
  ebb exits:  [80 164]
  ebb succs:  [164 80]
  0 paths to exit 80

  1 paths to exit 164
  [78]
ebb entry:  80
  ebb type:   block
  ebb blocks: [80 81]
  ebb cost:   14
  ebb exits:  [82]
  ebb succs:  [82]
  1 paths to exit 82
  [80 81]
ebb entry:  82
  ebb type:   block
  ebb blocks: [82]
  ebb cost:   1
  ebb exits:  [83]
  ebb succs:  [83]
  1 paths to exit 83
  [82]
ebb entry:  83
  ebb type:   loop
  ebb blocks: [83 84 85]
  ebb cost:   16*I((i32.load8_u@(ln4 + 7)) == 255, ln4 = (g0 - 256), ln4 = ln4 + 12) + 1
  ebb exits:  [86 98]
  ebb succs:  [98 86]
  1 paths to exit 86
  [83 84 85]
  1 paths to exit 98
  [83]
  1 loop paths
  [83 84]
  1 post loop exit paths
  [85]
ebb entry:  86
  ebb type:   block
  ebb blocks: [86 87]
  ebb cost:   10
  ebb exits:  [88 96]
  ebb succs:  [96 88]
  1 paths to exit 88
  [86 87]
  1 paths to exit 96
  [86 87]
ebb entry:  88
  ebb type:   block
  ebb blocks: [88]
  ebb cost:   9
  ebb exits:  [89]
  ebb succs:  [89]
  1 paths to exit 89
  [88]
ebb entry:  89
  ebb type:   loop
  ebb blocks: [89 90 91 92 93]
  ebb cost:   (list_max([16*I(not(ln3 == ln7), ln7 = ((((g0 - 256)) * 12) + ((g0 - 256))) + -24;ln3 = (g0 - 256), ln7 = ln7;ln3 = ln3 + 12); 36*I(not(ln3 == ln7), ln7 = ((((g0 - 256)) * 12) + ((g0 - 256))) + -24;ln3 = (g0 - 256), ln7 = ln7;ln3 = ln3 + 12)])) + 0
  ebb exits:  [94 96]
  ebb succs:  [96 94]
  0 paths to exit 94

  2 paths to exit 96
  [89 91]
  [89 90 91]
  2 loop paths
  [89 91 92]  [89 90 91 92]
ebb entry:  94
  ebb type:   block
  ebb blocks: [94 95]
  ebb cost:   1
  ebb exits:  [96 166]
  ebb succs:  [166 96]
  0 paths to exit 96

  1 paths to exit 166
  [94]
ebb entry:  96
  ebb type:   block
  ebb blocks: [96 97]
  ebb cost:   12
  ebb exits:  [98 99]
  ebb succs:  [99 98]
  0 paths to exit 98

  1 paths to exit 99
  [96]
ebb entry:  98
  ebb type:   block
  ebb blocks: [98]
  ebb cost:   10
  ebb exits:  [99]
  ebb succs:  [99]
  1 paths to exit 99
  [98]
ebb entry:  99
  ebb type:   block
  ebb blocks: [99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114]
  ebb cost:   91
  ebb exits:  [115 121 124 126 128 130 135]
  ebb succs:  [135 130 128 126 124 121 115]
  2 paths to exit 115
  [99 100 101 102 103 104 105 106 107 108 109 110 111 112 114]
  [99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114]
  2 paths to exit 121
  [99 100 101 102 103 104 105 106 107 108 109 110 111 112 114]
  [99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114]
  1 paths to exit 124
  [99 100 101 102 103 104 105 106 107]
  1 paths to exit 126
  [99 100 101 102 103 104 105 106 107 108 109 110 111]
  1 paths to exit 128
  [99 100 101 102 103 104 105 106 107 108 109]
  1 paths to exit 130
  [99 100 101 102 103 104 105 106 107 108 109 110]
  1 paths to exit 135
  [99 100 101 102 103 104 105 106 107 108]
ebb entry:  115
  ebb type:   block
  ebb blocks: [115]
  ebb cost:   9
  ebb exits:  [116]
  ebb succs:  [116]
  1 paths to exit 116
  [115]
ebb entry:  116
  ebb type:   loop
  ebb blocks: [116 117 118 119]
  ebb cost:   (list_max([12*I(ln3 + -20, ln3 = (((g0 - 256) + 144)) * 20, ln3 = ln3 + -20); 18*I(ln3 + -20, ln3 = (((g0 - 256) + 144)) * 20, ln3 = ln3 + -20)])) + 1
  ebb exits:  [120]
  ebb succs:  [120]
  2 paths to exit 120
  [116 118 119]
  [116 117 118 119]
  2 loop paths
  [116 118]  [116 117 118]
  2 post loop exit paths
  [119]  [119]
ebb entry:  120
  ebb type:   block
  ebb blocks: [120]
  ebb cost:   1
  ebb exits:  [121]
  ebb succs:  [121]
  1 paths to exit 121
  [120]
ebb entry:  121
  ebb type:   block
  ebb blocks: [121 122 123]
  ebb cost:   15
  ebb exits:  [124 158]
  ebb succs:  [158 124]
  0 paths to exit 124

  2 paths to exit 158
  [121 122]
  [121]
ebb entry:  124
  ebb type:   block
  ebb blocks: [124 125]
  ebb cost:   4
  ebb exits:  [126 158]
  ebb succs:  [158 126]
  0 paths to exit 126

  1 paths to exit 158
  [124]
ebb entry:  126
  ebb type:   block
  ebb blocks: [126 127]
  ebb cost:   7
  ebb exits:  [128 131]
  ebb succs:  [131 128]
  0 paths to exit 128

  1 paths to exit 131
  [126]
ebb entry:  128
  ebb type:   block
  ebb blocks: [128 129]
  ebb cost:   48
  ebb exits:  [130 166]
  ebb succs:  [166 130]
  0 paths to exit 130

  1 paths to exit 166
  [128]
ebb entry:  130
  ebb type:   block
  ebb blocks: [130]
  ebb cost:   4
  ebb exits:  [131]
  ebb succs:  [131]
  1 paths to exit 131
  [130]
ebb entry:  131
  ebb type:   block
  ebb blocks: [131 132 133 134]
  ebb cost:   38
  ebb exits:  [135 150]
  ebb succs:  [150 135]
  3 paths to exit 135
  [131 132 133 134]
  [131 132 133]
  [131 132]
  1 paths to exit 150
  [131]
ebb entry:  135
  ebb type:   block
  ebb blocks: [135 136 137 138 139 140 141 142]
  ebb cost:   120
  ebb exits:  [143 154]
  ebb succs:  [154 143]
  8 paths to exit 143
  [135 136 140 142]
  [135 136 140 141 142]
  [135 136 137 140 142]
  [135 136 137 140 141 142]
  [135 136 137 138 140 142]
  [135 136 137 138 140 141 142]
  [135 136 137 138 139 140 142]
  [135 136 137 138 139 140 141 142]
  8 paths to exit 154
  [135 136 140 142]
  [135 136 140 141 142]
  [135 136 137 140 142]
  [135 136 137 140 141 142]
  [135 136 137 138 140 142]
  [135 136 137 138 140 141 142]
  [135 136 137 138 139 140 142]
  [135 136 137 138 139 140 141 142]
ebb entry:  143
  ebb type:   block
  ebb blocks: [143]
  ebb cost:   17
  ebb exits:  [144]
  ebb succs:  [144]
  1 paths to exit 144
  [143]
ebb entry:  144
  ebb type:   loop
  ebb blocks: [144 145 146 147]
  ebb cost:   28*I(not(i32.eqz(ln3)), ln3 = ((((g0 - 256) + 216)) * 12) + -12, ln3 = ln3 + -12) + 0
  ebb exits:  [148 152 154]
  ebb succs:  [154 152 148]
  0 paths to exit 148

  1 paths to exit 152
  [144]
  1 paths to exit 154
  [144 145]
  1 loop paths
  [144 145 146]
ebb entry:  148
  ebb type:   block
  ebb blocks: [148 149]
  ebb cost:   1
  ebb exits:  [150 166]
  ebb succs:  [166 150]
  0 paths to exit 150

  1 paths to exit 166
  [148]
ebb entry:  150
  ebb type:   block
  ebb blocks: [150 151]
  ebb cost:   10
  ebb exits:  [152 166]
  ebb succs:  [166 152]
  0 paths to exit 152

  1 paths to exit 166
  [150]
ebb entry:  152
  ebb type:   block
  ebb blocks: [152 153]
  ebb cost:   5
  ebb exits:  [154 166]
  ebb succs:  [166 154]
  0 paths to exit 154

  1 paths to exit 166
  [152]
ebb entry:  154
  ebb type:   block
  ebb blocks: [154 155 156 157]
  ebb cost:   81
  ebb exits:  [158 164]
  ebb succs:  [164 158]
  0 paths to exit 158

  2 paths to exit 164
  [154 156]
  [154 155 156]
ebb entry:  158
  ebb type:   block
  ebb blocks: [158 159 160 161 162 163]
  ebb cost:   31
  ebb exits:  [164]
  ebb succs:  [164]
  8 paths to exit 164
  [158 160 162 163]
  [158 160 162]
  [158 160 161 162 163]
  [158 160 161 162]
  [158 159 160 162 163]
  [158 159 160 162]
  [158 159 160 161 162 163]
  [158 159 160 161 162]
ebb entry:  164
  ebb type:   block
  ebb blocks: [164 165]
  ebb cost:   5
  ebb exits:  [165]
  ebb succs:  []
  1 paths to exit 165
  [164]
ebb entry:  166
  ebb type:   block
  ebb blocks: [166]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
