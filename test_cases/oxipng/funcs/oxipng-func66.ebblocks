ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1]
  ebb cost:   11
  ebb exits:  [2]
  ebb succs:  [2]
  1 paths to exit 2
  [0 1]
ebb entry:  2
  ebb type:   block
  ebb blocks: [2]
  ebb cost:   1
  ebb exits:  [3]
  ebb succs:  [3]
  1 paths to exit 3
  [2]
ebb entry:  3
  ebb type:   loop
  ebb blocks: [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51]
  ebb cost:   (list_max([140*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@(i32.load@(pn0))), pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 149*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + (i32.load@(pn0)))), pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 170*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + ((i32.load@(pn0)) + (i32.load@(pn0))))), pn0 = pn0;pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 155*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + (i32.load@(pn0)))), pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 140*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@(i32.load@(pn0))), pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 149*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + (i32.load@(pn0)))), pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 170*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + ((i32.load@(pn0)) + (i32.load@(pn0))))), pn0 = pn0;pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0); 155*I((i32.load8_u@((i32.load@(pn0)) + (((((i32.ctz(((((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) xor -1) && (((i32.load@(((i32.load@(pn0)) && (i32.wrap_i64(rN0))) + (i32.load@(pn0)))) xor ((((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)) shl 16) || ((((i32.wrap_i64(rN0)) shr_u 25) shl 8) || ((i32.wrap_i64(rN0)) shr_u 25)))) + -16843009)) && -2139062144)) shr_u 3) + ((i32.load@(pn0)) && (i32.wrap_i64(rN0)))) && (i32.load@(pn0))) shl 1))) == (i32.load8_u@((i32.load@(pn0)) + (i32.load@(pn0)))), pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0, pn0 = pn0;pn0 = pn0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;rN0 = rN0;rN0 = rN0;rN0 = rN0;rN0 = rN0;pn0 = pn0;rN0 = rN0;pn0 = pn0;pn0 = pn0)])) + 30
  ebb exits:  [52 56 57]
  ebb succs:  [57 56 52]
  24 paths to exit 52
  [3 4 10 11 12 13 14 15 27 33 39 40 41 49 50 51]
  [3 4 10 11 12 13 14 15 27 33 39 40 41 42 43 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 27 33 39 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 27 28 29 40 41 49 50 51]
  [3 4 10 11 12 13 14 15 27 28 29 40 41 42 43 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 27 28 29 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36 37 40 41 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 19 23 36 37 40 41 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 46 47 48 49 50 51]
  [3 4 10 11 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 27 33 39 40 41 49 50 51]
  [3 4 5 6 12 13 14 15 27 33 39 40 41 42 43 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 27 33 39 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 27 28 29 40 41 49 50 51]
  [3 4 5 6 12 13 14 15 27 28 29 40 41 42 43 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 27 28 29 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36 37 40 41 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 44 45 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 19 23 36 37 40 41 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 46 47 48 49 50 51]
  [3 4 5 6 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 44 45 46 47 48 49 50 51]
  15 paths to exit 56
  [3 4 10 11 12 13 14 15 27 33 34]
  [3 4 10 11 12 13 14 15 27 28 31]
  [3 4 10 11 12 13 14 15 16 17 18 21 25]
  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36]
  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 24 25]
  [3 4 10 11 12 13 14 15 16 17 18 19 23 36]
  [3 4 10 11 12 13 14 15 16 17 18 19 23 24 25]
  [3 4 5 8]
  [3 4 5 6 12 13 14 15 27 33 34]
  [3 4 5 6 12 13 14 15 27 28 31]
  [3 4 5 6 12 13 14 15 16 17 18 21 25]
  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36]
  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 24 25]
  [3 4 5 6 12 13 14 15 16 17 18 19 23 36]
  [3 4 5 6 12 13 14 15 16 17 18 19 23 24 25]
  1 paths to exit 57
  [3 4 10]
  8 loop paths
  [3 4 10 11 12 13 14 15 27 33 39 40 41 42 43 44]  [3 4 10 11 12 13 14 15 27 28 29 40 41 42 43 44]  [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 44]  [3 4 10 11 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 44]  [3 4 5 6 12 13 14 15 27 33 39 40 41 42 43 44]  [3 4 5 6 12 13 14 15 27 28 29 40 41 42 43 44]  [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36 37 40 41 42 43 44]  [3 4 5 6 12 13 14 15 16 17 18 19 23 36 37 40 41 42 43 44]
  35 post loop exit paths
  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [49 50 51]  [46 47 48 49 50 51]  [45 46 47 48 49 50 51]  [34]  [31]  [25]  [24 25]  [24 25]  [8]  [34]  [31]  [25]  [24 25]  [24 25]
  ebb entry:  3
    ebb type:   block
    ebb blocks: [3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]
    ebb cost:   87
    ebb exits:  [40 56 57]
    ebb succs:  [40]
    8 paths to exit 40
    [3 4 10 11 12 13 14 15 27 33 39]
    [3 4 10 11 12 13 14 15 27 28 29]
    [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36 37]
    [3 4 10 11 12 13 14 15 16 17 18 19 23 36 37]
    [3 4 5 6 12 13 14 15 27 33 39]
    [3 4 5 6 12 13 14 15 27 28 29]
    [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36 37]
    [3 4 5 6 12 13 14 15 16 17 18 19 23 36 37]
    15 paths to exit 56
    [3 4 10 11 12 13 14 15 27 33 34]
    [3 4 10 11 12 13 14 15 27 28 31]
    [3 4 10 11 12 13 14 15 16 17 18 21 25]
    [3 4 10 11 12 13 14 15 16 17 18 21 22 23 36]
    [3 4 10 11 12 13 14 15 16 17 18 21 22 23 24 25]
    [3 4 10 11 12 13 14 15 16 17 18 19 23 36]
    [3 4 10 11 12 13 14 15 16 17 18 19 23 24 25]
    [3 4 5 8]
    [3 4 5 6 12 13 14 15 27 33 34]
    [3 4 5 6 12 13 14 15 27 28 31]
    [3 4 5 6 12 13 14 15 16 17 18 21 25]
    [3 4 5 6 12 13 14 15 16 17 18 21 22 23 36]
    [3 4 5 6 12 13 14 15 16 17 18 21 22 23 24 25]
    [3 4 5 6 12 13 14 15 16 17 18 19 23 36]
    [3 4 5 6 12 13 14 15 16 17 18 19 23 24 25]
    1 paths to exit 57
    [3 4 10]
  ebb entry:  40
    ebb type:   block
    ebb blocks: [40]
    ebb cost:   42
    ebb exits:  [41]
    ebb succs:  [41]
    1 paths to exit 41
    [40]
  ebb entry:  41
    ebb type:   loop
    ebb blocks: [41 42 43 44 45 46 47 48 49 50]
    ebb cost:   (list_max([36*I(i32.eqz(((i32.load@(ln3 + ln8)) && ((i32.load@(ln3 + ln8)) shl 1)) && -2139062144), ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0));ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0)), ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7;ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7); 63*I(i32.eqz(((i32.load@(ln3 + ln8)) && ((i32.load@(ln3 + ln8)) shl 1)) && -2139062144), ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0));ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0)), ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7;ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7); 69*I(i32.eqz(((i32.load@(ln3 + ln8)) && ((i32.load@(ln3 + ln8)) shl 1)) && -2139062144), ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0));ln8 = (pn0);ln3 = ((pn0)) && (i32.wrap_i64(rN0)), ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7;ln8 = ln8;ln3 = ((ln4 + 4) + ln3) && ln7)])) + 1
    ebb exits:  [3 51]
    ebb succs:  [51 3]
    0 paths to exit 3

    3 paths to exit 51
    [41 49 50]
    [41 42 43 46 47 48 49 50]
    [41 42 43 44 45 46 47 48 49 50]
    3 loop paths
    [41 49]    [41 42 43 46 47 48 49]    [41 42 43 44 45 46 47 48 49]
    3 post loop exit paths
    [50]    [50]    [50]
    ebb entry:  41
      ebb type:   block
      ebb blocks: [41]
      ebb cost:   18
      ebb exits:  [42 49]
      ebb succs:  [49 42]
      1 paths to exit 42
      [41]
      1 paths to exit 49
      [41]
    ebb entry:  42
      ebb type:   block
      ebb blocks: [42]
      ebb cost:   1
      ebb exits:  [43]
      ebb succs:  [43]
      1 paths to exit 43
      [42]
    ebb entry:  43
      ebb type:   loop
      ebb blocks: [43 44 45 46 47]
      ebb cost:   (list_max([24*I((ln1 + -1) && ln1, ln1 = (((((ln3 + ln8)) xor ln13) xor -1) && ((((ln3 + ln8)) xor ln13) + -16843009)) && -2139062144;ln1 = (((((ln3 + ln8)) xor ln13) xor -1) && ((((ln3 + ln8)) xor ln13) + -16843009)) && -2139062144, ln1 = (0 + -1) && 0;ln1 = (0 + -1) && 0); 30*I((ln1 + -1) && ln1, ln1 = (((((ln3 + ln8)) xor ln13) xor -1) && ((((ln3 + ln8)) xor ln13) + -16843009)) && -2139062144;ln1 = (((((ln3 + ln8)) xor ln13) xor -1) && ((((ln3 + ln8)) xor ln13) + -16843009)) && -2139062144, ln1 = (0 + -1) && 0;ln1 = (0 + -1) && 0)])) + 1
      ebb exits:  [3 48]
      ebb succs:  [48]
      0 paths to exit 3

      2 paths to exit 48
      [43 46 47]
      [43 44 45 46 47]
      2 loop paths
      [43 46]      [43 44 45 46]
      2 post loop exit paths
      [47]      [47]
    ebb entry:  48
      ebb type:   block
      ebb blocks: [48]
      ebb cost:   1
      ebb exits:  [49]
      ebb succs:  [49]
      1 paths to exit 49
      [48]
    ebb entry:  49
      ebb type:   block
      ebb blocks: [49 50]
      ebb cost:   19
      ebb exits:  [41 51]
      ebb succs:  [41]
      1 paths to exit 41
      [49]
      1 paths to exit 51
      [49 50]
  ebb entry:  51
    ebb type:   block
    ebb blocks: [51]
    ebb cost:   1
    ebb exits:  [52]
    ebb succs:  []
    1 paths to exit 52
    [51]
ebb entry:  52
  ebb type:   block
  ebb blocks: [52 53 54 55]
  ebb cost:   97
  ebb exits:  [56 57]
  ebb succs:  [57 56]
  0 paths to exit 56

  2 paths to exit 57
  [52 54]
  [52 53 54]
ebb entry:  56
  ebb type:   block
  ebb blocks: [56]
  ebb cost:   6
  ebb exits:  [57]
  ebb succs:  [57]
  1 paths to exit 57
  [56]
ebb entry:  57
  ebb type:   block
  ebb blocks: [57 58]
  ebb cost:   11
  ebb exits:  [58]
  ebb succs:  []
  1 paths to exit 58
  [57]
