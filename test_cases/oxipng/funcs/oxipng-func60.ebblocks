ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
  ebb cost:   list_max([80 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 80 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 83 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|])); 86 + (list_max([|f80|; |f222|; |f331|; |f354|]))])
  ebb exits:  [27 66]
  ebb succs:  [66 27]
  16 paths to exit 27
  [0 1 2 3 4 5 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 24 25 26]
  16 paths to exit 66
  [0 1 2 3 4 5 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 13 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 11 14 15 16 17 18 24 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 22 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 20 25 26]
  [0 1 2 3 4 5 9 14 15 16 17 18 24 25 26]
ebb entry:  27
  ebb type:   block
  ebb blocks: [27]
  ebb cost:   11
  ebb exits:  [28]
  ebb succs:  [28]
  1 paths to exit 28
  [27]
ebb entry:  28
  ebb type:   loop
  ebb blocks: [28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64]
  ebb cost:   (list_max([[149 + (list_max([|f41|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 157 + (list_max([|f41|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 189 + (list_max([|f41|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 192 + (list_max([|f41|; |f53|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 197 + (list_max([|f41|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 200 + (list_max([|f41|; |f53|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 210 + (list_max([|f41|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 213 + (list_max([|f41|; |f53|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 218 + (list_max([|f41|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 221 + (list_max([|f41|; |f53|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 221 + (list_max([|f41|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 224 + (list_max([|f41|; |f53|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 229 + (list_max([|f41|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 232 + (list_max([|f41|; |f53|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 242 + (list_max([|f41|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 245 + (list_max([|f41|; |f53|; |f80|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 250 + (list_max([|f41|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3); 253 + (list_max([|f41|; |f53|; |f80|; |f197|; |f359|]))*I((i32.load8_u@(ln3)) != 2, ln3 = g0 - 112, ln3 = ln3)]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 5 + |f289|; 5 + |f339|; 2 + |f417|]))
  ebb exits:  [65 66 70]
  ebb succs:  [70 66 65]
  18 paths to exit 65
  [28 29 30 31 32 33 34 35 39 41 63 64]
  [28 29 30 31 32 33 34 35 39 40 41 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 60 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 60 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 60 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 60 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 60 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 60 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 61 62 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 60 61 63 64]
  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 60 61 62 63 64]
  1 paths to exit 66
  [28 29 30 31 32 33]
  3 paths to exit 70
  [28 29 30 31 55]
  [28 29 30 31 32 57]
  [28 29 30 31 32 33 34 35 36 37]
  18 loop paths
  [28 29 30 31 32 33 34 35 39 41 63]  [28 29 30 31 32 33 34 35 39 40 41 63]  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 61 63]  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 60 61 63]  [28 29 30 31 32 33 34 35 36 43 44 49 51 52 53 59 60 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 61 63]  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 60 61 63]  [28 29 30 31 32 33 34 35 36 43 44 49 50 51 52 53 59 60 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 61 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 60 61 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 51 52 53 59 60 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 61 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 61 62 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 60 61 63]  [28 29 30 31 32 33 34 35 36 43 44 45 46 47 48 49 50 51 52 53 59 60 61 62 63]
  21 post loop exit paths
  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [64]  [55]  [57]  [37]
  ebb entry:  28
    ebb type:   block
    ebb blocks: [28 29 30 31 32 33 34 35 36 37 38 39 40 41 42]
    ebb cost:   list_max([76; 21; 37; 137 + (list_max([|f41|; |f359|])); 145 + (list_max([|f41|; |f197|; |f359|])); 48; 78 + |f417|])
    ebb exits:  [43 55 57 63 66 70]
    ebb succs:  [63 57 55 43]
    1 paths to exit 43
    [28 29 30 31 32 33 34 35 36]
    1 paths to exit 55
    [28 29 30 31]
    1 paths to exit 57
    [28 29 30 31 32]
    2 paths to exit 63
    [28 29 30 31 32 33 34 35 39 41]
    [28 29 30 31 32 33 34 35 39 40 41]
    1 paths to exit 66
    [28 29 30 31 32 33]
    1 paths to exit 70
    [28 29 30 31 32 33 34 35 36 37]
  ebb entry:  43
    ebb type:   block
    ebb blocks: [43]
    ebb cost:   35
    ebb exits:  [44]
    ebb succs:  [44]
    1 paths to exit 44
    [43]
  ebb entry:  44
    ebb type:   loop
    ebb blocks: [44 45 46 47 48 49 50 51 52]
    ebb cost:   (list_max([[37 + |f41|*I(((ln9 + 1) && 255) < ln20, ln20 = select((ln19 && 255) == ((i32.wrap_i64(((ln3)) shr_u 32)) && 255), 2, select(ln19 && 255, 5, select((ln10 && 255) == ((i32.wrap_i64(((ln3)) shr_u 40)) && 255), 2, 5)));ln9 = 0, ln20 = ln20;ln9 = ln9 + 1); 58 + |f41|*I(((ln9 + 1) && 255) < ln20, ln20 = select((ln19 && 255) == ((i32.wrap_i64(((ln3)) shr_u 32)) && 255), 2, select(ln19 && 255, 5, select((ln10 && 255) == ((i32.wrap_i64(((ln3)) shr_u 40)) && 255), 2, 5)));ln9 = 0, ln20 = ln20;ln9 = ln9 + 1); 69 + |f41|*I(((ln9 + 1) && 255) < ln20, ln20 = select((ln19 && 255) == ((i32.wrap_i64(((ln3)) shr_u 32)) && 255), 2, select(ln19 && 255, 5, select((ln10 && 255) == ((i32.wrap_i64(((ln3)) shr_u 40)) && 255), 2, 5)));ln9 = 0, ln20 = ln20;ln9 = ln9 + 1); 90 + |f41|*I(((ln9 + 1) && 255) < ln20, ln20 = select((ln19 && 255) == ((i32.wrap_i64(((ln3)) shr_u 32)) && 255), 2, select(ln19 && 255, 5, select((ln10 && 255) == ((i32.wrap_i64(((ln3)) shr_u 40)) && 255), 2, 5)));ln9 = 0, ln20 = ln20;ln9 = ln9 + 1)]])) + (list_max([1; 1; 1; 1]))
    ebb exits:  [53]
    ebb succs:  [53]
    4 paths to exit 53
    [44 49 51 52]
    [44 49 50 51 52]
    [44 45 46 47 48 49 51 52]
    [44 45 46 47 48 49 50 51 52]
    4 loop paths
    [44 49 51]    [44 49 50 51]    [44 45 46 47 48 49 51]    [44 45 46 47 48 49 50 51]
    4 post loop exit paths
    [52]    [52]    [52]    [52]
    ebb entry:  44
      ebb type:   block
      ebb blocks: [44]
      ebb cost:   list_max([19 + |f41|; 19 + |f41|])
      ebb exits:  [45 49]
      ebb succs:  [49 45]
      1 paths to exit 45
      [44]
      1 paths to exit 49
      [44]
    ebb entry:  45
      ebb type:   block
      ebb blocks: [45]
      ebb cost:   list_max([30; 5])
      ebb exits:  [46]
      ebb succs:  [46]
      2 paths to exit 46
      [45 46]
      [45]
    ebb entry:  46
      ebb type:   loop
      ebb blocks: [46 47]
      ebb cost:   25*I(ln4 + -1, ln4 = ((ln3)) + -1, ln4 = ln4 + -1) + 1
      ebb exits:  [48]
      ebb succs:  [48]
      1 paths to exit 48
      [46 47]
      1 loop paths
      [46]
      1 post loop exit paths
      [47]
    ebb entry:  48
      ebb type:   block
      ebb blocks: [48]
      ebb cost:   1
      ebb exits:  [49]
      ebb succs:  [49]
      1 paths to exit 49
      [48]
    ebb entry:  49
      ebb type:   block
      ebb blocks: [49 50 51 52]
      ebb cost:   list_max([19; 40])
      ebb exits:  [44 53]
      ebb succs:  [44]
      0 paths to exit 44

      2 paths to exit 53
      [49 51 52]
      [49 50 51 52]
  ebb entry:  53
    ebb type:   block
    ebb blocks: [53 54]
    ebb cost:   1
    ebb exits:  [55 59]
    ebb succs:  [59 55]
    0 paths to exit 55

    1 paths to exit 59
    [53]
  ebb entry:  55
    ebb type:   block
    ebb blocks: [55 56]
    ebb cost:   5 + |f289|
    ebb exits:  [57 70]
    ebb succs:  [57]
    0 paths to exit 57

    1 paths to exit 70
    [55]
  ebb entry:  57
    ebb type:   block
    ebb blocks: [57 58]
    ebb cost:   5 + |f339|
    ebb exits:  [59 70]
    ebb succs:  [59]
    0 paths to exit 59

    1 paths to exit 70
    [57]
  ebb entry:  59
    ebb type:   block
    ebb blocks: [59 60 61 62]
    ebb cost:   list_max([30 + (list_max([|f53|; |f359|])); 27 + |f359|; 38 + (list_max([|f53|; |f197|; |f359|])); 35 + (list_max([|f197|; |f359|]))])
    ebb exits:  [63]
    ebb succs:  [63]
    4 paths to exit 63
    [59 61 62]
    [59 61]
    [59 60 61 62]
    [59 60 61]
  ebb entry:  63
    ebb type:   block
    ebb blocks: [63 64]
    ebb cost:   list_max([12 + |f80|; 13 + |f80|])
    ebb exits:  [28 65]
    ebb succs:  [28]
    1 paths to exit 28
    [63]
    1 paths to exit 65
    [63 64]
ebb entry:  65
  ebb type:   block
  ebb blocks: [65]
  ebb cost:   1
  ebb exits:  [66]
  ebb succs:  [66]
  1 paths to exit 66
  [65]
ebb entry:  66
  ebb type:   block
  ebb blocks: [66 67 68 69]
  ebb cost:   list_max([8; 12 + |f53|])
  ebb exits:  [69]
  ebb succs:  []
  2 paths to exit 69
  [66 68]
  [66 67 68]
ebb entry:  70
  ebb type:   block
  ebb blocks: [70]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
