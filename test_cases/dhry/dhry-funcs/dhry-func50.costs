ebb costs:
[0]: 102
[24]: (list_max((28 * N([pF1], [(((pF1 - f64.convert_i32_u(0)) * 1000000000.) != 0.)], [(R(37, 61, f64, ((gn0 - 560) + 44), 44) + R(37, 61, f64, ((gn0 - 560) + 44), 44))], [((pF1 - f64.convert_i32_u0) * 1000000000.)])), (29 * N([pF1], [(((pF1 - f64.convert_i32_u(i32.trunc_f64_u(pF1))) * 1000000000.) != 0.)], [(R(37, 61, f64, ((gn0 - 560) + 44), 44) + R(37, 61, f64, ((gn0 - 560) + 44), 44))], [((pF1 - f64.convert_i32_ui32.trunc_f64_upF1) * 1000000000.)]))) + list_max(1, 1))
[31]: 12
[36]: (list_max((35 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (43 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (72 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (80 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (79 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))])), (87 * N([m[44]; pn3], [((m[44] - select((pn3 < 29), 29, pn3)) > 0)], [0; 0], [(m[44] - select((pn3 < 29), 29, pn3)); (m[44] - select((pn3 < 29), 29, pn3))]))) + list_max(1, 1, 1, 1, 1, 1))
[36]: 21
[39]: ((25 * N([ln6; ln8], [((ln6 - 4) >= ln8)], [((((((gn0 - 560) + 48) + select((0 < 0), 288, 0)) + 4) - 4) - 4); (((gn0 - 560) + 48) + select((0 < 0), 288, 0))], [(ln6 - 4); ln8])) + 1)
[41]: 13
[44]: ((12 * N([m[0]], [i32.eqz(m[0])], [0], [m[0]])) + list_max(1, 2))
[48]: 14
[50]: 1
[51]: 17
[53]: (list_max((95 * N([m[44]; pn3], [((m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))); (m[44] + select(((0 - pn3) < 9), 9, (0 - pn3)))])), (103 * N([m[44]; pn3], [((m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))); (m[44] + select(((0 - pn3) < 9), 9, (0 - pn3)))])), (55 * N([m[44]; pn3], [((m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))) < 0)], [(0 - select((0 < 29), 29, 0)); (0 - select((0 < 29), 29, 0))], [(m[44] + select(((0 - pn3) < 9), 9, (0 - pn3))); (m[44] + select(((0 - pn3) < 9), 9, (0 - pn3)))]))) + list_max(1, 1, 1))
[53]: 30
[58]: ((22 * N([ln6; ln7], [((ln7 + 4) < ln6)], [((((gn0 - 560) + 48) + select((0 < 0), 288, 0)) + 4); ((((gn0 - 560) + 48) + select((0 < 0), 288, 0)) + 4)], [ln6; (ln7 + 4)])) + 1)
[60]: 14
[62]: 37
[64]: 1
[65]: 24
[69]: ((11 * N([ln7; ln9], [(ln9 >= (ln7 * 10))], [(10 * 10); 0], [(ln7 * 10); ln9])) + 1)
[71]: 1
[72]: 61
[75]: ((11 * N([ln9], [((ln9 + 1) != 8)], [(((((select((pn3 < 0), pn3, 6) - select(((pn5 || 32) == 102), 0, 0)) - (((pn5 || 32) == 103) && (select((pn3 < 0), pn3, 6) != 0))) + 9216) - (((((select((pn3 < 0), pn3, 6) - select(((pn5 || 32) == 102), 0, 0)) - (((pn5 || 32) == 103) && (select((pn3 < 0), pn3, 6) != 0))) + 9216) /s 9) * 9)) + 1)], [(ln9 + 1)])) + 1)
[77]: 1
[78]: 107
[94]: (list_max((21 * N([ln10], [((ln10 + 1) > 999999999)], [(((select((0 < 0), 292, 4) + (gn0 - 560)) + (((((select((pn3 < 0), pn3, 6) - select(((pn5 || 32) == 102), 0, 0)) - (((pn5 || 32) == 103) && (select((pn3 < 0), pn3, 6) != 0))) + 9216) /s 9) shl 2)) - 4048)], [(ln10 - 4)])), (28 * N([ln8], [(((ln8 - 4) + 1) > 999999999)], [(((gn0 - 560) + 48) + select((0 < 0), 288, 0))], [(ln8 - 4)]))) + list_max(1, 1))
[98]: 1
[99]: 17
[101]: ((11 * N([ln7; ln9], [(ln9 >= (ln7 * 10))], [(10 * 10); (10 + (0 - (0 - ((0 /u 10) * 10))))], [(ln7 * 10); ln9])) + 1)
[103]: 1
[104]: 12
[106]: ((14 * N([m[0]], [i32.eqz(m[0])], [m[0]], [m[0]])) + list_max(1, 2))
[110]: 58
[120]: ((13 * N([ln14; ln9], [i32.eqz((ln14 rem_u (ln9 * 10)))], [0; 0], [ln14; (ln9 * 10)])) + 1)
[122]: 5
[123]: 37
[127]: 46
[135]: ((12 * N([ln17; ln6], [((ln17 - (ln6 - 1)) < 2)], [0; 0], [ln17; (ln6 - 1)])) + 1)
[137]: 1
[138]: 26
[140]: 57
[146]: (list_max(((27 + list_sum(|f8|, |f13|)) * N([ln13; ln8], [((ln8 + 4) <= ln13)], [0; 0], [ln13; (ln8 + 4)])), ((33 + list_sum(|f8|, |f13|)) * N([ln13; ln8], [((ln8 + 4) <= ln13)], [0; 0], [ln13; (ln8 + 4)])), ((29 + list_sum(|f8|, |f13|)) * N([ln13; ln8], [((ln8 + 4) <= ln13)], [0; 0], [ln13; (ln8 + 4)])), ((44 + list_sum(|f8|, |f13|)) * N([ln13; ln8], [((ln8 + 4) <= ln13)], [0; 0], [ln13; (ln8 + 4)]))) + list_max(1, 1, 1, 1))
[146]: 17
[150]: ((12 * N([ln11; ln6], [((ln6 - 1) > (ln11 + 16))], [0; 0], [ln11; (ln6 - 1)])) + 1)
[152]: 1
[154]: 10
[156]: 14
[158]: 16
[163]: (list_max(((38 + list_sum(|f8|, |f13|)) * N([ln12], [(ln12 > 9)], [0], [(ln12 - 9)])), ((53 + list_sum(|f8|, |f13|)) * N([ln12], [(ln12 > 9)], [0], [(ln12 - 9)]))) + list_max(1, 1))
[163]: 11
[165]: ((12 * N([ln11; ln6], [((ln6 - 1) > (ln11 + 16))], [0; 0], [ln11; (ln6 - 1)])) + 1)
[167]: 1
[168]: 29
[171]: 1
[173]: 28
[176]: (list_max(((53 + list_sum(|f8|, |f13|)) * N([ln12; ln13; m[0]], [((ln12 - (ln13 - (R(13, 0, i32, ln13, m[0]) + 1))) >= 0)], [0; 0; m[0]], [(ln12 - (ln13 - (R(13, 4, i32, ln13, m[0]) + 1))); ln13; m[0]])), ((58 + list_sum(|f8|, |f13|)) * N([ln12; ln13; m[0]], [((ln12 - (ln13 - (R(13, 0, i32, ln13, m[0]) + 1))) >= 0)], [0; 0; m[0]], [(ln12 - (ln13 - (R(13, 4, i32, ln13, m[0]) + 1))); ln13; m[0]])), ((46 + list_sum(|f8|, |f13|)) * N([ln12; ln13; m[0]], [((ln12 - (ln13 - R(13, 0, i32, ln13, m[0]))) >= 0)], [0; 0; m[0]], [(ln12 - (ln13 - R(13, 4, i32, ln13, m[0]))); ln13; m[0]])), ((61 + list_sum(|f8|, |f13|)) * N([ln12; ln13; m[0]], [((ln12 - (ln13 - (R(13, 0, i32, ln13, m[0]) - 1))) >= 0)], [0; 0; m[0]], [(ln12 - (ln13 - (R(13, 4, i32, ln13, m[0]) - 1))); ln13; 48])), ((59 + list_sum(|f8|, |f13|)) * N([ln12; ln13; pn3], [((ln12 - (ln13 - (pn3 + 1))) >= 0)], [0; 0; pn3], [(ln12 - (ln13 - (pn3 + 1))); ln13; pn3])), ((64 + list_sum(|f8|, |f13|)) * N([ln12; ln13; pn3], [((ln12 - (ln13 - (pn3 + 1))) >= 0)], [0; 0; pn3], [(ln12 - (ln13 - (pn3 + 1))); ln13; pn3])), ((52 + list_sum(|f8|, |f13|)) * N([ln12; ln13; pn3], [((ln12 - (ln13 - pn3)) >= 0)], [0; 0; pn3], [(ln12 - (ln13 - pn3)); ln13; pn3])), ((67 + list_sum(|f8|, |f13|)) * N([ln12; ln13; pn3], [((ln12 - (ln13 - (pn3 - 1))) >= 0)], [0; 0; pn3], [(ln12 - (ln13 - (pn3 - 1))); ln13; pn3]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1))
[176]: 26
[182]: ((12 * N([ln11; ln6], [((ln6 - 1) > (ln11 + 16))], [0; 0], [ln11; (ln6 - 1)])) + 1)
[184]: 1
[186]: 18
[188]: 28
[191]: 1
[192]: 15
[194]: 3
[195]: 9
[196]: 16
[198]: 22
[201]: ((9 * N([ln6], [(ln6 - 1)], [0], [(ln6 - 1)])) + 1)
[203]: 14
[207]: 63
[210]: (list_max((40 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (51 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (55 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (51 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (60 * N([pF1], [(((pF1 - f64.convert_i32_s(-2147483648)) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_s-2147483648) * 16.)])), (41 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)])), (52 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)])), (56 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)])), (52 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)])), (61 * N([pF1], [(((pF1 - f64.convert_i32_s(i32.trunc_f64_s(pF1))) * 16.) != 0.)], [pF1], [((pF1 - f64.convert_i32_si32.trunc_f64_spF1) * 16.)]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
[225]: 92
[234]: 6
0 ebb paths found
|f50| = Inf
