ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5]
  ebb cost:   41
  ebb exits:  [6 33]
  ebb succs:  [33 6]
ebb entry:  6
  ebb type:   loop
  ebb blocks: [6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31]
  ebb cost:   (list_max([
  (149 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (169 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (154 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (174 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (161 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (181 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (169 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (189 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (174 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (194 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (181 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (201 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (135 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (155 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (140 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (160 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (147 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (167 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]));
  (65 + |f28|) * (N([ln8; m[272]], [(ln8 + 1) < m[272]], [0; m[272]], [ln8 + 1; m[272]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
  ebb exits:  [32]
  ebb succs:  []
  19 paths to exit 32
  [6 7 10 11 14 19 20 23 24 25 30 31]
  [6 7 10 11 14 19 20 23 24 25 26 27 28 29 30 31]
  [6 7 10 11 14 19 20 21 25 30 31]
  [6 7 10 11 14 19 20 21 25 26 27 28 29 30 31]
  [6 7 10 11 14 19 20 21 22 24 25 30 31]
  [6 7 10 11 14 19 20 21 22 24 25 26 27 28 29 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 23 24 25 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 23 24 25 26 27 28 29 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 21 25 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 21 22 24 25 30 31]
  [6 7 10 11 14 15 16 17 18 19 20 21 22 24 25 26 27 28 29 30 31]
  [6 7 10 11 12 19 20 23 24 25 30 31]
  [6 7 10 11 12 19 20 23 24 25 26 27 28 29 30 31]
  [6 7 10 11 12 19 20 21 25 30 31]
  [6 7 10 11 12 19 20 21 25 26 27 28 29 30 31]
  [6 7 10 11 12 19 20 21 22 24 25 30 31]
  [6 7 10 11 12 19 20 21 22 24 25 26 27 28 29 30 31]
  [6 7 8 30 31]
  19 loop paths
  [6 7 10 11 14 19 20 23 24 25 30]  [6 7 10 11 14 19 20 23 24 25 26 27 28 29 30]  [6 7 10 11 14 19 20 21 25 30]  [6 7 10 11 14 19 20 21 25 26 27 28 29 30]  [6 7 10 11 14 19 20 21 22 24 25 30]  [6 7 10 11 14 19 20 21 22 24 25 26 27 28 29 30]  [6 7 10 11 14 15 16 17 18 19 20 23 24 25 30]  [6 7 10 11 14 15 16 17 18 19 20 23 24 25 26 27 28 29 30]  [6 7 10 11 14 15 16 17 18 19 20 21 25 30]  [6 7 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 30]  [6 7 10 11 14 15 16 17 18 19 20 21 22 24 25 30]  [6 7 10 11 14 15 16 17 18 19 20 21 22 24 25 26 27 28 29 30]  [6 7 10 11 12 19 20 23 24 25 30]  [6 7 10 11 12 19 20 23 24 25 26 27 28 29 30]  [6 7 10 11 12 19 20 21 25 30]  [6 7 10 11 12 19 20 21 25 26 27 28 29 30]  [6 7 10 11 12 19 20 21 22 24 25 30]  [6 7 10 11 12 19 20 21 22 24 25 26 27 28 29 30]  [6 7 8 30]
  19 post loop exit paths
  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]  [31]
nested ebbs:
  ebb entry:  6
    ebb type:   block
    ebb blocks: [6 7 8 9 10 11 12 13 14 15]
    ebb cost:   114
    ebb exits:  [16 19 30]
    ebb succs:  [30 19 16 30 19 16]
  ebb entry:  16
    ebb type:   loop
    ebb blocks: [16 17]
    ebb cost:   ((17 + |f28|) * (N([ln6], [ln6 shr_s 1], [(((((((m[276] shl 2) + m[364]) - m[36]) + ((((m[276] shl 2) + m[364]) - m[36]) shr_s 31)) xor ((((m[276] shl 2) + m[364]) - m[36]) shr_s 31)) + -1) shr_u 1) shr_s 1], [ln6 shr_s 1]))) + 1
    ebb exits:  [18]
    ebb succs:  [18 18]
    1 paths to exit 18
    [16 17]
    1 loop paths
    [16]
    1 post loop exit paths
    [17]
  ebb entry:  18
    ebb type:   block
    ebb blocks: [18]
    ebb cost:   1
    ebb exits:  [19]
    ebb succs:  [19 19]
  ebb entry:  19
    ebb type:   block
    ebb blocks: [19 20 21 22 23 24 25 26]
    ebb cost:   45
    ebb exits:  [27 30]
    ebb succs:  [30 27 30 27]
  ebb entry:  27
    ebb type:   loop
    ebb blocks: [27 28]
    ebb cost:   ((13 + |f28|) * (N([ln2], [ln2 shr_s 1], [(1 shr_s 1) shr_s 1], [ln2 shr_s 1]))) + 1
    ebb exits:  [29]
    ebb succs:  [29 29]
    1 paths to exit 29
    [27 28]
    1 loop paths
    [27]
    1 post loop exit paths
    [28]
  ebb entry:  29
    ebb type:   block
    ebb blocks: [29]
    ebb cost:   1
    ebb exits:  [30]
    ebb succs:  [30 30]
  ebb entry:  30
    ebb type:   block
    ebb blocks: [30 31]
    ebb cost:   9
    ebb exits:  [6 32]
    ebb succs:  [32 6 6]
ebb entry:  32
  ebb type:   block
  ebb blocks: [32]
  ebb cost:   1
  ebb exits:  [33]
  ebb succs:  [33]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33 34]
  ebb cost:   2
  ebb exits:  [34]
  ebb succs:  []
