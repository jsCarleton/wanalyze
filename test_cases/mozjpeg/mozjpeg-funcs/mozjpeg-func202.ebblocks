ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1]
  ebb cost:   30
  ebb exits:  [2 70]
  ebb succs:  [70 2]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68]
  ebb cost:   (list_max([
  16 * (N([ln13; ln4], [(ln13 + 1) < ln4], [m[16]; m[20]], [ln13 + 1; ln4]));
  48 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  79 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  149 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (170 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (193 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (145 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (171 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  157 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (178 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (201 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  78 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  151 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (172 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (195 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  158 * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (179 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (202 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (146 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]));
  (172 + |f40|) * (N([ln13; m[20]], [(ln13 + 1) < m[20]], [m[16]; m[20]], [ln13 + 1; m[20]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8))
  ebb exits:  [69 74 75]
  ebb succs:  []
  20 paths to exit 69
  [2 67 68]
  [2 3 4 5 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 64 65 66 67 68]
  [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 64 65 66 67 68]
  19 paths to exit 74
  [2 3 4 5 61 62]
  [2 3 4 5 6 35 36 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 62]
  [2 3 4 5 6 7 8 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 62]
  [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 62]
  0 paths to exit 75

  20 loop paths
  [2 67]  [2 3 4 5 61 64 65 66 67]  [2 3 4 5 6 35 36 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65 66 67]  [2 3 4 5 6 7 8 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 64 65 66 67]  [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 64 65 66 67]
  39 post loop exit paths
  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [68]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]  [62]
nested ebbs:
  ebb entry:  2
    ebb type:   block
    ebb blocks: [2 3]
    ebb cost:   9
    ebb exits:  [4 67]
    ebb succs:  [67 4 67 4]
  ebb entry:  4
    ebb type:   loop
    ebb blocks: [4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65]
    ebb cost:   (list_max([
  22 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  53 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  123 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (144 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (167 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (119 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (145 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  131 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (152 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (175 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  52 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  125 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (146 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (169 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  132 * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (153 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (176 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (120 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]));
  (146 + |f40|) * (N([ln15; ln8], [(ln8 + 1) <= ln15], [m[264] + -1; m[12]], [ln15; ln8 + 1]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8))
    ebb exits:  [66 74 75]
    ebb succs:  []
    19 paths to exit 66
    [4 5 61 64 65]
    [4 5 6 35 36 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 64 65]
    [4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 64 65]
    [4 5 6 7 8 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 64 65]
    [4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 64 65]
    19 paths to exit 74
    [4 5 61 62]
    [4 5 6 35 36 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 62]
    [4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 62]
    [4 5 6 7 8 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 62]
    [4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 62]
    0 paths to exit 75

    19 loop paths
    [4 5 61 64]    [4 5 6 35 36 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 43 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 43 44 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 41 50 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 41 42 43 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 41 42 43 44 55 56 57 58 59 60 61 64]    [4 5 6 35 36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59 60 61 64]    [4 5 6 7 8 29 30 61 64]    [4 5 6 7 8 9 10 11 12 20 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 20 21 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 13 20 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 13 20 21 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 13 14 26 27 28 29 30 61 64]    [4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30 61 64]
    38 post loop exit paths
    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [65]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]    [62]
nested ebbs:
    ebb entry:  4
      ebb type:   block
      ebb blocks: [4 5 6 7]
      ebb cost:   18
      ebb exits:  [8 35 61]
      ebb succs:  [61 8 61 8 61 8]
    ebb entry:  8
      ebb type:   loop
      ebb blocks: [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
      ebb cost:   (list_max([
  18 * (N([ln2; ln7], [(ln7 + 1) < ln2], [m[244]; 0], [ln2; ln7 + 1]));
  91 * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (112 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (135 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  98 * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (119 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (142 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (86 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]));
  (112 + |f40|) * (N([ln7; m[244]], [(ln7 + 1) < m[244]], [0; m[244]], [ln7 + 1; m[244]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1))
      ebb exits:  [61 75]
      ebb succs:  []
      9 paths to exit 61
      [8 29 30]
      [8 9 10 11 12 20 26 27 28 29 30]
      [8 9 10 11 12 20 21 26 27 28 29 30]
      [8 9 10 11 12 20 21 22 23 24 25 26 27 28 29 30]
      [8 9 10 11 12 13 20 26 27 28 29 30]
      [8 9 10 11 12 13 20 21 26 27 28 29 30]
      [8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29 30]
      [8 9 10 11 12 13 14 26 27 28 29 30]
      [8 9 10 11 12 13 14 15 16 17 18 26 27 28 29 30]
      0 paths to exit 75

      9 loop paths
      [8 29]      [8 9 10 11 12 20 26 27 28 29]      [8 9 10 11 12 20 21 26 27 28 29]      [8 9 10 11 12 20 21 22 23 24 25 26 27 28 29]      [8 9 10 11 12 13 20 26 27 28 29]      [8 9 10 11 12 13 20 21 26 27 28 29]      [8 9 10 11 12 13 20 21 22 23 24 25 26 27 28 29]      [8 9 10 11 12 13 14 26 27 28 29]      [8 9 10 11 12 13 14 15 16 17 18 26 27 28 29]
      9 post loop exit paths
      [30]      [30]      [30]      [30]      [30]      [30]      [30]      [30]      [30]
nested ebbs:
      ebb entry:  8
        ebb type:   block
        ebb blocks: [8 9]
        ebb cost:   25
        ebb exits:  [10 29]
        ebb succs:  [29 10 29 10 29 10 29 10]
      ebb entry:  10
        ebb type:   loop
        ebb blocks: [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
        ebb cost:   (list_max([
  54 * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (75 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (98 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  61 * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (82 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (105 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (49 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (75 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1))
        ebb exits:  [28]
        ebb succs:  []
        8 paths to exit 28
        [10 11 12 20 26 27]
        [10 11 12 20 21 26 27]
        [10 11 12 20 21 22 23 24 25 26 27]
        [10 11 12 13 20 26 27]
        [10 11 12 13 20 21 26 27]
        [10 11 12 13 20 21 22 23 24 25 26 27]
        [10 11 12 13 14 26 27]
        [10 11 12 13 14 15 16 17 18 26 27]
        8 loop paths
        [10 11 12 20 26]        [10 11 12 20 21 26]        [10 11 12 20 21 22 23 24 25 26]        [10 11 12 13 20 26]        [10 11 12 13 20 21 26]        [10 11 12 13 20 21 22 23 24 25 26]        [10 11 12 13 14 26]        [10 11 12 13 14 15 16 17 18 26]
        8 post loop exit paths
        [27]        [27]        [27]        [27]        [27]        [27]        [27]        [27]
nested ebbs:
        ebb entry:  10
          ebb type:   block
          ebb blocks: [10 11 12 13 14 15]
          ebb cost:   37
          ebb exits:  [16 20 26]
          ebb succs:  [26 20 16 26 20 16 26 20 16 26 20 16 26 20 16]
        ebb entry:  16
          ebb type:   loop
          ebb blocks: [16 17]
          ebb cost:   (18 * (N([ln12; ln2], [(ln2 + 1) != ln12], [m[52]; 0 + 1], [ln12; ln2 + 1]))) + 1
          ebb exits:  [18]
          ebb succs:  [18 18 18 18 18]
          1 paths to exit 18
          [16 17]
          1 loop paths
          [16]
          1 post loop exit paths
          [17]
        ebb entry:  18
          ebb type:   block
          ebb blocks: [18 19]
          ebb cost:   1
          ebb exits:  [20 26]
          ebb succs:  [26 20 26 20 26 20 26 20 26 20]
        ebb entry:  20
          ebb type:   block
          ebb blocks: [20 21 22]
          ebb cost:   51
          ebb exits:  [23 26]
          ebb succs:  [26 23 26 23 26 23 26 23 26 23]
        ebb entry:  23
          ebb type:   loop
          ebb blocks: [23 24]
          ebb cost:   (20 * (N([ln11; ln2], [(ln2 + 1) < ln11], [m[52]; m[52] + 1], [ln11; ln2 + 1]))) + 1
          ebb exits:  [25]
          ebb succs:  [25 25 25 25 25]
          1 paths to exit 25
          [23 24]
          1 loop paths
          [23]
          1 post loop exit paths
          [24]
        ebb entry:  25
          ebb type:   block
          ebb blocks: [25]
          ebb cost:   1
          ebb exits:  [26]
          ebb succs:  [26 26 26 26 26]
        ebb entry:  26
          ebb type:   block
          ebb blocks: [26 27]
          ebb cost:   19
          ebb exits:  [10 28]
          ebb succs:  [28 10 28 10 28 10 28 10 10]
      ebb entry:  28
        ebb type:   block
        ebb blocks: [28]
        ebb cost:   4
        ebb exits:  [29]
        ebb succs:  [29 29 29 29]
      ebb entry:  29
        ebb type:   block
        ebb blocks: [29 30 31 32]
        ebb cost:   8
        ebb exits:  [8 61 75]
        ebb succs:  [75 61 8 61 8 61 8 8]
    ebb entry:  33
      ebb type:   block
      ebb blocks: [33 34 35]
      ebb cost:   1
      ebb exits:  [36 75]
      ebb succs:  [75 36 36 36]
    ebb entry:  36
      ebb type:   loop
      ebb blocks: [36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]
      ebb cost:   (list_max([
  18 * (N([ln14; ln2], [(ln14 + 1) < ln2], [0; m[244]], [ln14 + 1; ln2]));
  88 * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (109 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (132 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (84 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (110 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  96 * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (117 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]));
  (140 + |f40|) * (N([ln14; m[244]], [(ln14 + 1) < m[244]], [0; m[244]], [ln14 + 1; m[244]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1))
      ebb exits:  [60]
      ebb succs:  []
      9 paths to exit 60
      [36 58 59]
      [36 37 38 39 40 43 55 56 57 58 59]
      [36 37 38 39 40 43 44 55 56 57 58 59]
      [36 37 38 39 40 43 44 45 46 47 48 55 56 57 58 59]
      [36 37 38 39 40 41 50 55 56 57 58 59]
      [36 37 38 39 40 41 50 51 52 53 54 55 56 57 58 59]
      [36 37 38 39 40 41 42 43 55 56 57 58 59]
      [36 37 38 39 40 41 42 43 44 55 56 57 58 59]
      [36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58 59]
      9 loop paths
      [36 58]      [36 37 38 39 40 43 55 56 57 58]      [36 37 38 39 40 43 44 55 56 57 58]      [36 37 38 39 40 43 44 45 46 47 48 55 56 57 58]      [36 37 38 39 40 41 50 55 56 57 58]      [36 37 38 39 40 41 50 51 52 53 54 55 56 57 58]      [36 37 38 39 40 41 42 43 55 56 57 58]      [36 37 38 39 40 41 42 43 44 55 56 57 58]      [36 37 38 39 40 41 42 43 44 45 46 47 48 55 56 57 58]
      9 post loop exit paths
      [59]      [59]      [59]      [59]      [59]      [59]      [59]      [59]      [59]
nested ebbs:
      ebb entry:  36
        ebb type:   block
        ebb blocks: [36 37]
        ebb cost:   24
        ebb exits:  [38 58]
        ebb succs:  [58 38 58 38 58 38 58 38]
      ebb entry:  38
        ebb type:   loop
        ebb blocks: [38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56]
        ebb cost:   (list_max([
  52 * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (73 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (96 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (48 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (74 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  60 * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (81 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]));
  (104 + |f40|) * (N([ln9; m[56]], [(ln9 + 1) < m[56]], [0; m[56]], [ln9 + 1; m[56]]))
])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1))
        ebb exits:  [57]
        ebb succs:  []
        8 paths to exit 57
        [38 39 40 43 55 56]
        [38 39 40 43 44 55 56]
        [38 39 40 43 44 45 46 47 48 55 56]
        [38 39 40 41 50 55 56]
        [38 39 40 41 50 51 52 53 54 55 56]
        [38 39 40 41 42 43 55 56]
        [38 39 40 41 42 43 44 55 56]
        [38 39 40 41 42 43 44 45 46 47 48 55 56]
        8 loop paths
        [38 39 40 43 55]        [38 39 40 43 44 55]        [38 39 40 43 44 45 46 47 48 55]        [38 39 40 41 50 55]        [38 39 40 41 50 51 52 53 54 55]        [38 39 40 41 42 43 55]        [38 39 40 41 42 43 44 55]        [38 39 40 41 42 43 44 45 46 47 48 55]
        8 post loop exit paths
        [56]        [56]        [56]        [56]        [56]        [56]        [56]        [56]
nested ebbs:
        ebb entry:  38
          ebb type:   block
          ebb blocks: [38 39 40 41 42 43 44 45]
          ebb cost:   66
          ebb exits:  [46 50 55]
          ebb succs:  [55 50 46 55 50 46 55 50 46 55 50 46 55 50 46]
        ebb entry:  46
          ebb type:   loop
          ebb blocks: [46 47]
          ebb cost:   (20 * (N([ln2; ln7], [(ln2 + 1) < ln7], [m[68] + 1; m[52]], [ln2 + 1; ln7]))) + 1
          ebb exits:  [48]
          ebb succs:  [48 48 48 48 48]
          1 paths to exit 48
          [46 47]
          1 loop paths
          [46]
          1 post loop exit paths
          [47]
        ebb entry:  48
          ebb type:   block
          ebb blocks: [48 49]
          ebb cost:   1
          ebb exits:  [50 55]
          ebb succs:  [55 50 55 50 55 50 55 50 55 50]
        ebb entry:  50
          ebb type:   block
          ebb blocks: [50 51]
          ebb cost:   24
          ebb exits:  [52 55]
          ebb succs:  [55 52 55 52 55 52 55 52 55 52]
        ebb entry:  52
          ebb type:   loop
          ebb blocks: [52 53]
          ebb cost:   (18 * (N([ln2; ln7], [(ln2 + 1) != ln7], [0 + 1; m[52]], [ln2 + 1; ln7]))) + 1
          ebb exits:  [54]
          ebb succs:  [54 54 54 54 54]
          1 paths to exit 54
          [52 53]
          1 loop paths
          [52]
          1 post loop exit paths
          [53]
        ebb entry:  54
          ebb type:   block
          ebb blocks: [54]
          ebb cost:   1
          ebb exits:  [55]
          ebb succs:  [55 55 55 55 55]
        ebb entry:  55
          ebb type:   block
          ebb blocks: [55 56]
          ebb cost:   17
          ebb exits:  [38 57]
          ebb succs:  [57 38 57 38 57 38 57 38 38]
      ebb entry:  57
        ebb type:   block
        ebb blocks: [57]
        ebb cost:   4
        ebb exits:  [58]
        ebb succs:  [58 58 58 58]
      ebb entry:  58
        ebb type:   block
        ebb blocks: [58 59]
        ebb cost:   8
        ebb exits:  [36 60]
        ebb succs:  [60 36 60 36 60 36 36]
    ebb entry:  60
      ebb type:   block
      ebb blocks: [60]
      ebb cost:   1
      ebb exits:  [61]
      ebb succs:  [61 61 61]
    ebb entry:  61
      ebb type:   block
      ebb blocks: [61 62 63 64 65]
      ebb cost:   16
      ebb exits:  [4 66 74]
      ebb succs:  [74 66 4 66 4 4]
  ebb entry:  66
    ebb type:   block
    ebb blocks: [66]
    ebb cost:   4
    ebb exits:  [67]
    ebb succs:  [67 67]
  ebb entry:  67
    ebb type:   block
    ebb blocks: [67 68]
    ebb cost:   13
    ebb exits:  [2 69]
    ebb succs:  [69 2 2]
ebb entry:  69
  ebb type:   block
  ebb blocks: [69]
  ebb cost:   4
  ebb exits:  [70]
  ebb succs:  [70]
ebb entry:  70
  ebb type:   block
  ebb blocks: [70 71 72 73]
  ebb cost:   37
  ebb exits:  [73]
  ebb succs:  []
ebb entry:  74
  ebb type:   block
  ebb blocks: [74]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
ebb entry:  75
  ebb type:   block
  ebb blocks: [75]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
