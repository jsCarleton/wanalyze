|f154| = list_max([
  413;
  list_sum([
    419;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    418;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    227;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    416;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    415;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    224;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    418;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    417;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    226;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    415;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    414;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    223;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    375;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    374;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    183;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    372;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    371;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    180;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    352;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    351;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    160;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    418;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    417;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    226;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    415;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    414;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    223;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    417;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    416;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    225;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    414;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    374;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    373;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    182;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    371;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    351;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    327;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    326;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    135;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    324;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    323;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    132;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    326;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    325;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    134;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    323;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    283;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    282;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    91;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    280;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    260;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    314;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    313;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    122;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    311;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    310;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    119;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    313;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    312;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    121;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    310;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    270;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    269;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    78;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    267;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ])
])
