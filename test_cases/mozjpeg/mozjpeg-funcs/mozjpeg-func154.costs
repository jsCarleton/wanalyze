ebb costs:
[0]: 43
[6]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[13]: 1
[14]: 91
[24]: 13
[26]: 12
[33]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[40]: 1
[41]: 43
[45]: 8
[48]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[55]: 2
[57]: (list_max((19 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (40 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (45 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (55 * N([m[0]], [(m[0] + -1)], [m[0]], [0])), (40 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (61 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (66 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (76 * N([m[0]], [(m[0] + -1)], [m[0]], [0])), (45 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (66 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (71 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (81 * N([m[0]], [(m[0] + -1)], [m[0]], [0])), (55 * N([m[0]], [(m[0] + -1)], [m[0]], [255])), (76 * N([m[0]], [(m[0] + -1)], [m[0]], [0])), (81 * N([m[0]], [(m[0] + -1)], [m[0]], [0])), (91 * N([m[0]], [(m[0] + -1)], [m[0]], [0]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
[69]: 1
[70]: 11
[74]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[81]: 1
[82]: 191
[104]: 1
81 ebb paths found
[0 26 45 70 104]
[0 26 45 70 82 104]
[0 26 45 70 74 81 82 104]
[0 26 45 48 55 57 69 70 104]
[0 26 45 48 55 57 69 70 82 104]
[0 26 45 48 55 57 69 70 74 81 82 104]
[0 26 41 45 70 104]
[0 26 41 45 70 82 104]
[0 26 41 45 70 74 81 82 104]
[0 26 41 45 48 55 57 69 70 104]
[0 26 41 45 48 55 57 69 70 82 104]
[0 26 41 45 48 55 57 69 70 74 81 82 104]
[0 26 33 40 41 45 70 104]
[0 26 33 40 41 45 70 82 104]
[0 26 33 40 41 45 70 74 81 82 104]
[0 26 33 40 41 45 48 55 57 69 70 104]
[0 26 33 40 41 45 48 55 57 69 70 82 104]
[0 26 33 40 41 45 48 55 57 69 70 74 81 82 104]
[0 24 70 104]
[0 24 70 82 104]
[0 24 70 74 81 82 104]
[0 24 26 45 70 104]
[0 24 26 45 70 82 104]
[0 24 26 45 70 74 81 82 104]
[0 24 26 45 48 55 57 69 70 104]
[0 24 26 45 48 55 57 69 70 82 104]
[0 24 26 45 48 55 57 69 70 74 81 82 104]
[0 24 26 41 45 70 104]
[0 24 26 41 45 70 82 104]
[0 24 26 41 45 70 74 81 82 104]
[0 24 26 41 45 48 55 57 69 70 104]
[0 24 26 41 45 48 55 57 69 70 82 104]
[0 24 26 41 45 48 55 57 69 70 74 81 82 104]
[0 24 26 33 40 41 45 70 104]
[0 24 26 33 40 41 45 70 82 104]
[0 24 26 33 40 41 45 70 74 81 82 104]
[0 24 26 33 40 41 45 48 55 57 69 70 104]
[0 24 26 33 40 41 45 48 55 57 69 70 82 104]
[0 24 26 33 40 41 45 48 55 57 69 70 74 81 82 104]
[0 14 24 70 104]
[0 14 24 70 82 104]
[0 14 24 70 74 81 82 104]
[0 14 24 26 45 70 104]
[0 14 24 26 45 70 82 104]
[0 14 24 26 45 70 74 81 82 104]
[0 14 24 26 45 48 55 57 69 70 104]
[0 14 24 26 45 48 55 57 69 70 82 104]
[0 14 24 26 45 48 55 57 69 70 74 81 82 104]
[0 14 24 26 41 45 70 104]
[0 14 24 26 41 45 70 82 104]
[0 14 24 26 41 45 70 74 81 82 104]
[0 14 24 26 41 45 48 55 57 69 70 104]
[0 14 24 26 41 45 48 55 57 69 70 82 104]
[0 14 24 26 41 45 48 55 57 69 70 74 81 82 104]
[0 14 24 26 33 40 41 45 70 104]
[0 14 24 26 33 40 41 45 70 82 104]
[0 14 24 26 33 40 41 45 70 74 81 82 104]
[0 14 24 26 33 40 41 45 48 55 57 69 70 104]
[0 14 24 26 33 40 41 45 48 55 57 69 70 82 104]
[0 14 24 26 33 40 41 45 48 55 57 69 70 74 81 82 104]
[0 6 13 14 24 70 104]
[0 6 13 14 24 70 82 104]
[0 6 13 14 24 70 74 81 82 104]
[0 6 13 14 24 26 45 70 104]
[0 6 13 14 24 26 45 70 82 104]
[0 6 13 14 24 26 45 70 74 81 82 104]
[0 6 13 14 24 26 45 48 55 57 69 70 104]
[0 6 13 14 24 26 45 48 55 57 69 70 82 104]
[0 6 13 14 24 26 45 48 55 57 69 70 74 81 82 104]
[0 6 13 14 24 26 41 45 70 104]
[0 6 13 14 24 26 41 45 70 82 104]
[0 6 13 14 24 26 41 45 70 74 81 82 104]
[0 6 13 14 24 26 41 45 48 55 57 69 70 104]
[0 6 13 14 24 26 41 45 48 55 57 69 70 82 104]
[0 6 13 14 24 26 41 45 48 55 57 69 70 74 81 82 104]
[0 6 13 14 24 26 33 40 41 45 70 104]
[0 6 13 14 24 26 33 40 41 45 70 82 104]
[0 6 13 14 24 26 33 40 41 45 70 74 81 82 104]
[0 6 13 14 24 26 33 40 41 45 48 55 57 69 70 104]
[0 6 13 14 24 26 33 40 41 45 48 55 57 69 70 82 104]
[0 6 13 14 24 26 33 40 41 45 48 55 57 69 70 74 81 82 104]
|f154| = list_max([
  list_sum(43, 12, 8, 11, 1);
  list_sum(43, 12, 8, 11, 191, 1);
  list_sum([
    43;
    12;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 12, 43, 8, 11, 1);
  list_sum(43, 12, 43, 8, 11, 191, 1);
  list_sum([
    43;
    12;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 13, 11, 1);
  list_sum(43, 13, 11, 191, 1);
  list_sum([
    43;
    13;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 13, 12, 8, 11, 1);
  list_sum(43, 13, 12, 8, 11, 191, 1);
  list_sum([
    43;
    13;
    12;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 13, 12, 43, 8, 11, 1);
  list_sum(43, 13, 12, 43, 8, 11, 191, 1);
  list_sum([
    43;
    13;
    12;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 91, 13, 11, 1);
  list_sum(43, 91, 13, 11, 191, 1);
  list_sum([
    43;
    91;
    13;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 91, 13, 12, 8, 11, 1);
  list_sum(43, 91, 13, 12, 8, 11, 191, 1);
  list_sum([
    43;
    91;
    13;
    12;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum(43, 91, 13, 12, 43, 8, 11, 1);
  list_sum(43, 91, 13, 12, 43, 8, 11, 191, 1);
  list_sum([
    43;
    91;
    13;
    12;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    191;
    1
  ]);
  list_sum([
    43;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    13;
    12;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    8;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      55 * (N([m[0]], [m[0] + -1], [m[0]], [255]));
      76 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      81 * (N([m[0]], [m[0] + -1], [m[0]], [0]));
      91 * (N([m[0]], [m[0] + -1], [m[0]], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    11;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    191;
    1
  ])
])
