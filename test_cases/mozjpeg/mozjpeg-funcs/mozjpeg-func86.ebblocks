ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1]
  ebb cost:   17
  ebb exits:  [2 5]
  ebb succs:  [2 5]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3]
  ebb cost:   (42 * (N([m[244]; pn1], [(pn1 + 1) < m[244]], [m[244]; 0 + 1], [m[244]; pn1 + 1]))) + 1
  ebb exits:  [4]
  ebb succs:  [4]
  1 paths to exit 4
  [2 3]
  1 loop paths
  [2]
  1 post loop exit paths
  [3]
ebb entry:  4
  ebb type:   block
  ebb blocks: [4]
  ebb cost:   1
  ebb exits:  [5]
  ebb succs:  [5]
ebb entry:  5
  ebb type:   block
  ebb blocks: [5 6 7]
  ebb cost:   20
  ebb exits:  [8 34]
  ebb succs:  [8 34]
ebb entry:  8
  ebb type:   loop
  ebb blocks: [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  ebb cost:   list_MAX([
  18 * (N([ln2; ln7], [(ln7 + 1) < ln2], [m[20]; m[16]], [ln2; ln7 + 1]));
  (list_sum([
    22;
    list_MAX([
      29 * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]))
    ])
  ])) * (N([ln7; m[20]], [(ln7 + 1) < m[20]], [m[16]; m[20]], [ln7 + 1; m[20]]));
  (list_sum([
    22;
    list_MAX([
      29 * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]))
    ])
  ])) * (N([ln7; m[20]], [(ln7 + 1) < m[20]], [m[16]; m[20]], [ln7 + 1; m[20]]));
  (list_sum([
    22;
    list_MAX([
      29 * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]))
    ])
  ])) * (N([ln7; m[20]], [(ln7 + 1) < m[20]], [m[16]; m[20]], [ln7 + 1; m[20]]));
  (list_sum([
    22;
    list_MAX([
      29 * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
      (list_sum([
        30;
        list_MAX([
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
          (list_sum([
            50;
            list_MAX([
              (list_sum([
                28;
                (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
              ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
            ])
          ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
        ])
      ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]))
    ])
  ])) * (N([ln7; m[20]], [(ln7 + 1) < m[20]], [m[16]; m[20]], [ln7 + 1; m[20]]))
])
  ebb exits:  [33 37]
  ebb succs:  [33 37]
  5 paths to exit 33
  [8 31 32]
  [8 9 10 25 28 29 30 31 32]
  [8 9 10 11 12 13 22 23 24 25 28 29 30 31 32]
  [8 9 10 11 12 13 14 22 23 24 25 28 29 30 31 32]
  [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 28 29 30 31 32]
  4 paths to exit 37
  [8 9 10 25 26]
  [8 9 10 11 12 13 22 23 24 25 26]
  [8 9 10 11 12 13 14 22 23 24 25 26]
  [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
  5 loop paths
  [8 31]  [8 9 10 25 28 29 30 31]  [8 9 10 11 12 13 22 23 24 25 28 29 30 31]  [8 9 10 11 12 13 14 22 23 24 25 28 29 30 31]  [8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 28 29 30 31]
  9 post loop exit paths
  [32]  [32]  [32]  [32]  [32]  [26]  [26]  [26]  [26]
nested ebbs:
  ebb entry:  8
    ebb type:   block
    ebb blocks: [8 9]
    ebb cost:   5
    ebb exits:  [10 31]
    ebb succs:  [10 31]
  ebb entry:  10
    ebb type:   loop
    ebb blocks: [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29]
    ebb cost:   list_MAX([
  29 * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
  (list_sum([
    30;
    list_MAX([
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      (list_sum([
        50;
        list_MAX([
          (list_sum([
            28;
            (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
          ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
        ])
      ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
    ])
  ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
  (list_sum([
    30;
    list_MAX([
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      (list_sum([
        50;
        list_MAX([
          (list_sum([
            28;
            (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
          ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
        ])
      ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
    ])
  ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]));
  (list_sum([
    30;
    list_MAX([
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
      (list_sum([
        50;
        list_MAX([
          (list_sum([
            28;
            (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
          ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
        ])
      ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
    ])
  ])) * (N([ln5; m[264]], [(ln5 + 1) < m[264]], [m[12]; m[264]], [ln5 + 1; m[264]]))
])
    ebb exits:  [30 37]
    ebb succs:  [30 37]
    4 paths to exit 30
    [10 25 28 29]
    [10 11 12 13 22 23 24 25 28 29]
    [10 11 12 13 14 22 23 24 25 28 29]
    [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 28 29]
    4 paths to exit 37
    [10 25 26]
    [10 11 12 13 22 23 24 25 26]
    [10 11 12 13 14 22 23 24 25 26]
    [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26]
    4 loop paths
    [10 25 28]    [10 11 12 13 22 23 24 25 28]    [10 11 12 13 14 22 23 24 25 28]    [10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 28]
    8 post loop exit paths
    [29]    [29]    [29]    [29]    [26]    [26]    [26]    [26]
nested ebbs:
    ebb entry:  10
      ebb type:   block
      ebb blocks: [10 11]
      ebb cost:   11
      ebb exits:  [12 25]
      ebb succs:  [12 25]
    ebb entry:  12
      ebb type:   loop
      ebb blocks: [12 13 14 15 16 17 18 19 20 21 22 23]
      ebb cost:   list_MAX([
  49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
  49 * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]));
  (list_sum([
    50;
    list_MAX([
      (list_sum([
        28;
        (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
      ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
    ])
  ])) * (N([ln12; ln9], [(ln9 + 1) != ln12], [m[244]; 0], [ln12; ln9 + 1]))
])
      ebb exits:  [24]
      ebb succs:  [24]
      3 paths to exit 24
      [12 13 22 23]
      [12 13 14 22 23]
      [12 13 14 15 16 17 18 19 20 21 22 23]
      3 loop paths
      [12 13 22]      [12 13 14 22]      [12 13 14 15 16 17 18 19 20 21 22]
      3 post loop exit paths
      [23]      [23]      [23]
nested ebbs:
      ebb entry:  12
        ebb type:   block
        ebb blocks: [12 13 14 15]
        ebb cost:   41
        ebb exits:  [16 22]
        ebb succs:  [16 22]
      ebb entry:  16
        ebb type:   loop
        ebb blocks: [16 17 18 19 20]
        ebb cost:   list_MAX([
  (list_sum([
    28;
    (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
  ])) * (N([ln15; ln6], [(ln6 + 1) != ln15], [select(m[56] > 1, 1, m[56]); 0], [ln15; ln6 + 1]))
])
        ebb exits:  [21]
        ebb succs:  [21]
        1 paths to exit 21
        [16 17 18 19 20]
        1 loop paths
        [16 17 18 19]
        1 post loop exit paths
        [20]
nested ebbs:
        ebb entry:  16
          ebb type:   block
          ebb blocks: [16]
          ebb cost:   18
          ebb exits:  [17]
          ebb succs:  [17]
        ebb entry:  17
          ebb type:   loop
          ebb blocks: [17 18]
          ebb cost:   (18 * (N([ln2; pn1], [(pn1 + 1) != ln2], [0 + m[52]; 0 + 1], [ln2; pn1 + 1]))) + 1
          ebb exits:  [19]
          ebb succs:  [19]
          1 paths to exit 19
          [17 18]
          1 loop paths
          [17]
          1 post loop exit paths
          [18]
        ebb entry:  19
          ebb type:   block
          ebb blocks: [19 20]
          ebb cost:   10
          ebb exits:  [16 21]
          ebb succs:  [16 21]
      ebb entry:  21
        ebb type:   block
        ebb blocks: [21]
        ebb cost:   1
        ebb exits:  [22]
        ebb succs:  [22]
      ebb entry:  22
        ebb type:   block
        ebb blocks: [22 23]
        ebb cost:   8
        ebb exits:  [12 24]
        ebb succs:  [12 24]
    ebb entry:  24
      ebb type:   block
      ebb blocks: [24]
      ebb cost:   1
      ebb exits:  [25]
      ebb succs:  [25]
    ebb entry:  25
      ebb type:   block
      ebb blocks: [25 26 27 28 29]
      ebb cost:   18
      ebb exits:  [10 30 37]
      ebb succs:  [10 30 37]
  ebb entry:  30
    ebb type:   block
    ebb blocks: [30]
    ebb cost:   4
    ebb exits:  [31]
    ebb succs:  [31]
  ebb entry:  31
    ebb type:   block
    ebb blocks: [31 32]
    ebb cost:   13
    ebb exits:  [8 33]
    ebb succs:  [8 33]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33]
  ebb cost:   4
  ebb exits:  [34]
  ebb succs:  [34]
ebb entry:  34
  ebb type:   block
  ebb blocks: [34 35 36]
  ebb cost:   40
  ebb exits:  [37]
  ebb succs:  [37]
ebb entry:  37
  ebb type:   block
  ebb blocks: [37 38]
  ebb cost:   6
  ebb exits:  [38]
  ebb succs:  []
ebb costs:
[0]: 17
[2]: ((42 * N([m[244]; pn1], [((pn1 + 1) < m[244])], [m[244]; (0 + 1)], [m[244]; (pn1 + 1)])) + 1)
[4]: 1
[5]: 20
[8]: list_MAX((18 * N([ln2; ln7], [((ln7 + 1) < ln2)], [m[20]; m[16]], [ln2; (ln7 + 1)])), (list_sum(22, list_MAX((29 * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])))) * N([ln7; m[20]], [((ln7 + 1) < m[20])], [m[16]; m[20]], [(ln7 + 1); m[20]])), (list_sum(22, list_MAX((29 * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])))) * N([ln7; m[20]], [((ln7 + 1) < m[20])], [m[16]; m[20]], [(ln7 + 1); m[20]])), (list_sum(22, list_MAX((29 * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])))) * N([ln7; m[20]], [((ln7 + 1) < m[20])], [m[16]; m[20]], [(ln7 + 1); m[20]])), (list_sum(22, list_MAX((29 * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])))) * N([ln7; m[20]], [((ln7 + 1) < m[20])], [m[16]; m[20]], [(ln7 + 1); m[20]])))
[8]: 5
[10]: list_MAX((29 * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])), (list_sum(30, list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))) * N([ln5; m[264]], [((ln5 + 1) < m[264])], [m[12]; m[264]], [(ln5 + 1); m[264]])))
[10]: 11
[12]: list_MAX((49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (49 * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])), (list_sum(50, list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))) * N([ln12; ln9], [((ln9 + 1) != ln12)], [m[244]; 0], [ln12; (ln9 + 1)])))
[12]: 41
[16]: list_MAX((list_sum(28, ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)) * N([ln15; ln6], [((ln6 + 1) != ln15)], [select((m[56] > 1), 1, m[56]); 0], [ln15; (ln6 + 1)])))
[16]: 18
[17]: ((18 * N([ln2; pn1], [((pn1 + 1) != ln2)], [(0 + m[52]); (0 + 1)], [ln2; (pn1 + 1)])) + 1)
[19]: 10
[21]: 1
[22]: 8
[24]: 1
[25]: 18
[30]: 4
[31]: 13
[33]: 4
[34]: 40
[37]: 6
6 ebb paths found
[0 5 34 37]
[0 5 8 37]
[0 5 8 33 34 37]
[0 2 4 5 34 37]
[0 2 4 5 8 37]
[0 2 4 5 8 33 34 37]
