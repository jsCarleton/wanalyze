ebb costs:
[0]: 69
[11]: ((324 * N([ln3], [(ln3 < 32768)], [m[364]], [ln3])) + list_max
[11]: 40
[18]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[25]: 1
[26]: 91
[36]: 18
[38]: 18
[48]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[55]: 1
[56]: 43
[60]: 7
[63]: (list_max((14 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (35 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (40 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)])), (50 * N([m[24]], [(m[24] + -1)], [m[24]], [(m[24] + -1)]))) + list_max(1, 1, 1, 1))
[70]: 2
[72]: (list_max((19 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (40 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (45 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (55 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0])), (40 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (61 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (66 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (76 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0])), (45 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (66 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (71 * N([m[20]], [(m[20] + -1)], [m[20]], [(m[20] + -1)])), (81 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0])), (55 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [255])), (76 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0])), (81 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0])), (91 * N([m[0]], [(m[0] + -1)], [((m[0] & 128) xor (m[0] shr_u 8))], [0]))) + list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1))
[84]: 1
[85]: 6
[86]: 18
[87]: 5
[89]: 1
[90]: 1
33 ebb paths found
[0 90]
[0 11 87 89 90]
[0 11 38 86 87 89 90]
[0 11 38 60 85 86 87 89 90]
[0 11 38 60 63 70 72 84 85 86 87 89 90]
[0 11 38 56 60 85 86 87 89 90]
[0 11 38 56 60 63 70 72 84 85 86 87 89 90]
[0 11 38 48 55 56 60 85 86 87 89 90]
[0 11 38 48 55 56 60 63 70 72 84 85 86 87 89 90]
[0 11 36 86 87 89 90]
[0 11 36 38 86 87 89 90]
[0 11 36 38 60 85 86 87 89 90]
[0 11 36 38 60 63 70 72 84 85 86 87 89 90]
[0 11 36 38 56 60 85 86 87 89 90]
[0 11 36 38 56 60 63 70 72 84 85 86 87 89 90]
[0 11 36 38 48 55 56 60 85 86 87 89 90]
[0 11 36 38 48 55 56 60 63 70 72 84 85 86 87 89 90]
[0 11 26 36 86 87 89 90]
[0 11 26 36 38 86 87 89 90]
[0 11 26 36 38 60 85 86 87 89 90]
[0 11 26 36 38 60 63 70 72 84 85 86 87 89 90]
[0 11 26 36 38 56 60 85 86 87 89 90]
[0 11 26 36 38 56 60 63 70 72 84 85 86 87 89 90]
[0 11 26 36 38 48 55 56 60 85 86 87 89 90]
[0 11 26 36 38 48 55 56 60 63 70 72 84 85 86 87 89 90]
[0 11 18 25 26 36 86 87 89 90]
[0 11 18 25 26 36 38 86 87 89 90]
[0 11 18 25 26 36 38 60 85 86 87 89 90]
[0 11 18 25 26 36 38 60 63 70 72 84 85 86 87 89 90]
[0 11 18 25 26 36 38 56 60 85 86 87 89 90]
[0 11 18 25 26 36 38 56 60 63 70 72 84 85 86 87 89 90]
[0 11 18 25 26 36 38 48 55 56 60 85 86 87 89 90]
[0 11 18 25 26 36 38 48 55 56 60 63 70 72 84 85 86 87 89 90]
|f28| = list_max([
  list_sum(69, 1);
  list_sum(69, 40, 5, 1, 1);
  list_sum(69, 40, 18, 18, 5, 1, 1);
  list_sum(69, 40, 18, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    18;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum(69, 40, 18, 43, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    18;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum(69, 40, 18, 18, 5, 1, 1);
  list_sum(69, 40, 18, 18, 18, 5, 1, 1);
  list_sum(69, 40, 18, 18, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    18;
    18;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum(69, 40, 18, 18, 43, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    18;
    18;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum(69, 40, 91, 18, 18, 5, 1, 1);
  list_sum(69, 40, 91, 18, 18, 18, 5, 1, 1);
  list_sum(69, 40, 91, 18, 18, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    91;
    18;
    18;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum(69, 40, 91, 18, 18, 43, 7, 6, 18, 5, 1, 1);
  list_sum([
    69;
    40;
    91;
    18;
    18;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    91;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    91;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    43;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    6;
    18;
    5;
    1;
    1
  ]);
  list_sum([
    69;
    40;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    91;
    18;
    18;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    1;
    43;
    7;
    (list_max([
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + (list_max(1, 1, 1, 1));
    2;
    (list_max([
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]))
    ])) + (list_max(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1));
    1;
    6;
    18;
    5;
    1;
    1
  ])
])
