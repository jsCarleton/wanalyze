|f28| = list_max([
  317;
  list_sum([
    322;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    319;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    321;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    318;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    278;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    275;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    262;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    244;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    321;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    318;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    320;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    277;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    230;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    227;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    229;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    186;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    212;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    209;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    211;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ]);
  list_sum([
    168;
    (list_max([
      91 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [255]));
      81 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      71 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      76 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      66 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      61 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      55 * (N([m[0]], [m[0] + -1], [(m[0] & 128) xor (m[0] shr_u 8)], [0]));
      45 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      40 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]));
      19 * (N([m[20]], [m[20] + -1], [m[20]], [m[20] + -1]))
    ])) + 1;
    (list_max([
      50 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      40 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      35 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]));
      14 * (N([m[24]], [m[24] + -1], [m[24]], [m[24] + -1]))
    ])) + 1
  ])
])
