ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   1
  ebb exits:  [1]
  ebb succs:  [1]
ebb entry:  1
  ebb type:   loop
  ebb blocks: [1 2]
  ebb cost:   (23 * (N([ln2], [(ln2 + 1) != 64], [0 + 1], [ln2 + 1]))) + 1
  ebb exits:  [3]
  ebb succs:  [3]
  1 paths to exit 3
  [1 2]
  1 loop paths
  [1]
  1 post loop exit paths
  [2]
ebb entry:  3
  ebb type:   block
  ebb blocks: [3 4]
  ebb cost:   33
  ebb exits:  [5 38]
  ebb succs:  [5 38]
ebb entry:  5
  ebb type:   loop
  ebb blocks: [5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36]
  ebb cost:   list_MAX([
  31 * (N([ln2], [(ln2 + 1) < 64], [0], [((ln2 shl 2) + 142864) + (m[0] shl 2)]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6
  ])) * (N([ln2], [(ln2 + 2) < 64], [0], [ln2 + 2]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([ln2], [(ln2 + 2) < 64], [0], [ln2 + 2]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([ln2], [(ln2 + 2) < 64], [0], [ln2 + 2]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([ln2], [(ln2 + 2) < 64], [0], [ln2 + 2]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([ln2], [(ln2 + 2) < 64], [0], [ln2 + 2]));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6
  ])) * (N([], [(63 + 2) < 64], [], []));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([], [(63 + 2) < 64], [], []));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([], [(63 + 2) < 64], [], []));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([], [(63 + 2) < 64], [], []));
  (list_sum([
    201;
    (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6;
    72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
  ])) * (N([], [(63 + 2) < 64], [], []))
])
  ebb exits:  [37 40]
  ebb succs:  [37 40]
  11 paths to exit 37
  [5 6 35 36]
  [5 6 7 8 9 12 13 14 15 16 34 35 36]
  [5 6 7 8 9 12 13 14 15 16 17 18 21 22 23 26 27 28 34 35 36]
  [5 6 7 8 9 12 13 14 15 16 17 18 21 22 23 24 27 28 34 35 36]
  [5 6 7 8 9 12 13 14 15 16 17 18 19 22 23 26 27 28 34 35 36]
  [5 6 7 8 9 12 13 14 15 16 17 18 19 22 23 24 27 28 34 35 36]
  [5 6 7 8 9 10 14 15 16 34 35 36]
  [5 6 7 8 9 10 14 15 16 17 18 21 22 23 26 27 28 34 35 36]
  [5 6 7 8 9 10 14 15 16 17 18 21 22 23 24 27 28 34 35 36]
  [5 6 7 8 9 10 14 15 16 17 18 19 22 23 26 27 28 34 35 36]
  [5 6 7 8 9 10 14 15 16 17 18 19 22 23 24 27 28 34 35 36]
  0 paths to exit 40

  11 loop paths
  [5 6 35]  [5 6 7 8 9 12 13 14 15 16 34 35]  [5 6 7 8 9 12 13 14 15 16 17 18 21 22 23 26 27 28 34 35]  [5 6 7 8 9 12 13 14 15 16 17 18 21 22 23 24 27 28 34 35]  [5 6 7 8 9 12 13 14 15 16 17 18 19 22 23 26 27 28 34 35]  [5 6 7 8 9 12 13 14 15 16 17 18 19 22 23 24 27 28 34 35]  [5 6 7 8 9 10 14 15 16 34 35]  [5 6 7 8 9 10 14 15 16 17 18 21 22 23 26 27 28 34 35]  [5 6 7 8 9 10 14 15 16 17 18 21 22 23 24 27 28 34 35]  [5 6 7 8 9 10 14 15 16 17 18 19 22 23 26 27 28 34 35]  [5 6 7 8 9 10 14 15 16 17 18 19 22 23 24 27 28 34 35]
  11 post loop exit paths
  [36]  [36]  [36]  [36]  [36]  [36]  [36]  [36]  [36]  [36]  [36]
nested ebbs:
  ebb entry:  5
    ebb type:   block
    ebb blocks: [5 6 7]
    ebb cost:   26
    ebb exits:  [8 35]
    ebb succs:  [8 35]
  ebb entry:  8
    ebb type:   loop
    ebb blocks: [8 9 10 11 12 13 14]
    ebb cost:   (23 * (N([m[0]], [m[0] > 9.1210527916e-41], [m[0]], [m[0]]))) + 6
    ebb exits:  [15]
    ebb succs:  [15]
    2 paths to exit 15
    [8 9 12 13 14]
    [8 9 10 14]
    1 loop paths
    [8 9 12]
    2 post loop exit paths
    [13 14]    [10 14]
  ebb entry:  15
    ebb type:   block
    ebb blocks: [15 16 17 18 19 20 21 22 23 24 25 26 27]
    ebb cost:   168
    ebb exits:  [28 34]
    ebb succs:  [28 34]
  ebb entry:  28
    ebb type:   loop
    ebb blocks: [28 29 30 31]
    ebb cost:   72 * (N([ln2; pn1], [not(pn1 == ln2)], [0; select(0 > 0, 0, 0)], [ln2 + 1; pn1]))
    ebb exits:  [34 40]
    ebb succs:  [34 40]
    1 paths to exit 34
    [28]
    0 paths to exit 40

    1 loop paths
    [28 29]
  ebb entry:  32
    ebb type:   block
    ebb blocks: [32 33]
    ebb cost:   1
    ebb exits:  [34 40]
    ebb succs:  [34 40]
  ebb entry:  34
    ebb type:   block
    ebb blocks: [34]
    ebb cost:   2
    ebb exits:  [35]
    ebb succs:  [35]
  ebb entry:  35
    ebb type:   block
    ebb blocks: [35 36]
    ebb cost:   5
    ebb exits:  [5 37]
    ebb succs:  [5 37]
ebb entry:  37
  ebb type:   block
  ebb blocks: [37]
  ebb cost:   1
  ebb exits:  [38]
  ebb succs:  [38]
ebb entry:  38
  ebb type:   block
  ebb blocks: [38 39]
  ebb cost:   1
  ebb exits:  [39]
  ebb succs:  []
ebb entry:  40
  ebb type:   block
  ebb blocks: [40]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
ebb costs:
[0]: 1
[1]: ((23 * N([ln2], [((ln2 + 1) != 64)], [(0 + 1)], [(ln2 + 1)])) + 1)
[3]: 33
[5]: list_MAX((31 * N([ln2], [((ln2 + 1) < 64)], [0], [(((ln2 shl 2) + 142864) + (m[0] shl 2))])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6)) * N([ln2], [((ln2 + 2) < 64)], [0], [(ln2 + 2)])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([ln2], [((ln2 + 2) < 64)], [0], [(ln2 + 2)])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([ln2], [((ln2 + 2) < 64)], [0], [(ln2 + 2)])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([ln2], [((ln2 + 2) < 64)], [0], [(ln2 + 2)])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([ln2], [((ln2 + 2) < 64)], [0], [(ln2 + 2)])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6)) * N([], [((63 + 2) < 64)], [], [])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([], [((63 + 2) < 64)], [], [])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([], [((63 + 2) < 64)], [], [])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([], [((63 + 2) < 64)], [], [])), (list_sum(201, ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6), (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))) * N([], [((63 + 2) < 64)], [], [])))
[5]: 26
[8]: ((23 * N([m[0]], [(m[0] > 9.1210527916e-41)], [m[0]], [m[0]])) + 6)
[15]: 168
[28]: (72 * N([ln2; pn1], [not((pn1 == ln2))], [0; select((0 > 0), 0, 0)], [(ln2 + 1); pn1]))
[32]: 1
[34]: 2
[35]: 5
[37]: 1
[38]: 1
[40]: 0
3 ebb paths found
[0 1 3 38]
[0 1 3 5 40]
[0 1 3 5 37 38]
