ebb costs:
[0]: -1
[874]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[885]: 1
[886]: 143
[903]: 23
[909]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[920]: 1
[921]: 143
[938]: 23
[944]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[955]: 1
[956]: 143
[973]: 23
[979]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[990]: 1
[991]: 143
[1008]: 23
[1014]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1025]: 1
[1026]: 143
[1043]: 23
[1049]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1060]: 1
[1061]: 143
[1078]: 23
[1084]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1095]: 1
[1096]: 143
[1113]: 23
[1119]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1130]: 1
[1131]: 143
[1148]: 23
[1154]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1165]: 1
[1166]: 143
[1183]: 23
[1189]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1200]: 1
[1201]: 143
[1218]: 23
[1224]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1235]: 1
[1236]: 143
[1253]: 23
[1259]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1270]: 1
[1271]: 143
[1288]: 23
[1294]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1305]: 1
[1306]: 143
[1323]: 23
[1329]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1340]: 1
[1341]: 143
[1358]: 23
[1364]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1375]: 1
[1376]: 143
[1393]: 23
[1399]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1410]: 1
[1411]: 143
[1428]: 23
[1434]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1445]: 1
[1446]: 143
[1463]: 23
[1469]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1480]: 1
[1481]: 143
[1498]: 23
[1504]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1515]: 1
[1516]: 143
[1533]: 27
[1539]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1550]: 1
[1551]: 141
[1568]: 23
[1574]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1585]: 1
[1586]: 143
[1603]: 23
[1609]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1620]: 1
[1621]: 143
[1638]: 23
[1644]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1655]: 1
[1656]: 143
[1673]: 23
[1679]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1690]: 1
[1691]: 143
[1708]: 23
[1714]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1725]: 1
[1726]: 143
[1743]: 23
[1749]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1760]: 1
[1761]: 143
[1778]: 23
[1784]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1795]: 1
[1796]: 143
[1813]: 23
[1819]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1830]: 1
[1831]: 143
[1848]: 23
[1854]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1865]: 1
[1866]: 143
[1883]: 23
[1889]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1900]: 1
[1901]: 143
[1918]: 22
[1922]: (list_max((24 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (68 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (65 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)])), (62 * N([ln6], [(ln6 > 31)], [0], [(ln6 + -16)]))) + list_max(1, 1, 1, 1, 1))
[1933]: 1
[1934]: 141
[1952]: 60
[1960]: 20
[1964]: (list_max(((39 + |f34|) * N([m[4]; pn3], [(pn3 - select((pn3 < m[4]), m[4], pn3))], [m[4]; pn3], [(m[4] - select((pn3 < m[4]), m[4], pn0)); (pn3 - select((pn3 < m[4]), m[4], pn0))])), ((58 + |f34|) * N([m[4]; pn3], [(pn3 - select((pn3 < m[4]), m[4], pn3))], [m[4]; pn3], [(m[4] - select((pn3 < m[4]), m[4], pn0)); (pn3 - select((pn3 < m[4]), m[4], pn0))]))) + list_max(1, 1, 3))
[1971]: 1
[1973]: 17
[1974]: 6
0 ebb paths found
|f207| = Inf
