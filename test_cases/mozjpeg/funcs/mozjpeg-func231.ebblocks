ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   25
  ebb exits:  [1 13]
  ebb succs:  [13 1]
  1 paths to exit 1
  [0]
  1 paths to exit 13
  [0]
ebb entry:  1
  ebb type:   block
  ebb blocks: [1]
  ebb cost:   1
  ebb exits:  [2]
  ebb succs:  [2]
  1 paths to exit 2
  [1]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3 4 5 6 7 8 9 10 11]
  ebb cost:   (list_max([40*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 61*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 67*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 61*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 82*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 67*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 94*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1)])) + 1
  ebb exits:  [12]
  ebb succs:  [12]
  9 paths to exit 12
  [2 6 10 11]
  [2 6 7 9 10 11]
  [2 6 7 8 9 10 11]
  [2 3 5 6 10 11]
  [2 3 5 6 7 9 10 11]
  [2 3 5 6 7 8 9 10 11]
  [2 3 4 5 6 10 11]
  [2 3 4 5 6 7 9 10 11]
  [2 3 4 5 6 7 8 9 10 11]
  9 loop paths
  [2 6 10]  [2 6 7 9 10]  [2 6 7 8 9 10]  [2 3 5 6 10]  [2 3 5 6 7 9 10]  [2 3 5 6 7 8 9 10]  [2 3 4 5 6 10]  [2 3 4 5 6 7 9 10]  [2 3 4 5 6 7 8 9 10]
  9 post loop exit paths
  [11]  [11]  [11]  [11]  [11]  [11]  [11]  [11]  [11]
ebb entry:  12
  ebb type:   block
  ebb blocks: [12]
  ebb cost:   1
  ebb exits:  [13]
  ebb succs:  [13]
  1 paths to exit 13
  [12]
ebb entry:  13
  ebb type:   block
  ebb blocks: [13 14]
  ebb cost:   5
  ebb exits:  [14]
  ebb succs:  []
  1 paths to exit 14
  [13]
