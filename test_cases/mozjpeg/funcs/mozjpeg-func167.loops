Loops found in function 167 in these bblocks: 5 6 13 19.
Simple br_if conditions in: 6 13 19.
Simple br conditions in: .
Code paths from the root bblock to a loop bblock and the VM state at the conclusion of the loop bblock:
[0 1 2 3 4]
cost:    69; 
stack:   [((i32.load@(pn0)) * (i32.load@(pn0))) * 20, 1, pn0, i32.load@(i32.load@(pn0)), i32.load@(i32.load@(pn0)), 64, 1, pn0, pn0]; 
params:  [pn0]; 
locals:  [i32.load@(i32.load@(pn0)), i32.load@(pn0), ln3, i32.load@(pn0), i32.load@(i32.load@(pn0)), ln6, (i32.load@(pn0)) shl 2, (i32.load@(pn0)) * 5, (i32.load@(pn0)) * 12, (i32.load@(pn0)) * 3, ln11, (i32.load@(pn0)) shl 1, ln13, ln14]; 
globals: [5400608]

[0 1 2 3 12]
cost:    65; 
stack:   [((i32.load@(pn0)) * (i32.load@(pn0))) * 20, 1, pn0, i32.load@(i32.load@(pn0)), i32.load@(i32.load@(pn0)), 64, 1, pn0, pn0]; 
params:  [pn0]; 
locals:  [i32.load@(i32.load@(pn0)), i32.load@(pn0), ln3, i32.load@(pn0), i32.load@(i32.load@(pn0)), ln6, (i32.load@(pn0)) shl 2, (i32.load@(pn0)) * 5, (i32.load@(pn0)) * 12, (i32.load@(pn0)) * 3, ln11, ln12, ln13, ln14]; 
globals: [5400608]

[0 1 17 18]
cost:    34; 
stack:   [i32.load@(i32.load@(pn0)), i32.load@(i32.load@(pn0)), 64, 1, pn0, pn0]; 
params:  [pn0]; 
locals:  [ln1, (i32.load@(i32.load@(pn0))) + 8, i32.load@(pn0), ln4, i32.load@(i32.load@(pn0)), ln6, ln7, ln8, ln9, ln10, ln11, ln12, ln13, ln14]; 
globals: [5400608]

Simple brif loop condition in bblock 6:	(ln3 + 1) != ln4
Loop condition variables: ln3, ln4
SSA of loop:
-t0 = ln1
-t1 = ln3
-t2 = 2
-t3 = t1 shl t2
-ln14 = t3
-t5 = t0 + t3
-t6 = ln11
-t7 = ln3
-t8 = ln12
-t9 = t7 + t8
-t10 = 2
-t11 = t9 shl t10
-t12 = t6 + t11
-t13 = (t12)
-@(t5) = (t13)
-t15 = ln1
-t16 = ln3
-t17 = ln7
-t18 = t16 + t17
-t19 = 2
-t20 = t18 shl t19
-t21 = t15 + t20
-t22 = ln11
-t23 = ln14
-t24 = t22 + t23
-t25 = (t24)
-@(t21) = (t25)
-t27 = ln3
-t28 = 1
-t29 = t27 + t28
-ln3 = t29
-t31 = ln4
-t32 = t29 != t31
Loop variable calculations:
+ln4 = ln4
+ln3 = ln3 + 1
Simple brif loop condition in bblock 13:	(ln6 + 1) < (i32.load@(pn0))
Loop condition variables: ln6, pn0
SSA of loop:
-t0 = ln5
-t1 = ln6
-t2 = 2
-t3 = t1 shl t2
+t4 = t0 + t3
-t5 = ln1
-t6 = ln7
-t7 = t5 + t6
-t8 = pn0
-t9 = 1
-t10 = ln2
-t11 = (t10)
-t12 = pn0
-t13 = (t12)
-t14 = t11 * t13
-t15 = 3
-t16 = t14 shl t15
-t17 = ln2
-t18 = (t17)
-t19 = t16 /s t18
-t20 = ln10
-t21 = pn0
-t22 = (t21)
-t23 = (t22)
-t24 = rn0
-t25 = ln9
-t26 = rn0
-@(t7) = (t26)
-t28 = ln2
-t29 = 84
-t30 = t28 + t29
-ln2 = t30
-t32 = ln1
-t33 = ln8
-t34 = 2
-t35 = t33 shl t34
-t36 = t32 + t35
-ln1 = t36
-t38 = ln6
-t39 = 1
-t40 = t38 + t39
-ln6 = t40
-t42 = pn0
-t43 = (t42)
-t44 = t40 < t43
Loop variable calculations:
+pn0 = pn0
+ln6 = ln6 + 1
Simple brif loop condition in bblock 19:	(ln1 + 1) < (i32.load@(pn0))
Loop condition variables: ln1, pn0
SSA of loop:
-t0 = ln2
-t1 = ln1
-t2 = 2
-t3 = t1 shl t2
+t4 = t0 + t3
-t5 = pn0
-t6 = 1
-t7 = ln3
-t8 = (t7)
-t9 = pn0
-t10 = (t9)
-t11 = t8 * t10
-t12 = 3
-t13 = t11 shl t12
-t14 = ln3
-t15 = (t14)
-t16 = t13 /s t15
-t17 = pn0
-t18 = (t17)
-t19 = pn0
-t20 = (t19)
-t21 = (t20)
-t22 = rn0
-@(t5) = (t22)
-t24 = ln3
-t25 = 84
-t26 = t24 + t25
-ln3 = t26
-t28 = ln1
-t29 = 1
-t30 = t28 + t29
-ln1 = t30
-t32 = pn0
-t33 = (t32)
-t34 = t30 < t33
Loop variable calculations:
+pn0 = pn0
+ln1 = ln1 + 1
