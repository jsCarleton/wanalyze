Loops found in function 69 in these bblocks: 2 17 38.
Simple br_if conditions in: 2 17 38.
Simple br conditions in: .
Loop block: [1 2 3]
  Loop path: [1 2 3]
  Loop path: [1 2]
Loop block: [16 17 18]
  Loop path: [16 17 18]
  Loop path: [16 17]
Loop block: [37 38 39]
  Loop path: [37 38 39]
  Loop path: [37 38]
Code paths from the root bblock to a loop bblock and the VM state at the conclusion of the loop bblock:
[0 1]
cost:    5; 
stack:   []; 
params:  [pn0, pn1]; 
locals:  [ln2, i32.load@(pn0), ln4]; 
globals: [5400608]

[0 21 22 23 24 25 30 31 32 33 34 35 36 37]
cost:    104; 
stack:   [pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(pn0), 0, i32.load@(i32.load@(pn0))]; 
globals: [5400608]

[0 21 22 23 24 25 30 31 33 34 35 36 37]
cost:    92; 
stack:   [pn0, pn0, i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [(i32.load@(pn0)) + -1, 0, ln4]; 
globals: [5400608]

[0 21 22 23 24 25 30 34 35 36 37]
cost:    73; 
stack:   [pn0, i32.load@(pn0), pn0, pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [(i32.load@(pn0)) + -1, 0, ln4]; 
globals: [5400608]

[0 21 22 23 24 27 28 29 30 31 32 33 34 35 36 37]
cost:    132; 
stack:   [pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(pn0), 0, i32.load@(i32.load@(pn0))]; 
globals: [5400608]

[0 21 22 23 24 27 28 29 30 31 33 34 35 36 37]
cost:    120; 
stack:   [pn0, pn0, i32.load@(pn0), pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(i32.load@(pn0)), 0, i32.load@(pn0)]; 
globals: [5400608]

[0 21 22 23 24 27 28 29 30 34 35 36 37]
cost:    101; 
stack:   [pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(i32.load@(pn0)), 0, i32.load@(pn0)]; 
globals: [5400608]

[0 21 22 23 24 27 29 30 31 32 33 34 35 36 37]
cost:    120; 
stack:   [pn0, pn0, i32.load@(i32.load@(i32.load@(pn0))), i32.load@(pn0), i32.load@(i32.load@(pn0)), i32.load@(pn0), pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(pn0), 0, i32.load@(i32.load@(pn0))]; 
globals: [5400608]

[0 21 22 23 24 27 29 30 31 33 34 35 36 37]
cost:    108; 
stack:   [pn0, pn0, i32.load@(pn0), pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(i32.load@(pn0)), 0, ln4]; 
globals: [5400608]

[0 21 22 23 24 27 29 30 34 35 36 37]
cost:    89; 
stack:   [pn0, i32.load@(i32.load@(i32.load@(pn0))), pn0, pn0, pn0, i32.load@(pn0), pn0, i32.load@(pn0), pn0, pn0]; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [i32.load@(i32.load@(pn0)), 0, ln4]; 
globals: [5400608]

[0 21 22 34 35 36 37]
cost:    23; 
stack:   []; 
params:  [pn0, i32.load@(pn0)]; 
locals:  [ln2, 0, ln4]; 
globals: [5400608]

Simple brif loop condition in bblock 2:	ln3 shr_s 1
Loop condition variables: ln3
SSA of loop:
-t0 = ln2
-ln4 = t0
-t2 = 1
-t3 = t0 + t2
-ln2 = t3
-t5 = ln3
-t6 = 1
-t7 = t5 shr_s t6
-ln3 = t7
Loop variable calculations:
+ln3 = ln3 shr_s 1
Simple brif loop condition in bblock 17:	ln2 + -1
Loop condition variables: ln2
SSA of loop:
-t0 = pn0
-t1 = ln3
-t2 = (t1)
-t3 = 1
-t4 = ln3
-t5 = 1
-t6 = t4 + t5
-ln3 = t6
-t8 = ln2
-t9 = -1
-t10 = t8 + t9
-ln2 = t10
Loop variable calculations:
+ln2 = ln2 + -1
Simple brif loop condition in bblock 38:	(ln3 + 1) < (i32.load@(pn1))
Loop condition variables: ln3, pn1
SSA of loop:
-t0 = pn0
-t1 = ln3
-t2 = 2
-t3 = t1 shl t2
-t4 = t0 + t3
-t5 = 0
-@(t4) = (t5)
-t7 = ln3
-t8 = 1
-t9 = t7 + t8
-ln3 = t9
-t11 = pn1
-t12 = (t11)
-t13 = t9 < t12
Loop variable calculations:
+pn1 = pn1
+ln3 = ln3 + 1
