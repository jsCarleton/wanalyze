ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   5
  ebb exits:  [1 46]
  ebb succs:  [46 1]
  1 paths to exit 1
  [0]
  1 paths to exit 46
  [0]
ebb entry:  1
  ebb type:   block
  ebb blocks: [1]
  ebb cost:   12
  ebb exits:  [2]
  ebb succs:  [2]
  1 paths to exit 2
  [1]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44]
  ebb cost:   (list_max([97*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 109*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 136*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 160*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 206*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 141*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 153*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 180*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 204*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 250*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 179*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 191*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 218*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 242*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 288*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 89*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 101*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 128*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 152*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 198*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 133*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 145*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 172*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 196*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 242*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 171*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 183*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 210*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 234*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1); 280*I((ln14 + 1) < (i32.load@(pn0)), pn0 = pn0;ln14 = ln14, pn0 = pn0;ln14 = ln14 + 1)])) + 1
  ebb exits:  [45]
  ebb succs:  [45]
  30 paths to exit 45
  [2 3 6 7 8 22 23 43 44]
  [2 3 6 7 8 22 23 24 43 44]
  [2 3 6 7 8 22 23 24 25 39 40 41 42 43 44]
  [2 3 6 7 8 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 6 7 8 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  [2 3 6 7 8 9 18 19 20 21 22 23 43 44]
  [2 3 6 7 8 9 18 19 20 21 22 23 24 43 44]
  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 39 40 41 42 43 44]
  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 43 44]
  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 43 44]
  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 39 40 41 42 43 44]
  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  [2 3 4 7 8 22 23 43 44]
  [2 3 4 7 8 22 23 24 43 44]
  [2 3 4 7 8 22 23 24 25 39 40 41 42 43 44]
  [2 3 4 7 8 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 4 7 8 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  [2 3 4 7 8 9 18 19 20 21 22 23 43 44]
  [2 3 4 7 8 9 18 19 20 21 22 23 24 43 44]
  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 39 40 41 42 43 44]
  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 43 44]
  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 43 44]
  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 39 40 41 42 43 44]
  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 35 36 37 43 44]
  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43 44]
  30 loop paths
  [2 3 6 7 8 22 23 43]  [2 3 6 7 8 22 23 24 43]  [2 3 6 7 8 22 23 24 25 39 40 41 42 43]  [2 3 6 7 8 22 23 24 25 26 27 35 36 37 43]  [2 3 6 7 8 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]  [2 3 6 7 8 9 18 19 20 21 22 23 43]  [2 3 6 7 8 9 18 19 20 21 22 23 24 43]  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 39 40 41 42 43]  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 26 27 35 36 37 43]  [2 3 6 7 8 9 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 43]  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 43]  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 39 40 41 42 43]  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 35 36 37 43]  [2 3 6 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]  [2 3 4 7 8 22 23 43]  [2 3 4 7 8 22 23 24 43]  [2 3 4 7 8 22 23 24 25 39 40 41 42 43]  [2 3 4 7 8 22 23 24 25 26 27 35 36 37 43]  [2 3 4 7 8 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]  [2 3 4 7 8 9 18 19 20 21 22 23 43]  [2 3 4 7 8 9 18 19 20 21 22 23 24 43]  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 39 40 41 42 43]  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 26 27 35 36 37 43]  [2 3 4 7 8 9 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 43]  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 43]  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 39 40 41 42 43]  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 35 36 37 43]  [2 3 4 7 8 9 10 11 12 13 14 15 16 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 43]
  30 post loop exit paths
  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]  [44]
  ebb entry:  2
    ebb type:   block
    ebb blocks: [2 3 4 5 6 7 8 9]
    ebb cost:   89
    ebb exits:  [10 18 22]
    ebb succs:  [22 18 10]
    2 paths to exit 10
    [2 3 6 7 8 9]
    [2 3 4 7 8 9]
    2 paths to exit 18
    [2 3 6 7 8 9]
    [2 3 4 7 8 9]
    2 paths to exit 22
    [2 3 6 7 8]
    [2 3 4 7 8]
  ebb entry:  10
    ebb type:   block
    ebb blocks: [10]
    ebb cost:   7
    ebb exits:  [11]
    ebb succs:  [11]
    1 paths to exit 11
    [10]
  ebb entry:  11
    ebb type:   loop
    ebb blocks: [11 12 13 14 15]
    ebb cost:   63*I((ln4 + 1) != ln5, ln5 = select(((ln3)) rem_u ((ln3)), (ln3), ((ln3)) rem_u ((ln3)));ln4 = 0, ln5 = ln5;ln4 = ln4 + 1) + 1
    ebb exits:  [16]
    ebb succs:  [16]
    1 paths to exit 16
    [11 12 13 14 15]
    1 loop paths
    [11 12 13 14]
    1 post loop exit paths
    [15]
    ebb entry:  11
      ebb type:   block
      ebb blocks: [11]
      ebb cost:   55
      ebb exits:  [12]
      ebb succs:  [12]
      2 paths to exit 12
      [11 12]
      [11]
    ebb entry:  12
      ebb type:   loop
      ebb blocks: [12 13]
      ebb cost:   14*I((ln2 + 1) != ln7, ln7 = ln7;ln2 = 0 + 1, ln7 = ln7;ln2 = ln2 + 1) + 1
      ebb exits:  [14]
      ebb succs:  [14]
      1 paths to exit 14
      [12 13]
      1 loop paths
      [12]
      1 post loop exit paths
      [13]
    ebb entry:  14
      ebb type:   block
      ebb blocks: [14 15]
      ebb cost:   8
      ebb exits:  [11 16]
      ebb succs:  [11]
      1 paths to exit 11
      [14]
      1 paths to exit 16
      [14 15]
  ebb entry:  16
    ebb type:   block
    ebb blocks: [16 17]
    ebb cost:   1
    ebb exits:  [18 22]
    ebb succs:  [22 18]
    0 paths to exit 18

    1 paths to exit 22
    [16]
  ebb entry:  18
    ebb type:   block
    ebb blocks: [18]
    ebb cost:   32
    ebb exits:  [19]
    ebb succs:  [19]
    2 paths to exit 19
    [18 19]
    [18]
  ebb entry:  19
    ebb type:   loop
    ebb blocks: [19 20]
    ebb cost:   31*I((ln2 + 1) != ln5, ln5 = select(((ln3)) rem_u ((ln3)), (ln3), ((ln3)) rem_u ((ln3)));ln2 = 0 + 1, ln5 = ln5;ln2 = ln2 + 1) + 1
    ebb exits:  [21]
    ebb succs:  [21]
    1 paths to exit 21
    [19 20]
    1 loop paths
    [19]
    1 post loop exit paths
    [20]
  ebb entry:  21
    ebb type:   block
    ebb blocks: [21]
    ebb cost:   1
    ebb exits:  [22]
    ebb succs:  [22]
    1 paths to exit 22
    [21]
  ebb entry:  22
    ebb type:   block
    ebb blocks: [22 23 24 25]
    ebb cost:   26
    ebb exits:  [26 39 43]
    ebb succs:  [43 39 26]
    1 paths to exit 26
    [22 23 24 25]
    1 paths to exit 39
    [22 23 24 25]
    2 paths to exit 43
    [22 23 24]
    [22 23]
  ebb entry:  26
    ebb type:   block
    ebb blocks: [26]
    ebb cost:   12
    ebb exits:  [27]
    ebb succs:  [27]
    1 paths to exit 27
    [26]
  ebb entry:  27
    ebb type:   loop
    ebb blocks: [27 28 29 30 31 32 33 34 35 36]
    ebb cost:   (list_max([29*I((ln5 + 1) < (i32.load@(ln3)), ln3 = ln3;ln5 = select(((ln3)) rem_u ((ln3)), (ln3), ((ln3)) rem_u ((ln3))), ln3 = ln3;ln5 = ln5 + 1); 75*I((ln5 + 1) < (i32.load@(ln3)), ln3 = ln3;ln5 = select(((ln3)) rem_u ((ln3)), (ln3), ((ln3)) rem_u ((ln3))), ln3 = ln3;ln5 = ln5 + 1)])) + 1
    ebb exits:  [37]
    ebb succs:  [37]
    2 paths to exit 37
    [27 35 36]
    [27 28 29 30 31 32 33 34 35 36]
    2 loop paths
    [27 35]    [27 28 29 30 31 32 33 34 35]
    2 post loop exit paths
    [36]    [36]
    ebb entry:  27
      ebb type:   block
      ebb blocks: [27]
      ebb cost:   21
      ebb exits:  [28 35]
      ebb succs:  [35 28]
      1 paths to exit 28
      [27]
      1 paths to exit 35
      [27]
    ebb entry:  28
      ebb type:   block
      ebb blocks: [28]
      ebb cost:   1
      ebb exits:  [29]
      ebb succs:  [29]
      1 paths to exit 29
      [28]
    ebb entry:  29
      ebb type:   loop
      ebb blocks: [29 30 31 32 33]
      ebb cost:   43*I((ln4 + 1) != ln9, ln9 = ln9;ln4 = 0, ln9 = ln9;ln4 = ln4 + 1) + 1
      ebb exits:  [34]
      ebb succs:  [34]
      1 paths to exit 34
      [29 30 31 32 33]
      1 loop paths
      [29 30 31 32]
      1 post loop exit paths
      [33]
      ebb entry:  29
        ebb type:   block
        ebb blocks: [29]
        ebb cost:   24
        ebb exits:  [30]
        ebb succs:  [30]
        2 paths to exit 30
        [29 30]
        [29]
      ebb entry:  30
        ebb type:   loop
        ebb blocks: [30 31]
        ebb cost:   14*I((ln2 + 1) != ln8, ln8 = ln8;ln2 = 0 + 1, ln8 = ln8;ln2 = ln2 + 1) + 1
        ebb exits:  [32]
        ebb succs:  [32]
        1 paths to exit 32
        [30 31]
        1 loop paths
        [30]
        1 post loop exit paths
        [31]
      ebb entry:  32
        ebb type:   block
        ebb blocks: [32 33]
        ebb cost:   19
        ebb exits:  [29 34]
        ebb succs:  [29]
        1 paths to exit 29
        [32]
        1 paths to exit 34
        [32 33]
    ebb entry:  34
      ebb type:   block
      ebb blocks: [34]
      ebb cost:   1
      ebb exits:  [35]
      ebb succs:  [35]
      1 paths to exit 35
      [34]
    ebb entry:  35
      ebb type:   block
      ebb blocks: [35 36]
      ebb cost:   9
      ebb exits:  [27 37]
      ebb succs:  [27]
      1 paths to exit 27
      [35]
      1 paths to exit 37
      [35 36]
  ebb entry:  37
    ebb type:   block
    ebb blocks: [37 38]
    ebb cost:   1
    ebb exits:  [39 43]
    ebb succs:  [43 39]
    0 paths to exit 39

    1 paths to exit 43
    [37]
  ebb entry:  39
    ebb type:   block
    ebb blocks: [39]
    ebb cost:   17
    ebb exits:  [40]
    ebb succs:  [40]
    2 paths to exit 40
    [39 40]
    [39]
  ebb entry:  40
    ebb type:   loop
    ebb blocks: [40 41]
    ebb cost:   16*I((ln5 + 1) < (i32.load@(ln3)), ln3 = ln3;ln5 = (select(((ln3)) rem_u ((ln3)), (ln3), ((ln3)) rem_u ((ln3)))) + 1, ln3 = ln3;ln5 = ln5 + 1) + 1
    ebb exits:  [42]
    ebb succs:  [42]
    1 paths to exit 42
    [40 41]
    1 loop paths
    [40]
    1 post loop exit paths
    [41]
  ebb entry:  42
    ebb type:   block
    ebb blocks: [42]
    ebb cost:   1
    ebb exits:  [43]
    ebb succs:  [43]
    1 paths to exit 43
    [42]
  ebb entry:  43
    ebb type:   block
    ebb blocks: [43 44]
    ebb cost:   13
    ebb exits:  [2 45]
    ebb succs:  [2]
    1 paths to exit 2
    [43]
    1 paths to exit 45
    [43 44]
ebb entry:  45
  ebb type:   block
  ebb blocks: [45]
  ebb cost:   1
  ebb exits:  [46]
  ebb succs:  [46]
  1 paths to exit 46
  [45]
ebb entry:  46
  ebb type:   block
  ebb blocks: [46 47]
  ebb cost:   4
  ebb exits:  [47]
  ebb succs:  []
  1 paths to exit 47
  [46]
