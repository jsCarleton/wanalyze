ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6]
  ebb cost:   24
  ebb exits:  [7]
  ebb succs:  [7]
  2 paths to exit 7
  [0 1 4 5 6]
  [0 1 2 5 6]
ebb entry:  7
  ebb type:   block
  ebb blocks: [7]
  ebb cost:   1
  ebb exits:  [8]
  ebb succs:  [8]
  1 paths to exit 8
  [7]
ebb entry:  8
  ebb type:   loop
  ebb blocks: [8 9 10 11 12 13 14 15 16 17 18 19 20 21]
  ebb cost:   (list_max([18*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 23*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1)])) + 19
  ebb exits:  [22 23 33 105]
  ebb succs:  [105 33 23 22]
  1 paths to exit 22
  [8 9 10 11 21]
  1 paths to exit 23
  [8 9 10 11 12]
  1 paths to exit 33
  [8 9 10]
  0 paths to exit 105

  2 loop paths
  [8 9 14 17]  [8 9 14 15]
  3 post loop exit paths
  [10 11 21]  [10 11 12]  [10]
ebb entry:  22
  ebb type:   block
  ebb blocks: [22]
  ebb cost:   3
  ebb exits:  [23]
  ebb succs:  [23]
  1 paths to exit 23
  [22]
ebb entry:  23
  ebb type:   block
  ebb blocks: [23]
  ebb cost:   7
  ebb exits:  [24 33]
  ebb succs:  [33 24]
  1 paths to exit 24
  [23]
  1 paths to exit 33
  [23]
ebb entry:  24
  ebb type:   block
  ebb blocks: [24]
  ebb cost:   1
  ebb exits:  [25]
  ebb succs:  [25]
  1 paths to exit 25
  [24]
ebb entry:  25
  ebb type:   loop
  ebb blocks: [25 26 27 28 29 30 31]
  ebb cost:   (list_max([19*I(rn0 == 48, rn0 = rn0, rn0 = rn0); 24*I((i32.load8_u@(i32.load@(pn1))) == 48, pn1 = pn1, pn1 = pn1)])) + 1
  ebb exits:  [32]
  ebb succs:  [32]
  2 paths to exit 32
  [25 26 29 30 31]
  [25 26 27 30 31]
  2 loop paths
  [25 26 29 30]  [25 26 27 30]
  2 post loop exit paths
  [31]  [31]
ebb entry:  32
  ebb type:   block
  ebb blocks: [32]
  ebb cost:   3
  ebb exits:  [33]
  ebb succs:  [33]
  1 paths to exit 33
  [32]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33]
  ebb cost:   3
  ebb exits:  [34]
  ebb succs:  [34]
  1 paths to exit 34
  [33]
ebb entry:  34
  ebb type:   block
  ebb blocks: [34]
  ebb cost:   1
  ebb exits:  [35]
  ebb succs:  [35]
  1 paths to exit 35
  [34]
ebb entry:  35
  ebb type:   loop
  ebb blocks: [35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61]
  ebb cost:   (list_max([55*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 60*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 82*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 87*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 92*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 97*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 53*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 58*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 70*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 75*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 97*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 102*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 107*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 112*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 68*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 73*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 47*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1); 52*I((i32.load@(pn1)) < (i32.load@(pn1)), pn1 = pn1;pn1 = pn1, pn1 = pn1;pn1 = pn1)])) + 1
  ebb exits:  [62 63 105]
  ebb succs:  [105 63 62]
  1 paths to exit 62
  [35 36 37 38 39 40 41 61]
  1 paths to exit 63
  [35 36 37 38 39]
  0 paths to exit 105

  18 loop paths
  [35 36 37 38 44 45 48 51 53 54 57]  [35 36 37 38 44 45 48 51 53 54 55]  [35 36 37 38 44 45 48 51 52 53 54 57]  [35 36 37 38 44 45 48 51 52 53 54 55]  [35 36 37 38 44 45 48 49 53 54 57]  [35 36 37 38 44 45 48 49 53 54 55]  [35 36 37 38 44 45 46 53 54 57]  [35 36 37 38 44 45 46 53 54 55]  [35 36 37 38 39 40 44 45 48 51 53 54 57]  [35 36 37 38 39 40 44 45 48 51 53 54 55]  [35 36 37 38 39 40 44 45 48 51 52 53 54 57]  [35 36 37 38 39 40 44 45 48 51 52 53 54 55]  [35 36 37 38 39 40 44 45 48 49 53 54 57]  [35 36 37 38 39 40 44 45 48 49 53 54 55]  [35 36 37 38 39 40 44 45 46 53 54 57]  [35 36 37 38 39 40 44 45 46 53 54 55]  [35 36 37 38 39 40 41 42 54 57]  [35 36 37 38 39 40 41 42 54 55]
  1 post loop exit paths
  [61]
ebb entry:  62
  ebb type:   block
  ebb blocks: [62]
  ebb cost:   3
  ebb exits:  [63]
  ebb succs:  [63]
  1 paths to exit 63
  [62]
ebb entry:  63
  ebb type:   block
  ebb blocks: [63 64 65 66 67 68 69]
  ebb cost:   31
  ebb exits:  [70 74 103]
  ebb succs:  [103 74 70]
  1 paths to exit 70
  [63 64 69]
  1 paths to exit 74
  [63 64 69]
  2 paths to exit 103
  [63 64 65 67]
  [63 64 65 66 67]
ebb entry:  70
  ebb type:   block
  ebb blocks: [70]
  ebb cost:   14
  ebb exits:  [71]
  ebb succs:  [71]
  2 paths to exit 71
  [70 71]
  [70]
ebb entry:  71
  ebb type:   loop
  ebb blocks: [71 72]
  ebb cost:   11*I((lN14 + 1) != 8, lN14 = lN15 + 1, lN14 = lN14 + 1) + 1
  ebb exits:  [73]
  ebb succs:  [73]
  1 paths to exit 73
  [71 72]
  1 loop paths
  [71]
  1 post loop exit paths
  [72]
ebb entry:  73
  ebb type:   block
  ebb blocks: [73]
  ebb cost:   1
  ebb exits:  [74]
  ebb succs:  [74]
  1 paths to exit 74
  [73]
ebb entry:  74
  ebb type:   block
  ebb blocks: [74 75 76 77 78 79 80 81 82 83 84 85 86 87 88]
  ebb cost:   74
  ebb exits:  [89 93 102 103]
  ebb succs:  [103 102 93 89]
  3 paths to exit 89
  [74 75 79 81 84 87 88]
  [74 75 79 80 81 84 87 88]
  [74 75 76 81 84 87 88]
  3 paths to exit 93
  [74 75 79 81 84 87 88]
  [74 75 79 80 81 84 87 88]
  [74 75 76 81 84 87 88]
  3 paths to exit 102
  [74 75 79 81 84 87]
  [74 75 79 80 81 84 87]
  [74 75 76 81 84 87]
  7 paths to exit 103
  [74 75 79 81 84 85]
  [74 75 79 81 82]
  [74 75 79 80 81 84 85]
  [74 75 79 80 81 82]
  [74 75 76 81 84 85]
  [74 75 76 81 82]
  [74 75 76 77]
ebb entry:  89
  ebb type:   block
  ebb blocks: [89]
  ebb cost:   53
  ebb exits:  [90]
  ebb succs:  [90]
  2 paths to exit 90
  [89 90]
  [89]
ebb entry:  90
  ebb type:   loop
  ebb blocks: [90 91]
  ebb cost:   52*I(((ln7 shl 1) || (rn0 > -1)) > -1, rn0 = rn0;ln7 = (ln7 shl 1) || (rn0 > -1), rn0 = rn0;ln7 = (ln7 shl 1) || (rn0 > -1)) + 1
  ebb exits:  [92]
  ebb succs:  [92]
  1 paths to exit 92
  [90 91]
  1 loop paths
  [90]
  1 post loop exit paths
  [91]
ebb entry:  92
  ebb type:   block
  ebb blocks: [92]
  ebb cost:   1
  ebb exits:  [93]
  ebb succs:  [93]
  1 paths to exit 93
  [92]
ebb entry:  93
  ebb type:   block
  ebb blocks: [93 94 95 96 97 98 99 100 101]
  ebb cost:   168
  ebb exits:  [102 103]
  ebb succs:  [103 102]
  0 paths to exit 102

  4 paths to exit 103
  [93 94 97 98 100]
  [93 94 97 98 99 100]
  [93 94 95 98 100]
  [93 94 95 98 99 100]
ebb entry:  102
  ebb type:   block
  ebb blocks: [102]
  ebb cost:   34
  ebb exits:  [103]
  ebb succs:  [103]
  1 paths to exit 103
  [102]
ebb entry:  103
  ebb type:   block
  ebb blocks: [103 104]
  ebb cost:   12
  ebb exits:  [104]
  ebb succs:  []
  1 paths to exit 104
  [103]
ebb entry:  105
  ebb type:   block
  ebb blocks: [105]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
