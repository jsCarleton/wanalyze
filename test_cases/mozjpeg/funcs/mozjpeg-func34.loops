Loops found in function 34 in these bblocks: 13 21 26 37 42.
Simple br_if conditions in: 21 26 37 42.
Simple br conditions in: .
Loop block: [12 13 14 15]
  Loop exits: [15]
  Looping path: [13 14]
  Looping path: [13 14]
  Path to loop: [0 3 4 5 6 9 12]
Loop block: [20 21 22]
  Loop exits: [22]
  Looping path: [21]
  Looping path: [21]
  Path to loop: [0 3 4 5 6 7 17 18 19 20]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 20]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 20]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 20]
Loop block: [25 26 27]
  Loop exits: [27]
  Looping path: [26]
  Looping path: [26]
  Path to loop: [0 3 4 5 6 7 17 18 19 20 21 22 23 24 25]
  Path to loop: [0 3 4 5 6 7 17 18 19 24 25]
  Path to loop: [0 3 4 5 6 7 17 18 24 25]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 20 21 22 23 24 25]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 24 25]
  Path to loop: [0 3 4 5 6 9 10 17 18 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 20 21 22 23 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 24 25]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 24 25]
Loop block: [36 37 38]
  Loop exits: [38]
  Looping path: [37]
  Looping path: [37]
  Path to loop: [0 3 4 30 33 36]
Loop block: [41 42 43]
  Loop exits: [43]
  Looping path: [42]
  Looping path: [42]
  Path to loop: [0 3 4 5 6 7 17 18 19 20 21 22 23 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 7 17 18 19 20 21 22 23 24 40 41]
  Path to loop: [0 3 4 5 6 7 17 18 19 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 7 17 18 19 24 40 41]
  Path to loop: [0 3 4 5 6 7 17 18 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 7 17 18 24 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 20 21 22 23 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 20 21 22 23 24 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 19 24 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 10 17 18 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 20 21 22 23 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 19 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 14 15 16 17 18 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 20 21 22 23 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 20 21 22 23 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 19 24 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 24 25 26 27 28 40 41]
  Path to loop: [0 3 4 5 6 9 12 13 17 18 24 40 41]
  Path to loop: [0 3 4 30 31 40 41]
  Path to loop: [0 3 4 30 33 34 40 41]
  Path to loop: [0 3 4 30 33 36 37 38 39 40 41]
Code paths from the root bblock to a loop bblock and the VM state at the conclusion of the loop bblock:
[0 3 4 5 6 7 17 18 19 20] 40
cost:    40; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 7 17 18 19 24 25] 44
cost:    44; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 7 17 18 19 24 40 41] 48
cost:    48; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 7 17 18 24 25] 37
cost:    37; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ln5]; 
globals: [5400608]

[0 3 4 5 6 7 17 18 24 40 41] 41
cost:    41; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ln5]; 
globals: [5400608]

[0 3 4 5 6 9 10 17 18 19 20] 45
cost:    45; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 9 10 17 18 19 24 25] 49
cost:    49; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 9 10 17 18 19 24 40 41] 53
cost:    53; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ((pn0 + pn2) && -4) + -64]; 
globals: [5400608]

[0 3 4 5 6 9 10 17 18 24 25] 42
cost:    42; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ln5]; 
globals: [5400608]

[0 3 4 5 6 9 10 17 18 24 40 41] 46
cost:    46; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) && -4, ln5]; 
globals: [5400608]

[0 3 4 5 6 9 12] 29
cost:    29; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, ln4, ln5]; 
globals: [5400608]

[0 3 4 30 31 40 41] 28
cost:    28; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, ln4, ln5]; 
globals: [5400608]

[0 3 4 30 33 34 40 41] 35
cost:    35; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) + -4, ln5]; 
globals: [5400608]

[0 3 4 30 33 36] 30
cost:    30; 
stack:   []; 
params:  [pn0, pn1, pn0]; 
locals:  [pn0 + pn2, (pn0 + pn2) + -4, ln5]; 
globals: [5400608]

Simple brif loop condition in bblock 21:	(pn2 - -64) <= ln5
Loop condition variables: pn2, ln5
SSA of loop:
-t0 = pn2
-t1 = pn1
-t2 = (t1)
-@(t0) = (t2)
-t4 = pn2
-t5 = pn1
-t6 = (t5)
-@(t4) = (t6)
-t8 = pn2
-t9 = pn1
-t10 = (t9)
-@(t8) = (t10)
-t12 = pn2
-t13 = pn1
-t14 = (t13)
-@(t12) = (t14)
-t16 = pn2
-t17 = pn1
-t18 = (t17)
-@(t16) = (t18)
-t20 = pn2
-t21 = pn1
-t22 = (t21)
-@(t20) = (t22)
-t24 = pn2
-t25 = pn1
-t26 = (t25)
-@(t24) = (t26)
-t28 = pn2
-t29 = pn1
-t30 = (t29)
-@(t28) = (t30)
-t32 = pn2
-t33 = pn1
-t34 = (t33)
-@(t32) = (t34)
-t36 = pn2
-t37 = pn1
-t38 = (t37)
-@(t36) = (t38)
-t40 = pn2
-t41 = pn1
-t42 = (t41)
-@(t40) = (t42)
-t44 = pn2
-t45 = pn1
-t46 = (t45)
-@(t44) = (t46)
-t48 = pn2
-t49 = pn1
-t50 = (t49)
-@(t48) = (t50)
-t52 = pn2
-t53 = pn1
-t54 = (t53)
-@(t52) = (t54)
-t56 = pn2
-t57 = pn1
-t58 = (t57)
-@(t56) = (t58)
-t60 = pn2
-t61 = pn1
-t62 = (t61)
-@(t60) = (t62)
-t64 = pn1
-t65 = -64
-t66 = t64 - t65
-pn1 = t66
-t68 = pn2
-t69 = -64
-t70 = t68 - t69
-pn2 = t70
-t72 = ln5
-t73 = t70 <= t72
Loop variable calculations:
+ln5 = ln5
+pn2 = pn2 - -64
Simple brif loop condition in bblock 26:	(pn2 + 4) < ln4
Loop condition variables: pn2, ln4
SSA of loop:
-t0 = pn2
-t1 = pn1
-t2 = (t1)
-@(t0) = (t2)
-t4 = pn1
-t5 = 4
-t6 = t4 + t5
-pn1 = t6
-t8 = pn2
-t9 = 4
-t10 = t8 + t9
-pn2 = t10
-t12 = ln4
-t13 = t10 < t12
Loop variable calculations:
+ln4 = ln4
+pn2 = pn2 + 4
Simple brif loop condition in bblock 37:	(pn2 + 4) <= ln4
Loop condition variables: pn2, ln4
SSA of loop:
-t0 = pn2
-t1 = pn1
-t2 = (t1)
-@(t0) = (t2)
-t4 = pn2
-t5 = pn1
-t6 = (t5)
-@(t4) = (t6)
-t8 = pn2
-t9 = pn1
-t10 = (t9)
-@(t8) = (t10)
-t12 = pn2
-t13 = pn1
-t14 = (t13)
-@(t12) = (t14)
-t16 = pn1
-t17 = 4
-t18 = t16 + t17
-pn1 = t18
-t20 = pn2
-t21 = 4
-t22 = t20 + t21
-pn2 = t22
-t24 = ln4
-t25 = t22 <= t24
Loop variable calculations:
+ln4 = ln4
+pn2 = pn2 + 4
Simple brif loop condition in bblock 42:	(pn2 + 1) != ln3
Loop condition variables: pn2, ln3
SSA of loop:
-t0 = pn2
-t1 = pn1
-t2 = (t1)
-@(t0) = (t2)
-t4 = pn1
-t5 = 1
-t6 = t4 + t5
-pn1 = t6
-t8 = pn2
-t9 = 1
-t10 = t8 + t9
-pn2 = t10
-t12 = ln3
-t13 = t10 != t12
Loop variable calculations:
+ln3 = ln3
+pn2 = pn2 + 1
