ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2]
  ebb cost:   25
  ebb exits:  [3 18 22]
  ebb succs:  [22 18 3]
  1 paths to exit 3
  [0 1 2]
  1 paths to exit 18
  [0 1 2]
  1 paths to exit 22
  [0 1]
ebb entry:  3
  ebb type:   block
  ebb blocks: [3]
  ebb cost:   1
  ebb exits:  [4]
  ebb succs:  [4]
  1 paths to exit 4
  [3]
ebb entry:  4
  ebb type:   loop
  ebb blocks: [4 5 6 7 8 9 10 11 12 13 14 15]
  ebb cost:   (list_max([63*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 74*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 74*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 85*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 77*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 99*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 77*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 88*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 99*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 91*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 102*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 102*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1); 113*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4, pn0 = pn0;ln4 = ln4 + 1)])) + 1
  ebb exits:  [16 22 24]
  ebb succs:  [24 22 16]
  0 paths to exit 16

  16 paths to exit 22
  [4 6 8 10 12 13]
  [4 6 8 10 11 12 13]
  [4 6 8 9 10 12 13]
  [4 6 8 9 10 11 12 13]
  [4 6 7 8 10 12 13]
  [4 6 7 8 10 11 12 13]
  [4 6 7 8 9 10 12 13]
  [4 6 7 8 9 10 11 12 13]
  [4 5 6 8 10 12 13]
  [4 5 6 8 10 11 12 13]
  [4 5 6 8 9 10 12 13]
  [4 5 6 8 9 10 11 12 13]
  [4 5 6 7 8 10 12 13]
  [4 5 6 7 8 10 11 12 13]
  [4 5 6 7 8 9 10 12 13]
  [4 5 6 7 8 9 10 11 12 13]
  0 paths to exit 24

  16 loop paths
  [4 6 8 10 12]  [4 6 8 10 11 12]  [4 6 8 9 10 12]  [4 6 8 9 10 11 12]  [4 6 7 8 10 12]  [4 6 7 8 10 11 12]  [4 6 7 8 9 10 12]  [4 6 7 8 9 10 11 12]  [4 5 6 8 10 12]  [4 5 6 8 10 11 12]  [4 5 6 8 9 10 12]  [4 5 6 8 9 10 11 12]  [4 5 6 7 8 10 12]  [4 5 6 7 8 10 11 12]  [4 5 6 7 8 9 10 12]  [4 5 6 7 8 9 10 11 12]
  16 post loop exit paths
  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]  [13]
ebb entry:  16
  ebb type:   block
  ebb blocks: [16 17]
  ebb cost:   1
  ebb exits:  [18 24]
  ebb succs:  [24 18]
  0 paths to exit 18

  1 paths to exit 24
  [16]
ebb entry:  18
  ebb type:   block
  ebb blocks: [18]
  ebb cost:   48
  ebb exits:  [19]
  ebb succs:  [19]
  2 paths to exit 19
  [18 19]
  [18]
ebb entry:  19
  ebb type:   loop
  ebb blocks: [19 20]
  ebb cost:   47*I((ln4 + 1) < (i32.load@(pn0)), pn0 = pn0;ln4 = ln4 + 1, pn0 = pn0;ln4 = ln4 + 1) + 1
  ebb exits:  [21]
  ebb succs:  [21]
  1 paths to exit 21
  [19 20]
  1 loop paths
  [19]
  1 post loop exit paths
  [20]
ebb entry:  21
  ebb type:   block
  ebb blocks: [21]
  ebb cost:   1
  ebb exits:  [22]
  ebb succs:  [22]
  1 paths to exit 22
  [21]
ebb entry:  22
  ebb type:   block
  ebb blocks: [22 23]
  ebb cost:   13
  ebb exits:  [23]
  ebb succs:  []
  1 paths to exit 23
  [22]
ebb entry:  24
  ebb type:   block
  ebb blocks: [24]
  ebb cost:   0
  ebb exits:  []
  ebb succs:  []
