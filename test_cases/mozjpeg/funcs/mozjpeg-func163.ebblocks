ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3]
  ebb cost:   38
  ebb exits:  [4 36]
  ebb succs:  [36 4]
  2 paths to exit 4
  [0 2 3]
  [0 1 2 3]
  2 paths to exit 36
  [0 2 3]
  [0 1 2 3]
ebb entry:  4
  ebb type:   block
  ebb blocks: [4]
  ebb cost:   12
  ebb exits:  [5]
  ebb succs:  [5]
  1 paths to exit 5
  [4]
ebb entry:  5
  ebb type:   loop
  ebb blocks: [5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  ebb cost:   (list_max([44*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 50*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 50*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 58*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 64*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 64*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 54*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 57*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 47*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 50*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 56*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 56*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 64*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 70*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 70*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 60*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 63*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 53*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 41*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1); 44*I((ln1 + 1) < (i32.load@(pn0)), pn0 = pn0;ln1 = 0, pn0 = pn0;ln1 = ln1 + 1)])) + 1
  ebb exits:  [33]
  ebb succs:  [33]
  20 paths to exit 33
  [5 6 7 14 15 25 26 30 31 32]
  [5 6 7 14 15 25 26 27 30 31 32]
  [5 6 7 14 15 25 26 27 28 31 32]
  [5 6 7 14 15 16 19 25 26 30 31 32]
  [5 6 7 14 15 16 19 25 26 27 30 31 32]
  [5 6 7 14 15 16 19 25 26 27 28 31 32]
  [5 6 7 14 15 16 19 20 23 31 32]
  [5 6 7 14 15 16 19 20 21 31 32]
  [5 6 7 14 15 16 17 31 32]
  [5 6 7 8 14 15 25 26 30 31 32]
  [5 6 7 8 14 15 25 26 27 30 31 32]
  [5 6 7 8 14 15 25 26 27 28 31 32]
  [5 6 7 8 14 15 16 19 25 26 30 31 32]
  [5 6 7 8 14 15 16 19 25 26 27 30 31 32]
  [5 6 7 8 14 15 16 19 25 26 27 28 31 32]
  [5 6 7 8 14 15 16 19 20 23 31 32]
  [5 6 7 8 14 15 16 19 20 21 31 32]
  [5 6 7 8 14 15 16 17 31 32]
  [5 6 7 8 9 12 31 32]
  [5 6 7 8 9 10 31 32]
  20 loop paths
  [5 6 7 14 15 25 26 30 31]  [5 6 7 14 15 25 26 27 30 31]  [5 6 7 14 15 25 26 27 28 31]  [5 6 7 14 15 16 19 25 26 30 31]  [5 6 7 14 15 16 19 25 26 27 30 31]  [5 6 7 14 15 16 19 25 26 27 28 31]  [5 6 7 14 15 16 19 20 23 31]  [5 6 7 14 15 16 19 20 21 31]  [5 6 7 14 15 16 17 31]  [5 6 7 8 14 15 25 26 30 31]  [5 6 7 8 14 15 25 26 27 30 31]  [5 6 7 8 14 15 25 26 27 28 31]  [5 6 7 8 14 15 16 19 25 26 30 31]  [5 6 7 8 14 15 16 19 25 26 27 30 31]  [5 6 7 8 14 15 16 19 25 26 27 28 31]  [5 6 7 8 14 15 16 19 20 23 31]  [5 6 7 8 14 15 16 19 20 21 31]  [5 6 7 8 14 15 16 17 31]  [5 6 7 8 9 12 31]  [5 6 7 8 9 10 31]
  20 post loop exit paths
  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]  [32]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33 34 35]
  ebb cost:   17
  ebb exits:  [36]
  ebb succs:  [36]
  3 paths to exit 36
  [33 34 35]
  [33 34]
  [33]
ebb entry:  36
  ebb type:   block
  ebb blocks: [36 37]
  ebb cost:   1
  ebb exits:  [37]
  ebb succs:  []
  1 paths to exit 37
  [36]
