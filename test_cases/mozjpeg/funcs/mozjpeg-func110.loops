Loops found in function 110 in these bblocks: 9 16.
Simple br_if conditions in: 16.
Simple br conditions in: .
Loop block: [8 9 10 11 12]
  Loop exits: [10]
  Looping path: [9]
  Looping path: [9]
  Path to loop: [0 1 2 3 4 5 6 7 8]
  Path to loop: [0 1 2 3 4 6 7 8]
  Path to loop: [0 1 2 4 5 6 7 8]
  Path to loop: [0 1 2 4 6 7 8]
  Path to loop: [0 2 3 4 5 6 7 8]
  Path to loop: [0 2 3 4 6 7 8]
  Path to loop: [0 2 4 5 6 7 8]
  Path to loop: [0 2 4 6 7 8]
Loop block: [15 16 17]
  Loop exits: [17]
  Looping path: [16]
  Looping path: [16]
  Path to loop: [0 1 2 3 4 5 6 7 15]
  Path to loop: [0 1 2 3 4 6 7 15]
  Path to loop: [0 1 2 4 5 6 7 15]
  Path to loop: [0 1 2 4 6 7 15]
  Path to loop: [0 2 3 4 5 6 7 15]
  Path to loop: [0 2 3 4 6 7 15]
  Path to loop: [0 2 4 5 6 7 15]
  Path to loop: [0 2 4 6 7 15]
Code paths from the root bblock to a loop bblock and the VM state at the conclusion of the loop bblock:
[0 1 2 3 4 5 6 7 8] 63
cost:    63; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 3 4 5 6 7 15] 63
cost:    63; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 3 4 6 7 8] 57
cost:    57; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 3 4 6 7 15] 57
cost:    57; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 4 5 6 7 8] 49
cost:    49; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 4 5 6 7 15] 49
cost:    49; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 4 6 7 8] 43
cost:    43; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 1 2 4 6 7 15] 43
cost:    43; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), i32.load@(pn0)]; 
globals: [5400608]

[0 2 3 4 5 6 7 8] 49
cost:    49; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 3 4 5 6 7 15] 49
cost:    49; 
stack:   [pn0 + (pn1 shl 2), i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 3 4 6 7 8] 43
cost:    43; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 3 4 6 7 15] 43
cost:    43; 
stack:   [i32.load@(i32.load@(pn0)), pn0, i32.load@(pn0), i32.load@(pn0)]; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 4 5 6 7 8] 35
cost:    35; 
stack:   [pn0 + (pn1 shl 2)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 4 5 6 7 15] 35
cost:    35; 
stack:   [pn0 + (pn1 shl 2)]; 
params:  [0, rn0, pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 4 6 7 8] 29
cost:    29; 
stack:   []; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

[0 2 4 6 7 15] 29
cost:    29; 
stack:   []; 
params:  [0, i32.load@((pn0 + (pn1 shl 2)) + 72), pn2, pn3, pn4]; 
locals:  [pn0 + (pn1 shl 2), ln6]; 
globals: [5400608]

Simple brif loop condition in bblock 16:	(pn0 + 1) != 64
Loop condition variables: pn0
SSA of loop:
-t0 = pn1
-t1 = pn0
-t2 = 1
-t3 = t1 shl t2
-t4 = t0 + t3
-t5 = pn2
-t6 = pn0
-t7 = 2
-t8 = t6 shl t7
-t9 = t5 + t8
-t10 = (t9)
-t11 = pn3
-t12 = t10 * t11
-t13 = 50
-t14 = t12 + t13
-t15 = 100
-t16 = t14 /s t15
-pn4 = t16
-t18 = 1
-t19 = pn4
-t20 = 1
-t21 = t19 > t20
-t22 = select(t21, t18, t16)
-pn4 = t22
-t24 = 255
-t25 = pn4
-t26 = 255
-t27 = t25 < t26
-t28 = select(t27, t24, t22)
-@(t4) = (t28)
-t30 = pn0
-t31 = 1
-t32 = t30 + t31
-pn0 = t32
-t34 = 64
-t35 = t32 != t34
Loop variable calculations:
+pn0 = pn0 + 1
