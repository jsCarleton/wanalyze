ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1]
  ebb cost:   list_max([12; 12])
  ebb exits:  [2 38]
  ebb succs:  [38 2]
  1 paths to exit 2
  [0 1]
  1 paths to exit 38
  [0 1]
ebb entry:  2
  ebb type:   block
  ebb blocks: [2]
  ebb cost:   8
  ebb exits:  [3]
  ebb succs:  [3]
  1 paths to exit 3
  [2]
ebb entry:  3
  ebb type:   loop
  ebb blocks: [3 4 5 6]
  ebb cost:   18*I(i32.eqz((i32.load8_u@(ln2 + ((ln4 + -1) * 80))) && 64), ln4 = ((236980)) + -1;ln2 = (236996), ln4 = ln4 + -1;ln2 = ln2) + (list_max([1; 2]))
  ebb exits:  [7]
  ebb succs:  [7]
  2 paths to exit 7
  [3 6]
  [3 4 5 6]
  1 loop paths
  [3 4]
  2 post loop exit paths
  [6]  [5 6]
ebb entry:  7
  ebb type:   block
  ebb blocks: [7]
  ebb cost:   list_max([10; 10])
  ebb exits:  [8 38]
  ebb succs:  [38 8]
  1 paths to exit 8
  [7]
  1 paths to exit 38
  [7]
ebb entry:  8
  ebb type:   block
  ebb blocks: [8]
  ebb cost:   3
  ebb exits:  [9]
  ebb succs:  [9]
  1 paths to exit 9
  [8]
ebb entry:  9
  ebb type:   loop
  ebb blocks: [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35]
  ebb cost:   (list_max([[27*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 39*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 60*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 66*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 65*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 71*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 77*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 66*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 72*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 71*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 77*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 83*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 65*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 71*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 70*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 76*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 82*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 71*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 77*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 76*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 82*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 88*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 77*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 83*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 82*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 88*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 94*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 58 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 79 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 85 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 84 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 90 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 96 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 85 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 91 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 90 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 96 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 102 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 84 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 90 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 89 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 95 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 101 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 90 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 96 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 95 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 101 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 107 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 96 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 102 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 101 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 107 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1); 113 + |f1379|*I(not((ln4 + 1) >= (i32.load@(236980))), ln4 = (((236980)) + -1) + 1, ln4 = ln4 + 1)]])) + 
  ebb exits:  [36 38 40]
  ebb succs:  [40 38 36]
  0 paths to exit 36

  53 paths to exit 38
  [9 10 11 14 32]
  [9 10 11 14 15 16 32]
  [9 10 11 14 15 16 17 18 19 24 25 26 31 32]
  [9 10 11 14 15 16 17 18 19 24 25 26 27 31 32]
  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 32]
  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 29 32]
  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 29 30 31 32]
  [9 10 11 14 15 16 17 18 19 20 24 25 26 31 32]
  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 31 32]
  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 32]
  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 29 32]
  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 29 30 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 25 26 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 32]
  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 32]
  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 30 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 29 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 29 30 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 31 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32]
  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  [9 10 11 12 16 32]
  [9 10 11 12 16 17 18 19 24 25 26 31 32]
  [9 10 11 12 16 17 18 19 24 25 26 27 31 32]
  [9 10 11 12 16 17 18 19 24 25 26 27 28 32]
  [9 10 11 12 16 17 18 19 24 25 26 27 28 29 32]
  [9 10 11 12 16 17 18 19 24 25 26 27 28 29 30 31 32]
  [9 10 11 12 16 17 18 19 20 24 25 26 31 32]
  [9 10 11 12 16 17 18 19 20 24 25 26 27 31 32]
  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 32]
  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 29 32]
  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 29 30 31 32]
  [9 10 11 12 16 17 18 19 20 21 25 26 31 32]
  [9 10 11 12 16 17 18 19 20 21 25 26 27 31 32]
  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 32]
  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 29 32]
  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 29 30 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 25 26 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 32]
  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 29 32]
  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 29 30 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 31 32]
  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 32]
  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32]
  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  0 paths to exit 40

  53 loop paths
  [9 10 11 14 32 33]  [9 10 11 14 15 16 32 33]  [9 10 11 14 15 16 17 18 19 24 25 26 31 32 33]  [9 10 11 14 15 16 17 18 19 24 25 26 27 31 32 33]  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 32 33]  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 29 32 33]  [9 10 11 14 15 16 17 18 19 24 25 26 27 28 29 30 31 32 33]  [9 10 11 14 15 16 17 18 19 20 24 25 26 31 32 33]  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 31 32 33]  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 32 33]  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 29 32 33]  [9 10 11 14 15 16 17 18 19 20 24 25 26 27 28 29 30 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 25 26 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 32 33]  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 32 33]  [9 10 11 14 15 16 17 18 19 20 21 25 26 27 28 29 30 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 29 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 25 26 27 28 29 30 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 31 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 33]  [9 10 11 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 16 32 33]  [9 10 11 12 16 17 18 19 24 25 26 31 32 33]  [9 10 11 12 16 17 18 19 24 25 26 27 31 32 33]  [9 10 11 12 16 17 18 19 24 25 26 27 28 32 33]  [9 10 11 12 16 17 18 19 24 25 26 27 28 29 32 33]  [9 10 11 12 16 17 18 19 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 16 17 18 19 20 24 25 26 31 32 33]  [9 10 11 12 16 17 18 19 20 24 25 26 27 31 32 33]  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 32 33]  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 29 32 33]  [9 10 11 12 16 17 18 19 20 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 16 17 18 19 20 21 25 26 31 32 33]  [9 10 11 12 16 17 18 19 20 21 25 26 27 31 32 33]  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 32 33]  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 29 32 33]  [9 10 11 12 16 17 18 19 20 21 25 26 27 28 29 30 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 25 26 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 32 33]  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 29 32 33]  [9 10 11 12 16 17 18 19 20 21 22 25 26 27 28 29 30 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 31 32 33]  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 32 33]  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 29 32 33]  [9 10 11 12 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]
ebb entry:  36
  ebb type:   block
  ebb blocks: [36 37]
  ebb cost:   1
  ebb exits:  [38 40]
  ebb succs:  [40 38]
  0 paths to exit 38

  1 paths to exit 40
  [36]
ebb entry:  38
  ebb type:   block
  ebb blocks: [38 39]
  ebb cost:   5
  ebb exits:  [39]
  ebb succs:  []
  1 paths to exit 39
  [38]
ebb entry:  40
  ebb type:   block
  ebb blocks: [40]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
