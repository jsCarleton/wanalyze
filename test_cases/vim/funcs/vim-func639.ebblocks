ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   list_max([7; 7])
  ebb exits:  [1 27]
  ebb succs:  [27 1]
  1 paths to exit 1
  [0]
  1 paths to exit 27
  [0]
ebb entry:  1
  ebb type:   block
  ebb blocks: [1]
  ebb cost:   1
  ebb exits:  [2]
  ebb succs:  [2]
  1 paths to exit 2
  [1]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25]
  ebb cost:   (list_max([[9*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 31 + (list_max([|f221|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 53 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 58 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 57 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 55 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 60 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 59 + (list_max([|f221|; |f487|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 38 + (list_max([|f221|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 35 + (list_max([|f221|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 57 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 62 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 61 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 59 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 64 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 63 + (list_max([|f221|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 42 + (list_max([|f221|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 38 + (list_max([|f221|; |f352|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 60 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 65 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 64 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 62 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 67 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 66 + (list_max([|f221|; |f352|; |f487|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1)); 45 + (list_max([|f221|; |f352|; |f533|; |f638|]))*I(i32.load@(ln1), ln1 = (242548), ln1 = (ln1))]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
  ebb exits:  [26]
  ebb succs:  [26]
  25 paths to exit 26
  [2 3 24 25]
  [2 3 4 5 8 9 13 24 25]
  [2 3 4 5 8 9 13 14 15 16 17 20 23 24 25]
  [2 3 4 5 8 9 13 14 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 8 9 13 14 15 16 17 18 22 23 24 25]
  [2 3 4 5 8 9 10 15 16 17 20 23 24 25]
  [2 3 4 5 8 9 10 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 8 9 10 15 16 17 18 22 23 24 25]
  [2 3 4 5 8 9 10 11 24 25]
  [2 3 4 5 6 8 9 13 24 25]
  [2 3 4 5 6 8 9 13 14 15 16 17 20 23 24 25]
  [2 3 4 5 6 8 9 13 14 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 6 8 9 13 14 15 16 17 18 22 23 24 25]
  [2 3 4 5 6 8 9 10 15 16 17 20 23 24 25]
  [2 3 4 5 6 8 9 10 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 6 8 9 10 15 16 17 18 22 23 24 25]
  [2 3 4 5 6 8 9 10 11 24 25]
  [2 3 4 5 6 7 8 9 13 24 25]
  [2 3 4 5 6 7 8 9 13 14 15 16 17 20 23 24 25]
  [2 3 4 5 6 7 8 9 13 14 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 6 7 8 9 13 14 15 16 17 18 22 23 24 25]
  [2 3 4 5 6 7 8 9 10 15 16 17 20 23 24 25]
  [2 3 4 5 6 7 8 9 10 15 16 17 20 21 22 23 24 25]
  [2 3 4 5 6 7 8 9 10 15 16 17 18 22 23 24 25]
  [2 3 4 5 6 7 8 9 10 11 24 25]
  25 loop paths
  [2 3 24]  [2 3 4 5 8 9 13 24]  [2 3 4 5 8 9 13 14 15 16 17 20 23 24]  [2 3 4 5 8 9 13 14 15 16 17 20 21 22 23 24]  [2 3 4 5 8 9 13 14 15 16 17 18 22 23 24]  [2 3 4 5 8 9 10 15 16 17 20 23 24]  [2 3 4 5 8 9 10 15 16 17 20 21 22 23 24]  [2 3 4 5 8 9 10 15 16 17 18 22 23 24]  [2 3 4 5 8 9 10 11 24]  [2 3 4 5 6 8 9 13 24]  [2 3 4 5 6 8 9 13 14 15 16 17 20 23 24]  [2 3 4 5 6 8 9 13 14 15 16 17 20 21 22 23 24]  [2 3 4 5 6 8 9 13 14 15 16 17 18 22 23 24]  [2 3 4 5 6 8 9 10 15 16 17 20 23 24]  [2 3 4 5 6 8 9 10 15 16 17 20 21 22 23 24]  [2 3 4 5 6 8 9 10 15 16 17 18 22 23 24]  [2 3 4 5 6 8 9 10 11 24]  [2 3 4 5 6 7 8 9 13 24]  [2 3 4 5 6 7 8 9 13 14 15 16 17 20 23 24]  [2 3 4 5 6 7 8 9 13 14 15 16 17 20 21 22 23 24]  [2 3 4 5 6 7 8 9 13 14 15 16 17 18 22 23 24]  [2 3 4 5 6 7 8 9 10 15 16 17 20 23 24]  [2 3 4 5 6 7 8 9 10 15 16 17 20 21 22 23 24]  [2 3 4 5 6 7 8 9 10 15 16 17 18 22 23 24]  [2 3 4 5 6 7 8 9 10 11 24]
  25 post loop exit paths
  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]  [25]
ebb entry:  26
  ebb type:   block
  ebb blocks: [26]
  ebb cost:   1
  ebb exits:  [27]
  ebb succs:  [27]
  1 paths to exit 27
  [26]
ebb entry:  27
  ebb type:   block
  ebb blocks: [27 28]
  ebb cost:   1
  ebb exits:  [28]
  ebb succs:  []
  1 paths to exit 28
  [27]
