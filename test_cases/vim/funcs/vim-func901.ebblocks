ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   10
  ebb exits:  [1]
  ebb succs:  [1]
  1 paths to exit 1
  [0]
ebb entry:  1
  ebb type:   loop
  ebb blocks: [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52]
  ebb cost:   (list_max([[23*I(not((i32.load8_u@(ln1)) == 98), ln1 = (243020), ln1 = ln1 + 1); 27*I(not((i32.load8_u@(ln1)) == 114), ln1 = (243020), ln1 = ln1 + 1); 27*I(not((i32.load8_u@(ln1)) != 108), ln1 = (243020), ln1 = ln1 + 1); 32*I(not((i32.load8_u@(ln1)) != 108), ln1 = (243020), ln1 = ln1 + 1); 25 + |f1707|*I(not(rn0), rn0 = rn0, rn0 = rn0); 22 + |f1707|*I(not(rn0), rn0 = rn0, rn0 = rn0); 26 + |f1707|*I(not(i32.eqz(rn0)), rn0 = rn0, rn0 = rn0); 31 + |f1707|*I(not(i32.eqz(rn0)), rn0 = rn0, rn0 = rn0); 25*I(not(i32.load8_u@(ln1)), ln1 = (243020), ln1 = ln1 + 1)]])) + (list_max([6; 65 + |f305|; 67 + (list_max([|f305|; |f793|])); 69 + (list_max([|f305|; |f1064|])); 71 + (list_max([|f305|; |f793|; |f1064|])); 78 + |f305|; 80 + (list_max([|f305|; |f793|])); 82 + (list_max([|f305|; |f1064|])); 84 + (list_max([|f305|; |f793|; |f1064|])); 72 + |f305|; 74 + (list_max([|f305|; |f793|])); 76 + (list_max([|f305|; |f1064|])); 78 + (list_max([|f305|; |f793|; |f1064|])); 85 + |f305|; 87 + (list_max([|f305|; |f793|])); 89 + (list_max([|f305|; |f1064|])); 91 + (list_max([|f305|; |f793|; |f1064|])); 81 + (list_max([|f305|; |f791|])); 83 + (list_max([|f305|; |f791|; |f793|])); 85 + (list_max([|f305|; |f791|; |f1064|])); 87 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 94 + (list_max([|f305|; |f791|])); 96 + (list_max([|f305|; |f791|; |f793|])); 98 + (list_max([|f305|; |f791|; |f1064|])); 100 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 93 + (list_max([|f305|; |f791|])); 95 + (list_max([|f305|; |f791|; |f793|])); 97 + (list_max([|f305|; |f791|; |f1064|])); 99 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 106 + (list_max([|f305|; |f791|])); 108 + (list_max([|f305|; |f791|; |f793|])); 110 + (list_max([|f305|; |f791|; |f1064|])); 112 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 60 + |f305|; 62 + (list_max([|f305|; |f793|])); 64 + (list_max([|f305|; |f1064|])); 66 + (list_max([|f305|; |f793|; |f1064|])); 74 + |f305|; 76 + (list_max([|f305|; |f793|])); 78 + (list_max([|f305|; |f1064|])); 80 + (list_max([|f305|; |f793|; |f1064|])); 87 + |f305|; 89 + (list_max([|f305|; |f793|])); 91 + (list_max([|f305|; |f1064|])); 93 + (list_max([|f305|; |f793|; |f1064|])); 81 + |f305|; 83 + (list_max([|f305|; |f793|])); 85 + (list_max([|f305|; |f1064|])); 87 + (list_max([|f305|; |f793|; |f1064|])); 94 + |f305|; 96 + (list_max([|f305|; |f793|])); 98 + (list_max([|f305|; |f1064|])); 100 + (list_max([|f305|; |f793|; |f1064|])); 90 + (list_max([|f305|; |f791|])); 92 + (list_max([|f305|; |f791|; |f793|])); 94 + (list_max([|f305|; |f791|; |f1064|])); 96 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 103 + (list_max([|f305|; |f791|])); 105 + (list_max([|f305|; |f791|; |f793|])); 107 + (list_max([|f305|; |f791|; |f1064|])); 109 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 102 + (list_max([|f305|; |f791|])); 104 + (list_max([|f305|; |f791|; |f793|])); 106 + (list_max([|f305|; |f791|; |f1064|])); 108 + (list_max([|f305|; |f791|; |f793|; |f1064|])); 115 + (list_max([|f305|; |f791|])); 117 + (list_max([|f305|; |f791|; |f793|])); 119 + (list_max([|f305|; |f791|; |f1064|])); 121 + (list_max([|f305|; |f791|; |f793|; |f1064|]))]))
  ebb exits:  [53 56 57]
  ebb succs:  [57 56 53]
  0 paths to exit 53

  69 paths to exit 56
  [1 2 3 4 5 6 7 8 9 10 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 24 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33]
  [1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]
  0 paths to exit 57

  9 loop paths
  [1 2 3 4 5 41 49 50]  [1 2 3 4 5 41 42 47 50]  [1 2 3 4 5 41 42 43 50]  [1 2 3 4 5 41 42 43 44 45 50]  [1 2 3 4 5 6 38 45 50]  [1 2 3 4 5 6 38 39 50]  [1 2 3 4 5 6 7 35 50]  [1 2 3 4 5 6 7 35 36 47 50]  [1 2 3 4 5 6 7 8 50]
  69 post loop exit paths
  [9 10 33]  [9 10 11 12 13 16 25 27 28 29 31 33]  [9 10 11 12 13 16 25 27 28 29 31 32 33]  [9 10 11 12 13 16 25 27 28 29 30 31 33]  [9 10 11 12 13 16 25 27 28 29 30 31 32 33]  [9 10 11 12 13 16 25 26 27 28 29 31 33]  [9 10 11 12 13 16 25 26 27 28 29 31 32 33]  [9 10 11 12 13 16 25 26 27 28 29 30 31 33]  [9 10 11 12 13 16 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 24 25 27 28 29 31 33]  [9 10 11 12 13 16 17 18 24 25 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 24 25 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 24 25 26 27 28 29 31 33]  [9 10 11 12 13 16 17 18 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 19 24 25 27 28 29 31 33]  [9 10 11 12 13 16 17 18 19 24 25 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 19 24 25 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 19 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 31 33]  [9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 19 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 31 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 14 27 28 29 31 33]  [9 10 11 12 13 14 27 28 29 31 32 33]  [9 10 11 12 13 14 27 28 29 30 31 33]  [9 10 11 12 13 14 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 25 27 28 29 31 33]  [9 10 11 12 13 14 15 16 25 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 25 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 25 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 25 26 27 28 29 31 33]  [9 10 11 12 13 14 15 16 25 26 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 25 26 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 19 24 25 26 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28 29 30 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 31 32 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 33]  [9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33]
  ebb entry:  1
    ebb type:   block
    ebb blocks: [1 2 3 4 5 6 7 8 9 10]
    ebb cost:   list_max([25; 25; 18; 14; 10; 20])
    ebb exits:  [11 33 35 38 41 50]
    ebb succs:  [50 41 38 35 33 11]
    1 paths to exit 11
    [1 2 3 4 5 6 7 8 9 10]
    1 paths to exit 33
    [1 2 3 4 5 6 7 8 9 10]
    1 paths to exit 35
    [1 2 3 4 5 6 7]
    1 paths to exit 38
    [1 2 3 4 5 6]
    1 paths to exit 41
    [1 2 3 4 5]
    1 paths to exit 50
    [1 2 3 4 5 6 7 8]
  ebb entry:  11
    ebb type:   block
    ebb blocks: [11]
    ebb cost:   3
    ebb exits:  [12]
    ebb succs:  [12]
    1 paths to exit 12
    [11]
  ebb entry:  12
    ebb type:   loop
    ebb blocks: [12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28]
    ebb cost:   (list_max([[47*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 60*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 54*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 67*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 63 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 76 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 75 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 88 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 42*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 56*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 69*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 63*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 76*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 72 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 85 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 84 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1); 97 + |f791|*I((ln1 + 1) != 3, ln1 = 0, ln1 = ln1 + 1)]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1]))
    ebb exits:  [29]
    ebb succs:  [29]
    17 paths to exit 29
    [12 13 16 25 27 28]
    [12 13 16 25 26 27 28]
    [12 13 16 17 18 24 25 27 28]
    [12 13 16 17 18 24 25 26 27 28]
    [12 13 16 17 18 19 24 25 27 28]
    [12 13 16 17 18 19 24 25 26 27 28]
    [12 13 16 17 18 19 20 21 22 23 24 25 27 28]
    [12 13 16 17 18 19 20 21 22 23 24 25 26 27 28]
    [12 13 14 27 28]
    [12 13 14 15 16 25 27 28]
    [12 13 14 15 16 25 26 27 28]
    [12 13 14 15 16 17 18 24 25 27 28]
    [12 13 14 15 16 17 18 24 25 26 27 28]
    [12 13 14 15 16 17 18 19 24 25 27 28]
    [12 13 14 15 16 17 18 19 24 25 26 27 28]
    [12 13 14 15 16 17 18 19 20 21 22 23 24 25 27 28]
    [12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28]
    17 loop paths
    [12 13 16 25 27]    [12 13 16 25 26 27]    [12 13 16 17 18 24 25 27]    [12 13 16 17 18 24 25 26 27]    [12 13 16 17 18 19 24 25 27]    [12 13 16 17 18 19 24 25 26 27]    [12 13 16 17 18 19 20 21 22 23 24 25 27]    [12 13 16 17 18 19 20 21 22 23 24 25 26 27]    [12 13 14 27]    [12 13 14 15 16 25 27]    [12 13 14 15 16 25 26 27]    [12 13 14 15 16 17 18 24 25 27]    [12 13 14 15 16 17 18 24 25 26 27]    [12 13 14 15 16 17 18 19 24 25 27]    [12 13 14 15 16 17 18 19 24 25 26 27]    [12 13 14 15 16 17 18 19 20 21 22 23 24 25 27]    [12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27]
    17 post loop exit paths
    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]    [28]
    ebb entry:  12
      ebb type:   block
      ebb blocks: [12 13 14 15 16 17 18 19]
      ebb cost:   list_max([38 + |f791|; 47 + |f791|; 38 + |f791|; 29; 47 + |f791|; 38; 23; 32; 25])
      ebb exits:  [20 24 25 27]
      ebb succs:  [27 25 24 20]
      2 paths to exit 20
      [12 13 16 17 18 19]
      [12 13 14 15 16 17 18 19]
      4 paths to exit 24
      [12 13 16 17 18 19]
      [12 13 16 17 18]
      [12 13 14 15 16 17 18 19]
      [12 13 14 15 16 17 18]
      2 paths to exit 25
      [12 13 16]
      [12 13 14 15 16]
      1 paths to exit 27
      [12 13 14]
    ebb entry:  20
      ebb type:   block
      ebb blocks: [20]
      ebb cost:   list_max([10 + |f791|; 1])
      ebb exits:  [21]
      ebb succs:  [21]
      2 paths to exit 21
      [20 21]
      [20]
    ebb entry:  21
      ebb type:   loop
      ebb blocks: [21 22]
      ebb cost:   9 + |f791|*I(i32.load@(ln0), ln0 = (((242548))), ln0 = (0)) + 1
      ebb exits:  [23]
      ebb succs:  [23]
      1 paths to exit 23
      [21 22]
      1 loop paths
      [21]
      1 post loop exit paths
      [22]
    ebb entry:  23
      ebb type:   block
      ebb blocks: [23]
      ebb cost:   1
      ebb exits:  [24]
      ebb succs:  [24]
      1 paths to exit 24
      [23]
    ebb entry:  24
      ebb type:   block
      ebb blocks: [24]
      ebb cost:   1
      ebb exits:  [25]
      ebb succs:  [25]
      1 paths to exit 25
      [24]
    ebb entry:  25
      ebb type:   block
      ebb blocks: [25 26]
      ebb cost:   list_max([20; 7])
      ebb exits:  [27]
      ebb succs:  [27]
      2 paths to exit 27
      [25 26]
      [25]
    ebb entry:  27
      ebb type:   block
      ebb blocks: [27 28]
      ebb cost:   list_max([17; 18])
      ebb exits:  [12 29]
      ebb succs:  [12]
      1 paths to exit 12
      [27]
      1 paths to exit 29
      [27 28]
  ebb entry:  29
    ebb type:   block
    ebb blocks: [29 30 31 32]
    ebb cost:   list_max([10 + (list_max([|f305|; |f793|])); 8 + |f305|; 14 + (list_max([|f305|; |f793|; |f1064|])); 12 + (list_max([|f305|; |f1064|]))])
    ebb exits:  [33]
    ebb succs:  [33]
    4 paths to exit 33
    [29 31 32]
    [29 31]
    [29 30 31 32]
    [29 30 31]
  ebb entry:  33
    ebb type:   block
    ebb blocks: [33 34]
    ebb cost:   1
    ebb exits:  [35 56]
    ebb succs:  [35]
    0 paths to exit 35

    1 paths to exit 56
    [33]
  ebb entry:  35
    ebb type:   block
    ebb blocks: [35 36 37]
    ebb cost:   list_max([4 + |f1707|; 3 + |f1707|])
    ebb exits:  [38 47 50]
    ebb succs:  [50 47 38]
    0 paths to exit 38

    1 paths to exit 47
    [35 36]
    1 paths to exit 50
    [35]
  ebb entry:  38
    ebb type:   block
    ebb blocks: [38 39 40]
    ebb cost:   list_max([2 + |f1707|; 3 + |f1707|])
    ebb exits:  [41 45 50]
    ebb succs:  [50 45 41]
    0 paths to exit 41

    1 paths to exit 45
    [38]
    1 paths to exit 50
    [38 39]
  ebb entry:  41
    ebb type:   block
    ebb blocks: [41 42 43 44]
    ebb cost:   list_max([13; 8; 4; 12])
    ebb exits:  [45 47 49 50]
    ebb succs:  [50 49 47 45]
    1 paths to exit 45
    [41 42 43 44]
    1 paths to exit 47
    [41 42]
    1 paths to exit 49
    [41]
    1 paths to exit 50
    [41 42 43]
  ebb entry:  45
    ebb type:   block
    ebb blocks: [45 46]
    ebb cost:   4
    ebb exits:  [47 50]
    ebb succs:  [50 47]
    0 paths to exit 47

    1 paths to exit 50
    [45]
  ebb entry:  47
    ebb type:   block
    ebb blocks: [47 48]
    ebb cost:   4
    ebb exits:  [49 50]
    ebb succs:  [50 49]
    0 paths to exit 49

    1 paths to exit 50
    [47]
  ebb entry:  49
    ebb type:   block
    ebb blocks: [49]
    ebb cost:   4
    ebb exits:  [50]
    ebb succs:  [50]
    1 paths to exit 50
    [49]
  ebb entry:  50
    ebb type:   block
    ebb blocks: [50 51 52]
    ebb cost:   5
    ebb exits:  [1 53 57]
    ebb succs:  [1]
    1 paths to exit 1
    [50]
    0 paths to exit 53

    0 paths to exit 57

ebb entry:  53
  ebb type:   block
  ebb blocks: [53 54 55]
  ebb cost:   1
  ebb exits:  [55 57]
  ebb succs:  [57]
  0 paths to exit 55

  1 paths to exit 57
  [53]
ebb entry:  56
  ebb type:   block
  ebb blocks: [56]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
ebb entry:  57
  ebb type:   block
  ebb blocks: [57]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
