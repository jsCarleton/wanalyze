ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6]
  ebb cost:   list_max([33; 35; 24; 20])
  ebb exits:  [7 11 13 61]
  ebb succs:  [61 13 11 7]
  1 paths to exit 7
  [0 1 2 3 4 5]
  1 paths to exit 11
  [0 1 2 3 4 5 6]
  1 paths to exit 13
  [0 1 2 3 4]
  1 paths to exit 61
  [0 1 2 3]
ebb entry:  7
  ebb type:   block
  ebb blocks: [7]
  ebb cost:   list_max([17 + |f364|; 1])
  ebb exits:  [8]
  ebb succs:  [8]
  2 paths to exit 8
  [7 8]
  [7]
ebb entry:  8
  ebb type:   loop
  ebb blocks: [8 9]
  ebb cost:   16 + |f364|*I((ln6 + 1) != ln3, ln3 = (pn0);ln6 = ln6 + 1, ln3 = ln3;ln6 = ln6 + 1) + 1
  ebb exits:  [10]
  ebb succs:  [10]
  1 paths to exit 10
  [8 9]
  1 loop paths
  [8]
  1 post loop exit paths
  [9]
ebb entry:  10
  ebb type:   block
  ebb blocks: [10]
  ebb cost:   6
  ebb exits:  [11]
  ebb succs:  [11]
  1 paths to exit 11
  [10]
ebb entry:  11
  ebb type:   block
  ebb blocks: [11 12]
  ebb cost:   6
  ebb exits:  [13 61]
  ebb succs:  [61 13]
  0 paths to exit 13

  1 paths to exit 61
  [11]
ebb entry:  13
  ebb type:   block
  ebb blocks: [13 14 15 16 17 18 19 20]
  ebb cost:   list_max([21; 20; 21; 20; 5])
  ebb exits:  [21 57 61]
  ebb succs:  [61 57 21]
  2 paths to exit 21
  [13 14 15 18 19 20]
  [13 14 15 16 19 20]
  2 paths to exit 57
  [13 14 15 18 19 20]
  [13 14 15 16 19 20]
  1 paths to exit 61
  [13]
ebb entry:  21
  ebb type:   block
  ebb blocks: [21]
  ebb cost:   5
  ebb exits:  [22]
  ebb succs:  [22]
  1 paths to exit 22
  [21]
ebb entry:  22
  ebb type:   loop
  ebb blocks: [22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55]
  ebb cost:   (list_max([[45 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 52 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 48 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 55 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 56 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 63 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 45 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 52 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 48 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 55 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 56 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 63 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 50 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 57 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 53 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 60 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 61 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 68 + (list_max([|f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 50 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 57 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 53 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 60 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 61 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 68 + (list_max([|f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + rn0), rn0 = rn0;ln1 = ln1;ln3 = (pn0), rn0 = rn0;ln1 = ln1 + rn0;ln3 = ln3); 93 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 100 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 96 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 103 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 104 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 111 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 83 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 90 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 86 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 93 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 94 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 101 + (list_max([|f106|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 96 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 103 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 99 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 106 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 107 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 114 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + 0), ln1 = ln1;ln3 = (pn0), ln1 = ln1 + 0;ln3 = ln3); 86 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 93 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 89 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 96 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 97 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3); 104 + (list_max([|f106|; |f152|; |f666|; |f2345|]))*I(ln3 > (ln1 + (rn0 - (i32.load@(pn0)))), pn0 = pn0;rn0 = rn0;ln1 = ln1;ln3 = (pn0), pn0 = pn0;rn0 = rn0;ln1 = ln1 + (rn0 - ((pn0)));ln3 = ln3)]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 1; 13 + |f106|; 13 + |f106|; 8; 4; 4; 4]))
  ebb exits:  [56 57 67]
  ebb succs:  [67 57 56]
  48 paths to exit 56
  [22 23 24 40 44 47 48 49 52 54 55]
  [22 23 24 40 44 47 48 49 52 53 54 55]
  [22 23 24 40 44 47 48 49 50 52 54 55]
  [22 23 24 40 44 47 48 49 50 52 53 54 55]
  [22 23 24 40 44 47 48 49 50 51 52 54 55]
  [22 23 24 40 44 47 48 49 50 51 52 53 54 55]
  [22 23 24 40 44 45 48 49 52 54 55]
  [22 23 24 40 44 45 48 49 52 53 54 55]
  [22 23 24 40 44 45 48 49 50 52 54 55]
  [22 23 24 40 44 45 48 49 50 52 53 54 55]
  [22 23 24 40 44 45 48 49 50 51 52 54 55]
  [22 23 24 40 44 45 48 49 50 51 52 53 54 55]
  [22 23 24 25 40 44 47 48 49 52 54 55]
  [22 23 24 25 40 44 47 48 49 52 53 54 55]
  [22 23 24 25 40 44 47 48 49 50 52 54 55]
  [22 23 24 25 40 44 47 48 49 50 52 53 54 55]
  [22 23 24 25 40 44 47 48 49 50 51 52 54 55]
  [22 23 24 25 40 44 47 48 49 50 51 52 53 54 55]
  [22 23 24 25 40 44 45 48 49 52 54 55]
  [22 23 24 25 40 44 45 48 49 52 53 54 55]
  [22 23 24 25 40 44 45 48 49 50 52 54 55]
  [22 23 24 25 40 44 45 48 49 50 52 53 54 55]
  [22 23 24 25 40 44 45 48 49 50 51 52 54 55]
  [22 23 24 25 40 44 45 48 49 50 51 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 52 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 50 52 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 50 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 50 51 52 54 55]
  [22 23 24 25 26 30 31 34 35 38 48 49 50 51 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 52 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 50 52 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 50 52 53 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 50 51 52 54 55]
  [22 23 24 25 26 30 31 34 35 36 48 49 50 51 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 52 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 50 52 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 50 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 50 51 52 54 55]
  [22 23 24 25 26 30 31 32 35 38 48 49 50 51 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 52 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 50 52 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 50 52 53 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 50 51 52 54 55]
  [22 23 24 25 26 30 31 32 35 36 48 49 50 51 52 53 54 55]
  3 paths to exit 57
  [22 23 24 40 41 42]
  [22 23 24 25 40 41 42]
  [22 23 24 25 26 27 28]
  3 paths to exit 67
  [22 23 24 40 41]
  [22 23 24 25 40 41]
  [22 23 24 25 26 27]
  48 loop paths
  [22 23 24 40 44 47 48 49 52 54]  [22 23 24 40 44 47 48 49 52 53 54]  [22 23 24 40 44 47 48 49 50 52 54]  [22 23 24 40 44 47 48 49 50 52 53 54]  [22 23 24 40 44 47 48 49 50 51 52 54]  [22 23 24 40 44 47 48 49 50 51 52 53 54]  [22 23 24 40 44 45 48 49 52 54]  [22 23 24 40 44 45 48 49 52 53 54]  [22 23 24 40 44 45 48 49 50 52 54]  [22 23 24 40 44 45 48 49 50 52 53 54]  [22 23 24 40 44 45 48 49 50 51 52 54]  [22 23 24 40 44 45 48 49 50 51 52 53 54]  [22 23 24 25 40 44 47 48 49 52 54]  [22 23 24 25 40 44 47 48 49 52 53 54]  [22 23 24 25 40 44 47 48 49 50 52 54]  [22 23 24 25 40 44 47 48 49 50 52 53 54]  [22 23 24 25 40 44 47 48 49 50 51 52 54]  [22 23 24 25 40 44 47 48 49 50 51 52 53 54]  [22 23 24 25 40 44 45 48 49 52 54]  [22 23 24 25 40 44 45 48 49 52 53 54]  [22 23 24 25 40 44 45 48 49 50 52 54]  [22 23 24 25 40 44 45 48 49 50 52 53 54]  [22 23 24 25 40 44 45 48 49 50 51 52 54]  [22 23 24 25 40 44 45 48 49 50 51 52 53 54]  [22 23 24 25 26 30 31 34 35 38 48 49 52 54]  [22 23 24 25 26 30 31 34 35 38 48 49 52 53 54]  [22 23 24 25 26 30 31 34 35 38 48 49 50 52 54]  [22 23 24 25 26 30 31 34 35 38 48 49 50 52 53 54]  [22 23 24 25 26 30 31 34 35 38 48 49 50 51 52 54]  [22 23 24 25 26 30 31 34 35 38 48 49 50 51 52 53 54]  [22 23 24 25 26 30 31 34 35 36 48 49 52 54]  [22 23 24 25 26 30 31 34 35 36 48 49 52 53 54]  [22 23 24 25 26 30 31 34 35 36 48 49 50 52 54]  [22 23 24 25 26 30 31 34 35 36 48 49 50 52 53 54]  [22 23 24 25 26 30 31 34 35 36 48 49 50 51 52 54]  [22 23 24 25 26 30 31 34 35 36 48 49 50 51 52 53 54]  [22 23 24 25 26 30 31 32 35 38 48 49 52 54]  [22 23 24 25 26 30 31 32 35 38 48 49 52 53 54]  [22 23 24 25 26 30 31 32 35 38 48 49 50 52 54]  [22 23 24 25 26 30 31 32 35 38 48 49 50 52 53 54]  [22 23 24 25 26 30 31 32 35 38 48 49 50 51 52 54]  [22 23 24 25 26 30 31 32 35 38 48 49 50 51 52 53 54]  [22 23 24 25 26 30 31 32 35 36 48 49 52 54]  [22 23 24 25 26 30 31 32 35 36 48 49 52 53 54]  [22 23 24 25 26 30 31 32 35 36 48 49 50 52 54]  [22 23 24 25 26 30 31 32 35 36 48 49 50 52 53 54]  [22 23 24 25 26 30 31 32 35 36 48 49 50 51 52 54]  [22 23 24 25 26 30 31 32 35 36 48 49 50 51 52 53 54]
  54 post loop exit paths
  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [55]  [41 42]  [41 42]  [27 28]  [41]  [41]  [27]
ebb entry:  56
  ebb type:   block
  ebb blocks: [56]
  ebb cost:   1
  ebb exits:  [57]
  ebb succs:  [57]
  1 paths to exit 57
  [56]
ebb entry:  57
  ebb type:   block
  ebb blocks: [57 58 59 60]
  ebb cost:   list_max([10; 8])
  ebb exits:  [61]
  ebb succs:  [61]
  2 paths to exit 61
  [57 60]
  [57 58]
ebb entry:  61
  ebb type:   block
  ebb blocks: [61 62 63 64 65 66]
  ebb cost:   list_max([20 + |f2047|; 27 + (list_max([|f2047|; |f2587|])); 7])
  ebb exits:  [67 68]
  ebb succs:  [68 67]
  0 paths to exit 67

  3 paths to exit 68
  [61 62 64 65]
  [61 62 63 65]
  [61]
ebb entry:  67
  ebb type:   block
  ebb blocks: [67]
  ebb cost:   2
  ebb exits:  [68]
  ebb succs:  [68]
  1 paths to exit 68
  [67]
ebb entry:  68
  ebb type:   block
  ebb blocks: [68 69]
  ebb cost:   7
  ebb exits:  [69]
  ebb succs:  []
  1 paths to exit 69
  [68]
