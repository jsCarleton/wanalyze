ebb entry:  0
  ebb type:   block
  ebb blocks: [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58]
  ebb cost:   list_max([87 + (list_max([|f99|; |f108|])); 92 + (list_max([|f99|; |f108|])); 96 + (list_max([|f99|; |f108|])); 127 + (list_max([|f99|; |f103|; |f108|])); 132 + (list_max([|f99|; |f103|; |f108|])); 136 + (list_max([|f99|; |f103|; |f108|])); 133 + (list_max([|f99|; |f103|; |f108|])); 138 + (list_max([|f99|; |f103|; |f108|])); 142 + (list_max([|f99|; |f103|; |f108|])); 140 + (list_max([|f99|; |f103|; |f108|])); 145 + (list_max([|f99|; |f103|; |f108|])); 149 + (list_max([|f99|; |f103|; |f108|])); 129 + (list_max([|f99|; |f103|; |f108|])); 134 + (list_max([|f99|; |f103|; |f108|])); 138 + (list_max([|f99|; |f103|; |f108|])); 122 + (list_max([|f99|; |f103|; |f108|])); 127 + (list_max([|f99|; |f103|; |f108|])); 131 + (list_max([|f99|; |f103|; |f108|])); 136 + (list_max([|f99|; |f103|; |f108|])); 141 + (list_max([|f99|; |f103|; |f108|])); 145 + (list_max([|f99|; |f103|; |f108|])); 145 + (list_max([|f99|; |f103|; |f108|])); 150 + (list_max([|f99|; |f103|; |f108|])); 154 + (list_max([|f99|; |f103|; |f108|])); 154 + (list_max([|f99|; |f103|; |f108|])); 159 + (list_max([|f99|; |f103|; |f108|])); 163 + (list_max([|f99|; |f103|; |f108|])); 139 + (list_max([|f99|; |f103|; |f108|])); 144 + (list_max([|f99|; |f103|; |f108|])); 148 + (list_max([|f99|; |f103|; |f108|])); 116 + (list_max([|f99|; |f103|; |f104|; |f108|])); 121 + (list_max([|f99|; |f103|; |f104|; |f108|])); 125 + (list_max([|f99|; |f103|; |f104|; |f108|])); 122 + (list_max([|f99|; |f103|; |f104|; |f108|])); 127 + (list_max([|f99|; |f103|; |f104|; |f108|])); 131 + (list_max([|f99|; |f103|; |f104|; |f108|])); 128 + (list_max([|f99|; |f103|; |f104|; |f108|])); 133 + (list_max([|f99|; |f103|; |f104|; |f108|])); 137 + (list_max([|f99|; |f103|; |f104|; |f108|])); 132 + (list_max([|f99|; |f103|; |f104|; |f108|])); 137 + (list_max([|f99|; |f103|; |f104|; |f108|])); 141 + (list_max([|f99|; |f103|; |f104|; |f108|])); 85 + (list_max([|f99|; |f108|])); 125 + (list_max([|f99|; |f103|; |f108|])); 131 + (list_max([|f99|; |f103|; |f108|])); 138 + (list_max([|f99|; |f103|; |f108|])); 127 + (list_max([|f99|; |f103|; |f108|])); 120 + (list_max([|f99|; |f103|; |f108|])); 134 + (list_max([|f99|; |f103|; |f108|])); 143 + (list_max([|f99|; |f103|; |f108|])); 152 + (list_max([|f99|; |f103|; |f108|])); 137 + (list_max([|f99|; |f103|; |f108|])); 114 + (list_max([|f99|; |f103|; |f104|; |f108|])); 120 + (list_max([|f99|; |f103|; |f104|; |f108|])); 126 + (list_max([|f99|; |f103|; |f104|; |f108|])); 130 + (list_max([|f99|; |f103|; |f104|; |f108|])); 80 + (list_max([|f99|; |f108|])); 82 + (list_max([|f99|; |f108|])); 122 + (list_max([|f99|; |f103|; |f108|])); 128 + (list_max([|f99|; |f103|; |f108|])); 135 + (list_max([|f99|; |f103|; |f108|])); 124 + (list_max([|f99|; |f103|; |f108|])); 117 + (list_max([|f99|; |f103|; |f108|])); 131 + (list_max([|f99|; |f103|; |f108|])); 140 + (list_max([|f99|; |f103|; |f108|])); 149 + (list_max([|f99|; |f103|; |f108|])); 134 + (list_max([|f99|; |f103|; |f108|])); 111 + (list_max([|f99|; |f103|; |f104|; |f108|])); 117 + (list_max([|f99|; |f103|; |f104|; |f108|])); 123 + (list_max([|f99|; |f103|; |f104|; |f108|])); 127 + (list_max([|f99|; |f103|; |f104|; |f108|])); 77 + (list_max([|f99|; |f108|])); 81 + (list_max([|f99|; |f108|])); 76 + (list_max([|f99|; |f108|])); 91 + (list_max([|f99|; |f108|])); 98 + (list_max([|f99|; |f108|]))])
  ebb exits:  [59 92 94 140 143]
  ebb succs:  [143 140 94 92 59]
  42 paths to exit 59
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 49 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 49 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 49 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 46 47 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 46 47 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 46 47 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 42 49 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 42 49 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 42 49 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 49 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 49 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 49 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 49 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 49 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 49 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 39 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 39 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 39 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 35 47 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 35 47 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 35 47 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 50 51 52 53]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 29 49 50 51 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 29 49 50 51 52 58]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 29 49 50 51 52 53]
  15 paths to exit 92
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 49 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 46 47 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 42 49 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 49 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 49 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 39 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 35 47 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 29 49 50 55 56]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 55 56]
  15 paths to exit 94
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 49 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 44 45 46 47 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 41 42 49 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 49 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 49 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 37 38 39 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 31 32 33 34 35 47 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 22 23 24 25 26 27 28 29 49 50 55]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 55]
  2 paths to exit 140
  [0 1 2 3 4 5 6 7 8 9 10 11 12 17 18]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15]
  2 paths to exit 143
  [0 1 2 3 4 5 6 7 8 9 10 11 12 17 20]
  [0 1 2 3 4 5 6 7 8 9 10 11 12 17 18 19 20]
ebb entry:  59
  ebb type:   block
  ebb blocks: [59]
  ebb cost:   2
  ebb exits:  [60]
  ebb succs:  [60]
  1 paths to exit 60
  [59]
ebb entry:  60
  ebb type:   loop
  ebb blocks: [60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89]
  ebb cost:   (list_max([[51 + |f2600|*I(not(i32.load@(ln6)), ln6 = g0 - 32, ln6 = ln6); 53 + |f2600|*I(not(i32.load@(ln6)), ln6 = g0 - 32, ln6 = ln6); 9*I(i32.eqz(ln4), ln4 = (rn0 + ((234604))), ln4 = 1)]])) + (list_max([2; 2; 15 + |f103|; 15 + |f103|; 20 + |f935|; 39 + |f935|; 20 + |f935|; 39 + |f935|; 12 + |f103|; 12 + |f103|; 4; 4]))
  ebb exits:  [90 92 94 143 352 353 355]
  ebb succs:  [355 353 352 143 94 92 90]
  0 paths to exit 90

  2 paths to exit 92
  [60 63 64 67 68 69 70 71 78]
  [60 63 64 65 68 69 70 71 78]
  2 paths to exit 94
  [60 63 64 67 68 69 70 74 75 76]
  [60 63 64 65 68 69 70 74 75 76]
  4 paths to exit 143
  [60 63 64 67 68 69 70 71 78 79 84 85]
  [60 63 64 67 68 69 70 71 78 79 80 81 82 83 85]
  [60 63 64 65 68 69 70 71 78 79 84 85]
  [60 63 64 65 68 69 70 71 78 79 80 81 82 83 85]
  2 paths to exit 352
  [60 63 64 67 68 69 70 74 75]
  [60 63 64 65 68 69 70 74 75]
  2 paths to exit 353
  [60 63 64 67 68 69 70 74]
  [60 63 64 65 68 69 70 74]
  0 paths to exit 355

  3 loop paths
  [60 63 64 67 68 69 70 71 72 87]  [60 63 64 65 68 69 70 71 72 87]  [60 61]
  12 post loop exit paths
  [78]  [78]  [74 75 76]  [74 75 76]  [78 79 84 85]  [78 79 80 81 82 83 85]  [78 79 84 85]  [78 79 80 81 82 83 85]  [74 75]  [74 75]  [74]  [74]
  ebb entry:  60
    ebb type:   block
    ebb blocks: [60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]
    ebb cost:   list_max([53 + (list_max([|f935|; |f2600|])); 55 + (list_max([|f935|; |f2600|])); 53 + (list_max([|f935|; |f2600|])); 55 + (list_max([|f935|; |f2600|])); 48 + |f2600|; 50 + |f2600|; 38 + |f2600|; 40 + |f2600|; 34 + |f103|; 36 + |f103|; 31 + |f103|; 33 + |f103|; 23; 25])
    ebb exits:  [80 84 87 92 94 352 353]
    ebb succs:  [87 84 80]
    2 paths to exit 80
    [60 63 64 67 68 69 70 71 78 79]
    [60 63 64 65 68 69 70 71 78 79]
    2 paths to exit 84
    [60 63 64 67 68 69 70 71 78 79]
    [60 63 64 65 68 69 70 71 78 79]
    2 paths to exit 87
    [60 63 64 67 68 69 70 71 72]
    [60 63 64 65 68 69 70 71 72]
    2 paths to exit 92
    [60 63 64 67 68 69 70 71 78]
    [60 63 64 65 68 69 70 71 78]
    2 paths to exit 94
    [60 63 64 67 68 69 70 74 75 76]
    [60 63 64 65 68 69 70 74 75 76]
    2 paths to exit 352
    [60 63 64 67 68 69 70 74 75]
    [60 63 64 65 68 69 70 74 75]
    2 paths to exit 353
    [60 63 64 67 68 69 70 74]
    [60 63 64 65 68 69 70 74]
  ebb entry:  80
    ebb type:   block
    ebb blocks: [80]
    ebb cost:   list_max([16 + |f935|; 3])
    ebb exits:  [81]
    ebb succs:  [81]
    2 paths to exit 81
    [80 81]
    [80]
  ebb entry:  81
    ebb type:   loop
    ebb blocks: [81 82]
    ebb cost:   13 + |f935|*I(rn0, rn0 = rn0, rn0 = rn0) + 1
    ebb exits:  [83]
    ebb succs:  [83]
    1 paths to exit 83
    [81 82]
    1 loop paths
    [81]
    1 post loop exit paths
    [82]
  ebb entry:  83
    ebb type:   block
    ebb blocks: [83]
    ebb cost:   4
    ebb exits:  [85]
    ebb succs:  [85]
    1 paths to exit 85
    [83]
  ebb entry:  84
    ebb type:   block
    ebb blocks: [84]
    ebb cost:   2
    ebb exits:  [85]
    ebb succs:  [85]
    1 paths to exit 85
    [84]
  ebb entry:  85
    ebb type:   block
    ebb blocks: [85 86]
    ebb cost:   1
    ebb exits:  [87 143]
    ebb succs:  [87]
    0 paths to exit 87

    1 paths to exit 143
    [85]
  ebb entry:  87
    ebb type:   block
    ebb blocks: [87 88 89]
    ebb cost:   3
    ebb exits:  [60 90 355]
    ebb succs:  [60]
    1 paths to exit 60
    [87]
    0 paths to exit 90

    0 paths to exit 355

ebb entry:  90
  ebb type:   block
  ebb blocks: [90 91]
  ebb cost:   1
  ebb exits:  [92 355]
  ebb succs:  [355 92]
  0 paths to exit 92

  1 paths to exit 355
  [90]
ebb entry:  92
  ebb type:   block
  ebb blocks: [92 93]
  ebb cost:   3
  ebb exits:  [94 142]
  ebb succs:  [142 94]
  0 paths to exit 94

  1 paths to exit 142
  [92]
ebb entry:  94
  ebb type:   block
  ebb blocks: [94 95 96 97 98 99 100 101]
  ebb cost:   list_max([36 + (list_max([|f103|; |f104|])); 26 + (list_max([|f103|; |f104|])); 20 + (list_max([|f103|; |f104|])); 7; 40 + (list_max([|f103|; |f104|])); 30 + (list_max([|f103|; |f104|])); 24 + (list_max([|f103|; |f104|])); 11; 33 + (list_max([|f103|; |f104|])); 37 + (list_max([|f103|; |f104|]))])
  ebb exits:  [102 353]
  ebb succs:  [353 102]
  8 paths to exit 102
  [94 96 97 98 99 100 101]
  [94 96 97 98 99]
  [94 96 97 98]
  [94 96 97]
  [94 95 96 97 98 99 100 101]
  [94 95 96 97 98 99]
  [94 95 96 97 98]
  [94 95 96 97]
  2 paths to exit 353
  [94 96 97 98 99 100]
  [94 95 96 97 98 99 100]
ebb entry:  102
  ebb type:   block
  ebb blocks: [102]
  ebb cost:   10
  ebb exits:  [103]
  ebb succs:  [103]
  1 paths to exit 103
  [102]
ebb entry:  103
  ebb type:   loop
  ebb blocks: [103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137]
  ebb cost:   (list_max([[66 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 73 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 71 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 80 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 67 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 78 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 68 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 65 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 34 + (list_max([|f103|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 67 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 74 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 72 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 81 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 68 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 79 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 69 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 66 + (list_max([|f103|; |f104|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0); 35 + (list_max([|f103|; |f108|; |f174|]))*I((i32.load8_u@(rn0)) != 35, rn0 = rn0, rn0 = rn0)]])) + (list_max([1; 1; 1; 1; 1; 1; 1; 1; 1]))
  ebb exits:  [138 350 353 355]
  ebb succs:  [355 353 350 138]
  0 paths to exit 138

  4 paths to exit 350
  [103 104 105 109 110 111 112 113 114 115 123 129 130]
  [103 104 105 109 110 111 112 113 114 115 116 119 120 121 129 130]
  [103 104 105 106 111 112 113 114 115 123 129 130]
  [103 104 105 106 111 112 113 114 115 116 119 120 121 129 130]
  7 paths to exit 353
  [103 104 105 109 110 111 112 113 114 115 123 124 125 132 133]
  [103 104 105 109 110 111 112 113 114 115 116 119 132 133]
  [103 104 105 109]
  [103 104 105 106 111 112 113 114 115 123 124 125 132 133]
  [103 104 105 106 111 112 113 114 115 116 119 132 133]
  [103 104 105 106 107]
  [103]
  0 paths to exit 355

  18 loop paths
  [103 104 105 109 110 111 112 113 114 115 123 129 135]  [103 104 105 109 110 111 112 113 114 115 123 124 127 135]  [103 104 105 109 110 111 112 113 114 115 123 124 125 132]  [103 104 105 109 110 111 112 113 114 115 123 124 125 126 127 135]  [103 104 105 109 110 111 112 113 114 115 116 119 132]  [103 104 105 109 110 111 112 113 114 115 116 119 120 121 129 135]  [103 104 105 109 110 111 112 113 114 115 116 119 120]  [103 104 105 109 110 111 112 113 114 115 116 117 135]  [103 104 105 109 110 111]  [103 104 105 106 111 112 113 114 115 123 129 135]  [103 104 105 106 111 112 113 114 115 123 124 127 135]  [103 104 105 106 111 112 113 114 115 123 124 125 132]  [103 104 105 106 111 112 113 114 115 123 124 125 126 127 135]  [103 104 105 106 111 112 113 114 115 116 119 132]  [103 104 105 106 111 112 113 114 115 116 119 120 121 129 135]  [103 104 105 106 111 112 113 114 115 116 119 120]  [103 104 105 106 111 112 113 114 115 116 117 135]  [103 104 105 106 111]
  9 post loop exit paths
  [130]  [130]  [130]  [130]  [133]  [133]  [133]  [133]  [107]
ebb entry:  138
  ebb type:   block
  ebb blocks: [138 139]
  ebb cost:   1
  ebb exits:  [140 355]
  ebb succs:  [355 140]
  0 paths to exit 140

  1 paths to exit 355
  [138]
ebb entry:  140
  ebb type:   block
  ebb blocks: [140 141]
  ebb cost:   list_max([19 + |f2600|; 16 + |f2600|])
  ebb exits:  [142 353]
  ebb succs:  [353 142]
  1 paths to exit 142
  [140 141]
  1 paths to exit 353
  [140]
ebb entry:  142
  ebb type:   block
  ebb blocks: [142]
  ebb cost:   2
  ebb exits:  [143]
  ebb succs:  [143]
  1 paths to exit 143
  [142]
ebb entry:  143
  ebb type:   block
  ebb blocks: [143 144 145 146 147 148]
  ebb cost:   list_max([24 + |f1807|; 31; 36 + |f1807|; 24 + |f1807|; 31; 36 + |f1807|])
  ebb exits:  [149 352]
  ebb succs:  [352 149]
  3 paths to exit 149
  [143 144 147 148]
  [143 144 145 148]
  [143 144 145 146 147 148]
  3 paths to exit 352
  [143 144 147 148]
  [143 144 145 148]
  [143 144 145 146 147 148]
ebb entry:  149
  ebb type:   block
  ebb blocks: [149]
  ebb cost:   44
  ebb exits:  [150]
  ebb succs:  [150]
  1 paths to exit 150
  [149]
ebb entry:  150
  ebb type:   loop
  ebb blocks: [150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347]
  ebb cost:   INF
  ebb exits:  [348 350 352 353]
  ebb succs:  [353 352 350 348]
  unknown number of paths to exit 348
  unknown number of paths to exit 350
  unknown number of paths to exit 352
  unknown number of paths to exit 353
ebb entry:  348
  ebb type:   block
  ebb blocks: [348 349]
  ebb cost:   list_max([19; 10])
  ebb exits:  [350 353]
  ebb succs:  [353 350]
  1 paths to exit 350
  [348 349]
  1 paths to exit 353
  [348]
ebb entry:  350
  ebb type:   block
  ebb blocks: [350 351]
  ebb cost:   3
  ebb exits:  [352 353]
  ebb succs:  [353 352]
  0 paths to exit 352

  1 paths to exit 353
  [350]
ebb entry:  352
  ebb type:   block
  ebb blocks: [352]
  ebb cost:   3
  ebb exits:  [353]
  ebb succs:  [353]
  1 paths to exit 353
  [352]
ebb entry:  353
  ebb type:   block
  ebb blocks: [353 354]
  ebb cost:   6
  ebb exits:  [354]
  ebb succs:  []
  1 paths to exit 354
  [353]
ebb entry:  355
  ebb type:   block
  ebb blocks: [355]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
