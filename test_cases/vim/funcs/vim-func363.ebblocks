ebb entry:  0
  ebb type:   block
  ebb blocks: [0]
  ebb cost:   list_max([11 + |f2687|; 11 + |f2687|])
  ebb exits:  [1 35]
  ebb succs:  [35 1]
  1 paths to exit 1
  [0]
  1 paths to exit 35
  [0]
ebb entry:  1
  ebb type:   block
  ebb blocks: [1]
  ebb cost:   18
  ebb exits:  [2]
  ebb succs:  [2]
  1 paths to exit 2
  [1]
ebb entry:  2
  ebb type:   loop
  ebb blocks: [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32]
  ebb cost:   (list_max([[37 + |f1849|*I(pn1 != (i32.load8_u@((i32.load@(215940)) + rn0)), rn0 = rn0;pn1 = pn1, rn0 = rn0;pn1 = pn1); 36*I(pn1 != (i32.load8_u@((i32.load@(215940)) + pn2)), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + pn2;pn1 = pn1); 49*I(pn1 != (i32.load8_u@((i32.load@(215940)) + pn2)), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + pn2;pn1 = pn1); 74*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 77*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 73*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 86 + |f100|*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 89 + |f100|*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 85 + |f100|*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (pn2 + 1))), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + (pn2 + 1);pn1 = pn1); 105 + (list_max([|f96|; |f100|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (rn0 + (pn2 - pn0)))), pn0 = pn0;pn2 = rn0 + rn0;rn0 = rn0;pn1 = pn1, pn0 = pn0;pn2 = rn0 + (rn0 + (pn2 - pn0));rn0 = rn0;pn1 = pn1); 108 + (list_max([|f96|; |f100|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (rn0 + (pn2 - pn0)))), pn0 = pn0;pn2 = rn0 + rn0;rn0 = rn0;pn1 = pn1, pn0 = pn0;pn2 = rn0 + (rn0 + (pn2 - pn0));rn0 = rn0;pn1 = pn1); 104 + (list_max([|f96|; |f100|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + (rn0 + (pn2 - pn0)))), pn0 = pn0;pn2 = rn0 + rn0;rn0 = rn0;pn1 = pn1, pn0 = pn0;pn2 = rn0 + (rn0 + (pn2 - pn0));rn0 = rn0;pn1 = pn1); 92 + (list_max([|f96|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + pn2)), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + pn2;pn1 = pn1); 95 + (list_max([|f96|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + pn2)), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + pn2;pn1 = pn1); 91 + (list_max([|f96|; |f106|]))*I(pn1 != (i32.load8_u@((i32.load@(215940)) + pn2)), pn2 = rn0 + rn0;pn1 = pn1, pn2 = rn0 + pn2;pn1 = pn1); 54 + |f1849|*I(pn1 != (i32.load8_u@((i32.load@(215940)) + rn0)), rn0 = rn0;pn1 = pn1, rn0 = rn0;pn1 = pn1)]])) + (list_max([1; 2; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 1; 2; 2]))
  ebb exits:  [33]
  ebb succs:  [33]
  34 paths to exit 33
  [2 3 4 5 9 29 32]
  [2 3 4 5 9 29 30 31 32]
  [2 3 4 5 9 10 32]
  [2 3 4 5 6 29 32]
  [2 3 4 5 6 29 30 31 32]
  [2 3 4 5 6 7 12 29 32]
  [2 3 4 5 6 7 12 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 22 23 26 28 29 32]
  [2 3 4 5 6 7 12 13 14 22 23 26 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 22 23 26 27 28 29 32]
  [2 3 4 5 6 7 12 13 14 22 23 26 27 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 22 23 24 28 29 32]
  [2 3 4 5 6 7 12 13 14 22 23 24 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 27 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 27 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 24 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 24 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 27 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 27 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 24 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 24 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 27 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 27 28 29 30 31 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 24 28 29 32]
  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 24 28 29 30 31 32]
  [2 3 4 5 6 7 8 9 29 32]
  [2 3 4 5 6 7 8 9 29 30 31 32]
  [2 3 4 5 6 7 8 9 10 32]
  16 loop paths
  [2 3 4 5 9 29 30]  [2 3 4 5 6 29 30]  [2 3 4 5 6 7 12 29 30]  [2 3 4 5 6 7 12 13 14 22 23 26 28 29 30]  [2 3 4 5 6 7 12 13 14 22 23 26 27 28 29 30]  [2 3 4 5 6 7 12 13 14 22 23 24 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 26 27 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 22 23 24 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 26 27 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 19 20 21 22 23 24 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 26 27 28 29 30]  [2 3 4 5 6 7 12 13 14 15 16 17 21 22 23 24 28 29 30]  [2 3 4 5 6 7 8 9 29 30]
  34 post loop exit paths
  [32]  [31 32]  [10 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [32]  [31 32]  [10 32]
ebb entry:  33
  ebb type:   block
  ebb blocks: [33 34]
  ebb cost:   2
  ebb exits:  [35 37]
  ebb succs:  [37 35]
  0 paths to exit 35

  1 paths to exit 37
  [33]
ebb entry:  35
  ebb type:   block
  ebb blocks: [35 36]
  ebb cost:   2
  ebb exits:  [36]
  ebb succs:  []
  1 paths to exit 36
  [35]
ebb entry:  37
  ebb type:   block
  ebb blocks: [37]
  ebb cost:   
  ebb exits:  []
  ebb succs:  []
