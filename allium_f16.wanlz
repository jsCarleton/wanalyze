(func (;16;) (type 11) (param i32 i32) (result i64)
    (local i32)
    local.get 0 
    local.get 1
    i32.add
    local.set 2
    local.get 2
    i32.const 0
    i32.eq
    local.get 2
    i32.const 8
    i32.add
    global.get 1
    i32.load
    i32.gt_u
    i32.or
    if  ;; label = @1
      call 0
    end
    local.get 2
    i32.const 7
    i32.and
    if  ;; label = @1
      call 1
    end
    local.get 2
    i64.load)


    Stack: [] Locals: [N1, N2, ??]
    local.get 0 
    Stack: [N1] Locals: [N1, N2, ??]
    local.get 1
    Stack: [N2, N1] Locals: [N1, N2, ??]
    i32.add
    Stack: [N2+N1] Locals: [N1, N2, ??]
    local.set 2
    Stack: [] Locals: [N1, N2, N2+N1]
    local.get 2
    Stack: [N2+N1] Locals: [N1, N2, N2+N1]
    i32.const 0
    Stack: [0, N2+N1] Locals: [N1, N2, N2+N1]
    i32.eq
    Stack: [0 == N2+N1] Locals: [N1, N2, N2+N1]
    local.get 2
    Stack: [N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.const 8
    Stack: [8, N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.add
    Stack: [8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    global.get 1
    Stack: [DYNAMICTOP_PTR, 8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.load
    Stack: [[DYNAMICTOP_PTR], 8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    global.get 1
    Stack: [DYNAMICTOP_PTR, [DYNAMICTOP_PTR], 8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.gt_u
    Stack: [DYNAMICTOP_PTR > [DYNAMICTOP_PTR], 8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.or
    Stack: [DYNAMICTOP_PTR > [DYNAMICTOP_PTR] || 8+N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    if  ;; label = @1
      Stack: [0 == N2+N1] Locals: [N1, N2, N2+N1]
      call 0
      {call 0} {Stack: [0 == N2+N1] Locals: [N1, N2, N2+N1]} 
    end
    1: {call 0} {Stack: [0 == N2+N1] Locals: [N1, N2, N2+N1]} 
    2: Stack: [0 == N2+N1] Locals: [N1, N2, N2+N1]
    local.get 2
    1: {call 0} {Stack: [N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]}
    2: Stack: [N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.const 7
    1: {call 0} {Stack: [7, N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]}
    2: Stack: [7, N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    i32.and
    1: {call 0} {Stack: [7 & N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]}
    2: Stack: [7 & N2+N1, 0 == N2+N1] Locals: [N1, N2, N2+N1]
    if  ;; label = @1
      call 1
    end
    local.get 2
    i64.load)
