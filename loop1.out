Success yes
Module: c_examples/loop1.wasm
(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32)))
  (type (;2;) (func (param i32) (result i32)))
  (type (;3;) (func))
  (type (;4;) (func (param i32 i32) (result i32)))
  (type (;5;) (func (param i32 i32 i32) (result i32)))
  (type (;6;) (func (param i32 i64 i32) (result i64)))
  (func (;0;) (type 3)
    call 5)
  (func (;1;) (type 4) (param i32 i32) (result i32)
    (local i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32 i32)
    global.get 0
    local.set 2
    i32.const 32
    local.set 3
    local.get 2
    local.get 3
    i32.sub
    local.set 4
    i32.const 0
    local.set 5
    local.get 4
    local.get 5
    i32.store
    local.get 4
    local.get 0
    i32.store
    local.get 4
    local.get 1
    i32.store
    i32.const 0
    local.set 6
    local.get 4
    local.get 6
    i32.store
    i32.const 0
    local.set 7
    local.get 4
    local.get 7
    i32.store
    block  ;; label = @1
      loop  ;; label = @2
        local.get 4
        i32.load
        local.set 8
        i32.const 100
        local.set 9
        local.get 8
        local.set 10
        local.get 9
        local.set 11
        local.get 10
        local.get 11
        i32.lt_s
        local.set 12
        i32.const 1
        local.set 13
        local.get 12
        local.get 13
        i32.and
        local.set 14
        local.get 14
        i32.eqz
        br_if 1 (;@1;)
        local.get 4
        i32.load
        local.set 15
        local.get 4
        i32.load
        local.set 16
        local.get 16
        local.get 15
        i32.add
        local.set 17
        local.get 4
        local.get 17
        i32.store
        local.get 4
        i32.load
        local.set 18
        i32.const 1
        local.set 19
        local.get 18
        local.get 19
        i32.add
        local.set 20
        local.get 4
        local.get 20
        i32.store
        br 0 (;@2;)
      end
      unreachable
    end
    local.get 4
    i32.load
    local.set 21
    local.get 21
    return)
  (func (;2;) (type 0) (result i32)
    global.get 0)
  (func (;3;) (type 1) (param i32)
    local.get 0
    global.set 0)
  (func (;4;) (type 2) (param i32) (result i32)
    (local i32 i32)
    global.get 0
    local.get 0
    i32.sub
    i32.const -16
    i32.and
    local.tee 1
    global.set 0
    local.get 1)
  (func (;5;) (type 3)
    i32.const 5243936
    global.set 2
    i32.const 1044
    i32.const 15
    i32.add
    i32.const -16
    i32.and
    global.set 1)
  (func (;6;) (type 0) (result i32)
    global.get 0
    global.get 1
    i32.sub)
  (func (;7;) (type 0) (result i32)
    global.get 1)
  (func (;8;) (type 2) (param i32) (result i32)
    i32.const 1)
  (func (;9;) (type 1) (param i32))
  (func (;10;) (type 1) (param i32))
  (func (;11;) (type 1) (param i32))
  (func (;12;) (type 0) (result i32)
    i32.const 1024
    call 10
    i32.const 1032)
  (func (;13;) (type 3)
    i32.const 1024
    call 11)
  (func (;14;) (type 2) (param i32) (result i32)
    (local i32 i32)
    block  ;; label = @1
      block  ;; label = @2
        local.get 0
        i32.eqz
        br_if 0 (;@2;)
        block  ;; label = @3
          local.get 0
          i32.load
          i32.const -1
          i32.gt_s
          br_if 0 (;@3;)
          local.get 0
          call 15
          return
        end
        local.get 0
        call 8
        local.set 1
        local.get 0
        call 15
        local.set 2
        local.get 1
        i32.eqz
        br_if 1 (;@1;)
        local.get 0
        call 9
        local.get 2
        return
      end
      i32.const 0
      local.set 2
      block  ;; label = @2
        i32.const 0
        i32.load
        i32.eqz
        br_if 0 (;@2;)
        i32.const 0
        i32.load
        call 14
        local.set 2
      end
      block  ;; label = @2
        call 12
        i32.load
        local.tee 0
        i32.eqz
        br_if 0 (;@2;)
        loop  ;; label = @3
          i32.const 0
          local.set 1
          block  ;; label = @4
            local.get 0
            i32.load
            i32.const 0
            i32.lt_s
            br_if 0 (;@4;)
            local.get 0
            call 8
            local.set 1
          end
          block  ;; label = @4
            local.get 0
            i32.load
            local.get 0
            i32.load
            i32.le_u
            br_if 0 (;@4;)
            local.get 0
            call 15
            local.get 2
            i32.or
            local.set 2
          end
          block  ;; label = @4
            local.get 1
            i32.eqz
            br_if 0 (;@4;)
            local.get 0
            call 9
          end
          local.get 0
          i32.load
          local.tee 0
          br_if 0 (;@3;)
        end
      end
      call 13
    end
    local.get 2)
  (func (;15;) (type 2) (param i32) (result i32)
    (local i32 i32)
    block  ;; label = @1
      local.get 0
      i32.load
      local.get 0
      i32.load
      i32.le_u
      br_if 0 (;@1;)
      local.get 0
      i32.const 0
      i32.const 0
      local.get 0
      i32.load
      call_indirect (type 0)
      drop
      local.get 0
      i32.load
      br_if 0 (;@1;)
      i32.const -1
      return
    end
    block  ;; label = @1
      local.get 0
      i32.load
      local.tee 1
      local.get 0
      i32.load
      local.tee 2
      i32.ge_u
      br_if 0 (;@1;)
      local.get 0
      local.get 1
      local.get 2
      i32.sub
      i64.extend_i32_s
      i32.const 1
      local.get 0
      i32.load
      call_indirect (type 0)
      drop
    end
    local.get 0
    i32.const 0
    i32.store
    local.get 0
    i64.const 0
    i64.store
    local.get 0
    i64.const 0
    i64.store align=4
    i32.const 0)
  (func (;16;) (type 0) (result i32)
    i32.const 1040)
(table (;0;) 1 1 funcref)
(memory (;0;) 256 256)
  (global (;0;) (mut i32) (i32.const 5243936))
  (global (;1;) (mut i32) (i32.const 0))
  (global (;2;) (mut i32) (i32.const 0))
  (export "memory" (table 0))
  (export "__wasm_call_ctors" (func 0))
  (export "main" (func 1))
  (export "fflush" (func 14))
  (export "__errno_location" (func 16))
  (export "stackSave" (func 2))
  (export "stackRestore" (func 3))
  (export "stackAlloc" (func 4))
  (export "emscripten_stack_init" (func 5))
  (export "emscripten_stack_get_free" (func 6))
  (export "emscripten_stack_get_end" (func 7))
  (export "__indirect_function_table" (table 0))
)

Starting state for function 0:, 0 parameters 0 locals
  steps: 0; stack: []; locals: []
call 5
  steps: 1; stack: []; locals: []

Final states:
  steps: 2; stack: []; locals: []

Starting state for function 1:, 2 parameters 20 locals
  steps: 0; stack: []; locals: [N0, N1, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
global.get 0
  steps: 1; stack: [abc]; locals: [N0, N1, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 2
  steps: 2; stack: []; locals: [N0, N1, abc, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 32
  steps: 3; stack: [32]; locals: [N0, N1, abc, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 3
  steps: 4; stack: []; locals: [N0, N1, abc, 32, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 2
  steps: 5; stack: [abc]; locals: [N0, N1, abc, 32, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 3
  steps: 6; stack: [32, abc]; locals: [N0, N1, abc, 32, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.sub
  steps: 7; stack: [(32 - abc)]; locals: [N0, N1, abc, 32, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 4
  steps: 8; stack: []; locals: [N0, N1, abc, 32, (32 - abc), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 0
  steps: 9; stack: [0]; locals: [N0, N1, abc, 32, (32 - abc), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 5
  steps: 10; stack: []; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 11; stack: [(32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 5
  steps: 12; stack: [0, (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.store
  steps: 13; stack: [(32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 14; stack: [(32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 0
  steps: 15; stack: [N0, (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.store
  steps: 16; stack: [(32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 17; stack: [(32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 1
  steps: 18; stack: [N1, (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.store
  steps: 19; stack: [(32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 0
  steps: 20; stack: [0, (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 6
  steps: 21; stack: [(32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 22; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 6
  steps: 23; stack: [0, (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.store
  steps: 24; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 0
  steps: 25; stack: [0, (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 7
  steps: 26; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 27; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 7
  steps: 28; stack: [0, (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.store
  steps: 29; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
block  ;; label = @1
  steps: 30; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
loop  ;; label = @2
  steps: 31; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 32; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.load
  steps: 33; stack: [i32.load@((32 - abc)), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 8
  steps: 34; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 100
  steps: 35; stack: [100, (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 9
  steps: 36; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 8
  steps: 37; stack: [i32.load@((32 - abc)), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 10
  steps: 38; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 9
  steps: 39; stack: [100, (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 11
  steps: 40; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 10
  steps: 41; stack: [i32.load@((32 - abc)), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 11
  steps: 42; stack: [100, i32.load@((32 - abc)), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.lt_s
  steps: 43; stack: [(100 < i32.load@((32 - abc))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, ??, ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 12
  steps: 44; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), ??, ??, ??, ??, ??, ??, ??, ??, ??]
i32.const 1
  steps: 45; stack: [1, (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), ??, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 13
  steps: 46; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 12
  steps: 47; stack: [(100 < i32.load@((32 - abc))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, ??, ??, ??, ??, ??, ??, ??, ??]
local.get 13
  steps: 48; stack: [1, (100 < i32.load@((32 - abc))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, ??, ??, ??, ??, ??, ??, ??, ??]
i32.and
  steps: 49; stack: [(1 && (100 < i32.load@((32 - abc)))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, ??, ??, ??, ??, ??, ??, ??, ??]
local.set 14
  steps: 50; stack: [(32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
local.get 14
  steps: 51; stack: [(1 && (100 < i32.load@((32 - abc)))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
i32.eqz
  steps: 52; stack: [i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
br_if 1 (;@1;)
  steps: 53; stack: [i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 54; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
i32.load
  steps: 55; stack: [i32.load@((32 - abc)), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), ??, ??, ??, ??, ??, ??, ??]
local.set 15
  steps: 56; stack: [i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??]
local.get 4
  steps: 57; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??]
i32.load
  steps: 58; stack: [i32.load@((32 - abc)), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), ??, ??, ??, ??, ??, ??]
local.set 16
  steps: 59; stack: [i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), ??, ??, ??, ??, ??]
local.get 16
  steps: 60; stack: [i32.load@((32 - abc)), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), ??, ??, ??, ??, ??]
local.get 15
  steps: 61; stack: [i32.load@((32 - abc)), i32.load@((32 - abc)), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), ??, ??, ??, ??, ??]
i32.add
  steps: 62; stack: [(i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), ??, ??, ??, ??, ??]
local.set 17
  steps: 63; stack: [i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
local.get 4
  steps: 64; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
local.get 17
  steps: 65; stack: [(i32.load@((32 - abc)) + i32.load@((32 - abc))), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
i32.store
  steps: 66; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
local.get 4
  steps: 67; stack: [(32 - abc), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
i32.load
  steps: 68; stack: [i32.load@((32 - abc)), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), ??, ??, ??, ??]
local.set 18
  steps: 69; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), ??, ??, ??]
i32.const 1
  steps: 70; stack: [1, (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), ??, ??, ??]
local.set 19
  steps: 71; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, ??, ??]
local.get 18
  steps: 72; stack: [i32.load@((32 - abc)), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, ??, ??]
local.get 19
  steps: 73; stack: [1, i32.load@((32 - abc)), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, ??, ??]
i32.add
  steps: 74; stack: [(1 + i32.load@((32 - abc))), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, ??, ??]
local.set 20
  steps: 75; stack: [(32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, (1 + i32.load@((32 - abc))), ??]
local.get 4
  steps: 76; stack: [(32 - abc), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, (1 + i32.load@((32 - abc))), ??]
local.get 20
  steps: 77; stack: [(1 + i32.load@((32 - abc))), (32 - abc), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, (1 + i32.load@((32 - abc))), ??]
i32.store
  steps: 78; stack: [(32 - abc), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, (1 + i32.load@((32 - abc))), ??]
br 0 (;@2;)
  steps: 79; stack: [(32 - abc), (32 - abc), i32.eqz((1 && (100 < i32.load@((32 - abc))))), (32 - abc), (32 - abc), (32 - abc), (32 - abc), (32 - abc)]; locals: [N0, N1, abc, 32, (32 - abc), 0, 0, 0, i32.load@((32 - abc)), 100, i32.load@((32 - abc)), 100, (100 < i32.load@((32 - abc))), 1, (1 && (100 < i32.load@((32 - abc)))), i32.load@((32 - abc)), i32.load@((32 - abc)), (i32.load@((32 - abc)) + i32.load@((32 - abc))), i32.load@((32 - abc)), 1, (1 + i32.load@((32 - abc))), ??]
end
